; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\m0\main_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\m0\main_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\libpixy_m0\inc -I.\inc -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=534 -DCORE_M0 -DIPC_SLAVE -DPIXY -DKEIL --omf_browse=.\m0\main_m0.crf src\main_m0.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;26     
;;;27     int main(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	//CTIMER_DECLARE();
;;;30     #if 0
;;;31     	uint32_t memory = SRAM1_LOC;
;;;32     	uint32_t lut = SRAM1_LOC;
;;;33     
;;;34     	//while(1);
;;;35     	memset((void *)QQ_LOC, 0x01, 0x3000);
;;;36     	g_qqueue->writeIndex = 0;
;;;37     	g_qqueue->produced = 0;
;;;38     	g_qqueue->consumed = 0;
;;;39     
;;;40      	while(1)
;;;41      		getRLSFrame(&memory, &lut); 
;;;42     #endif
;;;43     #if 0
;;;44     	int i = 0x12345678;
;;;45     	foo(&i);
;;;46     	printf("%d\n", i);
;;;47     	while(1);
;;;48     #endif
;;;49     #if 0
;;;50     	int i;
;;;51     	uint32_t lut = SRAM1_LOC;
;;;52      	uint32_t memory = SRAM1_LOC+0x1000;
;;;53     	uint8_t *plut = (uint8_t *)lut;
;;;54     	for (i=0; i<0x4000; i++)
;;;55     		plut[i] = i%5==0 ? 1 : 0;
;;;56     	
;;;57      	while(1)
;;;58      		getRLSFrame(&memory, &lut); 
;;;59     
;;;60     #endif
;;;61     #if 1
;;;62     	_DBG("M0 start\n");
000002  a108              ADR      r1,|L1.36|
000004  480a              LDR      r0,|L1.48|
000006  f7fffffe          BL       UARTPuts
;;;63     
;;;64     	chirpOpen();
00000a  f7fffffe          BL       chirpOpen
;;;65     	exec_init();
00000e  f7fffffe          BL       exec_init
;;;66     	frame_init();
000012  f7fffffe          BL       frame_init
;;;67     	rls_init();
000016  f7fffffe          BL       rls_init
;;;68     	exec_loop();
00001a  f7fffffe          BL       exec_loop
;;;69     #endif
;;;70     #if 0
;;;71     	while(1)
;;;72     	{
;;;73     		if (g_foo)
;;;74     			loop0();
;;;75     	}
;;;76     #endif
;;;77     
;;;78     #if 0
;;;79     	vsync();
;;;80     #endif
;;;81     #if 0
;;;82     	//while(g_loop);
;;;83     	int i;
;;;84     	uint8_t type = CAM_GRAB_M1R2;
;;;85     	uint32_t memory = SRAM1_LOC;
;;;86     	uint16_t offset = 0;
;;;87     	uint16_t width = 300;
;;;88     	uint16_t height = 200;
;;;89     	_DBG("M0 start\n");
;;;90     	while(1)
;;;91     	{
;;;92     		 getFrame(&type, &memory, &offset, &offset, &width, &height);
;;;93     		 i++;
;;;94     
;;;95     		 if (i%50==0)
;;;96     		 {
;;;97     			 _DBD32(i), _CR();
;;;98     		 }
;;;99     	}
;;;100    #endif
;;;101    #if 0
;;;102    	while(1)
;;;103    	{
;;;104    		CTIMER_START();
;;;105    		syncM1((uint32_t *)&LPC_GPIO_PORT->PIN[1], 0x2000);
;;;106    		CTIMER_STOP();
;;;107    		
;;;108    		printf("%d\n", CTIMER_GET());
;;;109    	}	
;;;110    #endif
;;;111    #if 0
;;;112    {
;;;113    	uint32_t i;
;;;114    	uint8_t *lut = (uint8_t *)SRAM1_LOC + 0x10000;
;;;115    	uint32_t memory = SRAM1_LOC;
;;;116    	uint32_t size = SRAM1_SIZE/2;
;;;117    	for (i=0; i<0x10000; i++)
;;;118    		lut[i] = 0;
;;;119    	lut[0xb400] = 0;
;;;120    	lut[0xb401] = 1;
;;;121    	lut[0xb402] = 1;
;;;122    	lut[0xb403] = 1;
;;;123    	lut[0xb404] = 0;
;;;124    	lut[0xb405] = 1;
;;;125    	lut[0xb406] = 1;
;;;126    	lut[0xb407] = 0;
;;;127    	lut[0xb408] = 0;
;;;128    	lut[0xb409] = 0;
;;;129    
;;;130    	while(1)
;;;131     		getRLSFrame(&memory, &size); //, (uint32_t *)&lut);
;;;132    }
;;;133    #endif
;;;134    
;;;135    return 0;
00001e  2000              MOVS     r0,#0
;;;136    }
000020  bd10              POP      {r4,pc}
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
000024  4d302073          DCB      "M0 start\n",0
000028  74617274
00002c  0a00    
00002e  00                DCB      0
00002f  00                DCB      0
                  |L1.48|
                          DCD      0x400c2000

;*** Start embedded assembler ***

#line 1 "src\\main_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_main_m0_c_main____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___9_main_m0_c_main____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_main_m0_c_main____REVSH|
#line 144
|__asm___9_main_m0_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
