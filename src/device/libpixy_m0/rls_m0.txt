; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\rls_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\rls_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=534 -DCORE_M0 -DIPC_SLAVE -DPIXY -DKEIL --omf_browse=.\rls_m0.crf src\rls_m0.c]
                          THUMB

                          AREA ||i.getRLSFrame||, CODE, READONLY, ALIGN=2

                  getRLSFrame PROC
;;;385    
;;;386    int32_t getRLSFrame(uint32_t *m0Mem, uint32_t *lut)
000000  b5f0              PUSH     {r4-r7,lr}
;;;387    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;388    	uint8_t *lut2 = (uint8_t *)*lut;
000008  6830              LDR      r0,[r6,#0]
00000a  900a              STR      r0,[sp,#0x28]
;;;389    	uint32_t line;
;;;390    	Qval *qvalStore;
;;;391    	uint32_t numQvals;
;;;392    	uint8_t *lineStore;
;;;393    	Qval lineBegin, frameEnd;
;;;394    	lineBegin.m_col = lineBegin.m_u = lineBegin.m_v = lineBegin.m_y = 0;
00000c  2100              MOVS     r1,#0
00000e  4668              MOV      r0,sp
000010  83c1              STRH     r1,[r0,#0x1e]
000012  8341              STRH     r1,[r0,#0x1a]
000014  8381              STRH     r1,[r0,#0x1c]
000016  8301              STRH     r1,[r0,#0x18]
;;;395    	frameEnd.m_col = 0xffff;
000018  1e49              SUBS     r1,r1,#1
00001a  8201              STRH     r1,[r0,#0x10]
;;;396    	frameEnd.m_u = frameEnd.m_v = frameEnd.m_y = 0;
00001c  2100              MOVS     r1,#0
00001e  82c1              STRH     r1,[r0,#0x16]
000020  8241              STRH     r1,[r0,#0x12]
000022  8281              STRH     r1,[r0,#0x14]
;;;397    
;;;398    //	if (!g_foo)
;;;399    //		return 0;
;;;400       	qvalStore =	(Qval *)*m0Mem;
000024  6828              LDR      r0,[r5,#0]
000026  9009              STR      r0,[sp,#0x24]
;;;401    	lineStore = (uint8_t *)*m0Mem + MAX_NEW_QVALS_PER_LINE*sizeof(Qval);
000028  216b              MOVS     r1,#0x6b
00002a  00c9              LSLS     r1,r1,#3
00002c  6828              LDR      r0,[r5,#0]
00002e  1840              ADDS     r0,r0,r1
000030  9008              STR      r0,[sp,#0x20]
;;;402    	skipLines(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       skipLines
;;;403    	for (line=0; line<CAM_RES2_HEIGHT; line++) 
000038  2700              MOVS     r7,#0
00003a  e045              B        |L1.200|
                  |L1.60|
;;;404    	{
;;;405    		// not enough space--- return error
;;;406    		if (qq_free()<MAX_NEW_QVALS_PER_LINE)
00003c  f7fffffe          BL       qq_free
000040  286b              CMP      r0,#0x6b
000042  da0a              BGE      |L1.90|
;;;407    		{
;;;408    			frameEnd.m_col = 0xfffe;
000044  2001              MOVS     r0,#1
000046  43c0              MVNS     r0,r0
000048  4669              MOV      r1,sp
00004a  8208              STRH     r0,[r1,#0x10]
;;;409    			qq_enqueue(&frameEnd);
00004c  a804              ADD      r0,sp,#0x10
00004e  f7fffffe          BL       qq_enqueue
;;;410    			//printf("*\n");
;;;411    			return -1;
000052  2000              MOVS     r0,#0
000054  43c0              MVNS     r0,r0
                  |L1.86|
;;;412    		} 
;;;413    		qq_enqueue(&lineBegin); 
;;;414    		lineProcessedRL0A((uint32_t *)&CAM_PORT, lineStore, CAM_RES2_WIDTH/2); 
;;;415    		numQvals = lineProcessedRL1A((uint32_t *)&CAM_PORT, qvalStore, lut2, lineStore, CAM_RES2_WIDTH/2, g_qqueue->data, g_qqueue->writeIndex, QQ_MEM_SIZE);
;;;416    		g_qqueue->writeIndex += numQvals;
;;;417    		if (g_qqueue->writeIndex>=QQ_MEM_SIZE)
;;;418    			g_qqueue->writeIndex -= QQ_MEM_SIZE;
;;;419    		g_qqueue->produced += numQvals;
;;;420    	}
;;;421    	qq_enqueue(&frameEnd);
;;;422    
;;;423    	return 0;
;;;424    }
000056  b00b              ADD      sp,sp,#0x2c
000058  bdf0              POP      {r4-r7,pc}
                  |L1.90|
00005a  a806              ADD      r0,sp,#0x18           ;413
00005c  f7fffffe          BL       qq_enqueue
000060  229e              MOVS     r2,#0x9e              ;414
000062  481d              LDR      r0,|L1.216|
000064  9908              LDR      r1,[sp,#0x20]         ;414
000066  f7fffffe          BL       lineProcessedRL0A
00006a  4a1c              LDR      r2,|L1.220|
00006c  481c              LDR      r0,|L1.224|
00006e  6800              LDR      r0,[r0,#0]            ;415  ; g_qqueue
000070  8840              LDRH     r0,[r0,#2]            ;415
000072  491b              LDR      r1,|L1.224|
000074  6809              LDR      r1,[r1,#0]            ;415  ; g_qqueue
000076  3108              ADDS     r1,r1,#8              ;415
000078  239e              MOVS     r3,#0x9e              ;415
00007a  9300              STR      r3,[sp,#0]            ;415
00007c  9203              STR      r2,[sp,#0xc]          ;415
00007e  9101              STR      r1,[sp,#4]            ;415
000080  9002              STR      r0,[sp,#8]            ;415
000082  4815              LDR      r0,|L1.216|
000084  9b08              LDR      r3,[sp,#0x20]         ;415
000086  9a0a              LDR      r2,[sp,#0x28]         ;415
000088  9909              LDR      r1,[sp,#0x24]         ;415
00008a  f7fffffe          BL       lineProcessedRL1A
00008e  4604              MOV      r4,r0                 ;415
000090  4813              LDR      r0,|L1.224|
000092  6800              LDR      r0,[r0,#0]            ;416  ; g_qqueue
000094  8840              LDRH     r0,[r0,#2]            ;416
000096  1900              ADDS     r0,r0,r4              ;416
000098  4911              LDR      r1,|L1.224|
00009a  6809              LDR      r1,[r1,#0]            ;416  ; g_qqueue
00009c  8048              STRH     r0,[r1,#2]            ;416
00009e  4810              LDR      r0,|L1.224|
0000a0  6800              LDR      r0,[r0,#0]            ;417  ; g_qqueue
0000a2  8840              LDRH     r0,[r0,#2]            ;417
0000a4  490d              LDR      r1,|L1.220|
0000a6  4288              CMP      r0,r1                 ;417
0000a8  d306              BCC      |L1.184|
0000aa  480d              LDR      r0,|L1.224|
0000ac  6800              LDR      r0,[r0,#0]            ;418  ; g_qqueue
0000ae  8840              LDRH     r0,[r0,#2]            ;418
0000b0  1a40              SUBS     r0,r0,r1              ;418
0000b2  490b              LDR      r1,|L1.224|
0000b4  6809              LDR      r1,[r1,#0]            ;418  ; g_qqueue
0000b6  8048              STRH     r0,[r1,#2]            ;418
                  |L1.184|
0000b8  4809              LDR      r0,|L1.224|
0000ba  6800              LDR      r0,[r0,#0]            ;419  ; g_qqueue
0000bc  8880              LDRH     r0,[r0,#4]            ;419
0000be  1900              ADDS     r0,r0,r4              ;419
0000c0  4907              LDR      r1,|L1.224|
0000c2  6809              LDR      r1,[r1,#0]            ;419  ; g_qqueue
0000c4  8088              STRH     r0,[r1,#4]            ;419
0000c6  1c7f              ADDS     r7,r7,#1              ;403
                  |L1.200|
0000c8  2fd0              CMP      r7,#0xd0              ;403
0000ca  d3b7              BCC      |L1.60|
0000cc  a804              ADD      r0,sp,#0x10           ;421
0000ce  f7fffffe          BL       qq_enqueue
0000d2  2000              MOVS     r0,#0                 ;423
0000d4  e7bf              B        |L1.86|
;;;425    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L1.216|
                          DCD      0x400f6104
                  |L1.220|
                          DCD      0x0000077f
                  |L1.224|
                          DCD      g_qqueue

                          AREA ||i.rls_init||, CODE, READONLY, ALIGN=2

                  rls_init PROC
;;;425    
;;;426    int rls_init(void)
000000  b510              PUSH     {r4,lr}
;;;427    {
;;;428    	chirpSetProc("getRLSFrame", (ProcPtr)getRLSFrame);
000002  4903              LDR      r1,|L2.16|
000004  a003              ADR      r0,|L2.20|
000006  f7fffffe          BL       chirpSetProc
;;;429    	return 0;
00000a  2000              MOVS     r0,#0
;;;430    }
00000c  bd10              POP      {r4,pc}
;;;431    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      getRLSFrame
                  |L2.20|
000014  67657452          DCB      "getRLSFrame",0
000018  4c534672
00001c  616d6500

                          AREA ||.data||, DATA, ALIGN=2

                  g_foo
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\rls_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_4f2527cc____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___8_rls_m0_c_4f2527cc____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_rls_m0_c_4f2527cc____REVSH|
#line 144
|__asm___8_rls_m0_c_4f2527cc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL0A|
#line 25 "src\\rls_m0.c"
|lineProcessedRL0A| PROC
#line 26
 
 
 
 
 
 
 
 
 
PRESERVE8
 IMPORT callSync


 PUSH {r4-r7, lr}
#line 42


 LSLS r2, #3 
 
 ADDS r2, r1

 PUSH {r0-r3} 
 BL.W callSync 
 POP {r0-r3} 
 
 

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

loop5B
 LDRB r3, [r0] 
 
 EORS r6, r6
 EORS r7, r7
 NOP
 NOP

loop6B
 LDRB r4, [r0] 
 
 ADDS r5, r3, r4 
 ADDS r7, r5 
 STRH r7, [r1, #2] 
 
 
 MOV r7, r5 
 SUBS r4, r3, r4 
 ADDS r6, r4
 LSLS r6, #16
 STR r6, [r1, #4] 
 
 
 MOV r6, r4 
 LSLS r4, #23 
 LSRS r4, #26 
 STRH r4, [r1, #0] 
 
 ADDS r1, #8

 LDRB r3, [r0] 
 
 CMP r1, r2
 BLT loop6B

 
 MOVS r7, #0x1
 LSLS r7, #9
 
dest11B
 LDR r3, [r0] 
 TST r3, r7 
 BNE dest11B 


 POP {r4-r7, pc}
#line 114


 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineProcessedRL1A|
#line 119
|lineProcessedRL1A| PROC
#line 121

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 PRESERVE8
 IMPORT callSync


 PUSH {r1-r7, lr}
#line 143


 

 LDR r4, [sp, #0x20]
#line 150

 LSLS r4, #3 
 MOV r9, r4 

 PUSH {r0-r3} 
 BL.W callSync 
 POP {r0-r3} 

 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 

 
 MOV r12, r1 
 MOVS r4, #0 

 
 LDRB r5, [r0] 
 
 NOP
 NOP
 NOP
 SUBS r4, #8
beg0
 LDRB r6, [r0] 
 
 ADDS r4, #8 
 CMP r4, r9 
 BGE eol
 SUBS r5, r6, r5 
 
 MOV r10, r5 
 ASRS r5, #3 
 LSLS r5, #26 
 LSRS r5, #20 
 LDRH r1, [r3, r4] 
 
 
 ORRS r1, r5 
 LDRB r7, [r2, r1] 
 
 MOV r8, r6 
 NOP
 NOP

 LDRB r5, [r0] 
 
 CMP r7, #0
 BEQ beg0
 ADDS r4, #8 
 NOP

 LDRB r6, [r0] 
 
 CMP r4, r9 
 BGE eol
 NOP
 SUBS r5, r6, r5 

 
 ADD r10, r5 
 ASRS r5, #3 
 LSLS r5, #26 
 LSRS r5, #20 
 LDRB r1, [r3, r4] 
 

 
 ORRS r1, r5 
 LDRB r1, [r2, r1] 
 
 ADD r8, r6 
 NOP
 MOV r6, r10 

 LDRB r5, [r0] 
 
 CMP r1, r7
 BNE beg0 
 
 MOV r5, r12 
 STRH r6, [r5, #4] 

 
 
 ORRS r7, r4, r7 
 ADDS r4, #2 
 LDRH r1, [r3, r4] 
 
 ADD r1, r8 

 
 STRH r1, [r5, #6] 
 
 ADDS r4, #2 
 LDR r1, [r3, r4] 
 
 ORRS r1, r7 

 
 STR r1, [r5] 
 
 NOP
 MOVS r1, #8
 ADD r12, r1 
 ADDS r4, #12 

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r5, [r0] 
 
 NOP
 B beg0

 
eol 
 MOVS r5, #0x1
 LSLS r5, #9
dest20A
 LDR r6, [r0] 
 TST r6, r5 
 BNE dest20A 

 
 
 
 
 

 LDR r1, [sp] 
 LDR r2, [sp, #0x24] 
 LDR r3, [sp, #0x28] 
#line 321

 LSLS r3, #3 
 ADDS r3, r2

 LDR r4, [sp, #0x2c] 
#line 328

 LSLS r4, #3 
 ADDS r4, r2

lcpy
 CMP r1, r12 
 BEQ ecpy 

 LDR r0, [r1, #0] 
 STR r0, [r3, #0] 
 LDR r0, [r1, #4] 
 STR r0, [r3, #4] 

 ADDS r1, #8 
 ADDS r3, #8 

 CMP r4, r3 
 BEQ wrap 
 B lcpy 

wrap

 LDR r3, [sp, #0x24] 
#line 353

 B lcpy


ecpy
 MOV r0, r12 
 LDR r1, [sp] 
 SUBS r0, r1 
 LSRS r0, #3 

 POP {r1-r7, pc}
#line 367

 
	ENDP

;*** End   embedded assembler ***
