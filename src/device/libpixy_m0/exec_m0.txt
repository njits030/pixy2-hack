; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\exec_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\exec_m0.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=534 -DCORE_M0 -DIPC_SLAVE -DPIXY -DKEIL --omf_browse=.\exec_m0.crf src\exec_m0.c]
                          THUMB

                          AREA ||i.delayus||, CODE, READONLY, ALIGN=1

                  delayus PROC
;;;42     
;;;43     void delayus(uint32_t us)
000000  b508              PUSH     {r3,lr}
;;;44     {
000002  4603              MOV      r3,r0
;;;45     	uint32_t timer;
;;;46     	
;;;47     	setTimer(&timer);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       setTimer
;;;48     	
;;;49     	while(getTimer(timer)<us);
00000a  bf00              NOP      
                  |L1.12|
00000c  9800              LDR      r0,[sp,#0]
00000e  f7fffffe          BL       getTimer
000012  4298              CMP      r0,r3
000014  d3fa              BCC      |L1.12|
;;;50     }
000016  bd08              POP      {r3,pc}
;;;51     
                          ENDP


                          AREA ||i.exec_init||, CODE, READONLY, ALIGN=2

                  exec_init PROC
;;;51     
;;;52     int exec_init(void)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54     	chirpSetProc("run", (ProcPtr)exec_run);
000002  4907              LDR      r1,|L2.32|
000004  a007              ADR      r0,|L2.36|
000006  f7fffffe          BL       chirpSetProc
;;;55     	chirpSetProc("stop", (ProcPtr)exec_stop);
00000a  4907              LDR      r1,|L2.40|
00000c  a007              ADR      r0,|L2.44|
00000e  f7fffffe          BL       chirpSetProc
;;;56     	chirpSetProc("running", (ProcPtr)exec_running);
000012  4908              LDR      r1,|L2.52|
000014  a008              ADR      r0,|L2.56|
000016  f7fffffe          BL       chirpSetProc
;;;57     		
;;;58     	return 0;	
00001a  2000              MOVS     r0,#0
;;;59     }
00001c  bd10              POP      {r4,pc}
;;;60     
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      exec_run
                  |L2.36|
000024  72756e00          DCB      "run",0
                  |L2.40|
                          DCD      exec_stop
                  |L2.44|
00002c  73746f70          DCB      "stop",0
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L2.52|
                          DCD      exec_running
                  |L2.56|
000038  72756e6e          DCB      "running",0
00003c  696e6700

                          AREA ||i.exec_loop||, CODE, READONLY, ALIGN=2

                  exec_loop PROC
;;;130    
;;;131    void exec_loop(void)
000000  e031              B        |L3.102|
                  |L3.2|
;;;132    {
;;;133    #if 0
;;;134    #include "frame_m0.h"
;;;135    	uint32_t line, frame=0;
;;;136    	while(1)
;;;137    	{
;;;138    		while(!g_run)
;;;139    			chirpService();
;;;140    
;;;141    		setup0();
;;;142    		while(g_run)
;;;143    		{
;;;144    			line=0;
;;;145    			while(CAM_VSYNC())
;;;146    			{
;;;147    				//while(!CAM_HSYNC()&&CAM_VSYNC());
;;;148    				//while(CAM_HSYNC()&&CAM_VSYNC());
;;;149    				//line++;
;;;150    			} 
;;;151    			while(!CAM_VSYNC());
;;;152    			frame++;
;;;153    			if (frame%100==0)
;;;154    			{
;;;155    				_DBD32(frame); 
;;;156    				_DBG(" ");
;;;157    				//_DBD32(line);
;;;158    				_DBG("\n");
;;;159    			}
;;;160    		}
;;;161    		g_running = 0;
;;;162    	}
;;;163    #endif
;;;164    #if 0
;;;165    	uint32_t i = 0;
;;;166    	while(1)
;;;167    	{
;;;168    		while(!g_run)
;;;169    			chirpService();
;;;170    
;;;171    		setup0();
;;;172    		while(g_run)
;;;173    		{
;;;174    			loop0();
;;;175    			i++;
;;;176    			if (i%100==0)
;;;177    			{
;;;178    				_DBD32(i); _DBG("\n");
;;;179    			}
;;;180    			chirpService();
;;;181    		}
;;;182    		// set variable to indicate we've stopped
;;;183    		g_running = 0;
;;;184    	}
;;;185    #endif
;;;186    #if 1
;;;187    	while(1)
;;;188    	{
;;;189    		while(!g_run)
000002  e001              B        |L3.8|
                  |L3.4|
;;;190    			chirpService();
000004  f7fffffe          BL       chirpService
                  |L3.8|
000008  4817              LDR      r0,|L3.104|
00000a  7800              LDRB     r0,[r0,#0]            ;189  ; g_run
00000c  2800              CMP      r0,#0                 ;189
00000e  d0f9              BEQ      |L3.4|
;;;191    		 	
;;;192    		if (g_program==0)
000010  4816              LDR      r0,|L3.108|
000012  7800              LDRB     r0,[r0,#0]  ; g_program
000014  2800              CMP      r0,#0
000016  d102              BNE      |L3.30|
;;;193    			setup0();
000018  f7fffffe          BL       setup0
00001c  e008              B        |L3.48|
                  |L3.30|
;;;194    		else if (g_program==1)
00001e  4813              LDR      r0,|L3.108|
000020  7800              LDRB     r0,[r0,#0]  ; g_program
000022  2801              CMP      r0,#1
000024  d102              BNE      |L3.44|
;;;195    			setup1();
000026  f7fffffe          BL       setup1
00002a  e001              B        |L3.48|
                  |L3.44|
;;;196    		else
;;;197    			setup2();
00002c  f7fffffe          BL       setup2
                  |L3.48|
;;;198    		
;;;199    		while(g_run)
000030  e013              B        |L3.90|
                  |L3.50|
;;;200    		{
;;;201    			if (g_program==0)
000032  480e              LDR      r0,|L3.108|
000034  7800              LDRB     r0,[r0,#0]  ; g_program
000036  2800              CMP      r0,#0
000038  d102              BNE      |L3.64|
;;;202    				loop0();
00003a  f7fffffe          BL       loop0
00003e  e008              B        |L3.82|
                  |L3.64|
;;;203    			else if (g_program==1)
000040  480a              LDR      r0,|L3.108|
000042  7800              LDRB     r0,[r0,#0]  ; g_program
000044  2801              CMP      r0,#1
000046  d102              BNE      |L3.78|
;;;204    				loop1();
000048  f7fffffe          BL       loop1
00004c  e001              B        |L3.82|
                  |L3.78|
;;;205    			else
;;;206    				loop2();
00004e  f7fffffe          BL       loop2
                  |L3.82|
;;;207    			
;;;208    			// find missing vsync transitions
;;;209    			trackVsync();			
000052  f7fffffe          BL       trackVsync
;;;210    			
;;;211    			chirpService();
000056  f7fffffe          BL       chirpService
                  |L3.90|
00005a  4803              LDR      r0,|L3.104|
00005c  7800              LDRB     r0,[r0,#0]            ;199  ; g_run
00005e  2800              CMP      r0,#0                 ;199
000060  d1e7              BNE      |L3.50|
;;;212    		}
;;;213    		// set variable to indicate we've stopped
;;;214    		g_running = 0;
000062  4903              LDR      r1,|L3.112|
000064  7008              STRB     r0,[r1,#0]
                  |L3.102|
000066  e7cc              B        |L3.2|
;;;215    	}
;;;216    #endif
;;;217    }
                          ENDP

                  |L3.104|
                          DCD      g_run
                  |L3.108|
                          DCD      g_program
                  |L3.112|
                          DCD      g_running

                          AREA ||i.exec_run||, CODE, READONLY, ALIGN=2

                  exec_run PROC
;;;71     
;;;72     int32_t exec_run(uint8_t *prog)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	g_program = *prog;
000002  7808              LDRB     r0,[r1,#0]
000004  b240              SXTB     r0,r0
000006  4a04              LDR      r2,|L4.24|
000008  7010              STRB     r0,[r2,#0]
;;;75     	g_run = 1;
00000a  2001              MOVS     r0,#1
00000c  4a03              LDR      r2,|L4.28|
00000e  7010              STRB     r0,[r2,#0]
;;;76     	g_running = 1;		
000010  4a03              LDR      r2,|L4.32|
000012  7010              STRB     r0,[r2,#0]
;;;77     	return 0;
000014  2000              MOVS     r0,#0
;;;78     }
000016  4770              BX       lr
;;;79     
                          ENDP

                  |L4.24|
                          DCD      g_program
                  |L4.28|
                          DCD      g_run
                  |L4.32|
                          DCD      g_running

                          AREA ||i.exec_running||, CODE, READONLY, ALIGN=2

                  exec_running PROC
;;;60     
;;;61     uint32_t exec_running(void)
000000  4801              LDR      r0,|L5.8|
;;;62     {
;;;63     	return (uint32_t)g_running;
000002  7800              LDRB     r0,[r0,#0]  ; g_running
;;;64     }
000004  4770              BX       lr
;;;65     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      g_running

                          AREA ||i.exec_stop||, CODE, READONLY, ALIGN=2

                  exec_stop PROC
;;;65     
;;;66     int32_t exec_stop(void)
000000  2000              MOVS     r0,#0
;;;67     {
;;;68     	g_run = 0;
000002  4901              LDR      r1,|L6.8|
000004  7008              STRB     r0,[r1,#0]
;;;69     	return 0;
;;;70     }
000006  4770              BX       lr
;;;71     
                          ENDP

                  |L6.8|
                          DCD      g_run

                          AREA ||i.getTimer||, CODE, READONLY, ALIGN=2

                  getTimer PROC
;;;34     
;;;35     uint32_t getTimer(uint32_t timer)
000000  4601              MOV      r1,r0
;;;36     {
;;;37     	uint32_t result; 
;;;38     	result = LPC_TIMER2->TC-timer;	
000002  4a02              LDR      r2,|L7.12|
000004  6892              LDR      r2,[r2,#8]
000006  1a50              SUBS     r0,r2,r1
;;;39     
;;;40     	return result;
;;;41     }
000008  4770              BX       lr
;;;42     
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x400c3000

                          AREA ||i.loop0||, CODE, READONLY, ALIGN=2

                  loop0 PROC
;;;88     
;;;89     void loop0()
000000  b508              PUSH     {r3,lr}
;;;90     {
;;;91     	if (SM_OBJECT->stream)
000002  480f              LDR      r0,|L8.64|
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d014              BEQ      |L8.52|
;;;92     	{
;;;93     		if (SM_OBJECT->streamState==0)
00000a  480d              LDR      r0,|L8.64|
00000c  7840              LDRB     r0,[r0,#1]
00000e  2800              CMP      r0,#0
000010  d114              BNE      |L8.60|
;;;94     		{
;;;95     			getRLSFrame(&g_m0mem, &g_lut);	
000012  490c              LDR      r1,|L8.68|
000014  480c              LDR      r0,|L8.72|
000016  f7fffffe          BL       getRLSFrame
;;;96     			grabM0R2(0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, (uint8_t *)SRAM1_LOC+CAM_PREBUF_LEN);
00001a  480c              LDR      r0,|L8.76|
00001c  23d0              MOVS     r3,#0xd0
00001e  22ff              MOVS     r2,#0xff
000020  323d              ADDS     r2,r2,#0x3d
000022  2100              MOVS     r1,#0
000024  9000              STR      r0,[sp,#0]
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       grabM0R2
;;;97     			SM_OBJECT->streamState = 1;
00002c  2001              MOVS     r0,#1
00002e  4904              LDR      r1,|L8.64|
000030  7048              STRB     r0,[r1,#1]
000032  e003              B        |L8.60|
                  |L8.52|
;;;98     		}
;;;99     		// else wait
;;;100    	}
;;;101    	else
;;;102    		getRLSFrame(&g_m0mem, &g_lut);	
000034  4903              LDR      r1,|L8.68|
000036  4804              LDR      r0,|L8.72|
000038  f7fffffe          BL       getRLSFrame
                  |L8.60|
;;;103    }
00003c  bd08              POP      {r3,pc}
;;;104    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0x2000fc00
                  |L8.68|
                          DCD      g_lut
                  |L8.72|
                          DCD      g_m0mem
                  |L8.76|
                          DCD      0x10080040

                          AREA ||i.loop1||, CODE, READONLY, ALIGN=2

                  loop1 PROC
;;;112    
;;;113    void loop1()
000000  b508              PUSH     {r3,lr}
;;;114    {
;;;115    	if (SM_OBJECT->stream)
000002  4807              LDR      r0,|L9.32|
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d008              BEQ      |L9.28|
;;;116    		grabM0R2(0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, (uint8_t *)SRAM1_LOC+CAM_PREBUF_LEN);
00000a  4806              LDR      r0,|L9.36|
00000c  23d0              MOVS     r3,#0xd0
00000e  22ff              MOVS     r2,#0xff
000010  323d              ADDS     r2,r2,#0x3d
000012  2100              MOVS     r1,#0
000014  9000              STR      r0,[sp,#0]
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       grabM0R2
                  |L9.28|
;;;117    }
00001c  bd08              POP      {r3,pc}
;;;118    
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      0x2000fc00
                  |L9.36|
                          DCD      0x10080040

                          AREA ||i.loop2||, CODE, READONLY, ALIGN=2

                  loop2 PROC
;;;123    
;;;124    void loop2()
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	if (SM_OBJECT->stream)
000002  4804              LDR      r0,|L10.20|
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d002              BEQ      |L10.16|
;;;127    		grabM0R3((uint8_t *)SRAM1_LOC+CAM_PREBUF_LEN);
00000a  4803              LDR      r0,|L10.24|
00000c  f7fffffe          BL       grabM0R3
                  |L10.16|
;;;128    }
000010  bd10              POP      {r4,pc}
;;;129    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x2000fc00
                  |L10.24|
                          DCD      0x10080040

                          AREA ||i.setTimer||, CODE, READONLY, ALIGN=2

                  setTimer PROC
;;;29     
;;;30     void setTimer(uint32_t *timer)
000000  4901              LDR      r1,|L11.8|
;;;31     {
;;;32     	*timer = LPC_TIMER2->TC;
000002  6889              LDR      r1,[r1,#8]
000004  6001              STR      r1,[r0,#0]
;;;33     }
000006  4770              BX       lr
;;;34     
                          ENDP

                  |L11.8|
                          DCD      0x400c3000

                          AREA ||i.setup0||, CODE, READONLY, ALIGN=1

                  setup0 PROC
;;;81     
;;;82     void setup0()
000000  4770              BX       lr
;;;83     {
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.setup1||, CODE, READONLY, ALIGN=2

                  setup1 PROC
;;;104    
;;;105    void setup1()
000000  2001              MOVS     r0,#1
;;;106    {
;;;107    	SM_OBJECT->stream = 1;
000002  4903              LDR      r1,|L13.16|
000004  7008              STRB     r0,[r1,#0]
;;;108    	SM_OBJECT->currentLine = 0;
000006  2000              MOVS     r0,#0
000008  8048              STRH     r0,[r1,#2]
;;;109    	SM_OBJECT->frameTime = 0;
00000a  8088              STRH     r0,[r1,#4]
;;;110    	SM_OBJECT->blankTime = 0;
00000c  80c8              STRH     r0,[r1,#6]
;;;111    }
00000e  4770              BX       lr
;;;112    
                          ENDP

                  |L13.16|
                          DCD      0x2000fc00

                          AREA ||i.setup2||, CODE, READONLY, ALIGN=1

                  setup2 PROC
;;;118    
;;;119    void setup2()
000000  b500              PUSH     {lr}
;;;120    {
;;;121    	setup1();
000002  f7fffffe          BL       setup1
;;;122    }
000006  bd00              POP      {pc}
;;;123    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  g_running
000000  00                DCB      0x00
                  g_run
000001  00                DCB      0x00
                  g_program
000002  ff00              DCB      0xff,0x00
                  g_m0mem
                          DCD      0x10090288
                  g_lut
                          DCD      0x10091000

;*** Start embedded assembler ***

#line 1 "src\\exec_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_exec_m0_c_e0404fb8____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___9_exec_m0_c_e0404fb8____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_exec_m0_c_e0404fb8____REVSH|
#line 144
|__asm___9_exec_m0_c_e0404fb8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
