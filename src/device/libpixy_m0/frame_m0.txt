; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\frame_m0.o --asm_dir=.\ --list_dir=.\ --depend=.\frame_m0.d --cpu=Cortex-M0 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=534 -DCORE_M0 -DIPC_SLAVE -DPIXY -DKEIL --omf_browse=.\frame_m0.crf src\frame_m0.c]
                          THUMB

                          AREA ||i.callSync||, CODE, READONLY, ALIGN=2

                  callSync PROC
;;;629    	
;;;630    void callSync(void)
000000  b510              PUSH     {r4,lr}
;;;631    {
;;;632    	sync((uint32_t *)&CAM_PORT, CAM_PCLK_MASK, (uint32_t *)&LPC_GPIO_PORT->PIN[5], 0x04);
000002  2304              MOVS     r3,#4
000004  4a02              LDR      r2,|L1.16|
000006  02d9              LSLS     r1,r3,#11
000008  4802              LDR      r0,|L1.20|
00000a  f7fffffe          BL       sync
;;;633    }
00000e  bd10              POP      {r4,pc}
;;;634    
                          ENDP

                  |L1.16|
                          DCD      0x400f6114
                  |L1.20|
                          DCD      0x400f6104

                          AREA ||i.frame_init||, CODE, READONLY, ALIGN=2

                  frame_init PROC
;;;814    
;;;815    int frame_init(void)
000000  b510              PUSH     {r4,lr}
;;;816    {
;;;817    	uint32_t line, frame=0;
;;;818    
;;;819    	chirpSetProc("getFrame", (ProcPtr)getFrame);
000002  4909              LDR      r1,|L2.40|
000004  a009              ADR      r0,|L2.44|
000006  f7fffffe          BL       chirpSetProc
;;;820    	chirpSetProc("getEdges", (ProcPtr)getEdges);
00000a  490b              LDR      r1,|L2.56|
00000c  a00b              ADR      r0,|L2.60|
00000e  f7fffffe          BL       chirpSetProc
;;;821    	chirpSetProc("getTiming", (ProcPtr)getTiming);
000012  490d              LDR      r1,|L2.72|
000014  a00d              ADR      r0,|L2.76|
000016  f7fffffe          BL       chirpSetProc
;;;822    	chirpSetProc("setEdgeParams", (ProcPtr)setEdgeParams);
00001a  490f              LDR      r1,|L2.88|
00001c  a00f              ADR      r0,|L2.92|
00001e  f7fffffe          BL       chirpSetProc
;;;823    	
;;;824    #ifdef DEBUG_SYNC
;;;825    	LPC_GPIO_PORT->DIR[5] |= 0x0004;
;;;826    #endif
;;;827    
;;;828    #if 0
;;;829    	while(1)
;;;830    	{
;;;831    		if (frame%100==0)
;;;832    		{
;;;833    			_DBD32(frame); 
;;;834    			_DBG(" ");
;;;835    			_DBG("\n");
;;;836    		}		
;;;837    		grabM0R3((uint8_t *)SRAM1_LOC, NULL, NULL, NULL, 0);
;;;838    		frame++;
;;;839    	}
;;;840    #endif
;;;841    #if 0	
;;;842    	while(1)
;;;843    	{
;;;844    		line=0;
;;;845    		while(CAM_VSYNC())
;;;846    		{
;;;847    			while(!CAM_HSYNC()&&CAM_VSYNC());
;;;848    			while(CAM_HSYNC()&&CAM_VSYNC());
;;;849    			line++;
;;;850    		} 
;;;851    		while(!CAM_VSYNC());
;;;852    		frame++;
;;;853    		if (frame%50==0)
;;;854    		{
;;;855    			_DBD32(frame); 
;;;856    			_DBG(" ");
;;;857    			_DBD32(line);
;;;858    			_DBG("\n");
;;;859    		}
;;;860    	}
;;;861    #endif
;;;862    #if 0
;;;863    	{
;;;864    		static int vindex = 0;
;;;865    		LPC_GPIO_PORT->DIR[5] |= 0x0004;
;;;866    		while(1)
;;;867    		{
;;;868    			while(CAM_VSYNC())
;;;869    			{
;;;870    				//LPC_GPIO_PORT->PIN[5] &= ~0x0004;
;;;871    				while(CAM_HSYNC()&&CAM_VSYNC());
;;;872    				(*vda[vindex&0x03])();
;;;873    				//callSync2();
;;;874    				callSync3();
;;;875    				//LPC_GPIO_PORT->PIN[5] |= 0x0004;
;;;876    				vindex++;
;;;877    				while(!CAM_HSYNC()&&CAM_VSYNC());
;;;878    			}
;;;879    			while(!CAM_VSYNC());
;;;880    		}
;;;881    	}
;;;882    #endif		
;;;883    	return 0;	
000022  2000              MOVS     r0,#0
;;;884    }
000024  bd10              POP      {r4,pc}
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      getFrame
                  |L2.44|
00002c  67657446          DCB      "getFrame",0
000030  72616d65
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
                  |L2.56|
                          DCD      getEdges
                  |L2.60|
00003c  67657445          DCB      "getEdges",0
000040  64676573
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L2.72|
                          DCD      getTiming
                  |L2.76|
00004c  67657454          DCB      "getTiming",0
000050  696d696e
000054  6700    
000056  00                DCB      0
000057  00                DCB      0
                  |L2.88|
                          DCD      setEdgeParams
                  |L2.92|
00005c  73657445          DCB      "setEdgeParams",0
000060  64676550
000064  6172616d
000068  7300    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.getEdges||, CODE, READONLY, ALIGN=1

                  getEdges PROC
;;;770    
;;;771    int32_t getEdges(uint32_t *memory)
000000  b510              PUSH     {r4,lr}
;;;772    {
;;;773    	return grabM0R3((uint8_t *)*memory);
000002  6800              LDR      r0,[r0,#0]
000004  f7fffffe          BL       grabM0R3
;;;774    }
000008  bd10              POP      {r4,pc}
;;;775    	
                          ENDP


                          AREA ||i.getFrame||, CODE, READONLY, ALIGN=2

                  getFrame PROC
;;;756    
;;;757    int32_t getFrame(uint8_t *type, uint32_t *memory, uint16_t *xoffset, uint16_t *yoffset, uint16_t *xwidth, uint16_t *ywidth)
000000  b5f8              PUSH     {r3-r7,lr}
;;;758    {
;;;759    	//printf("M0: grab %d %d %d %d %d\n", *type, *xoffset, *yoffset, *xwidth, *ywidth);
;;;760    	uint8_t type2 = *type>>4;
000002  7800              LDRB     r0,[r0,#0]
;;;761    	
;;;762    	if (type2==2)
000004  9e06              LDR      r6,[sp,#0x18]
000006  0900              LSRS     r0,r0,#4              ;760
000008  9d07              LDR      r5,[sp,#0x1c]
00000a  2802              CMP      r0,#2
00000c  d004              BEQ      |L4.24|
;;;763    		grabM0R2(*xoffset, *yoffset, *xwidth, *ywidth, (uint8_t *)*memory);
;;;764    	else if (type2==1)
00000e  2801              CMP      r0,#1
000010  d00d              BEQ      |L4.46|
;;;765    		grabM0R1(*xoffset, *yoffset, *xwidth, *ywidth, (uint8_t *)*memory);
;;;766    	else 
;;;767    		return -1;
000012  2000              MOVS     r0,#0
000014  43c0              MVNS     r0,r0
;;;768    	return 0;
;;;769    }
000016  bdf8              POP      {r3-r7,pc}
                  |L4.24|
000018  6808              LDR      r0,[r1,#0]            ;763
00001a  9000              STR      r0,[sp,#0]            ;763
00001c  882d              LDRH     r5,[r5,#0]            ;763
00001e  8834              LDRH     r4,[r6,#0]            ;763
000020  8819              LDRH     r1,[r3,#0]            ;763
000022  8810              LDRH     r0,[r2,#0]            ;763
000024  462b              MOV      r3,r5                 ;763
000026  4622              MOV      r2,r4                 ;763
000028  f7fffffe          BL       grabM0R2
00002c  e022              B        |L4.116|
                  |L4.46|
00002e  8810              LDRH     r0,[r2,#0]            ;765
000030  9000              STR      r0,[sp,#0]            ;765
000032  8837              LDRH     r7,[r6,#0]            ;765
000034  882e              LDRH     r6,[r5,#0]            ;765
000036  680d              LDR      r5,[r1,#0]            ;765
000038  490f              LDR      r1,|L4.120|
00003a  881c              LDRH     r4,[r3,#0]            ;765
00003c  6908              LDR      r0,[r1,#0x10]         ;765  ; vindex
00003e  1c40              ADDS     r0,r0,#1              ;765
000040  6108              STR      r0,[r1,#0x10]         ;765  ; vindex
000042  0780              LSLS     r0,r0,#30             ;765
000044  490d              LDR      r1,|L4.124|
000046  0f00              LSRS     r0,r0,#28             ;765
000048  5808              LDR      r0,[r1,r0]            ;765
00004a  4780              BLX      r0                    ;765
00004c  9800              LDR      r0,[sp,#0]            ;765
00004e  0840              LSRS     r0,r0,#1              ;765
000050  9000              STR      r0,[sp,#0]            ;765
000052  2001              MOVS     r0,#1                 ;765
000054  4320              ORRS     r0,r0,r4              ;765
000056  f7fffffe          BL       skipLines
00005a  2400              MOVS     r4,#0                 ;765
00005c  2e00              CMP      r6,#0                 ;765
00005e  d909              BLS      |L4.116|
                  |L4.96|
000060  463b              MOV      r3,r7                 ;765
000062  4629              MOV      r1,r5                 ;765
000064  4806              LDR      r0,|L4.128|
000066  9a00              LDR      r2,[sp,#0]            ;765
000068  f7fffffe          BL       lineM0R1
00006c  19ed              ADDS     r5,r5,r7              ;765
00006e  1c64              ADDS     r4,r4,#1              ;765
000070  42b4              CMP      r4,r6                 ;765
000072  d3f5              BCC      |L4.96|
                  |L4.116|
000074  2000              MOVS     r0,#0                 ;768
000076  bdf8              POP      {r3-r7,pc}
;;;770    
                          ENDP

                  |L4.120|
                          DCD      ||.data||
                  |L4.124|
                          DCD      ||.data||+0x1c
                  |L4.128|
                          DCD      0x400f6104

                          AREA ||i.getTiming||, CODE, READONLY, ALIGN=2

                  getTiming PROC
;;;775    	
;;;776    int32_t getTiming()
000000  b530              PUSH     {r4,r5,lr}
;;;777    {
;;;778    	uint32_t timer0, timer1;
;;;779    	
;;;780    	// blanking
;;;781    	while(!CAM_VSYNC());
000002  4c25              LDR      r4,|L5.152|
000004  b089              SUB      sp,sp,#0x24           ;777
                  |L5.6|
000006  6860              LDR      r0,[r4,#4]
000008  04c0              LSLS     r0,r0,#19
00000a  d5fc              BPL      |L5.6|
                  |L5.12|
;;;782    	// active
;;;783    	while(CAM_VSYNC());
00000c  6860              LDR      r0,[r4,#4]
00000e  04c0              LSLS     r0,r0,#19
000010  d4fc              BMI      |L5.12|
;;;784    	setTimer(&timer0);
000012  a806              ADD      r0,sp,#0x18
000014  f7fffffe          BL       setTimer
                  |L5.24|
;;;785    	while(!CAM_VSYNC());
000018  6860              LDR      r0,[r4,#4]
00001a  04c0              LSLS     r0,r0,#19
00001c  d5fc              BPL      |L5.24|
;;;786    	g_vblank = getTimer(timer0);
00001e  9806              LDR      r0,[sp,#0x18]
000020  f7fffffe          BL       getTimer
000024  4d1d              LDR      r5,|L5.156|
000026  8168              STRH     r0,[r5,#0xa]
;;;787    	setTimer(&timer0);
000028  a806              ADD      r0,sp,#0x18
00002a  f7fffffe          BL       setTimer
                  |L5.46|
;;;788    	// active
;;;789    
;;;790    	while(!CAM_HSYNC());
00002e  6860              LDR      r0,[r4,#4]
000030  0580              LSLS     r0,r0,#22
000032  d5fc              BPL      |L5.46|
                  |L5.52|
;;;791    	while(CAM_HSYNC());
000034  6860              LDR      r0,[r4,#4]
000036  0580              LSLS     r0,r0,#22
000038  d4fc              BMI      |L5.52|
;;;792    	setTimer(&timer1);
00003a  a807              ADD      r0,sp,#0x1c
00003c  f7fffffe          BL       setTimer
                  |L5.64|
;;;793    	while(!CAM_HSYNC());
000040  6860              LDR      r0,[r4,#4]
000042  0580              LSLS     r0,r0,#22
000044  d5fc              BPL      |L5.64|
;;;794    	g_hblank = getTimer(timer1);
000046  9807              LDR      r0,[sp,#0x1c]
000048  f7fffffe          BL       getTimer
00004c  80e8              STRH     r0,[r5,#6]
;;;795    	setTimer(&timer1);
00004e  a807              ADD      r0,sp,#0x1c
000050  f7fffffe          BL       setTimer
                  |L5.84|
;;;796    	while(CAM_HSYNC());
000054  6860              LDR      r0,[r4,#4]
000056  0580              LSLS     r0,r0,#22
000058  d4fc              BMI      |L5.84|
;;;797    	g_hactive = getTimer(timer1);
00005a  9807              LDR      r0,[sp,#0x1c]
00005c  f7fffffe          BL       getTimer
000060  8128              STRH     r0,[r5,#8]
                  |L5.98|
;;;798    
;;;799    	while(CAM_VSYNC());
000062  6860              LDR      r0,[r4,#4]
000064  04c0              LSLS     r0,r0,#19
000066  d4fc              BMI      |L5.98|
;;;800    	g_vactive = getTimer(timer0);
000068  9806              LDR      r0,[sp,#0x18]
00006a  f7fffffe          BL       getTimer
00006e  b281              UXTH     r1,r0
000070  81a9              STRH     r1,[r5,#0xc]
;;;801    	
;;;802    	CRP_RETURN(UINT16(g_hblank), UINT16(g_hactive), UINT16(g_vblank), UINT16(g_vactive)); 
000072  896b              LDRH     r3,[r5,#0xa]  ; g_vblank
000074  2002              MOVS     r0,#2
000076  2200              MOVS     r2,#0
000078  9302              STR      r3,[sp,#8]
00007a  9205              STR      r2,[sp,#0x14]
00007c  9104              STR      r1,[sp,#0x10]
00007e  9003              STR      r0,[sp,#0xc]
000080  8929              LDRH     r1,[r5,#8]  ; g_hactive
000082  9100              STR      r1,[sp,#0]
000084  9001              STR      r0,[sp,#4]
000086  4603              MOV      r3,r0
000088  4601              MOV      r1,r0
00008a  88ea              LDRH     r2,[r5,#6]  ; g_hblank
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       chirpAssemble
;;;803    	return 0;
000092  2000              MOVS     r0,#0
;;;804    }
000094  b009              ADD      sp,sp,#0x24
000096  bd30              POP      {r4,r5,pc}
;;;805    
                          ENDP

                  |L5.152|
                          DCD      0x400f6100
                  |L5.156|
                          DCD      ||.data||

                          AREA ||i.grabM0R1||, CODE, READONLY, ALIGN=2

                  grabM0R1 PROC
;;;636     
;;;637    void grabM0R1(uint32_t xoffset, uint32_t yoffset, uint32_t xwidth, uint32_t ywidth, uint8_t *memory)
000000  b5ff              PUSH     {r0-r7,lr}
;;;638    {
;;;639    	uint32_t line;
;;;640    	static int vindex = 0;
;;;641    	vindex++;
000002  4812              LDR      r0,|L6.76|
000004  460c              MOV      r4,r1                 ;638
000006  6901              LDR      r1,[r0,#0x10]  ; vindex
000008  b081              SUB      sp,sp,#4              ;638
00000a  9d0a              LDR      r5,[sp,#0x28]
00000c  1c49              ADDS     r1,r1,#1
;;;642    
;;;643    	(*vda[vindex&0x03])();
00000e  6101              STR      r1,[r0,#0x10]  ; vindex
000010  0788              LSLS     r0,r1,#30
000012  490f              LDR      r1,|L6.80|
000014  0f00              LSRS     r0,r0,#28
000016  5808              LDR      r0,[r1,r0]
000018  461e              MOV      r6,r3                 ;638
00001a  4617              MOV      r7,r2                 ;638
00001c  4780              BLX      r0
;;;644    
;;;645    	xoffset >>= 1;
00001e  9801              LDR      r0,[sp,#4]
;;;646    	yoffset |= 1;
000020  2101              MOVS     r1,#1
000022  0840              LSRS     r0,r0,#1              ;645
000024  9001              STR      r0,[sp,#4]
000026  4620              MOV      r0,r4
000028  4308              ORRS     r0,r0,r1
;;;647    
;;;648    	skipLines(yoffset);
00002a  f7fffffe          BL       skipLines
;;;649    	for (line=0; line<ywidth; line++, memory+=xwidth)
00002e  2400              MOVS     r4,#0
000030  2e00              CMP      r6,#0
000032  d909              BLS      |L6.72|
                  |L6.52|
;;;650    		lineM0R1((uint32_t *)&CAM_PORT, memory, xoffset, xwidth); // wait, grab, wait
000034  463b              MOV      r3,r7
000036  4629              MOV      r1,r5
000038  4806              LDR      r0,|L6.84|
00003a  9a01              LDR      r2,[sp,#4]
00003c  f7fffffe          BL       lineM0R1
000040  19ed              ADDS     r5,r5,r7              ;649
000042  1c64              ADDS     r4,r4,#1              ;649
000044  42b4              CMP      r4,r6                 ;649
000046  d3f5              BCC      |L6.52|
                  |L6.72|
;;;651    }
000048  b005              ADD      sp,sp,#0x14
00004a  bdf0              POP      {r4-r7,pc}
;;;652    
                          ENDP

                  |L6.76|
                          DCD      ||.data||
                  |L6.80|
                          DCD      ||.data||+0x1c
                  |L6.84|
                          DCD      0x400f6104

                          AREA ||i.grabM0R2||, CODE, READONLY, ALIGN=2

                  grabM0R2 PROC
;;;652    
;;;653    void grabM0R2(uint32_t xoffset, uint32_t yoffset, uint32_t xwidth, uint32_t ywidth, uint8_t *memory)
000000  b5ff              PUSH     {r0-r7,lr}
;;;654    {
;;;655    	uint32_t line;
;;;656    	uint16_t *lineStore;
;;;657    	lineStore = (uint16_t *)ALIGN(g_lineStore, 2);
000002  4828              LDR      r0,|L7.164|
000004  b083              SUB      sp,sp,#0xc            ;654
000006  07c0              LSLS     r0,r0,#31
000008  9f0c              LDR      r7,[sp,#0x30]
00000a  4826              LDR      r0,|L7.164|
00000c  d000              BEQ      |L7.16|
00000e  1c80              ADDS     r0,r0,#2              ;654
                  |L7.16|
;;;658    
;;;659    	skipLines(yoffset*2+1);
000010  9000              STR      r0,[sp,#0]
000012  0048              LSLS     r0,r1,#1
000014  1c40              ADDS     r0,r0,#1
000016  f7fffffe          BL       skipLines
;;;660    	for (line=0; line<ywidth; line+=2, memory+=xwidth*2)
00001a  9806              LDR      r0,[sp,#0x18]
00001c  2500              MOVS     r5,#0
00001e  2800              CMP      r0,#0
000020  d93e              BLS      |L7.160|
;;;661    	{
;;;662    		// update line count
;;;663    		SM_OBJECT->currentLine = line;
;;;664    
;;;665    		// CAM_HSYNC is negated here
;;;666    		lineM0R2((uint32_t *)&CAM_PORT, lineStore, xoffset, xwidth); 
;;;667    		while(CAM_HSYNC());
;;;668    		lineM0R2((uint32_t *)&CAM_PORT, lineStore+xwidth, xoffset, xwidth); 
000022  9805              LDR      r0,[sp,#0x14]
000024  9900              LDR      r1,[sp,#0]
000026  0040              LSLS     r0,r0,#1
000028  9002              STR      r0,[sp,#8]            ;656
00002a  1844              ADDS     r4,r0,r1
00002c  9805              LDR      r0,[sp,#0x14]         ;654
00002e  0081              LSLS     r1,r0,#2              ;654
;;;669    		while(CAM_HSYNC());
;;;670    		lineM0R2((uint32_t *)&CAM_PORT, lineStore+2*xwidth, xoffset, xwidth); 
000030  9800              LDR      r0,[sp,#0]
000032  1808              ADDS     r0,r1,r0
000034  9001              STR      r0,[sp,#4]
                  |L7.54|
000036  481c              LDR      r0,|L7.168|
000038  8045              STRH     r5,[r0,#2]            ;663
00003a  481c              LDR      r0,|L7.172|
00003c  9b05              LDR      r3,[sp,#0x14]         ;666
00003e  9a03              LDR      r2,[sp,#0xc]          ;666
000040  9900              LDR      r1,[sp,#0]            ;666
000042  f7fffffe          BL       lineM0R2
000046  4e1a              LDR      r6,|L7.176|
                  |L7.72|
000048  6870              LDR      r0,[r6,#4]            ;667
00004a  0580              LSLS     r0,r0,#22             ;667
00004c  d4fc              BMI      |L7.72|
00004e  4621              MOV      r1,r4                 ;667
000050  4816              LDR      r0,|L7.172|
000052  9b05              LDR      r3,[sp,#0x14]         ;668
000054  9a03              LDR      r2,[sp,#0xc]          ;668
000056  f7fffffe          BL       lineM0R2
                  |L7.90|
00005a  6870              LDR      r0,[r6,#4]            ;669
00005c  0580              LSLS     r0,r0,#22             ;669
00005e  d4fc              BMI      |L7.90|
000060  4e12              LDR      r6,|L7.172|
000062  9b05              LDR      r3,[sp,#0x14]
000064  4630              MOV      r0,r6
000066  9a03              LDR      r2,[sp,#0xc]
000068  9901              LDR      r1,[sp,#4]
00006a  f7fffffe          BL       lineM0R2
;;;671    	   	mergeM0R2(lineStore, lineStore+2*xwidth, memory, xwidth);
00006e  463a              MOV      r2,r7
000070  9b05              LDR      r3,[sp,#0x14]
000072  9901              LDR      r1,[sp,#4]
000074  9800              LDR      r0,[sp,#0]
000076  f7fffffe          BL       mergeM0R2
;;;672    		lineM0R2((uint32_t *)&CAM_PORT, lineStore, xoffset, xwidth); 
00007a  4630              MOV      r0,r6
00007c  9b05              LDR      r3,[sp,#0x14]
00007e  9a03              LDR      r2,[sp,#0xc]
000080  9900              LDR      r1,[sp,#0]
000082  f7fffffe          BL       lineM0R2
;;;673    	   	mergeM0R2(lineStore+xwidth, lineStore, memory+xwidth, xwidth);
000086  9805              LDR      r0,[sp,#0x14]
000088  9b05              LDR      r3,[sp,#0x14]
00008a  183a              ADDS     r2,r7,r0
00008c  4620              MOV      r0,r4
00008e  9900              LDR      r1,[sp,#0]
000090  f7fffffe          BL       mergeM0R2
000094  9802              LDR      r0,[sp,#8]            ;660
000096  1cad              ADDS     r5,r5,#2              ;660
000098  19c7              ADDS     r7,r0,r7              ;660
00009a  9806              LDR      r0,[sp,#0x18]         ;660
00009c  4285              CMP      r5,r0                 ;660
00009e  d3ca              BCC      |L7.54|
                  |L7.160|
;;;674    	}
;;;675    }
0000a0  b007              ADD      sp,sp,#0x1c
0000a2  bdf0              POP      {r4-r7,pc}
;;;676    
                          ENDP

                  |L7.164|
                          DCD      ||.bss||
                  |L7.168|
                          DCD      0x2000fc00
                  |L7.172|
                          DCD      0x400f6104
                  |L7.176|
                          DCD      0x400f6100

                          AREA ||i.grabM0R3||, CODE, READONLY, ALIGN=2

                  grabM0R3 PROC
;;;683    
;;;684    int32_t grabM0R3(uint8_t *memy)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;685    {
000002  b094              SUB      sp,sp,#0x50
;;;686    	int32_t minTime;	
;;;687    	uint32_t line;
;;;688    	uint32_t timer;
;;;689    	int32_t time;
;;;690    	uint8_t *memc = memy+CAM_RES3_WIDTH*CAM_RES3_HEIGHT+16;
000004  49c0              LDR      r1,|L8.776|
000006  9814              LDR      r0,[sp,#0x50]
;;;691    	uint32_t maxScanTime = 3*g_hblank+2*g_hactive-MAX_SYNC_TIME;
000008  4cc0              LDR      r4,|L8.780|
00000a  1840              ADDS     r0,r0,r1              ;690
00000c  900a              STR      r0,[sp,#0x28]
00000e  88e0              LDRH     r0,[r4,#6]  ; g_hblank
000010  0041              LSLS     r1,r0,#1
000012  1842              ADDS     r2,r0,r1
000014  8921              LDRH     r1,[r4,#8]  ; g_hactive
;;;692    	uint32_t fourLineTime = 4*g_hblank+4*g_hactive-MAX_SYNC_TIME;
000016  1840              ADDS     r0,r0,r1
000018  004b              LSLS     r3,r1,#1              ;691
00001a  0080              LSLS     r0,r0,#2
00001c  18d2              ADDS     r2,r2,r3              ;691
00001e  1ec0              SUBS     r0,r0,#3
000020  1ed2              SUBS     r2,r2,#3              ;691
;;;693    	uint8_t scan;
;;;694    	
;;;695    	minTime = 100;
000022  900c              STR      r0,[sp,#0x30]
000024  920f              STR      r2,[sp,#0x3c]
000026  2064              MOVS     r0,#0x64
;;;696    		
;;;697    	skipLines(1);
000028  9005              STR      r0,[sp,#0x14]
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       skipLines
;;;698    	for (line=0, scan=1; line<CAM_RES3_HEIGHT; line++, memy+=CAM_RES3_WIDTH)
000030  2000              MOVS     r0,#0
000032  9009              STR      r0,[sp,#0x24]
000034  2001              MOVS     r0,#1
000036  9011              STR      r0,[sp,#0x44]
                  |L8.56|
;;;699    	{
;;;700    		// CAM_HSYNC is negated here
;;;701    		lineM0R3((uint32_t *)&CAM_PORT, CAM_RES3_WIDTH, memy+1, memc); 
000038  4eb5              LDR      r6,|L8.784|
00003a  9a14              LDR      r2,[sp,#0x50]
00003c  219f              MOVS     r1,#0x9f
00003e  0089              LSLS     r1,r1,#2
000040  4630              MOV      r0,r6
000042  1c52              ADDS     r2,r2,#1
000044  9b0a              LDR      r3,[sp,#0x28]
000046  f7fffffe          BL       lineM0R3
;;;702    		while(CAM_HSYNC());
00004a  1f34              SUBS     r4,r6,#4
                  |L8.76|
00004c  6860              LDR      r0,[r4,#4]
00004e  0580              LSLS     r0,r0,#22
000050  d4fc              BMI      |L8.76|
;;;703    		lineM0R3((uint32_t *)&CAM_PORT, CAM_RES3_WIDTH, memc+1, memy); 
000052  9a0a              LDR      r2,[sp,#0x28]
000054  219f              MOVS     r1,#0x9f
000056  0089              LSLS     r1,r1,#2
000058  4630              MOV      r0,r6
00005a  1c52              ADDS     r2,r2,#1
00005c  9b14              LDR      r3,[sp,#0x50]
00005e  f7fffffe          BL       lineM0R3
                  |L8.98|
;;;704    		while(CAM_HSYNC());
000062  6860              LDR      r0,[r4,#4]
000064  0580              LSLS     r0,r0,#22
000066  d4fc              BMI      |L8.98|
;;;705    		
;;;706    		if (scan)
000068  9811              LDR      r0,[sp,#0x44]
00006a  2800              CMP      r0,#0
00006c  d07e              BEQ      |L8.364|
;;;707    		{
;;;708    			setTimer(&timer);
00006e  a80e              ADD      r0,sp,#0x38
000070  f7fffffe          BL       setTimer
000074  48a7              LDR      r0,|L8.788|
000076  9c14              LDR      r4,[sp,#0x50]
000078  6801              LDR      r1,[r0,#0]  ; g_equeue
00007a  4608              MOV      r0,r1
00007c  3008              ADDS     r0,r0,#8
00007e  9012              STR      r0,[sp,#0x48]
000080  884d              LDRH     r5,[r1,#2]
000082  f7fffffe          BL       eq_free
000086  21ff              MOVS     r1,#0xff
000088  31a7              ADDS     r1,r1,#0xa7
00008a  4288              CMP      r0,r1
00008c  d206              BCS      |L8.156|
;;;709    			if (hScan(memy, memc)<0)
;;;710    			{
;;;711    				eq_enqueue(EQ_HSCAN_LINE_START);
00008e  20ff              MOVS     r0,#0xff
000090  0200              LSLS     r0,r0,#8
000092  f7fffffe          BL       eq_enqueue
;;;712    				scan = 0;
000096  2000              MOVS     r0,#0
000098  9011              STR      r0,[sp,#0x44]
00009a  e075              B        |L8.392|
                  |L8.156|
00009c  21ff              MOVS     r1,#0xff
00009e  006a              LSLS     r2,r5,#1
0000a0  9812              LDR      r0,[sp,#0x48]
0000a2  0209              LSLS     r1,r1,#8
0000a4  5281              STRH     r1,[r0,r2]
0000a6  1c6d              ADDS     r5,r5,#1
0000a8  2001              MOVS     r0,#1
0000aa  4e9b              LDR      r6,|L8.792|
0000ac  b2a9              UXTH     r1,r5
0000ae  4686              MOV      lr,r0
0000b0  42b1              CMP      r1,r6
0000b2  d100              BNE      |L8.182|
0000b4  2100              MOVS     r1,#0
                  |L8.182|
0000b6  4d95              LDR      r5,|L8.780|
0000b8  229f              MOVS     r2,#0x9f
0000ba  882b              LDRH     r3,[r5,#0]  ; g_dist
0000bc  0092              LSLS     r2,r2,#2
0000be  1ad2              SUBS     r2,r2,r3
0000c0  886b              LDRH     r3,[r5,#2]  ; g_thresh
0000c2  2000              MOVS     r0,#0
0000c4  469c              MOV      r12,r3
0000c6  88ab              LDRH     r3,[r5,#4]  ; g_hThresh
0000c8  9307              STR      r3,[sp,#0x1c]
0000ca  425b              RSBS     r3,r3,#0
0000cc  930d              STR      r3,[sp,#0x34]
0000ce  43c0              MVNS     r0,r0
0000d0  4663              MOV      r3,r12
0000d2  b212              SXTH     r2,r2
0000d4  425b              RSBS     r3,r3,#0
                  |L8.214|
0000d6  1c40              ADDS     r0,r0,#1
0000d8  b200              SXTH     r0,r0
0000da  4290              CMP      r0,r2
0000dc  da4d              BGE      |L8.378|
0000de  4d8b              LDR      r5,|L8.780|
0000e0  5c26              LDRB     r6,[r4,r0]
0000e2  882d              LDRH     r5,[r5,#0]  ; g_dist
0000e4  1945              ADDS     r5,r0,r5
0000e6  5d65              LDRB     r5,[r4,r5]
0000e8  1bad              SUBS     r5,r5,r6
0000ea  42ab              CMP      r3,r5
0000ec  da02              BGE      |L8.244|
0000ee  4565              CMP      r5,r12
0000f0  dbf1              BLT      |L8.214|
0000f2  e021              B        |L8.312|
                  |L8.244|
0000f4  2601              MOVS     r6,#1
0000f6  03f6              LSLS     r6,r6,#15
0000f8  4605              MOV      r5,r0
0000fa  4335              ORRS     r5,r5,r6
0000fc  004f              LSLS     r7,r1,#1
0000fe  9e12              LDR      r6,[sp,#0x48]
000100  1c49              ADDS     r1,r1,#1
000102  53f5              STRH     r5,[r6,r7]
000104  4675              MOV      r5,lr
000106  1c6d              ADDS     r5,r5,#1
000108  b2ad              UXTH     r5,r5
00010a  46ae              MOV      lr,r5
00010c  4d82              LDR      r5,|L8.792|
00010e  b289              UXTH     r1,r1
000110  42a9              CMP      r1,r5
000112  d100              BNE      |L8.278|
000114  2100              MOVS     r1,#0
                  |L8.278|
000116  4d7d              LDR      r5,|L8.780|
000118  1c80              ADDS     r0,r0,#2              ;691
00011a  882e              LDRH     r6,[r5,#0]            ;691
00011c  b200              SXTH     r0,r0                 ;691
                  |L8.286|
00011e  1c40              ADDS     r0,r0,#1              ;691
000120  b200              SXTH     r0,r0                 ;691
000122  4290              CMP      r0,r2                 ;691
000124  da29              BGE      |L8.378|
000126  1985              ADDS     r5,r0,r6              ;691
000128  5d65              LDRB     r5,[r4,r5]            ;691
00012a  5c27              LDRB     r7,[r4,r0]            ;691
00012c  1bed              SUBS     r5,r5,r7              ;691
00012e  9f0d              LDR      r7,[sp,#0x34]         ;691
000130  42af              CMP      r7,r5                 ;691
000132  dbd0              BLT      |L8.214|
000134  4565              CMP      r5,r12                ;691
000136  dbf2              BLT      |L8.286|
                  |L8.312|
000138  004e              LSLS     r6,r1,#1              ;691
00013a  9d12              LDR      r5,[sp,#0x48]         ;691
00013c  1c49              ADDS     r1,r1,#1              ;691
00013e  53a8              STRH     r0,[r5,r6]            ;691
000140  4675              MOV      r5,lr                 ;691
000142  1c6d              ADDS     r5,r5,#1              ;691
000144  b2ad              UXTH     r5,r5                 ;691
000146  46ae              MOV      lr,r5                 ;691
000148  4d73              LDR      r5,|L8.792|
00014a  b289              UXTH     r1,r1                 ;691
00014c  42a9              CMP      r1,r5                 ;691
00014e  d100              BNE      |L8.338|
000150  2100              MOVS     r1,#0                 ;691
                  |L8.338|
000152  4d6e              LDR      r5,|L8.780|
000154  1c80              ADDS     r0,r0,#2              ;691
000156  882e              LDRH     r6,[r5,#0]            ;691
000158  b200              SXTH     r0,r0                 ;691
                  |L8.346|
00015a  1c40              ADDS     r0,r0,#1              ;691
00015c  b200              SXTH     r0,r0                 ;691
00015e  4290              CMP      r0,r2                 ;691
000160  da0b              BGE      |L8.378|
000162  1985              ADDS     r5,r0,r6              ;691
000164  5d65              LDRB     r5,[r4,r5]            ;691
000166  5c27              LDRB     r7,[r4,r0]            ;691
000168  1bed              SUBS     r5,r5,r7              ;691
00016a  e000              B        |L8.366|
                  |L8.364|
00016c  e097              B        |L8.670|
                  |L8.366|
00016e  9f07              LDR      r7,[sp,#0x1c]         ;691
000170  42bd              CMP      r5,r7                 ;691
000172  dbb0              BLT      |L8.214|
000174  42ab              CMP      r3,r5                 ;691
000176  dbf0              BLT      |L8.346|
000178  e7bc              B        |L8.244|
                  |L8.378|
00017a  4866              LDR      r0,|L8.788|
00017c  6800              LDR      r0,[r0,#0]            ;691  ; g_equeue
00017e  8041              STRH     r1,[r0,#2]            ;691
000180  8882              LDRH     r2,[r0,#4]            ;691
000182  4671              MOV      r1,lr                 ;691
000184  1851              ADDS     r1,r2,r1              ;691
000186  8081              STRH     r1,[r0,#4]            ;691
                  |L8.392|
;;;713    			}
;;;714    			if (line>=(g_dist+5)>>2 && vScan(memy, memc)<0)
000188  4860              LDR      r0,|L8.780|
00018a  8800              LDRH     r0,[r0,#0]  ; g_dist
00018c  1d40              ADDS     r0,r0,#5
00018e  0881              LSRS     r1,r0,#2
000190  9809              LDR      r0,[sp,#0x24]
000192  4281              CMP      r1,r0
000194  d856              BHI      |L8.580|
000196  9814              LDR      r0,[sp,#0x50]
000198  9001              STR      r0,[sp,#4]
00019a  485e              LDR      r0,|L8.788|
00019c  6800              LDR      r0,[r0,#0]  ; g_equeue
00019e  4604              MOV      r4,r0
0001a0  3408              ADDS     r4,r4,#8
0001a2  8845              LDRH     r5,[r0,#2]
0001a4  f7fffffe          BL       eq_free
0001a8  21ff              MOVS     r1,#0xff
0001aa  31a7              ADDS     r1,r1,#0xa7
0001ac  4288              CMP      r0,r1
0001ae  485b              LDR      r0,|L8.796|
0001b0  d204              BCS      |L8.444|
;;;715    			{
;;;716    				eq_enqueue(EQ_VSCAN_LINE_START);
0001b2  f7fffffe          BL       eq_enqueue
;;;717    				scan = 0;
0001b6  2000              MOVS     r0,#0
0001b8  9011              STR      r0,[sp,#0x44]
0001ba  e043              B        |L8.580|
                  |L8.444|
0001bc  0069              LSLS     r1,r5,#1
0001be  5260              STRH     r0,[r4,r1]
0001c0  1c6d              ADDS     r5,r5,#1
0001c2  4f55              LDR      r7,|L8.792|
0001c4  b2a8              UXTH     r0,r5
0001c6  2201              MOVS     r2,#1
0001c8  42b8              CMP      r0,r7
0001ca  d100              BNE      |L8.462|
0001cc  2000              MOVS     r0,#0
                  |L8.462|
0001ce  4b4f              LDR      r3,|L8.780|
0001d0  269f              MOVS     r6,#0x9f
0001d2  881d              LDRH     r5,[r3,#0]  ; g_dist
0001d4  00b6              LSLS     r6,r6,#2
0001d6  1d6d              ADDS     r5,r5,#5
0001d8  08ad              LSRS     r5,r5,#2
0001da  4375              MULS     r5,r6,r5
0001dc  9e01              LDR      r6,[sp,#4]
0001de  885b              LDRH     r3,[r3,#2]  ; g_thresh
0001e0  2103              MOVS     r1,#3
0001e2  43c9              MVNS     r1,r1
0001e4  1b76              SUBS     r6,r6,r5
0001e6  469c              MOV      r12,r3
0001e8  425d              RSBS     r5,r3,#0
                  |L8.490|
0001ea  1d09              ADDS     r1,r1,#4
0001ec  239f              MOVS     r3,#0x9f
0001ee  b209              SXTH     r1,r1
0001f0  009b              LSLS     r3,r3,#2
0001f2  4299              CMP      r1,r3
0001f4  da20              BGE      |L8.568|
0001f6  9b01              LDR      r3,[sp,#4]
0001f8  5c77              LDRB     r7,[r6,r1]
0001fa  5c5b              LDRB     r3,[r3,r1]
0001fc  1bdb              SUBS     r3,r3,r7
0001fe  429d              CMP      r5,r3
000200  da0c              BGE      |L8.540|
000202  4563              CMP      r3,r12
000204  dbf1              BLT      |L8.490|
000206  0043              LSLS     r3,r0,#1
000208  52e1              STRH     r1,[r4,r3]
00020a  1c40              ADDS     r0,r0,#1
00020c  1c52              ADDS     r2,r2,#1
00020e  4b42              LDR      r3,|L8.792|
000210  b280              UXTH     r0,r0
000212  b292              UXTH     r2,r2
000214  4298              CMP      r0,r3
000216  d1e8              BNE      |L8.490|
                  |L8.536|
000218  2000              MOVS     r0,#0
00021a  e7e6              B        |L8.490|
                  |L8.540|
00021c  2701              MOVS     r7,#1
00021e  03ff              LSLS     r7,r7,#15
000220  460b              MOV      r3,r1
000222  433b              ORRS     r3,r3,r7
000224  0047              LSLS     r7,r0,#1
000226  53e3              STRH     r3,[r4,r7]
000228  1c40              ADDS     r0,r0,#1
00022a  1c52              ADDS     r2,r2,#1
00022c  4b3a              LDR      r3,|L8.792|
00022e  b280              UXTH     r0,r0
000230  b292              UXTH     r2,r2
000232  4298              CMP      r0,r3
000234  d1d9              BNE      |L8.490|
000236  e7ef              B        |L8.536|
                  |L8.568|
000238  4936              LDR      r1,|L8.788|
00023a  6809              LDR      r1,[r1,#0]  ; g_equeue
00023c  8048              STRH     r0,[r1,#2]
00023e  8888              LDRH     r0,[r1,#4]
000240  1880              ADDS     r0,r0,r2
000242  8088              STRH     r0,[r1,#4]
                  |L8.580|
;;;718    			}
;;;719    			time = maxScanTime - getTimer(timer);
000244  980e              LDR      r0,[sp,#0x38]
000246  f7fffffe          BL       getTimer
00024a  990f              LDR      r1,[sp,#0x3c]
00024c  1a08              SUBS     r0,r1,r0
;;;720    			
;;;721    			if (time<0)
00024e  d51e              BPL      |L8.654|
;;;722    			{
;;;723    				time += fourLineTime;
000250  990c              LDR      r1,[sp,#0x30]
000252  1844              ADDS     r4,r0,r1
;;;724    				setTimer(&timer);
000254  a80e              ADD      r0,sp,#0x38
000256  f7fffffe          BL       setTimer
;;;725    				line++, memy+=CAM_RES3_WIDTH;
00025a  9809              LDR      r0,[sp,#0x24]
00025c  219f              MOVS     r1,#0x9f
00025e  1c40              ADDS     r0,r0,#1
000260  9009              STR      r0,[sp,#0x24]
000262  9814              LDR      r0,[sp,#0x50]
000264  0089              LSLS     r1,r1,#2
000266  1840              ADDS     r0,r0,r1
;;;726    				eq_enqueue(EQ_HSCAN_LINE_START);
000268  9014              STR      r0,[sp,#0x50]
00026a  20ff              MOVS     r0,#0xff
00026c  0200              LSLS     r0,r0,#8
00026e  f7fffffe          BL       eq_enqueue
;;;727    				if (line>=(g_dist+5)>>2)
000272  4826              LDR      r0,|L8.780|
000274  8800              LDRH     r0,[r0,#0]  ; g_dist
000276  1d40              ADDS     r0,r0,#5
000278  0881              LSRS     r1,r0,#2
00027a  9809              LDR      r0,[sp,#0x24]
00027c  4281              CMP      r1,r0
00027e  d802              BHI      |L8.646|
;;;728    					eq_enqueue(EQ_VSCAN_LINE_START);
000280  4826              LDR      r0,|L8.796|
000282  f7fffffe          BL       eq_enqueue
                  |L8.646|
;;;729    				time -= getTimer(timer);
000286  980e              LDR      r0,[sp,#0x38]
000288  f7fffffe          BL       getTimer
00028c  1a20              SUBS     r0,r4,r0
                  |L8.654|
;;;730    			}
;;;731    			if (minTime>time)
;;;732    				minTime = time;
00028e  9905              LDR      r1,[sp,#0x14]
000290  4281              CMP      r1,r0
000292  dc36              BGT      |L8.770|
                  |L8.660|
;;;733    			if (time>0)
000294  2800              CMP      r0,#0
000296  dd1f              BLE      |L8.728|
;;;734    				delayus(time);
000298  f7fffffe          BL       delayus
00029c  e01c              B        |L8.728|
                  |L8.670|
;;;735    		}	
;;;736    		else
;;;737    		{
;;;738    			eq_enqueue(EQ_HSCAN_LINE_START);
00029e  20ff              MOVS     r0,#0xff
0002a0  0200              LSLS     r0,r0,#8
0002a2  f7fffffe          BL       eq_enqueue
;;;739    			if (line>=(g_dist+5)>>2)
0002a6  4819              LDR      r0,|L8.780|
0002a8  8800              LDRH     r0,[r0,#0]  ; g_dist
0002aa  1d40              ADDS     r0,r0,#5
0002ac  0881              LSRS     r1,r0,#2
0002ae  9809              LDR      r0,[sp,#0x24]
0002b0  4281              CMP      r1,r0
0002b2  d802              BHI      |L8.698|
;;;740    				eq_enqueue(EQ_VSCAN_LINE_START);
0002b4  4819              LDR      r0,|L8.796|
0002b6  f7fffffe          BL       eq_enqueue
                  |L8.698|
;;;741    			SM_OBJECT->currentLine = line;
0002ba  4919              LDR      r1,|L8.800|
0002bc  9809              LDR      r0,[sp,#0x24]
0002be  8048              STRH     r0,[r1,#2]
                  |L8.704|
;;;742    			
;;;743    			while(!CAM_HSYNC());
0002c0  6860              LDR      r0,[r4,#4]
0002c2  0580              LSLS     r0,r0,#22
0002c4  d5fc              BPL      |L8.704|
                  |L8.710|
;;;744    			while(CAM_HSYNC());
0002c6  6860              LDR      r0,[r4,#4]
0002c8  0580              LSLS     r0,r0,#22
0002ca  d4fc              BMI      |L8.710|
                  |L8.716|
;;;745    			while(!CAM_HSYNC());
0002cc  6860              LDR      r0,[r4,#4]
0002ce  0580              LSLS     r0,r0,#22
0002d0  d5fc              BPL      |L8.716|
                  |L8.722|
;;;746    			while(CAM_HSYNC());
0002d2  6860              LDR      r0,[r4,#4]
0002d4  0580              LSLS     r0,r0,#22
0002d6  d4fc              BMI      |L8.722|
                  |L8.728|
;;;747    		}
;;;748    		// update line count
;;;749    		SM_OBJECT->currentLine = line;	
0002d8  4911              LDR      r1,|L8.800|
0002da  9809              LDR      r0,[sp,#0x24]
0002dc  8048              STRH     r0,[r1,#2]
0002de  9809              LDR      r0,[sp,#0x24]
0002e0  219f              MOVS     r1,#0x9f
0002e2  1c40              ADDS     r0,r0,#1
0002e4  9009              STR      r0,[sp,#0x24]
0002e6  9814              LDR      r0,[sp,#0x50]
0002e8  0089              LSLS     r1,r1,#2
0002ea  1840              ADDS     r0,r0,r1
0002ec  9014              STR      r0,[sp,#0x50]
0002ee  9809              LDR      r0,[sp,#0x24]
0002f0  2868              CMP      r0,#0x68
0002f2  d200              BCS      |L8.758|
0002f4  e6a0              B        |L8.56|
                  |L8.758|
;;;750    	}
;;;751    	eq_enqueue(EQ_FRAME_END);
0002f6  480b              LDR      r0,|L8.804|
0002f8  f7fffffe          BL       eq_enqueue
;;;752    
;;;753    	return 0;
0002fc  2000              MOVS     r0,#0
;;;754    }
0002fe  b015              ADD      sp,sp,#0x54
000300  bdf0              POP      {r4-r7,pc}
                  |L8.770|
000302  9005              STR      r0,[sp,#0x14]         ;732
000304  e7c6              B        |L8.660|
;;;755    
                          ENDP

000306  0000              DCW      0x0000
                  |L8.776|
                          DCD      0x00010270
                  |L8.780|
                          DCD      ||.data||
                  |L8.784|
                          DCD      0x400f6104
                  |L8.788|
                          DCD      g_equeue
                  |L8.792|
                          DCD      0x00001dfc
                  |L8.796|
                          DCD      0x0000ff01
                  |L8.800|
                          DCD      0x2000fc00
                  |L8.804|
                          DCD      0x0000ffff

                          AREA ||i.hScan||, CODE, READONLY, ALIGN=2

                  hScan PROC
;;;473    
;;;474    int hScan(uint8_t *memy, uint8_t *memc)
000000  b5f0              PUSH     {r4-r7,lr}
;;;475    {
000002  4604              MOV      r4,r0
;;;476    	int16_t i;
;;;477    	int16_t end, diff;
;;;478    	ENQUEUE_START();
000004  483f              LDR      r0,|L9.260|
000006  b085              SUB      sp,sp,#0x14           ;475
000008  6801              LDR      r1,[r0,#0]  ; g_equeue
00000a  4608              MOV      r0,r1
00000c  3008              ADDS     r0,r0,#8
00000e  9001              STR      r0,[sp,#4]
000010  884d              LDRH     r5,[r1,#2]
;;;479    	
;;;480    	if (eq_free()<CAM_RES3_WIDTH/2+CAM_RES3_HEIGHT)
000012  f7fffffe          BL       eq_free
000016  4601              MOV      r1,r0
000018  22ff              MOVS     r2,#0xff
;;;481    		return -1;
00001a  2000              MOVS     r0,#0
00001c  32a7              ADDS     r2,r2,#0xa7           ;480
00001e  43c0              MVNS     r0,r0
000020  4291              CMP      r1,r2                 ;480
000022  d36c              BCC      |L9.254|
;;;482    	ENQUEUE(EQ_HSCAN_LINE_START);
000024  22ff              MOVS     r2,#0xff
000026  006b              LSLS     r3,r5,#1
000028  9901              LDR      r1,[sp,#4]
00002a  0212              LSLS     r2,r2,#8
00002c  52ca              STRH     r2,[r1,r3]
00002e  1c6d              ADDS     r5,r5,#1
000030  2201              MOVS     r2,#1
000032  4f35              LDR      r7,|L9.264|
000034  b2a9              UXTH     r1,r5
000036  9200              STR      r2,[sp,#0]
000038  42b9              CMP      r1,r7
00003a  d100              BNE      |L9.62|
00003c  2100              MOVS     r1,#0
                  |L9.62|
;;;483    
;;;484    	i = -1;
;;;485    	end = CAM_RES3_WIDTH - g_dist;
00003e  4d33              LDR      r5,|L9.268|
000040  239f              MOVS     r3,#0x9f
000042  882a              LDRH     r2,[r5,#0]  ; g_dist
;;;486    
;;;487    	// state 0, looking for either edge
;;;488    loop0:
;;;489    	i++;
;;;490    	if (i>=end)
;;;491    		goto loopex;
;;;492    	diff = memy[i+g_dist]-memy[i];
;;;493    	if (-g_thresh>=diff)
;;;494    		goto edge0;
;;;495    	if (diff>=g_thresh)
;;;496    		goto edge1;
;;;497    	goto loop0;
;;;498    
;;;499    	// found neg edge
;;;500    edge0:
;;;501    	ENQUEUE(i | EQ_NEGATIVE);
;;;502    	i+=2;
;;;503    
;;;504    	// state 1, looking for end of edge or pos edge
;;;505    loop1:
;;;506    	i++;
;;;507    	if (i>=end)
;;;508    		goto loopex;
;;;509    	diff = memy[i+g_dist]-memy[i];
;;;510    	if (-g_hThresh<diff)
;;;511    		goto loop0;
;;;512    	if (diff>=g_thresh)
000044  886e              LDRH     r6,[r5,#2]  ; g_thresh
;;;513    		goto edge1;
;;;514    	goto loop1;
;;;515    
;;;516    	// found pos edge
;;;517    edge1:
;;;518    	ENQUEUE(i);
;;;519    	i+=2;
;;;520    	
;;;521    	// state 2, looking for end of edge or neg edge
;;;522    loop2:
;;;523    	i++;
;;;524    	if (i>=end)
;;;525    		goto loopex;
;;;526    	diff = memy[i+g_dist]-memy[i];
;;;527    	if (diff<g_hThresh)
000046  88ad              LDRH     r5,[r5,#4]  ; g_hThresh
000048  009b              LSLS     r3,r3,#2              ;485
00004a  9502              STR      r5,[sp,#8]            ;510
00004c  1a9b              SUBS     r3,r3,r2              ;485
00004e  426d              RSBS     r5,r5,#0              ;510
000050  9503              STR      r5,[sp,#0xc]          ;493
000052  4275              RSBS     r5,r6,#0              ;493
000054  b21b              SXTH     r3,r3                 ;485
000056  46b6              MOV      lr,r6                 ;512
000058  46ac              MOV      r12,r5                ;493
                  |L9.90|
00005a  1c40              ADDS     r0,r0,#1              ;493
00005c  b200              SXTH     r0,r0                 ;489
00005e  4298              CMP      r0,r3                 ;490
000060  da45              BGE      |L9.238|
000062  1885              ADDS     r5,r0,r2              ;492
000064  5d65              LDRB     r5,[r4,r5]            ;492
000066  5c26              LDRB     r6,[r4,r0]            ;492
000068  1bad              SUBS     r5,r5,r6              ;492
00006a  45ac              CMP      r12,r5                ;493
00006c  da02              BGE      |L9.116|
00006e  4575              CMP      r5,lr                 ;495
000070  dbf3              BLT      |L9.90|
000072  e01f              B        |L9.180|
                  |L9.116|
000074  2601              MOVS     r6,#1                 ;501
000076  03f6              LSLS     r6,r6,#15             ;501
000078  4605              MOV      r5,r0                 ;501
00007a  4335              ORRS     r5,r5,r6              ;501
00007c  9e01              LDR      r6,[sp,#4]            ;501
00007e  004f              LSLS     r7,r1,#1              ;501
000080  53f5              STRH     r5,[r6,r7]            ;501
000082  9d00              LDR      r5,[sp,#0]            ;501
000084  1c49              ADDS     r1,r1,#1              ;501
000086  1c6d              ADDS     r5,r5,#1              ;501
000088  b2ad              UXTH     r5,r5                 ;501
00008a  9500              STR      r5,[sp,#0]            ;501
00008c  4d1e              LDR      r5,|L9.264|
00008e  b289              UXTH     r1,r1                 ;501
000090  42a9              CMP      r1,r5                 ;501
000092  d100              BNE      |L9.150|
000094  2100              MOVS     r1,#0                 ;501
                  |L9.150|
000096  1c80              ADDS     r0,r0,#2              ;501
000098  b200              SXTH     r0,r0                 ;502
                  |L9.154|
00009a  1c40              ADDS     r0,r0,#1              ;502
00009c  b200              SXTH     r0,r0                 ;506
00009e  4298              CMP      r0,r3                 ;507
0000a0  da25              BGE      |L9.238|
0000a2  1885              ADDS     r5,r0,r2              ;509
0000a4  5d65              LDRB     r5,[r4,r5]            ;509
0000a6  5c26              LDRB     r6,[r4,r0]            ;509
0000a8  1bad              SUBS     r5,r5,r6              ;509
0000aa  9e03              LDR      r6,[sp,#0xc]          ;510
0000ac  42ae              CMP      r6,r5                 ;510
0000ae  dbd4              BLT      |L9.90|
0000b0  4575              CMP      r5,lr                 ;512
0000b2  dbf2              BLT      |L9.154|
                  |L9.180|
0000b4  9d01              LDR      r5,[sp,#4]            ;518
0000b6  004e              LSLS     r6,r1,#1              ;518
0000b8  53a8              STRH     r0,[r5,r6]            ;518
0000ba  9d00              LDR      r5,[sp,#0]            ;518
0000bc  1c49              ADDS     r1,r1,#1              ;518
0000be  1c6d              ADDS     r5,r5,#1              ;518
0000c0  b2ad              UXTH     r5,r5                 ;518
0000c2  9500              STR      r5,[sp,#0]            ;518
0000c4  4d10              LDR      r5,|L9.264|
0000c6  b289              UXTH     r1,r1                 ;518
0000c8  42a9              CMP      r1,r5                 ;518
0000ca  d100              BNE      |L9.206|
0000cc  2100              MOVS     r1,#0                 ;518
                  |L9.206|
0000ce  1c80              ADDS     r0,r0,#2              ;518
0000d0  b200              SXTH     r0,r0                 ;519
                  |L9.210|
0000d2  1c40              ADDS     r0,r0,#1              ;519
0000d4  b200              SXTH     r0,r0                 ;523
0000d6  4298              CMP      r0,r3                 ;524
0000d8  da09              BGE      |L9.238|
0000da  1885              ADDS     r5,r0,r2              ;526
0000dc  5d65              LDRB     r5,[r4,r5]            ;526
0000de  5c26              LDRB     r6,[r4,r0]            ;526
0000e0  1bad              SUBS     r5,r5,r6              ;526
0000e2  9e02              LDR      r6,[sp,#8]
0000e4  42b5              CMP      r5,r6
0000e6  dbb8              BLT      |L9.90|
;;;528    		goto loop0;
;;;529    	if (-g_thresh>=diff)	
0000e8  45ac              CMP      r12,r5
0000ea  dbf2              BLT      |L9.210|
0000ec  e7c2              B        |L9.116|
                  |L9.238|
;;;530    		goto edge0;
;;;531    	goto loop2;
;;;532    
;;;533    loopex:
;;;534    	ENQUEUE_END();
0000ee  4805              LDR      r0,|L9.260|
0000f0  6800              LDR      r0,[r0,#0]  ; g_equeue
0000f2  8041              STRH     r1,[r0,#2]
0000f4  8882              LDRH     r2,[r0,#4]
0000f6  9900              LDR      r1,[sp,#0]
0000f8  1851              ADDS     r1,r2,r1
0000fa  8081              STRH     r1,[r0,#4]
;;;535    	return 0;
0000fc  2000              MOVS     r0,#0
                  |L9.254|
;;;536    	
;;;537    }
0000fe  b005              ADD      sp,sp,#0x14
000100  bdf0              POP      {r4-r7,pc}
;;;538    
                          ENDP

000102  0000              DCW      0x0000
                  |L9.260|
                          DCD      g_equeue
                  |L9.264|
                          DCD      0x00001dfc
                  |L9.268|
                          DCD      ||.data||

                          AREA ||i.setEdgeParams||, CODE, READONLY, ALIGN=2

                  setEdgeParams PROC
;;;805    
;;;806    int32_t setEdgeParams(uint16_t *dist, uint16_t *thresh, uint16_t *hThresh)
000000  8803              LDRH     r3,[r0,#0]
;;;807    {
;;;808    	g_dist = *dist;
000002  4804              LDR      r0,|L10.20|
000004  8003              STRH     r3,[r0,#0]
;;;809    	g_thresh = *thresh;
000006  8809              LDRH     r1,[r1,#0]
000008  8041              STRH     r1,[r0,#2]
;;;810    	g_hThresh = *hThresh;
00000a  8811              LDRH     r1,[r2,#0]
00000c  8081              STRH     r1,[r0,#4]
;;;811    	
;;;812    	return 0;
00000e  2000              MOVS     r0,#0
;;;813    }
000010  4770              BX       lr
;;;814    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      ||.data||

                          AREA ||i.skipLine||, CODE, READONLY, ALIGN=2

                  skipLine PROC
;;;579    
;;;580    void skipLine()
000000  4803              LDR      r0,|L11.16|
                  |L11.2|
;;;581    {
;;;582    	while(!CAM_HSYNC());
000002  6841              LDR      r1,[r0,#4]
000004  0589              LSLS     r1,r1,#22
000006  d5fc              BPL      |L11.2|
                  |L11.8|
;;;583    	while(CAM_HSYNC());
000008  6841              LDR      r1,[r0,#4]
00000a  0589              LSLS     r1,r1,#22
00000c  d4fc              BMI      |L11.8|
;;;584    }
00000e  4770              BX       lr
;;;585    
                          ENDP

                  |L11.16|
                          DCD      0x400f6100

                          AREA ||i.skipLines||, CODE, READONLY, ALIGN=2

                  skipLines PROC
;;;586    
;;;587    void skipLines(uint32_t lines)
000000  b5f8              PUSH     {r3-r7,lr}
;;;588    {
000002  4605              MOV      r5,r0
;;;589    	uint32_t line;
;;;590    	uint32_t timer = 0;
000004  2000              MOVS     r0,#0
;;;591    	
;;;592    	// wait for remainder of frame to pass
;;;593    	while(CAM_VSYNC())
000006  4c1a              LDR      r4,|L12.112|
000008  9000              STR      r0,[sp,#0]
00000a  6860              LDR      r0,[r4,#4]
00000c  04c0              LSLS     r0,r0,#19
00000e  d505              BPL      |L12.28|
                  |L12.16|
;;;594    		setTimer(&timer); 
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       setTimer
000016  6860              LDR      r0,[r4,#4]
000018  04c0              LSLS     r0,r0,#19
00001a  d4f9              BMI      |L12.16|
                  |L12.28|
;;;595    	// vsync asserted
;;;596    	while(!CAM_VSYNC());
00001c  6860              LDR      r0,[r4,#4]
00001e  04c0              LSLS     r0,r0,#19
000020  d5fc              BPL      |L12.28|
;;;597    	// write blanking time if we witnessed the whole thing
;;;598    	if (timer)
000022  9800              LDR      r0,[sp,#0]
;;;599    		SM_OBJECT->blankTime = getTimer(timer);
000024  4f13              LDR      r7,|L12.116|
000026  2800              CMP      r0,#0                 ;598
000028  d002              BEQ      |L12.48|
00002a  f7fffffe          BL       getTimer
00002e  80f8              STRH     r0,[r7,#6]
                  |L12.48|
;;;600    
;;;601    	// write frame period
;;;602    	timer = getTimer(g_timer);
000030  4e11              LDR      r6,|L12.120|
000032  6970              LDR      r0,[r6,#0x14]  ; g_timer
000034  f7fffffe          BL       getTimer
;;;603    	timer >>= 4; // shift by 4 to get larger periods in there.  So the period is in 16usec units.
000038  0900              LSRS     r0,r0,#4
;;;604    	if (timer>=0xffff)
;;;605    		timer = 0xffff;
00003a  4910              LDR      r1,|L12.124|
00003c  9000              STR      r0,[sp,#0]
00003e  4288              CMP      r0,r1
000040  d812              BHI      |L12.104|
                  |L12.66|
;;;606    	SM_OBJECT->frameTime = timer; 
000042  80b8              STRH     r0,[r7,#4]
;;;607    	setTimer(&g_timer);
000044  480e              LDR      r0,|L12.128|
000046  f7fffffe          BL       setTimer
;;;608    	
;;;609    	// skip lines
;;;610    	for (line=0; line<lines; line++)
00004a  2200              MOVS     r2,#0
00004c  2d00              CMP      r5,#0
00004e  d908              BLS      |L12.98|
                  |L12.80|
000050  6860              LDR      r0,[r4,#4]
000052  0580              LSLS     r0,r0,#22
000054  d5fc              BPL      |L12.80|
                  |L12.86|
000056  6861              LDR      r1,[r4,#4]
000058  0588              LSLS     r0,r1,#22
00005a  d4fc              BMI      |L12.86|
00005c  1c52              ADDS     r2,r2,#1
;;;611    		skipLine();
00005e  42aa              CMP      r2,r5
000060  d3f6              BCC      |L12.80|
                  |L12.98|
;;;612    	
;;;613    	// reset vsync so we don't accidentally set timer early
;;;614    	g_vprev = 1;
000062  2001              MOVS     r0,#1
000064  61b0              STR      r0,[r6,#0x18]  ; g_vprev
;;;615    }
000066  bdf8              POP      {r3-r7,pc}
                  |L12.104|
000068  4804              LDR      r0,|L12.124|
00006a  9000              STR      r0,[sp,#0]            ;605
00006c  e7e9              B        |L12.66|
;;;616    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
                          DCD      0x400f6100
                  |L12.116|
                          DCD      0x2000fc00
                  |L12.120|
                          DCD      ||.data||
                  |L12.124|
                          DCD      0x0000ffff
                  |L12.128|
                          DCD      ||.data||+0x14

                          AREA ||i.trackVsync||, CODE, READONLY, ALIGN=2

                  trackVsync PROC
;;;618    // value for the frame period. 
;;;619    void trackVsync()
000000  b570              PUSH     {r4-r6,lr}
;;;620    {
;;;621    	uint32_t v;
;;;622    	
;;;623    	v = CAM_VSYNC();
000002  4807              LDR      r0,|L13.32|
000004  6844              LDR      r4,[r0,#4]
000006  2001              MOVS     r0,#1
000008  0300              LSLS     r0,r0,#12
;;;624    	if (v && !g_vprev)
00000a  4d06              LDR      r5,|L13.36|
00000c  4004              ANDS     r4,r4,r0              ;623
00000e  d005              BEQ      |L13.28|
000010  69a8              LDR      r0,[r5,#0x18]  ; g_vprev
000012  2800              CMP      r0,#0
000014  d102              BNE      |L13.28|
;;;625    		setTimer(&g_timer);
000016  4804              LDR      r0,|L13.40|
000018  f7fffffe          BL       setTimer
                  |L13.28|
;;;626    	g_vprev = v;
00001c  61ac              STR      r4,[r5,#0x18]  ; g_vprev
;;;627    }		
00001e  bd70              POP      {r4-r6,pc}
;;;628    
                          ENDP

                  |L13.32|
                          DCD      0x400f6100
                  |L13.36|
                          DCD      ||.data||
                  |L13.40|
                          DCD      ||.data||+0x14

                          AREA ||i.vScan||, CODE, READONLY, ALIGN=2

                  vScan PROC
;;;539    
;;;540    int vScan(uint8_t *memy, uint8_t *memc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;541    {
000002  4605              MOV      r5,r0
;;;542    	int16_t i;
;;;543    	int16_t diff;
;;;544    	uint8_t *line0;
;;;545    	ENQUEUE_START();
000004  482b              LDR      r0,|L14.180|
000006  6800              LDR      r0,[r0,#0]  ; g_equeue
000008  4604              MOV      r4,r0
00000a  3408              ADDS     r4,r4,#8
00000c  8846              LDRH     r6,[r0,#2]
;;;546    	
;;;547    	if (eq_free()<CAM_RES3_WIDTH/2+CAM_RES3_HEIGHT)
00000e  f7fffffe          BL       eq_free
000012  21ff              MOVS     r1,#0xff
000014  31a7              ADDS     r1,r1,#0xa7
000016  4288              CMP      r0,r1
000018  d202              BCS      |L14.32|
;;;548    		return -1;
00001a  2000              MOVS     r0,#0
00001c  43c0              MVNS     r0,r0
;;;549    	ENQUEUE(EQ_VSCAN_LINE_START);
;;;550    
;;;551    	i = -4;
;;;552    	line0 = memy - ((g_dist+5)>>2)*CAM_RES3_WIDTH;
;;;553    
;;;554    loop:
;;;555    	i+=4;
;;;556    	if (i>=CAM_RES3_WIDTH)
;;;557    		goto loopex;
;;;558    	diff = memy[i]-line0[i];
;;;559    	if (-g_thresh>=diff)
;;;560    		goto edge0;
;;;561    	if (diff>=g_thresh)
;;;562    		goto edge1;
;;;563    
;;;564    	goto loop;
;;;565    
;;;566    edge0:
;;;567    	ENQUEUE(i | EQ_NEGATIVE);
;;;568    	goto loop;
;;;569    
;;;570    edge1:
;;;571      ENQUEUE(i);
;;;572    	goto loop;
;;;573    
;;;574    loopex:
;;;575    	ENQUEUE_END();
;;;576    	return 0;
;;;577    }
00001e  bdf8              POP      {r3-r7,pc}
                  |L14.32|
000020  20fe              MOVS     r0,#0xfe              ;549
000022  0071              LSLS     r1,r6,#1              ;549
000024  43c0              MVNS     r0,r0                 ;549
000026  5260              STRH     r0,[r4,r1]            ;549
000028  1c76              ADDS     r6,r6,#1              ;549
00002a  4b23              LDR      r3,|L14.184|
00002c  b2b1              UXTH     r1,r6                 ;549
00002e  2001              MOVS     r0,#1                 ;549
000030  4299              CMP      r1,r3                 ;549
000032  d100              BNE      |L14.54|
000034  2100              MOVS     r1,#0                 ;549
                  |L14.54|
000036  4e21              LDR      r6,|L14.188|
000038  279f              MOVS     r7,#0x9f              ;552
00003a  8836              LDRH     r6,[r6,#0]            ;552  ; g_dist
00003c  00bf              LSLS     r7,r7,#2              ;552
00003e  1d76              ADDS     r6,r6,#5              ;552
000040  08b6              LSRS     r6,r6,#2              ;552
000042  437e              MULS     r6,r7,r6              ;552
000044  1bae              SUBS     r6,r5,r6              ;552
000046  46b4              MOV      r12,r6                ;552
000048  4e1c              LDR      r6,|L14.188|
00004a  2203              MOVS     r2,#3                 ;551
00004c  8876              LDRH     r6,[r6,#2]            ;559  ; g_thresh
00004e  43d2              MVNS     r2,r2                 ;551
000050  46b6              MOV      lr,r6                 ;559
000052  4277              RSBS     r7,r6,#0              ;559
                  |L14.84|
000054  1d12              ADDS     r2,r2,#4              ;559
000056  269f              MOVS     r6,#0x9f              ;556
000058  b212              SXTH     r2,r2                 ;555
00005a  00b6              LSLS     r6,r6,#2              ;556
00005c  42b2              CMP      r2,r6                 ;556
00005e  da20              BGE      |L14.162|
000060  4663              MOV      r3,r12                ;558
000062  5cae              LDRB     r6,[r5,r2]            ;558
000064  5c9b              LDRB     r3,[r3,r2]            ;558
000066  1af6              SUBS     r6,r6,r3              ;558
000068  42b7              CMP      r7,r6                 ;559
00006a  da0c              BGE      |L14.134|
00006c  4576              CMP      r6,lr                 ;561
00006e  dbf1              BLT      |L14.84|
000070  004e              LSLS     r6,r1,#1              ;571
000072  53a2              STRH     r2,[r4,r6]            ;571
000074  1c49              ADDS     r1,r1,#1              ;571
000076  1c40              ADDS     r0,r0,#1              ;571
000078  4e0f              LDR      r6,|L14.184|
00007a  b289              UXTH     r1,r1                 ;571
00007c  b280              UXTH     r0,r0                 ;571
00007e  42b1              CMP      r1,r6                 ;571
000080  d1e8              BNE      |L14.84|
                  |L14.130|
000082  2100              MOVS     r1,#0                 ;571
000084  e7e6              B        |L14.84|
                  |L14.134|
000086  2301              MOVS     r3,#1                 ;567
000088  03db              LSLS     r3,r3,#15             ;567
00008a  4616              MOV      r6,r2                 ;567
00008c  431e              ORRS     r6,r6,r3              ;567
00008e  004b              LSLS     r3,r1,#1              ;567
000090  52e6              STRH     r6,[r4,r3]            ;567
000092  1c49              ADDS     r1,r1,#1              ;567
000094  1c40              ADDS     r0,r0,#1              ;567
000096  4e08              LDR      r6,|L14.184|
000098  b289              UXTH     r1,r1                 ;567
00009a  b280              UXTH     r0,r0                 ;567
00009c  42b1              CMP      r1,r6                 ;567
00009e  d1d9              BNE      |L14.84|
0000a0  e7ef              B        |L14.130|
                  |L14.162|
0000a2  4a04              LDR      r2,|L14.180|
0000a4  6812              LDR      r2,[r2,#0]            ;575  ; g_equeue
0000a6  8051              STRH     r1,[r2,#2]            ;575
0000a8  8891              LDRH     r1,[r2,#4]            ;575
0000aa  1808              ADDS     r0,r1,r0              ;575
0000ac  8090              STRH     r0,[r2,#4]            ;575
0000ae  2000              MOVS     r0,#0                 ;576
0000b0  bdf8              POP      {r3-r7,pc}
;;;578    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L14.180|
                          DCD      g_equeue
                  |L14.184|
                          DCD      0x00001dfc
                  |L14.188|
                          DCD      ||.data||

                          AREA ||i.vsync||, CODE, READONLY, ALIGN=2

                  vsync PROC
;;;34     
;;;35     void vsync()
000000  4808              LDR      r0,|L15.36|
                  |L15.2|
;;;36     {
;;;37     	int v = 0, h = 0;
;;;38     
;;;39     	while(1)
;;;40     	{
;;;41     		h = 0;
;;;42     		while(CAM_VSYNC()!=0);
000002  6841              LDR      r1,[r0,#4]
000004  04c9              LSLS     r1,r1,#19
000006  d4fc              BMI      |L15.2|
                  |L15.8|
;;;43     		while(1) // vsync low
;;;44     		{
;;;45     			while(CAM_HSYNC()==0)
000008  6841              LDR      r1,[r0,#4]
00000a  0589              LSLS     r1,r1,#22
00000c  d405              BMI      |L15.26|
                  |L15.14|
;;;46     			{
;;;47     				if (CAM_VSYNC()!=0)
00000e  6841              LDR      r1,[r0,#4]
000010  04c9              LSLS     r1,r1,#19
000012  d4f6              BMI      |L15.2|
000014  6841              LDR      r1,[r0,#4]            ;45
000016  0589              LSLS     r1,r1,#22             ;45
000018  d5f9              BPL      |L15.14|
                  |L15.26|
;;;48     					goto end;
;;;49     			}
;;;50     			while(CAM_HSYNC()!=0); //grab data
00001a  6841              LDR      r1,[r0,#4]
00001c  0589              LSLS     r1,r1,#22
00001e  d4fc              BMI      |L15.26|
000020  e7f2              B        |L15.8|
;;;51     			h++;
;;;52     		}
;;;53     end:
;;;54     		v++;
;;;55     		//if (v%25==0)
;;;56     			//printf("%d %d\n", v, h);
;;;57     	}
;;;58     }
;;;59     
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      0x400f6100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_lineStore
                          %        1928

                          AREA ||.data||, DATA, ALIGN=2

                  g_dist
000000  0004              DCW      0x0004
                  g_thresh
000002  0014              DCW      0x0014
                  g_hThresh
000004  000c              DCW      0x000c
                  g_hblank
000006  0000              DCB      0x00,0x00
                  g_hactive
000008  0000              DCB      0x00,0x00
                  g_vblank
00000a  0000              DCB      0x00,0x00
                  g_vactive
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  vindex
                          DCD      0x00000000
                  g_timer
                          DCD      0x00000000
                  g_vprev
                          DCD      0x00000000
                  vda
                          DCD      vdelay1
                          DCD      vdelay2
                          DCD      vdelay3
                          DCD      vdelay4

;*** Start embedded assembler ***

#line 1 "src\\frame_m0.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_frame_m0_c_vsync____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___10_frame_m0_c_vsync____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_frame_m0_c_vsync____REVSH|
#line 144
|__asm___10_frame_m0_c_vsync____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |sync|
#line 61 "src\\frame_m0.c"
|sync| PROC
#line 62

 PRESERVE8
 PUSH {r4-r6}
start
 LDR r4, [r0] 
 
 LDR r5, [r0] 
 
 BICS r4, r5
 LDR r5, [r0] 
 
 BICS r4, r5
 NOP
 LDR r5, [r0] 
 
 LDR r6, [r0] 
 
 ANDS r4, r5 
 LDR r5, [r0] 
 
 BICS r4, r6 
 BICS r4, r5 
 LDR r5, [r0] 
 
 ANDS r4, r5 
 TST r4, r1
 BEQ start
 

 
 MOVS r5, #0x1
 LSLS r5, #9

 NOP 
 NOP 
#line 101

 NOP 
 NOP 
 NOP 


 
loop
 LDR r4, [r0] 
 
 TST r4, r5 
 BEQ loop 

 NOP 

 
 LDR r4, [r0] 
 
 TST r4, r1
 BNE skip
 NOP
 NOP
 NOP
 NOP
 NOP
skip

#line 131

 NOP
 NOP

 NOP
 NOP
 NOP 
 NOP 
 
 

 POP {r4-r6}

 BX lr

 NOP 
 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM0R1|
#line 150
|lineM0R1| PROC
#line 151

 PRESERVE8
 IMPORT callSync


 PUSH {r4-r5, lr}
#line 159


 
 ADDS r3, r1

 PUSH {r0-r3} 
 BL.W callSync 
 POP {r0-r3} 

 
 NOP 

 
dest220
 SUBS r2, #0x1 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 BGE dest220 


 LDRB r2, [r0] 
 STRB r2, [r1, #0x00]
 NOP
 NOP
 
 LDRB r2, [r0] 
 STRB r2, [r1, #0x01]
 NOP
 NOP

loop110
 LDRB r2, [r0] 
 STRB r2, [r1, #0x2]

 ADDS r1, #0x03
 NOP

 LDRB r2, [r0] 
 STRB r2, [r1, #0x0]

 CMP r1, r3

 LDRB r2, [r0] 
 STRB r2, [r1, #0x1] 

 BLT loop110

 
dest130
 LDR r5, [r0] 
 TST r5, r4 
 BNE dest130 


 POP {r4-r5, pc}
#line 222

 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM0R2|
#line 226
|lineM0R2| PROC
#line 227

 PRESERVE8
 IMPORT callSync


 PUSH {r4-r5, lr}
#line 235


 
 LSLS r3, #1
 ADDS r3, r1

 PUSH {r0-r3} 
 BL.W callSync 
 POP {r0-r3} 

 
dest8
 SUBS r2, #0x1 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 NOP 
 BGE dest8 

 LDRB r2, [r0]
 
 NOP
 NOP 
 NOP
 NOP

 LDRB r4, [r0]
 
 NOP
 NOP 
 NOP
 NOP


loop3
 LDRB r5, [r0] 
 
 ADDS r5, r2
 NOP
 STRH r5, [r1, #0x00] 
 

 LDRB r5, [r0]
 
 ADDS r5, r4
 NOP
 STRH r5, [r1, #0x02] 
 

 LDRB r2, [r0]
 
 ADDS r1, #0x04 
 NOP 
 NOP
 NOP

 LDRB r4, [r0]
 
 CMP r1, r3
 BLT loop3


 POP {r4-r5, pc}
#line 304


	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |mergeM0R2|
#line 308
|mergeM0R2| PROC
#line 309

 PRESERVE8

 PUSH {r4-r7}

 ADDS r7, r2, r3
 MOVS r4, #0x00

loop5 
 LDR r5, [r0, r4]
 
 LDR r6, [r1, r4]
 
 ADDS r5, r6
 LSRS r5, #0x02
 STRB r5, [r2]
 
 LSRS r5, #0x10
 STRB r5, [r2, #0x01]
 
 ADDS r2, #0x02
 ADDS r4, #0x04
 CMP r2, r7
 BLT loop5

 POP {r4-r7}

 BX lr


 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |lineM0R3|
#line 342
|lineM0R3| PROC
#line 343

 PRESERVE8
 IMPORT callSync


 PUSH {r4-r5, lr}
#line 351

 
 
 
 
 
 
 
 PUSH {r0-r3} 
 BL.W callSync 
 POP {r0-r3} 

 
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP

 LDRB r4, [r0] 
 
 ADDS r1, r2 
 NOP
 NOP
 NOP
 
loop_bg
 LDRB r5, [r0] 
 
 STRB r4, [r3, #0]
 
 STRB r5, [r2, #0]
 
 LDRB r4, [r0] 
 
 STRB r4, [r3, #2]
 
 CMP r2, r1
 BGE out_bg
 LDRB r4, [r0] 
 
 STRB r4, [r2, #2]
 
 ADDS r2, #4
 ADDS r3, #4
 LDRB r4, [r0] 
 
 NOP 
 B loop_bg

out_bg


 POP {r4-r5, pc}
#line 412


	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vdelay1|
#line 418
|vdelay1| PROC
#line 419

 PRESERVE8
 NOP
 BX lr
 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vdelay2|
#line 425
|vdelay2| PROC
#line 426

 PRESERVE8
 NOP
 NOP
 BX lr
 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vdelay3|
#line 434
|vdelay3| PROC
#line 435

 PRESERVE8
 NOP
 NOP
 NOP
 BX lr
 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vdelay4|
#line 444
|vdelay4| PROC
#line 445

 PRESERVE8
 NOP
 NOP
 NOP
 NOP
 BX lr
 
	ENDP

;*** End   embedded assembler ***
