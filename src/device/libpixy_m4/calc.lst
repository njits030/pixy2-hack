L 1 "..\..\common\src\calc.cpp"
N//
N// begin license header
N//
N// This file is part of Pixy CMUcam5 or "Pixy" for short
N//
N// All Pixy source code is provided under the terms of the
N// GNU General Public License v2 (http://www.gnu.org/licenses/gpl-2.0.html).
N// Those wishing to use Pixy source code, software and/or
N// technologies under different licensing terms should contact us at
N// cmucam@cs.cmu.edu. Such licensing terms are available for
N// all portions of the Pixy codebase presented here.
N//
N// end license header
N//
N
N#include "calc.h"
L 1 "..\..\common\inc\calc.h" 1
N//
N// begin license header
N//
N// This file is part of Pixy CMUcam5 or "Pixy" for short
N//
N// All Pixy source code is provided under the terms of the
N// GNU General Public License v2 (http://www.gnu.org/licenses/gpl-2.0.html).
N// Those wishing to use Pixy source code, software and/or
N// technologies under different licensing terms should contact us at
N// cmucam@cs.cmu.edu. Such licensing terms are available for
N// all portions of the Pixy codebase presented here.
N//
N// end license header
N//
N
N#ifndef CALC_H
N#define CALC_H
N#include <inttypes.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\inttypes.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Based on WG14/N843 (C9X) Committee Draft August 3, 1998 */
N
N#ifndef __inttypes_h
N#define __inttypes_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.2.1 */
S
S    /* minimum values of exact-width signed integer types */
S#define INT8_MIN                   -128
S#define INT16_MIN                -32768
S#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
S#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
S
S    /* maximum values of exact-width signed integer types */
S#define INT8_MAX                    127
S#define INT16_MAX                 32767
S#define INT32_MAX            2147483647
S#define INT64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of exact-width unsigned integer types */
S#define UINT8_MAX                   255
S#define UINT16_MAX                65535
S#define UINT32_MAX           4294967295u
S#define UINT64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.2 */
S
S    /* minimum values of minimum-width signed integer types */
S#define INT_LEAST8_MIN                   -128
S#define INT_LEAST16_MIN                -32768
S#define INT_LEAST32_MIN          (~0x7fffffff)
S#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of minimum-width signed integer types */
S#define INT_LEAST8_MAX                    127
S#define INT_LEAST16_MAX                 32767
S#define INT_LEAST32_MAX            2147483647
S#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of minimum-width unsigned integer types */
S#define UINT_LEAST8_MAX                   255
S#define UINT_LEAST16_MAX                65535
S#define UINT_LEAST32_MAX           4294967295u
S#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.3 */
S
S    /* minimum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MIN           (~0x7fffffff)
S#define INT_FAST16_MIN          (~0x7fffffff)
S#define INT_FAST32_MIN          (~0x7fffffff)
S#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MAX             2147483647
S#define INT_FAST16_MAX            2147483647
S#define INT_FAST32_MAX            2147483647
S#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of fastest minimum-width unsigned integer types */
S#define UINT_FAST8_MAX            4294967295u
S#define UINT_FAST16_MAX           4294967295u
S#define UINT_FAST32_MAX           4294967295u
S#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.4 */
S
S    /* minimum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MIN INT64_MIN
S#else
S#define INTPTR_MIN INT32_MIN
S#endif
S
S    /* maximum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MAX INT64_MAX
S#else
S#define INTPTR_MAX INT32_MAX
S#endif
S
S    /* maximum value of pointer-holding unsigned integer type */
S#if __sizeof_ptr == 8
S#define UINTPTR_MAX UINT64_MAX
S#else
S#define UINTPTR_MAX UINT32_MAX
S#endif
S
S    /* 7.18.2.5 */
S
S    /* minimum value of greatest-width signed integer type */
S#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
S
S    /* maximum value of greatest-width signed integer type */
S#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
S
S    /* maximum value of greatest-width unsigned integer type */
S#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
S
S    /* 7.18.3 */
S
S    /* limits of ptrdiff_t */
S#if __sizeof_ptr == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
S#else
S#define PTRDIFF_MIN INT32_MIN
S#define PTRDIFF_MAX INT32_MAX
S#endif
S
S    /* limits of sig_atomic_t */
S#define SIG_ATOMIC_MIN (~0x7fffffff)
S#define SIG_ATOMIC_MAX   2147483647
S
S    /* limit of size_t */
S#if __sizeof_ptr == 8
S#define SIZE_MAX UINT64_MAX
S#else
S#define SIZE_MAX UINT32_MAX
S#endif
S
S    /* limits of wchar_t */
S    /* NB we have to undef and redef because they're defined in both
S     * stdint.h and wchar.h */
S#undef WCHAR_MIN
S#undef WCHAR_MAX
S
S#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
S#else
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   65535
S#endif
S
S    /* limits of wint_t */
S#define WINT_MIN (~0x7fffffff)
S#define WINT_MAX 2147483647
S
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.4.1 macros for minimum-width integer constants */
S#define INT8_C(x)   (x)
S#define INT16_C(x)  (x)
S#define INT32_C(x)  (x)
S#define INT64_C(x)  __INT64_C(x)
S
S#define UINT8_C(x)  (x ## u)
S#define UINT16_C(x) (x ## u)
S#define UINT32_C(x) (x ## u)
S#define UINT64_C(x) __UINT64_C(x)
S
S    /* 7.18.4.2 macros for greatest-width integer constants */
S#define INTMAX_C(x)  __ESCAPE__(x ## ll)
S#define UINTMAX_C(x) __ESCAPE__(x ## ull)
S
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDINT_NO_EXPORTS
N      using ::std::int8_t;
N      using ::std::int16_t;
N      using ::std::int32_t;
N      using ::std::int64_t;
N      using ::std::uint8_t;
N      using ::std::uint16_t;
N      using ::std::uint32_t;
N      using ::std::uint64_t;
N      using ::std::int_least8_t;
N      using ::std::int_least16_t;
N      using ::std::int_least32_t;
N      using ::std::int_least64_t;
N      using ::std::uint_least8_t;
N      using ::std::uint_least16_t;
N      using ::std::uint_least32_t;
N      using ::std::uint_least64_t;
N      using ::std::int_fast8_t;
N      using ::std::int_fast16_t;
N      using ::std::int_fast32_t;
N      using ::std::int_fast64_t;
N      using ::std::uint_fast8_t;
N      using ::std::uint_fast16_t;
N      using ::std::uint_fast32_t;
N      using ::std::uint_fast64_t;
N      using ::std::intptr_t;
N      using ::std::uintptr_t;
N      using ::std::intmax_t;
N      using ::std::uintmax_t;
N    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 20 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\inttypes.h" 2
N
N#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS) || 201103L <= __cplusplus
X#if !1L || 0L || 201103L <= 199711L
S
S#ifdef __LP64__
S  #define __PRISCN64 "l" /* 'int64_t' is 'long' */
S#else
S  #define __PRISCN64 "ll" /* 'int64_t' is 'long long' */
S#endif
S#if __sizeof_ptr == 8
S  #define __PRISCNPTR __PRISCN64 /* 'intptr_t' is 64-bits */
S#else
S  #define __PRISCNPTR /*nothing*/ /* 'intptr_t' is 'int' */
S#endif
S
S
S    /* 7.8.1 */
S
S#define PRId8         "d"
S#define PRId16        "d"
S#define PRId32        "d"
S#define PRId64      __PRISCN64 "d"
S#define PRIdLEAST8    "d"
S#define PRIdLEAST16   "d"
S#define PRIdLEAST32   "d"
S#define PRIdLEAST64 __PRISCN64 "d"
S#define PRIdFAST8     "d"
S#define PRIdFAST16    "d"
S#define PRIdFAST32    "d"
S#define PRIdFAST64  __PRISCN64 "d"
S#define PRIdMAX      "jd"
S#define PRIdPTR     __PRISCNPTR "d"
S
S#define PRIi8         "i"
S#define PRIi16        "i"
S#define PRIi32        "i"
S#define PRIi64      __PRISCN64 "i"
S#define PRIiLEAST8    "i"
S#define PRIiLEAST16   "i"
S#define PRIiLEAST32   "i"
S#define PRIiLEAST64 __PRISCN64 "i"
S#define PRIiFAST8     "i"
S#define PRIiFAST16    "i"
S#define PRIiFAST32    "i"
S#define PRIiFAST64  __PRISCN64 "i"
S#define PRIiMAX      "ji"
S#define PRIiPTR     __PRISCNPTR "i"
S
S#define PRIo8         "o"
S#define PRIo16        "o"
S#define PRIo32        "o"
S#define PRIo64      __PRISCN64 "o"
S#define PRIoLEAST8    "o"
S#define PRIoLEAST16   "o"
S#define PRIoLEAST32   "o"
S#define PRIoLEAST64 __PRISCN64 "o"
S#define PRIoFAST8     "o"
S#define PRIoFAST16    "o"
S#define PRIoFAST32    "o"
S#define PRIoFAST64  __PRISCN64 "o"
S#define PRIoMAX      "jo"
S#define PRIoPTR     __PRISCNPTR "o"
S
S#define PRIu8         "d"
S#define PRIu16        "d"
S#define PRIu32        "u"
S#define PRIu64      __PRISCN64 "u"
S#define PRIuLEAST8    "d"
S#define PRIuLEAST16   "d"
S#define PRIuLEAST32   "u"
S#define PRIuLEAST64 __PRISCN64 "u"
S#define PRIuFAST8     "u"
S#define PRIuFAST16    "u"
S#define PRIuFAST32    "u"
S#define PRIuFAST64  __PRISCN64 "u"
S#define PRIuMAX      "ju"
S#define PRIuPTR     __PRISCNPTR "u"
S
S#define PRIx8         "x"
S#define PRIx16        "x"
S#define PRIx32        "x"
S#define PRIx64      __PRISCN64 "x"
S#define PRIxLEAST8    "x"
S#define PRIxLEAST16   "x"
S#define PRIxLEAST32   "x"
S#define PRIxLEAST64 __PRISCN64 "x"
S#define PRIxFAST8     "x"
S#define PRIxFAST16    "x"
S#define PRIxFAST32    "x"
S#define PRIxFAST64  __PRISCN64 "x"
S#define PRIxMAX      "jx"
S#define PRIxPTR     __PRISCNPTR "x"
S
S#define PRIX8         "X"
S#define PRIX16        "X"
S#define PRIX32        "X"
S#define PRIX64      __PRISCN64 "X"
S#define PRIXLEAST8    "X"
S#define PRIXLEAST16   "X"
S#define PRIXLEAST32   "X"
S#define PRIXLEAST64 __PRISCN64 "X"
S#define PRIXFAST8     "X"
S#define PRIXFAST16    "X"
S#define PRIXFAST32    "X"
S#define PRIXFAST64  __PRISCN64 "X"
S#define PRIXMAX      "jX"
S#define PRIXPTR     __PRISCNPTR "X"
S
S#define SCNd8       "hhd"
S#define SCNd16       "hd"
S#define SCNd32        "d"
S#define SCNd64      __PRISCN64 "d"
S#define SCNdLEAST8  "hhd"
S#define SCNdLEAST16  "hd"
S#define SCNdLEAST32   "d"
S#define SCNdLEAST64 __PRISCN64 "d"
S#define SCNdFAST8     "d"
S#define SCNdFAST16    "d"
S#define SCNdFAST32    "d"
S#define SCNdFAST64  __PRISCN64 "d"
S#define SCNdMAX      "jd"
S#define SCNdPTR     __PRISCNPTR "d"
S
S#define SCNi8       "hhd"
S#define SCNi16       "hi"
S#define SCNi32        "i"
S#define SCNi64      __PRISCN64 "i"
S#define SCNiLEAST8  "hhi"
S#define SCNiLEAST16  "hi"
S#define SCNiLEAST32   "i"
S#define SCNiLEAST64 __PRISCN64 "i"
S#define SCNiFAST8     "i"
S#define SCNiFAST16    "i"
S#define SCNiFAST32    "i"
S#define SCNiFAST64  __PRISCN64 "i"
S#define SCNiMAX      "ji"
S#define SCNiPTR     __PRISCNPTR "i"
S
S#define SCNo8       "hho"
S#define SCNo16       "ho"
S#define SCNo32        "o"
S#define SCNo64      __PRISCN64 "o"
S#define SCNoLEAST8  "hho"
S#define SCNoLEAST16  "ho"
S#define SCNoLEAST32   "o"
S#define SCNoLEAST64 __PRISCN64 "o"
S#define SCNoFAST8     "o"
S#define SCNoFAST16    "o"
S#define SCNoFAST32    "o"
S#define SCNoFAST64  __PRISCN64 "o"
S#define SCNoMAX      "jo"
S#define SCNoPTR     __PRISCNPTR "o"
S
S#define SCNu8       "hhu"
S#define SCNu16       "hu"
S#define SCNu32        "u"
S#define SCNu64      __PRISCN64 "u"
S#define SCNuLEAST8  "hhu"
S#define SCNuLEAST16  "hu"
S#define SCNuLEAST32   "u"
S#define SCNuLEAST64 __PRISCN64 "u"
S#define SCNuFAST8     "u"
S#define SCNuFAST16    "u"
S#define SCNuFAST32    "u"
S#define SCNuFAST64  __PRISCN64 "u"
S#define SCNuMAX      "ju"
S#define SCNuPTR     __PRISCNPTR "u"
S
S#define SCNx8       "hhx"
S#define SCNx16       "hx"
S#define SCNx32        "x"
S#define SCNx64      __PRISCN64 "x"
S#define SCNxLEAST8  "hhx"
S#define SCNxLEAST16  "hx"
S#define SCNxLEAST32   "x"
S#define SCNxLEAST64 __PRISCN64 "x"
S#define SCNxFAST8     "x"
S#define SCNxFAST16    "x"
S#define SCNxFAST32    "x"
S#define SCNxFAST64  __PRISCN64 "x"
S#define SCNxMAX      "jx"
S#define SCNxPTR     __PRISCNPTR "x"
S
N#endif /* __STDC_FORMAT_MACROS */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
S  #if !defined(__STRICT_ANSI__)
S   /* unconditional in non-strict C for consistency of debug info */
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* see <stddef.h> */
S    #else
S      typedef unsigned short wchar_t; /* see <stddef.h> */
S    #endif
S  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* see <stddef.h> */
S    #else
S      typedef unsigned short wchar_t; /* see <stddef.h> */
S    #endif
S  #endif
N#endif
N
Ntypedef struct imaxdiv_t { intmax_t quot, rem; } imaxdiv_t;
N   /* type of the value returned by the imaxdiv function. */
N
N#ifdef __cplusplus
Nextern "C" {
N#endif
N
N_ARMABI intmax_t strtoimax(const char * __restrict /*nptr*/,
X__declspec(__nothrow) intmax_t strtoimax(const char * __restrict  ,
N                   char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N    /* as for strtol */
N_ARMABI uintmax_t strtoumax(const char * __restrict /*nptr*/,
X__declspec(__nothrow) uintmax_t strtoumax(const char * __restrict  ,
N                    char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N    /* as for strtoul */
N
N_ARMABI intmax_t wcstoimax(const wchar_t * __restrict /*nptr*/,
X__declspec(__nothrow) intmax_t wcstoimax(const wchar_t * __restrict  ,
N                   wchar_t ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N_ARMABI uintmax_t wcstoumax(const wchar_t * __restrict /*nptr*/,
X__declspec(__nothrow) uintmax_t wcstoumax(const wchar_t * __restrict  ,
N                    wchar_t ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N
Nextern _ARMABI_PURE intmax_t imaxabs(intmax_t /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) intmax_t imaxabs(intmax_t  );
N   /*
N    * computes the absolute value of an intmax_t j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
Nextern _ARMABI_PURE imaxdiv_t imaxdiv(intmax_t /*numer*/, intmax_t /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) imaxdiv_t imaxdiv(intmax_t  , intmax_t  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type imaxdiv_t, comprising both the quotient and
N    *          the remainder. the structure shall contain the following
N    *          members, in either order.
N    *          intmax_t quot; intmax_t rem;
N    */
N
N#ifdef __cplusplus
N}
N#endif
N
N#endif /* __inttypes_h */
N
N/* end of inttypes.h */
N
L 19 "..\..\common\inc\calc.h" 2
N
N#ifdef MAX
S#undef MAX
N#endif
N#ifdef MIN
S#undef MIN
N#endif
N#define MAX(a, b)  (a>b ? a : b)
N#define MIN(a, b)  (a<b ? a : b)
N
N#define M_PI 3.14159265358979323846 
N
Nvoid hsvc(uint8_t r, uint8_t g, uint8_t b, uint8_t *h, uint8_t *s, uint8_t *v, uint8_t *c);
Nuint32_t lighten(uint32_t color, uint8_t factor);
Nuint32_t saturate(uint32_t color);
Nuint32_t rgbPack(uint32_t r, uint32_t g, uint32_t b);
Nvoid rgbUnpack(uint32_t color, uint32_t *r, uint32_t *g, uint32_t *b);
Nvoid interpolate(uint8_t *frame, uint16_t x, uint16_t y, uint16_t width, uint8_t *rp, uint8_t *gp, uint8_t *bp);
N
N#endif // CALC_H
L 17 "..\..\common\src\calc.cpp" 2
N
Nvoid hsvc(uint8_t r, uint8_t g, uint8_t b, uint8_t *h, uint8_t *s, uint8_t *v, uint8_t *c)
N{
N    uint8_t min, max, delta;
N    int hue;
N    min = MIN(r, g);
X    min = (r<g ? r : g);
N    min = MIN(min, b);
X    min = (min<b ? min : b);
N    max = MAX(r, g);
X    max = (r>g ? r : g);
N    max = MAX(max, b);
X    max = (max>b ? max : b);
N
N    *v = max;
N    delta = max - min;
N    if (max>50)
N    {
N        //if (delta>50)
N            *s = ((int)delta<<8)/max;
N        //else
N        //    *s = 0;
N    }
N    else
N        *s = 0;
N    if (max==0 || delta==0)
N    {
N        *s = 0;
N        *h = 0;
N        *c = 0;
N        return;
N    }
N    if (r==max)
N        hue = (((int)g - (int)b)<<8)/delta;         // between yellow & magenta
N    else if (g==max)
N        hue = (2<<8) + (((int)b - (int)r)<<8)/delta;     // between cyan & yellow
N    else
N        hue = (4<<8) + (((int)r - (int)g)<<8)/delta;     // between magenta & cyan
N    if(hue < 0)
N        hue += 6<<8;
N    hue /= 6;
N    *h = hue;
N    *c = delta;
N}
N
Nuint32_t lighten(uint32_t color, uint8_t factor)
N{
N    uint32_t r, g, b;
N
N    rgbUnpack(color, &r, &g, &b);
N
N    r += factor;
N    g += factor;
N    b += factor;
N
N    return rgbPack(r, g, b);
N}
N
Nuint32_t rgbPack(uint32_t r, uint32_t g, uint32_t b)
N{
N    if (r>0xff)
N        r = 0xff;
N    if (g>0xff)
N        g = 0xff;
N    if (b>0xff)
N        b = 0xff;
N    return (r<<16) | (g<<8) | b;
N}
N
Nvoid rgbUnpack(uint32_t color, uint32_t *r, uint32_t *g, uint32_t *b)
N{
N    *b = color&0xff;
N    color >>= 8;
N    *g = color&0xff;
N    color >>= 8;
N    *r = color&0xff;
N}
N
Nuint32_t saturate(uint32_t color)
N{
N    float m;
N    uint32_t max, r, g, b;
N
N    rgbUnpack(color, &r, &g, &b);
N
N    max = MAX(r, g);
X    max = (r>g ? r : g);
N    max = MAX(max, b);
X    max = (max>b ? max : b);
N
N    // saturate while maintaining ratios
N    m = 255.0f/max;
N    r = (uint8_t)(m*r+0.5f);
N    g = (uint8_t)(m*g+0.5f);
N    b = (uint8_t)(m*b+0.5f);
N
N    return rgbPack(r, g, b);
N}
N
Nvoid interpolate(uint8_t *frame, uint16_t x, uint16_t y, uint16_t width, uint8_t *r, uint8_t *g, uint8_t *b)
N{
N	uint8_t *pixel = frame + y*width + x;
N    if (y&1)
N    {
N        if (x&1)
N        {
N            *r = *pixel;
N            *g = (*(pixel-1)+*(pixel+1)+*(pixel+width)+*(pixel-width))>>2;
N            *b = (*(pixel-width-1)+*(pixel-width+1)+*(pixel+width-1)+*(pixel+width+1))>>2;
N        }
N        else
N        {
N            *r = (*(pixel-1)+*(pixel+1))>>1;
N            *g = *pixel;
N            *b = (*(pixel-width)+*(pixel+width))>>1;
N        }
N    }
N    else
N    {
N        if (x&1)
N        {
N            *r = (*(pixel-width)+*(pixel+width))>>1;
N            *g = *pixel;
N			*b = (*(pixel-1)+*(pixel+1))>>1;
N        }
N        else
N        {
N            *r = (*(pixel-width-1)+*(pixel-width+1)+*(pixel+width-1)+*(pixel+width+1))>>2;
N            *g = (*(pixel-1)+*(pixel+1)+*(pixel+width)+*(pixel-width))>>2;
N            *b = *pixel;
N        }
N    }
N}
N
