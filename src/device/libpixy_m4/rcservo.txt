; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\rcservo.o --asm_dir=.\ --list_dir=.\ --depend=.\rcservo.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\rcservo.crf src\rcservo.cpp]
                          THUMB

                          AREA ||i._Z10rcs_enableRKhS0_||, CODE, READONLY, ALIGN=1

                  _Z10rcs_enableRKhS0_ PROC ; rcs_enable(const unsigned char&, const unsigned char&)
;;;170    
;;;171    int32_t rcs_enable(const uint8_t &channel, const uint8_t &enable)
000000  7802              LDRB     r2,[r0,#0]
;;;172    {
;;;173    	uint8_t c;
;;;174    	
;;;175    	if (channel>=RCS_NUM_AXES)
000002  2a02              CMP      r2,#2
000004  d302              BCC      |L1.12|
;;;176    		return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;177    	else if (channel==0)
;;;178    		c = RCS_CHANNEL0;
;;;179    	else
;;;180    		c = RCS_CHANNEL1;
;;;181    
;;;182    	if (enable)
;;;183    	{
;;;184    		LPC_SCT->OUT[c].SET = 1<<0; 
;;;185    		LPC_SCT->OUT[c].CLR = 1<<(channel+1);
;;;186    	}
;;;187    	else
;;;188    	{
;;;189    		LPC_SCT->OUT[c].SET = 1<<15; // disable
;;;190    		LPC_SCT->OUT[c].CLR = 1<<0;
;;;191    	}
;;;192    
;;;193    	return 0;
;;;194    }
00000a  4770              BX       lr
                  |L1.12|
00000c  b172              CBZ      r2,|L1.44|
00000e  220a              MOVS     r2,#0xa               ;180
                  |L1.16|
000010  7809              LDRB     r1,[r1,#0]            ;182
000012  2301              MOVS     r3,#1                 ;184
000014  b161              CBZ      r1,|L1.48|
000016  00d1              LSLS     r1,r2,#3              ;184
000018  f1014180          ADD      r1,r1,#0x40000000     ;184
00001c  f8c13500          STR      r3,[r1,#0x500]        ;184
000020  7800              LDRB     r0,[r0,#0]            ;185
000022  1c40              ADDS     r0,r0,#1              ;185
000024  4083              LSLS     r3,r3,r0              ;185
000026  f8c13504          STR      r3,[r1,#0x504]        ;185
00002a  e00a              B        |L1.66|
                  |L1.44|
00002c  2205              MOVS     r2,#5                 ;178
00002e  e7ef              B        |L1.16|
                  |L1.48|
000030  00d0              LSLS     r0,r2,#3              ;189
000032  f1004080          ADD      r0,r0,#0x40000000     ;189
000036  f44f4100          MOV      r1,#0x8000            ;189
00003a  f8c01500          STR      r1,[r0,#0x500]        ;189
00003e  f8c03504          STR      r3,[r0,#0x504]        ;190
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;193
000044  4770              BX       lr
;;;195    
                          ENDP


                          AREA ||i._Z10rcs_getPosRKh||, CODE, READONLY, ALIGN=2

                  _Z10rcs_getPosRKh PROC ; rcs_getPos(const unsigned char&)
;;;162    
;;;163    int32_t rcs_getPos(const uint8_t &channel)
000000  7800              LDRB     r0,[r0,#0]
;;;164    {
;;;165    	if (channel>=RCS_NUM_AXES)
000002  2802              CMP      r0,#2
000004  d302              BCC      |L2.12|
;;;166    		return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;167    
;;;168    	return g_rcsPos[channel];	
;;;169    }
00000a  4770              BX       lr
                  |L2.12|
00000c  4901              LDR      r1,|L2.20|
00000e  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;168
000012  4770              BX       lr
;;;170    
                          ENDP

                  |L2.20|
                          DCD      ||.data||

                          AREA ||i._Z10rcs_setPosRKhRKt||, CODE, READONLY, ALIGN=2

                  _Z10rcs_setPosRKhRKt PROC ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;137    
;;;138    int32_t rcs_setPos(const uint8_t &channel, const uint16_t &pos)
000000  b570              PUSH     {r4-r6,lr}
;;;139    {
;;;140    	uint16_t newPos;
;;;141    	uint8_t c;
;;;142    
;;;143    	if (channel>=RCS_NUM_AXES || pos>RCS_MAX_POS)
000002  7802              LDRB     r2,[r0,#0]
000004  2a02              CMP      r2,#2
000006  d203              BCS      |L3.16|
000008  880b              LDRH     r3,[r1,#0]
00000a  f5b37f7a          CMP      r3,#0x3e8
00000e  d902              BLS      |L3.22|
                  |L3.16|
;;;144    		return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
;;;145    	else if (channel==0)
;;;146    		c = RCS_CHANNEL0;
;;;147    	else
;;;148    		c = RCS_CHANNEL1;
;;;149    	
;;;150    	// scale position
;;;151    	newPos = ((uint32_t)pos*g_rcsPwmGain[channel])>>RCS_GAIN_SCALE;
;;;152    
;;;153    	LPC_SCT->MATCH[channel+1].L = g_rcsMinPwm[channel] + newPos;
;;;154    	LPC_SCT->MATCHREL[channel+1].L = g_rcsMinPwm[channel] + newPos;
;;;155    	LPC_SCT->OUT[c].SET = 1<<0; 
;;;156    	LPC_SCT->OUT[c].CLR = 1<<(channel+1);
;;;157    
;;;158    	g_rcsPos[channel] = pos;
;;;159    
;;;160    	return 0;
;;;161    }
000014  bd70              POP      {r4-r6,pc}
                  |L3.22|
000016  b36a              CBZ      r2,|L3.116|
000018  240a              MOVS     r4,#0xa               ;148
                  |L3.26|
00001a  4d17              LDR      r5,|L3.120|
00001c  f9355012          LDRSH    r5,[r5,r2,LSL #1]     ;151
000020  436b              MULS     r3,r5,r3              ;151
000022  0a9b              LSRS     r3,r3,#10             ;151
000024  4d14              LDR      r5,|L3.120|
000026  1f2d              SUBS     r5,r5,#4              ;153
000028  f8356012          LDRH     r6,[r5,r2,LSL #1]     ;153
00002c  1c52              ADDS     r2,r2,#1              ;153
00002e  0092              LSLS     r2,r2,#2              ;153
000030  f1024280          ADD      r2,r2,#0x40000000     ;153
000034  441e              ADD      r6,r6,r3              ;153
000036  f8a26100          STRH     r6,[r2,#0x100]        ;153
00003a  7802              LDRB     r2,[r0,#0]            ;154
00003c  f8355012          LDRH     r5,[r5,r2,LSL #1]     ;154
000040  1c52              ADDS     r2,r2,#1              ;154
000042  0092              LSLS     r2,r2,#2              ;154
000044  f1024280          ADD      r2,r2,#0x40000000     ;154
000048  442b              ADD      r3,r3,r5              ;154
00004a  f8a23200          STRH     r3,[r2,#0x200]        ;154
00004e  2301              MOVS     r3,#1                 ;155
000050  00e2              LSLS     r2,r4,#3              ;155
000052  f1024280          ADD      r2,r2,#0x40000000     ;155
000056  f8c23500          STR      r3,[r2,#0x500]        ;155
00005a  7804              LDRB     r4,[r0,#0]            ;156
00005c  1c64              ADDS     r4,r4,#1              ;156
00005e  40a3              LSLS     r3,r3,r4              ;156
000060  f8c23504          STR      r3,[r2,#0x504]        ;156
000064  4a04              LDR      r2,|L3.120|
000066  7800              LDRB     r0,[r0,#0]            ;158
000068  3a08              SUBS     r2,r2,#8              ;158
00006a  8809              LDRH     r1,[r1,#0]            ;158
00006c  f8221010          STRH     r1,[r2,r0,LSL #1]     ;158
000070  2000              MOVS     r0,#0                 ;160
000072  bd70              POP      {r4-r6,pc}
                  |L3.116|
000074  2405              MOVS     r4,#5                 ;146
000076  e7d0              B        |L3.26|
;;;162    
                          ENDP

                  |L3.120|
                          DCD      ||.data||+0x8

                          AREA ||i._Z11rcs_setFreqRKt||, CODE, READONLY, ALIGN=2

                  _Z11rcs_setFreqRKt PROC ; rcs_setFreq(const unsigned short&)
;;;210    
;;;211    int32_t rcs_setFreq(const uint16_t &freq)
000000  8800              LDRH     r0,[r0,#0]
;;;212    {
;;;213    	uint16_t val;
;;;214    
;;;215    	if (freq<20 || freq>300)
000002  f1a00114          SUB      r1,r0,#0x14
000006  f5b17f8c          CMP      r1,#0x118
00000a  d902              BLS      |L4.18|
;;;216    		return -1;
00000c  f04f30ff          MOV      r0,#0xffffffff
;;;217    
;;;218    	val = RCS_CLOCK_FREQ/freq;
;;;219    
;;;220    	LPC_SCT->MATCH[0].L = val; 
;;;221    	LPC_SCT->MATCHREL[0].L = val;
;;;222    
;;;223    	return 0;
;;;224    }
000010  4770              BX       lr
                  |L4.18|
000012  4904              LDR      r1,|L4.36|
000014  fbb1f0f0          UDIV     r0,r1,r0              ;218
000018  4903              LDR      r1,|L4.40|
00001a  8008              STRH     r0,[r1,#0]            ;220
00001c  f8a10100          STRH     r0,[r1,#0x100]        ;221
000020  2000              MOVS     r0,#0                 ;223
000022  4770              BX       lr
;;;225    
                          ENDP

                  |L4.36|
                          DCD      0x000f4240
                  |L4.40|
                          DCD      0x40000100

                          AREA ||i._Z13rcs_setLimitsRKhRKsS2_||, CODE, READONLY, ALIGN=2

                  _Z13rcs_setLimitsRKhRKsS2_ PROC ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;195    
;;;196    int32_t rcs_setLimits(const uint8_t &channel, const int16_t &lower, const int16_t &upper)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
;;;198    	if (channel>=RCS_NUM_AXES || upper>500 || upper<-500 || lower>500 || lower<-500)
000002  7804              LDRB     r4,[r0,#0]
000004  2c02              CMP      r4,#2
000006  d20e              BCS      |L5.38|
000008  f9b23000          LDRSH    r3,[r2,#0]
00000c  f44f75fa          MOV      r5,#0x1f4
000010  42ab              CMP      r3,r5
000012  dc08              BGT      |L5.38|
000014  426e              RSBS     r6,r5,#0
000016  42b3              CMP      r3,r6
000018  db05              BLT      |L5.38|
00001a  f9b13000          LDRSH    r3,[r1,#0]
00001e  42ab              CMP      r3,r5
000020  dc01              BGT      |L5.38|
000022  42b3              CMP      r3,r6
000024  da02              BGE      |L5.44|
                  |L5.38|
;;;199    		return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
;;;200    
;;;201    	g_rcsMinPwm[channel] = RCS_MIN_PWM+lower;
;;;202    	// MAXPOS*gain = RANGE+upper-lower -> gain<<RCS_GAIN_SCALE = ((RANGE+upper-lower)<<RCS_GAIN_SCALE)/MAXPOS
;;;203    	g_rcsPwmGain[channel] = ((RCS_PWM_RANGE+upper-lower)<<RCS_GAIN_SCALE)/RCS_MAX_POS;
;;;204    
;;;205    	// update
;;;206    	rcs_setPos(channel, g_rcsPos[channel]);
;;;207    
;;;208    	return 0;
;;;209    }
00002a  bd70              POP      {r4-r6,pc}
                  |L5.44|
00002c  4d0e              LDR      r5,|L5.104|
00002e  f503737a          ADD      r3,r3,#0x3e8          ;201
000032  f8253014          STRH     r3,[r5,r4,LSL #1]     ;201
000036  f9b22000          LDRSH    r2,[r2,#0]            ;203
00003a  f9b11000          LDRSH    r1,[r1,#0]            ;203
00003e  1a51              SUBS     r1,r2,r1              ;203
000040  f501717a          ADD      r1,r1,#0x3e8          ;203
000044  0289              LSLS     r1,r1,#10             ;203
000046  f44f727a          MOV      r2,#0x3e8             ;203
00004a  fb91f1f2          SDIV     r1,r1,r2              ;203
00004e  7802              LDRB     r2,[r0,#0]            ;203
000050  1d2b              ADDS     r3,r5,#4              ;203
000052  f8231012          STRH     r1,[r3,r2,LSL #1]     ;203
000056  7801              LDRB     r1,[r0,#0]            ;206
000058  1f2a              SUBS     r2,r5,#4              ;206
00005a  eb020141          ADD      r1,r2,r1,LSL #1       ;206
00005e  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000062  2000              MOVS     r0,#0                 ;208
000064  bd70              POP      {r4-r6,pc}
;;;210    
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      ||.data||+0x4

                          AREA ||i._Z13rcs_setLimitsv||, CODE, READONLY, ALIGN=2

                  _Z13rcs_setLimitsv PROC ; rcs_setLimits()
;;;93     
;;;94     void rcs_setLimits()
000000  b50e              PUSH     {r1-r3,lr}
;;;95     {
;;;96     	int16_t lower, upper;
;;;97     
;;;98     	prm_get("S0 lower limit", &lower, END);
000002  2200              MOVS     r2,#0
000004  a901              ADD      r1,sp,#4
000006  a010              ADR      r0,|L6.72|
000008  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;99     	prm_get("S0 upper limit", &upper, END);
00000c  2200              MOVS     r2,#0
00000e  4669              MOV      r1,sp
000010  a011              ADR      r0,|L6.88|
000012  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;100    	rcs_setLimits(0, lower, upper);
000016  2000              MOVS     r0,#0
000018  9002              STR      r0,[sp,#8]
00001a  466a              MOV      r2,sp
00001c  a901              ADD      r1,sp,#4
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;101    
;;;102    	prm_get("S1 lower limit", &lower, END);
000024  2200              MOVS     r2,#0
000026  a901              ADD      r1,sp,#4
000028  a00f              ADR      r0,|L6.104|
00002a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;103    	prm_get("S1 upper limit", &upper, END);
00002e  2200              MOVS     r2,#0
000030  4669              MOV      r1,sp
000032  a011              ADR      r0,|L6.120|
000034  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;104    	rcs_setLimits(1, lower, upper);
000038  2001              MOVS     r0,#1
00003a  9002              STR      r0,[sp,#8]
00003c  466a              MOV      r2,sp
00003e  a901              ADD      r1,sp,#4
000040  a802              ADD      r0,sp,#8
000042  f7fffffe          BL       _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
;;;105    }
000046  bd0e              POP      {r1-r3,pc}
;;;106    
                          ENDP

                  |L6.72|
000048  5330206c          DCB      "S0 lower limit",0
00004c  6f776572
000050  206c696d
000054  697400  
000057  00                DCB      0
                  |L6.88|
000058  53302075          DCB      "S0 upper limit",0
00005c  70706572
000060  206c696d
000064  697400  
000067  00                DCB      0
                  |L6.104|
000068  5331206c          DCB      "S1 lower limit",0
00006c  6f776572
000070  206c696d
000074  697400  
000077  00                DCB      0
                  |L6.120|
000078  53312075          DCB      "S1 upper limit",0
00007c  70706572
000080  206c696d
000084  697400  
000087  00                DCB      0

                          AREA ||i._Z14rcs_loadParamsv||, CODE, READONLY, ALIGN=2

                  _Z14rcs_loadParamsv PROC ; rcs_loadParams()
;;;111    
;;;112    void rcs_loadParams()
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;113    {
;;;114    	uint16_t freq;
;;;115    	
;;;116    	prm_add("S0 lower limit", PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_DEFAULT,
000004  f06f07c7          MVN      r7,#0xc7
000008  2502              MOVS     r5,#2
00000a  2400              MOVS     r4,#0
00000c  e9cd5700          STRD     r5,r7,[sp,#0]
000010  f44f78c0          MOV      r8,#0x180
000014  4b24              LDR      r3,|L7.168|
000016  4622              MOV      r2,r4
000018  4641              MOV      r1,r8
00001a  a024              ADR      r0,|L7.172|
00001c  9402              STR      r4,[sp,#8]
00001e  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;117    		"@c Servo @m -300 @M 300 Sets the lower limit of travel for servo 0 (default -200)", INT16(-200), END);
;;;118    	prm_setShadowCallback("S0 lower limit", (ShadowCallback)rcs_shadowCallback);
000022  4926              LDR      r1,|L7.188|
000024  a021              ADR      r0,|L7.172|
000026  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;119    	prm_add("S0 upper limit", PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_DEFAULT,
00002a  26c8              MOVS     r6,#0xc8
00002c  e9cd5600          STRD     r5,r6,[sp,#0]
000030  4b23              LDR      r3,|L7.192|
000032  2200              MOVS     r2,#0
000034  4641              MOV      r1,r8
000036  a023              ADR      r0,|L7.196|
000038  9402              STR      r4,[sp,#8]
00003a  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;120    		"@c Servo @m -300 @M 300 Sets the upper limit of travel for servo 0 (default 200)", INT16(200), END);
;;;121    	prm_setShadowCallback("S0 upper limit", (ShadowCallback)rcs_shadowCallback);
00003e  491f              LDR      r1,|L7.188|
000040  a020              ADR      r0,|L7.196|
000042  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;122    	prm_add("S1 lower limit", PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_DEFAULT,
000046  e9cd5700          STRD     r5,r7,[sp,#0]
00004a  4b22              LDR      r3,|L7.212|
00004c  2200              MOVS     r2,#0
00004e  4641              MOV      r1,r8
000050  a021              ADR      r0,|L7.216|
000052  9402              STR      r4,[sp,#8]
000054  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;123    		"@c Servo @m -300 @M 300 Sets the lower limit of travel for servo 1 (default -200)", INT16(-200), END);
;;;124    	prm_setShadowCallback("S1 lower limit", (ShadowCallback)rcs_shadowCallback);
000058  4918              LDR      r1,|L7.188|
00005a  a01f              ADR      r0,|L7.216|
00005c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;125    	prm_add("S1 upper limit", PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_DEFAULT,
000060  e9cd5600          STRD     r5,r6,[sp,#0]
000064  4b20              LDR      r3,|L7.232|
000066  2200              MOVS     r2,#0
000068  4641              MOV      r1,r8
00006a  a020              ADR      r0,|L7.236|
00006c  9402              STR      r4,[sp,#8]
00006e  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;126    		"@c Servo @m -300 @M 300 Sets the upper limit of travel for servo 1 (default 200)", INT16(200), END);
;;;127    	prm_setShadowCallback("S1 upper limit", (ShadowCallback)rcs_shadowCallback);
000072  4912              LDR      r1,|L7.188|
000074  a01d              ADR      r0,|L7.236|
000076  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;128    	
;;;129    	prm_add("Servo frequency", PRM_FLAG_ADVANCED, PRM_PRIORITY_DEFAULT, 
00007a  203c              MOVS     r0,#0x3c
00007c  e9cd5000          STRD     r5,r0,[sp,#0]
000080  a31e              ADR      r3,|L7.252|
000082  2200              MOVS     r2,#0
000084  2102              MOVS     r1,#2
000086  9402              STR      r4,[sp,#8]
000088  a02b              ADR      r0,|L7.312|
00008a  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;130    		"@c Servo Sets the PWM frequency of the servos (default 60)", UINT16(60), END);
;;;131    
;;;132    	prm_get("Servo frequency", &freq, END);
00008e  2200              MOVS     r2,#0
000090  a903              ADD      r1,sp,#0xc
000092  a029              ADR      r0,|L7.312|
000094  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;133    	rcs_setFreq(freq);
000098  a803              ADD      r0,sp,#0xc
00009a  f7fffffe          BL       _Z11rcs_setFreqRKt ; rcs_setFreq(const unsigned short&)
;;;134    	
;;;135    	rcs_setLimits();
00009e  f7fffffe          BL       _Z13rcs_setLimitsv ; rcs_setLimits()
;;;136    }
0000a2  e8bd81ff          POP      {r0-r8,pc}
;;;137    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L7.168|
                          DCD      ||.conststring||+0x3b8
                  |L7.172|
0000ac  5330206c          DCB      "S0 lower limit",0
0000b0  6f776572
0000b4  206c696d
0000b8  697400  
0000bb  00                DCB      0
                  |L7.188|
                          DCD      _Z18rcs_shadowCallbackPKcRKt ; rcs_shadowCallback(const char*, const unsigned short&)
                  |L7.192|
                          DCD      ||.conststring||+0x40c
                  |L7.196|
0000c4  53302075          DCB      "S0 upper limit",0
0000c8  70706572
0000cc  206c696d
0000d0  697400  
0000d3  00                DCB      0
                  |L7.212|
                          DCD      ||.conststring||+0x460
                  |L7.216|
0000d8  5331206c          DCB      "S1 lower limit",0
0000dc  6f776572
0000e0  206c696d
0000e4  697400  
0000e7  00                DCB      0
                  |L7.232|
                          DCD      ||.conststring||+0x4b4
                  |L7.236|
0000ec  53312075          DCB      "S1 upper limit",0
0000f0  70706572
0000f4  206c696d
0000f8  697400  
0000fb  00                DCB      0
                  |L7.252|
0000fc  40632053          DCB      "@c Servo Sets the PWM frequency of the servos (default "
000100  6572766f
000104  20536574
000108  73207468
00010c  65205057
000110  4d206672
000114  65717565
000118  6e637920
00011c  6f662074
000120  68652073
000124  6572766f
000128  73202864
00012c  65666175
000130  6c7420  
000133  36302900          DCB      "60)",0
000137  00                DCB      0
                  |L7.312|
000138  53657276          DCB      "Servo frequency",0
00013c  6f206672
000140  65717565
000144  6e637900

                          AREA ||i._Z18rcs_shadowCallbackPKcRKt||, CODE, READONLY, ALIGN=1

                  _Z18rcs_shadowCallbackPKcRKt PROC ; rcs_shadowCallback(const char*, const unsigned short&)
;;;106    
;;;107    void rcs_shadowCallback(const char *id, const uint16_t &val)
000000  f7ffbffe          B.W      _Z13rcs_setLimitsv ; rcs_setLimits()
;;;108    {
;;;109    	rcs_setLimits();
;;;110    }
;;;111    
                          ENDP


                          AREA ||i._Z8rcs_initv||, CODE, READONLY, ALIGN=2

                  _Z8rcs_initv PROC ; rcs_init()
;;;74     
;;;75     void rcs_init()
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;76     {
;;;77     	int i;
;;;78     
;;;79     	for (i=0; i<RCS_NUM_AXES; i++)
000004  2400              MOVS     r4,#0
;;;80     	{
;;;81     		g_rcsMinPwm[i] = RCS_MIN_PWM;
000006  4e16              LDR      r6,|L9.96|
000008  f44f757a          MOV      r5,#0x3e8
;;;82     		g_rcsPwmGain[i] = 1<<RCS_GAIN_SCALE;
00000c  f44f6780          MOV      r7,#0x400
000010  f1060804          ADD      r8,r6,#4
;;;83     		rcs_setPos(i, RCS_CENTER_POS);
000014  f44f79fa          MOV      r9,#0x1f4
                  |L9.24|
000018  f8265014          STRH     r5,[r6,r4,LSL #1]     ;81
00001c  f8287014          STRH     r7,[r8,r4,LSL #1]     ;82
000020  e9cd9400          STRD     r9,r4,[sp,#0]
000024  4669              MOV      r1,sp
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00002c  1c64              ADDS     r4,r4,#1              ;79
00002e  2c02              CMP      r4,#2                 ;79
000030  dbf2              BLT      |L9.24|
;;;84     	}
;;;85     
;;;86     	rcs_loadParams();
000032  f7fffffe          BL       _Z14rcs_loadParamsv ; rcs_loadParams()
;;;87     		
;;;88     	g_chirpUsb->registerModule(g_module);
000036  480c              LDR      r0,|L9.104|
000038  490a              LDR      r1,|L9.100|
00003a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00003c  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;89     
;;;90     	rcs_enable(0, 1);
000040  2000              MOVS     r0,#0
000042  2401              MOVS     r4,#1
000044  e9cd4002          STRD     r4,r0,[sp,#8]
000048  a902              ADD      r1,sp,#8
00004a  a803              ADD      r0,sp,#0xc
00004c  f7fffffe          BL       _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
;;;91     	rcs_enable(1, 1);
000050  9402              STR      r4,[sp,#8]
000052  a903              ADD      r1,sp,#0xc
000054  a802              ADD      r0,sp,#8
000056  9403              STR      r4,[sp,#0xc]
000058  f7fffffe          BL       _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
;;;92     }
00005c  e8bd87ff          POP      {r0-r10,pc}
;;;93     
                          ENDP

                  |L9.96|
                          DCD      ||.data||+0x4
                  |L9.100|
                          DCD      ||.constdata||
                  |L9.104|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10rcs_enableRKhS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_enableRKhS0_||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z10rcs_setPosRKhRKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_setPosRKhRKt||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z13rcs_setLimitsRKhRKsS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13rcs_setLimitsRKhRKsS2_||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._Z13rcs_setLimitsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13rcs_setLimitsv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._Z11rcs_setFreqRKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11rcs_setFreqRKt||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._Z18rcs_shadowCallbackPKcRKt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18rcs_shadowCallbackPKcRKt||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._Z14rcs_loadParamsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14rcs_loadParamsv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._Z8rcs_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8rcs_initv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._Z10rcs_getPosRKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10rcs_getPosRKh||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000008  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0xa0
                          DCD      _Z10rcs_getPosRKh ; rcs_getPos(const unsigned char&)
000020  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xac
                          DCD      ||.conststring||+0x13c
                          DCD      _Z10rcs_enableRKhS0_ ; rcs_enable(const unsigned char&, const unsigned char&)
000038  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x148
                          DCD      ||.conststring||+0x1dc
                          DCD      _Z13rcs_setLimitsRKhRKsS2_ ; rcs_setLimits(const unsigned char&, const short&, const short&)
000050  01020200          DCB      0x01,0x02,0x02,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1ec
                          DCD      ||.conststring||+0x33c
                          DCD      _Z11rcs_setFreqRKt ; rcs_setFreq(const unsigned short&)
000068  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x348
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  7263735f          DCB      "rcs_setPos",0
000004  73657450
000008  6f7300  
00000b  00                DCB      0
00000c  53657420          DCB      "Set RC-servo position@p channel value either 0 or 1 (2 "
000010  52432d73
000014  6572766f
000018  20706f73
00001c  6974696f
000020  6e407020
000024  6368616e
000028  6e656c20
00002c  76616c75
000030  65206569
000034  74686572
000038  2030206f
00003c  72203120
000040  283220  
000043  706f7373          DCB      "possible channels)@p pos position value ranging from 0-"
000047  69626c65
00004b  20636861
00004f  6e6e656c
000053  73294070
000057  20706f73
00005b  20706f73
00005f  6974696f
000063  6e207661
000067  6c756520
00006b  72616e67
00006f  696e6720
000073  66726f6d
000077  20302d  
00007a  39393940          DCB      "999@r 0 if success, negative if error",0
00007e  72203020
000082  69662073
000086  75636365
00008a  73732c20
00008e  6e656761
000092  74697665
000096  20696620
00009a  6572726f
00009e  7200    
0000a0  7263735f          DCB      "rcs_getPos",0
0000a4  67657450
0000a8  6f7300  
0000ab  00                DCB      0
0000ac  47657420          DCB      "Get RC-servo position@p channel value either 0 or 1 (2 "
0000b0  52432d73
0000b4  6572766f
0000b8  20706f73
0000bc  6974696f
0000c0  6e407020
0000c4  6368616e
0000c8  6e656c20
0000cc  76616c75
0000d0  65206569
0000d4  74686572
0000d8  2030206f
0000dc  72203120
0000e0  283220  
0000e3  706f7373          DCB      "possible channels)@r position value of the channel rang"
0000e7  69626c65
0000eb  20636861
0000ef  6e6e656c
0000f3  73294072
0000f7  20706f73
0000fb  6974696f
0000ff  6e207661
000103  6c756520
000107  6f662074
00010b  68652063
00010f  68616e6e
000113  656c2072
000117  616e67  
00011a  696e6720          DCB      "ing from 0-999, negative if error",0
00011e  66726f6d
000122  20302d39
000126  39392c20
00012a  6e656761
00012e  74697665
000132  20696620
000136  6572726f
00013a  7200    
00013c  7263735f          DCB      "rcs_enable",0
000140  656e6162
000144  6c6500  
000147  00                DCB      0
000148  456e6162          DCB      "Enable/disable RC-servo@p channel value either 0 or 1 ("
00014c  6c652f64
000150  69736162
000154  6c652052
000158  432d7365
00015c  72766f40
000160  70206368
000164  616e6e65
000168  6c207661
00016c  6c756520
000170  65697468
000174  65722030
000178  206f7220
00017c  312028  
00017f  3220706f          DCB      "2 possible channels)@p enable 0=disable, nonzero=enable"
000183  73736962
000187  6c652063
00018b  68616e6e
00018f  656c7329
000193  40702065
000197  6e61626c
00019b  6520303d
00019f  64697361
0001a3  626c652c
0001a7  206e6f6e
0001ab  7a65726f
0001af  3d656e61
0001b3  626c65  
0001b6  40722030          DCB      "@r 0 if success, negative if error",0
0001ba  20696620
0001be  73756363
0001c2  6573732c
0001c6  206e6567
0001ca  61746976
0001ce  65206966
0001d2  20657272
0001d6  6f7200  
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
0001dc  7263735f          DCB      "rcs_setLimits",0
0001e0  7365744c
0001e4  696d6974
0001e8  7300    
0001ea  00                DCB      0
0001eb  00                DCB      0
0001ec  53657420          DCB      "Set upper and lower limits of servo travel@p channel va"
0001f0  75707065
0001f4  7220616e
0001f8  64206c6f
0001fc  77657220
000200  6c696d69
000204  7473206f
000208  66207365
00020c  72766f20
000210  74726176
000214  656c4070
000218  20636861
00021c  6e6e656c
000220  207661  
000223  6c756520          DCB      "lue either 0 or 1 (2 possible channels)@p lower value b"
000227  65697468
00022b  65722030
00022f  206f7220
000233  31202832
000237  20706f73
00023b  7369626c
00023f  65206368
000243  616e6e65
000247  6c732940
00024b  70206c6f
00024f  77657220
000253  76616c75
000257  652062  
00025a  65747765          DCB      "etween -500 and 500. 0 is default, -500 will extend the"
00025e  656e202d
000262  35303020
000266  616e6420
00026a  3530302e
00026e  20302069
000272  73206465
000276  6661756c
00027a  742c202d
00027e  35303020
000282  77696c6c
000286  20657874
00028a  656e6420
00028e  746865  
000291  206c6f77          DCB      " lower limit the greatest amount.@p upper value between"
000295  6572206c
000299  696d6974
00029d  20746865
0002a1  20677265
0002a5  61746573
0002a9  7420616d
0002ad  6f756e74
0002b1  2e407020
0002b5  75707065
0002b9  72207661
0002bd  6c756520
0002c1  62657477
0002c5  65656e  
0002c8  202d3530          DCB      " -500 and 500. 0 is default, 500 will extend the upper "
0002cc  3020616e
0002d0  64203530
0002d4  302e2030
0002d8  20697320
0002dc  64656661
0002e0  756c742c
0002e4  20353030
0002e8  2077696c
0002ec  6c206578
0002f0  74656e64
0002f4  20746865
0002f8  20757070
0002fc  657220  
0002ff  6c696d69          DCB      "limit the greatest amount.@r 0 if success, negative if "
000303  74207468
000307  65206772
00030b  65617465
00030f  73742061
000313  6d6f756e
000317  742e4072
00031b  20302069
00031f  66207375
000323  63636573
000327  732c206e
00032b  65676174
00032f  69766520
000333  696620  
000336  6572726f          DCB      "error",0
00033a  7200    
00033c  7263735f          DCB      "rcs_setFreq",0
000340  73657446
000344  72657100
000348  53657420          DCB      "Set the PWM frequency@p frequency value between 20 and "
00034c  74686520
000350  50574d20
000354  66726571
000358  75656e63
00035c  79407020
000360  66726571
000364  75656e63
000368  79207661
00036c  6c756520
000370  62657477
000374  65656e20
000378  32302061
00037c  6e6420  
00037f  3330302e          DCB      "300. 50 is default.@r 0 if success, negative if error",0
000383  20353020
000387  69732064
00038b  65666175
00038f  6c742e40
000393  72203020
000397  69662073
00039b  75636365
00039f  73732c20
0003a3  6e656761
0003a7  74697665
0003ab  20696620
0003af  6572726f
0003b3  7200    
0003b5  00                DCB      0
0003b6  00                DCB      0
0003b7  00                DCB      0
0003b8  40632053          DCB      "@c Servo @m -300 @M 300 Sets the lower limit of travel "
0003bc  6572766f
0003c0  20406d20
0003c4  2d333030
0003c8  20404d20
0003cc  33303020
0003d0  53657473
0003d4  20746865
0003d8  206c6f77
0003dc  6572206c
0003e0  696d6974
0003e4  206f6620
0003e8  74726176
0003ec  656c20  
0003ef  666f7220          DCB      "for servo 0 (default -200)",0
0003f3  73657276
0003f7  6f203020
0003fb  28646566
0003ff  61756c74
000403  202d3230
000407  302900  
00040a  00                DCB      0
00040b  00                DCB      0
00040c  40632053          DCB      "@c Servo @m -300 @M 300 Sets the upper limit of travel "
000410  6572766f
000414  20406d20
000418  2d333030
00041c  20404d20
000420  33303020
000424  53657473
000428  20746865
00042c  20757070
000430  6572206c
000434  696d6974
000438  206f6620
00043c  74726176
000440  656c20  
000443  666f7220          DCB      "for servo 0 (default 200)",0
000447  73657276
00044b  6f203020
00044f  28646566
000453  61756c74
000457  20323030
00045b  2900    
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
000460  40632053          DCB      "@c Servo @m -300 @M 300 Sets the lower limit of travel "
000464  6572766f
000468  20406d20
00046c  2d333030
000470  20404d20
000474  33303020
000478  53657473
00047c  20746865
000480  206c6f77
000484  6572206c
000488  696d6974
00048c  206f6620
000490  74726176
000494  656c20  
000497  666f7220          DCB      "for servo 1 (default -200)",0
00049b  73657276
00049f  6f203120
0004a3  28646566
0004a7  61756c74
0004ab  202d3230
0004af  302900  
0004b2  00                DCB      0
0004b3  00                DCB      0
0004b4  40632053          DCB      "@c Servo @m -300 @M 300 Sets the upper limit of travel "
0004b8  6572766f
0004bc  20406d20
0004c0  2d333030
0004c4  20404d20
0004c8  33303020
0004cc  53657473
0004d0  20746865
0004d4  20757070
0004d8  6572206c
0004dc  696d6974
0004e0  206f6620
0004e4  74726176
0004e8  656c20  
0004eb  666f7220          DCB      "for servo 1 (default 200)",0
0004ef  73657276
0004f3  6f203120
0004f7  28646566
0004fb  61756c74
0004ff  20323030
000503  2900    

                          AREA ||.data||, DATA, ALIGN=1

                  g_rcsPos
                          DCDU     0x00000000
                  g_rcsMinPwm
                          DCDU     0x00000000
                  g_rcsPwmGain
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "src\\rcservo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rcservo_cpp_8e8e75b9___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___11_rcservo_cpp_8e8e75b9___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_rcservo_cpp_8e8e75b9___Z7__REVSHi|
#line 144
|__asm___11_rcservo_cpp_8e8e75b9___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
