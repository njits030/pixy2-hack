; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\platform_config.o --asm_dir=.\ --list_dir=.\ --depend=.\platform_config.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\platform_config.crf src\platform_config.c]
                          THUMB

                          AREA ||i.TIMER1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIMER1_IRQHandler PROC
;;;168    
;;;169    void TIMER1_IRQHandler(void)
000000  2100              MOVS     r1,#0
;;;170    {
;;;171    	TIM_ClearIntPending(LPC_TIMER1, TIM_MR0_INT);
000002  4801              LDR      r0,|L1.8|
000004  f7ffbffe          B.W      TIM_ClearIntPending
;;;172    }
;;;173    
                          ENDP

                  |L1.8|
                          DCD      0x40085000

                          AREA ||i.clockInit||, CODE, READONLY, ALIGN=2

                  clockInit PROC
;;;173    
;;;174    void clockInit(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;175    {
000002  b085              SUB      sp,sp,#0x14
;;;176     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;177    	TIM_MATCHCFG_Type TIM_MatchConfigStruct;
;;;178    
;;;179    	__disable_irq();
000004  b672              CPSID    i
;;;180     	/* Set the XTAL oscillator frequency to 12MHz*/
;;;181    	CGU_SetXTALOSC(__CRYSTAL);
000006  484a              LDR      r0,|L2.304|
000008  f7fffffe          BL       CGU_SetXTALOSC
;;;182    	CGU_EnableEntity(CGU_CLKSRC_XTAL_OSC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2006              MOVS     r0,#6
000010  f7fffffe          BL       CGU_EnableEntity
;;;183    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_BASE_M3);
000014  2115              MOVS     r1,#0x15
000016  2006              MOVS     r0,#6
000018  f7fffffe          BL       CGU_EntityConnect
;;;184    	
;;;185    	/* Set PL160M 12*1 = 12 MHz */
;;;186    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_CLKSRC_PLL1);
00001c  2109              MOVS     r1,#9
00001e  2006              MOVS     r0,#6
000020  f7fffffe          BL       CGU_EntityConnect
;;;187    //	CGU_EntityConnect(CGU_CLKSRC_IRC, CGU_CLKSRC_PLL1);
;;;188    	CGU_SetPLL1(1);
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       CGU_SetPLL1
;;;189    	CGU_EnableEntity(CGU_CLKSRC_PLL1, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2009              MOVS     r0,#9
00002e  f7fffffe          BL       CGU_EnableEntity
;;;190    
;;;191    	// setup CLKOUT
;;;192    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_CLKSRC_IDIVB);
000032  210d              MOVS     r1,#0xd
000034  2009              MOVS     r0,#9
000036  f7fffffe          BL       CGU_EntityConnect
;;;193    	CGU_EnableEntity(CGU_CLKSRC_IDIVB, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  200d              MOVS     r0,#0xd
00003e  f7fffffe          BL       CGU_EnableEntity
;;;194    	CGU_SetDIV(CGU_CLKSRC_IDIVB, 12);  // 12 -> 6 pclks per cpu clk, 10 -> 5 pclks
000042  210c              MOVS     r1,#0xc
000044  200d              MOVS     r0,#0xd
000046  f7fffffe          BL       CGU_SetDIV
;;;195    	// set input for CLKOUT to IDIVB
;;;196    	LPC_CGU->BASE_OUT_CLK &= ~0x0f000000;
00004a  483a              LDR      r0,|L2.308|
00004c  6801              LDR      r1,[r0,#0]
00004e  f0216170          BIC      r1,r1,#0xf000000
000052  6001              STR      r1,[r0,#0]
;;;197    	LPC_CGU->BASE_OUT_CLK |= 0x0d000000;
000054  6801              LDR      r1,[r0,#0]
000056  f0416150          ORR      r1,r1,#0xd000000
00005a  6001              STR      r1,[r0,#0]
;;;198    
;;;199    	/* Run SPIFI from PL160M, /2 */
;;;200    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_CLKSRC_IDIVA);
00005c  210c              MOVS     r1,#0xc
00005e  2009              MOVS     r0,#9
000060  f7fffffe          BL       CGU_EntityConnect
;;;201    	CGU_EnableEntity(CGU_CLKSRC_IDIVA, ENABLE);
000064  2101              MOVS     r1,#1
000066  200c              MOVS     r0,#0xc
000068  f7fffffe          BL       CGU_EnableEntity
;;;202    	CGU_SetDIV(CGU_CLKSRC_IDIVA, 2);
00006c  2102              MOVS     r1,#2
00006e  200c              MOVS     r0,#0xc
000070  f7fffffe          BL       CGU_SetDIV
;;;203    	CGU_EntityConnect(CGU_CLKSRC_IDIVA, CGU_BASE_SPIFI);
000074  2116              MOVS     r1,#0x16
000076  200c              MOVS     r0,#0xc
000078  f7fffffe          BL       CGU_EntityConnect
;;;204    	CGU_UpdateClock();
00007c  f7fffffe          BL       CGU_UpdateClock
;;;205    
;;;206    	LPC_CCU1->CLK_M4_EMCDIV_CFG |=    (1<<0) |  (1<<5);		// Turn on clock / 2
000080  482d              LDR      r0,|L2.312|
000082  6801              LDR      r1,[r0,#0]
000084  f0410121          ORR      r1,r1,#0x21
000088  6001              STR      r1,[r0,#0]
;;;207    	LPC_CREG->CREG6 |= (1<<16);	// EMC divided by 2
00008a  482c              LDR      r0,|L2.316|
00008c  6801              LDR      r1,[r0,#0]
00008e  f4413180          ORR      r1,r1,#0x10000
000092  6001              STR      r1,[r0,#0]
;;;208        LPC_CCU1->CLK_M4_EMC_CFG |= (1<<0);		// Turn on clock
000094  4828              LDR      r0,|L2.312|
000096  3848              SUBS     r0,r0,#0x48
000098  6801              LDR      r1,[r0,#0]
00009a  f0410101          ORR      r1,r1,#1
00009e  6001              STR      r1,[r0,#0]
;;;209    
;;;210    	CGU_SetPLL1(9);
0000a0  2009              MOVS     r0,#9
0000a2  f7fffffe          BL       CGU_SetPLL1
;;;211    	/* Run base M3 clock from PL160M, no division */
;;;212    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_M3);
0000a6  2115              MOVS     r1,#0x15
0000a8  2009              MOVS     r0,#9
0000aa  f7fffffe          BL       CGU_EntityConnect
;;;213    
;;;214    	delayus(10000);
0000ae  f2427010          MOV      r0,#0x2710
0000b2  f7fffffe          BL       delayus
;;;215    
;;;216    	//__enable_irq();
;;;217    	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
0000b6  2001              MOVS     r0,#1
0000b8  f88d000c          STRB     r0,[sp,#0xc]
;;;218    	TIM_ConfigStruct.PrescaleValue	= 1;
0000bc  9004              STR      r0,[sp,#0x10]
;;;219    
;;;220    	// use channel 0, MR0
;;;221    	TIM_MatchConfigStruct.MatchChannel = 0;
0000be  2400              MOVS     r4,#0
0000c0  f88d4000          STRB     r4,[sp,#0]
;;;222    	// Enable interrupt when MR0 matches the value in TC register
;;;223    	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
0000c4  f88d0001          STRB     r0,[sp,#1]
;;;224    	//Enable reset on MR0: TIMER will reset if MR0 matches it
;;;225    	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
0000c8  f88d0003          STRB     r0,[sp,#3]
;;;226    	//Stop on MR0 if MR0 matches it
;;;227    	TIM_MatchConfigStruct.StopOnMatch  = TRUE;
0000cc  f88d0002          STRB     r0,[sp,#2]
;;;228    	//Toggle MR0.0 pin if MR0 matches it
;;;229    	TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
0000d0  f88d4004          STRB     r4,[sp,#4]
;;;230    	TIM_MatchConfigStruct.MatchValue   = 500000;
0000d4  481a              LDR      r0,|L2.320|
0000d6  9002              STR      r0,[sp,#8]
;;;231    
;;;232    	// To start timer 
;;;233    	TIM_ConfigMatch(LPC_TIMER1, &TIM_MatchConfigStruct);
0000d8  4d1a              LDR      r5,|L2.324|
0000da  4669              MOV      r1,sp
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       TIM_ConfigMatch
;;;234    	TIM_Init(LPC_TIMER1, TIM_TIMER_MODE,&TIM_ConfigStruct);
0000e2  aa03              ADD      r2,sp,#0xc
0000e4  2100              MOVS     r1,#0
0000e6  4628              MOV      r0,r5
0000e8  f7fffffe          BL       TIM_Init
;;;235    	TIM_Cmd(LPC_TIMER1, ENABLE);
0000ec  2101              MOVS     r1,#1
0000ee  4628              MOV      r0,r5
0000f0  f7fffffe          BL       TIM_Cmd
0000f4  4f14              LDR      r7,|L2.328|
0000f6  f44f5600          MOV      r6,#0x2000
0000fa  603e              STR      r6,[r7,#0]
;;;236    	
;;;237    	/* Enable interrupt for timer 0 */
;;;238    	NVIC_EnableIRQ(TIMER1_IRQn);
;;;239    	__enable_irq();
0000fc  b662              CPSIE    i
;;;240    
;;;241    	CGU_SetPLL1(17);
0000fe  2011              MOVS     r0,#0x11
000100  f7fffffe          BL       CGU_SetPLL1
;;;242    	__WFI();
000104  bf30              WFI      
000106  f8c76080          STR      r6,[r7,#0x80]
;;;243    
;;;244    	NVIC_DisableIRQ(TIMER1_IRQn);
;;;245    	TIM_Cmd(LPC_TIMER1, DISABLE);
00010a  2100              MOVS     r1,#0
00010c  4628              MOV      r0,r5
00010e  f7fffffe          BL       TIM_Cmd
;;;246    	LPC_TIMER1->MCR = 0;
000112  616c              STR      r4,[r5,#0x14]
;;;247    
;;;248    	CGU_UpdateClock();
000114  f7fffffe          BL       CGU_UpdateClock
;;;249    
;;;250    	LPC_SCU->SFSP3_3 = 0xF3; /* high drive for SCLK */
000118  490c              LDR      r1,|L2.332|
00011a  20f3              MOVS     r0,#0xf3
00011c  6008              STR      r0,[r1,#0]
;;;251    	/* IO pins */
;;;252    	LPC_SCU->SFSP3_4=LPC_SCU->SFSP3_5=LPC_SCU->SFSP3_6=LPC_SCU->SFSP3_7 = 0xD3;
00011e  20d3              MOVS     r0,#0xd3
000120  6108              STR      r0,[r1,#0x10]
000122  60c8              STR      r0,[r1,#0xc]
000124  6088              STR      r0,[r1,#8]
000126  6048              STR      r0,[r1,#4]
;;;253    	LPC_SCU->SFSP3_8 = 0x13; /* CS doesn't need feedback */
000128  2013              MOVS     r0,#0x13
00012a  6148              STR      r0,[r1,#0x14]
;;;254    }
00012c  b005              ADD      sp,sp,#0x14
00012e  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L2.304|
                          DCD      0x00b71b00
                  |L2.308|
                          DCD      0x400500ac
                  |L2.312|
                          DCD      0x40051478
                  |L2.316|
                          DCD      0x4004312c
                  |L2.320|
                          DCD      0x0007a120
                  |L2.324|
                          DCD      0x40085000
                  |L2.328|
                          DCD      0xe000e100
                  |L2.332|
                          DCD      0x4008618c

                          AREA ||i.delayus||, CODE, READONLY, ALIGN=1

                  delayus PROC
;;;160    
;;;161    static void delayus(uint32_t us)
000000  b50c              PUSH     {r2,r3,lr}
;;;162    {
;;;163    	volatile uint32_t i, j;	
;;;164    	
;;;165    	for (i=0; i<us; i++)
000002  2200              MOVS     r2,#0
000004  9201              STR      r2,[sp,#4]
000006  e00a              B        |L3.30|
                  |L3.8|
;;;166    		for (j=0; j<38; j++);
000008  9200              STR      r2,[sp,#0]
00000a  e002              B        |L3.18|
                  |L3.12|
00000c  9900              LDR      r1,[sp,#0]
00000e  1c49              ADDS     r1,r1,#1
000010  9100              STR      r1,[sp,#0]
                  |L3.18|
000012  9900              LDR      r1,[sp,#0]
000014  2926              CMP      r1,#0x26
000016  d3f9              BCC      |L3.12|
000018  9901              LDR      r1,[sp,#4]            ;165
00001a  1c49              ADDS     r1,r1,#1              ;165
00001c  9101              STR      r1,[sp,#4]            ;165
                  |L3.30|
00001e  9901              LDR      r1,[sp,#4]            ;165
000020  4281              CMP      r1,r0                 ;165
000022  d3f1              BCC      |L3.8|
;;;167    }
000024  bd0c              POP      {r2,r3,pc}
;;;168    
                          ENDP


                          AREA ||i.platformInit||, CODE, READONLY, ALIGN=1

                  platformInit PROC
;;;33     /* this function initializes the platform with system level settings */
;;;34     void platformInit(void) {
000000  b510              PUSH     {r4,lr}
;;;35     
;;;36     	SystemInit();	
000002  f7fffffe          BL       SystemInit
;;;37     	
;;;38     	/* checks for presence of an FPU unit */
;;;39     	fpuInit();
000006  f7fffffe          BL       fpuInit
;;;40     
;;;41     	clockInit();
00000a  f7fffffe          BL       clockInit
;;;42     	vIOInit();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      vIOInit
;;;43     
;;;44     	#if (USE_EXT_STATIC_MEM == YES) || (USE_EXT_DYNAMIC_MEM == YES)
;;;45     	 
;;;46     	EMC_Init();
;;;47     	
;;;48     	#endif
;;;49     
;;;50         #if (USE_EXT_FLASH == YES)
;;;51     	
;;;52     	// relocate vector table to internal ram
;;;53     	// updates also VTOR
;;;54     	relocIrqTable(); 
;;;55     	
;;;56     	#endif
;;;57     }
;;;58     
                          ENDP


                          AREA ||i.vIOInit||, CODE, READONLY, ALIGN=2

                  vIOInit PROC
;;;61      *----------------------------------------------------------------------------*/
;;;62     void vIOInit(void)
000000  b510              PUSH     {r4,lr}
;;;63     {	
;;;64     	// disable clocks to peripherals we don't use	
;;;65     	LPC_CCU1->CLK_M4_RITIMER_CFG = 0;	
000002  499a              LDR      r1,|L5.620|
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]
;;;66     	LPC_CCU1->CLK_APB3_I2C1_CFG = 0;
000008  4999              LDR      r1,|L5.624|
00000a  6008              STR      r0,[r1,#0]
;;;67     	LPC_CCU1->CLK_APB3_ADC1_CFG = 0;
00000c  6188              STR      r0,[r1,#0x18]
;;;68     	LPC_CCU1->CLK_APB3_CAN0_CFG = 0;
00000e  6208              STR      r0,[r1,#0x20]
;;;69     	LPC_CCU1->CLK_APB1_MOTOCONPWM_CFG = 0;
000010  f8c10100          STR      r0,[r1,#0x100]
;;;70     	LPC_CCU1->CLK_APB1_I2S_CFG = 0;
000014  f8c10110          STR      r0,[r1,#0x110]
;;;71     	LPC_CCU1->CLK_APB1_CAN1_CFG = 0;
000018  f8c10118          STR      r0,[r1,#0x118]
;;;72     	LPC_CCU1->CLK_M4_LCD_CFG = 0;
00001c  4995              LDR      r1,|L5.628|
00001e  6008              STR      r0,[r1,#0]
;;;73     	LPC_CCU1->CLK_M4_ETHERNET_CFG = 0;
000020  4994              LDR      r1,|L5.628|
000022  3108              ADDS     r1,r1,#8
000024  6008              STR      r0,[r1,#0]
;;;74     	LPC_CCU1->CLK_M4_EMC_CFG = 0;
000026  4993              LDR      r1,|L5.628|
000028  3118              ADDS     r1,r1,#0x18
00002a  6008              STR      r0,[r1,#0]
;;;75     	LPC_CCU1->CLK_M4_SDIO_CFG = 0;
00002c  4991              LDR      r1,|L5.628|
00002e  3120              ADDS     r1,r1,#0x20
000030  6008              STR      r0,[r1,#0]
;;;76     	LPC_CCU1->CLK_M4_USB1_CFG = 0;
000032  4990              LDR      r1,|L5.628|
000034  3158              ADDS     r1,r1,#0x58
000036  6008              STR      r0,[r1,#0]
;;;77     	LPC_CCU1->CLK_M4_EMCDIV_CFG = 0;
000038  498e              LDR      r1,|L5.628|
00003a  3160              ADDS     r1,r1,#0x60
00003c  6008              STR      r0,[r1,#0]
;;;78     
;;;79     	LPC_CCU1->CLK_M4_USART2_CFG = 0;
00003e  498b              LDR      r1,|L5.620|
000040  3108              ADDS     r1,r1,#8
000042  6008              STR      r0,[r1,#0]
;;;80     
;;;81     	LPC_CCU1->CLK_M4_SSP0_CFG = 0;
000044  4989              LDR      r1,|L5.620|
000046  39e8              SUBS     r1,r1,#0xe8
000048  6008              STR      r0,[r1,#0]
;;;82     	LPC_CCU1->CLK_M4_QEI_CFG = 0;
00004a  4988              LDR      r1,|L5.620|
00004c  3130              ADDS     r1,r1,#0x30
00004e  6008              STR      r0,[r1,#0]
;;;83     
;;;84     	LPC_CCU2->CLK_APB0_SSP0_CFG = 0;
000050  4989              LDR      r1,|L5.632|
000052  6008              STR      r0,[r1,#0]
;;;85     	LPC_CCU2->CLK_APB2_USART2_CFG = 0;
000054  4989              LDR      r1,|L5.636|
000056  f8c10300          STR      r0,[r1,#0x300]
;;;86     	LPC_CCU2->CLK_SDIO_CFG = 0;
00005a  4989              LDR      r1,|L5.640|
00005c  6008              STR      r0,[r1,#0]
;;;87     
;;;88     	scu_pinmux(0x0, 0,  (MD_PUP | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[0] siod
00005e  2300              MOVS     r3,#0
000060  22e0              MOVS     r2,#0xe0
000062  4619              MOV      r1,r3
000064  4618              MOV      r0,r3
000066  f7fffffe          BL       scu_pinmux
;;;89     	scu_pinmux(0x0, 1,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[1] sioc
00006a  2300              MOVS     r3,#0
00006c  22f0              MOVS     r2,#0xf0
00006e  2101              MOVS     r1,#1
000070  4618              MOV      r0,r3
000072  f7fffffe          BL       scu_pinmux
;;;90     	scu_pinmux(0x1, 15, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[2] PWDN
000076  2300              MOVS     r3,#0
000078  22f0              MOVS     r2,#0xf0
00007a  210f              MOVS     r1,#0xf
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       scu_pinmux
;;;91     	scu_pinmux(0x1, 16, (MD_PUP | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio0[3] RSTB
000082  2300              MOVS     r3,#0
000084  22e0              MOVS     r2,#0xe0
000086  2110              MOVS     r1,#0x10
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       scu_pinmux
;;;92     	
;;;93     	scu_pinmux(0x1, 7,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[0] Y0 
00008e  2300              MOVS     r3,#0
000090  22f0              MOVS     r2,#0xf0
000092  2107              MOVS     r1,#7
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       scu_pinmux
;;;94     	scu_pinmux(0x1, 8,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[1] Y1
00009a  2300              MOVS     r3,#0
00009c  22f0              MOVS     r2,#0xf0
00009e  2108              MOVS     r1,#8
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       scu_pinmux
;;;95     	scu_pinmux(0x1, 9,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[2] Y2
0000a6  2300              MOVS     r3,#0
0000a8  22f0              MOVS     r2,#0xf0
0000aa  2109              MOVS     r1,#9
0000ac  2001              MOVS     r0,#1
0000ae  f7fffffe          BL       scu_pinmux
;;;96     	scu_pinmux(0x1, 10, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[3] Y3
0000b2  2300              MOVS     r3,#0
0000b4  22f0              MOVS     r2,#0xf0
0000b6  210a              MOVS     r1,#0xa
0000b8  2001              MOVS     r0,#1
0000ba  f7fffffe          BL       scu_pinmux
;;;97     	scu_pinmux(0x1, 11, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[4] Y4
0000be  2300              MOVS     r3,#0
0000c0  22f0              MOVS     r2,#0xf0
0000c2  210b              MOVS     r1,#0xb
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       scu_pinmux
;;;98     	scu_pinmux(0x1, 12, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[5] Y5
0000ca  2300              MOVS     r3,#0
0000cc  22f0              MOVS     r2,#0xf0
0000ce  210c              MOVS     r1,#0xc
0000d0  2001              MOVS     r0,#1
0000d2  f7fffffe          BL       scu_pinmux
;;;99     	scu_pinmux(0x1, 13, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[6] Y6
0000d6  2300              MOVS     r3,#0
0000d8  22f0              MOVS     r2,#0xf0
0000da  210d              MOVS     r1,#0xd
0000dc  2001              MOVS     r0,#1
0000de  f7fffffe          BL       scu_pinmux
;;;100    	scu_pinmux(0x1, 14, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[7] Y7
0000e2  2300              MOVS     r3,#0
0000e4  22f0              MOVS     r2,#0xf0
0000e6  210e              MOVS     r1,#0xe
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       scu_pinmux
;;;101    	scu_pinmux(0x1, 6,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0);          // gpio1[9] HSYNC 
0000ee  2300              MOVS     r3,#0
0000f0  22f0              MOVS     r2,#0xf0
0000f2  2106              MOVS     r1,#6
0000f4  2001              MOVS     r0,#1
0000f6  f7fffffe          BL       scu_pinmux
;;;102    	scu_pinmux(0x2, 12, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[12] VSYNC
0000fa  2300              MOVS     r3,#0
0000fc  22f0              MOVS     r2,#0xf0
0000fe  210c              MOVS     r1,#0xc
000100  2002              MOVS     r0,#2
000102  f7fffffe          BL       scu_pinmux
;;;103    	scu_pinmux(0x2, 13, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio1[13] PCLK
000106  2300              MOVS     r3,#0
000108  22f0              MOVS     r2,#0xf0
00010a  210d              MOVS     r1,#0xd
00010c  2002              MOVS     r0,#2
00010e  f7fffffe          BL       scu_pinmux
;;;104    
;;;105    	scu_pinmux(0x2, 11, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	     // CTOUT_5 RCS0
000112  2301              MOVS     r3,#1
000114  22f0              MOVS     r2,#0xf0
000116  210b              MOVS     r1,#0xb
000118  2002              MOVS     r0,#2
00011a  f7fffffe          BL       scu_pinmux
;;;106    	scu_pinmux(0x6, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	         // GPIO3[4] 
00011e  2300              MOVS     r3,#0
000120  22f0              MOVS     r2,#0xf0
000122  2105              MOVS     r1,#5
000124  2006              MOVS     r0,#6
000126  f7fffffe          BL       scu_pinmux
;;;107    
;;;108    	scu_pinmux(0x1, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // CTOUT_7 RED
00012a  2301              MOVS     r3,#1
00012c  22f0              MOVS     r2,#0xf0
00012e  4619              MOV      r1,r3
000130  4618              MOV      r0,r3
000132  f7fffffe          BL       scu_pinmux
;;;109    	scu_pinmux(0x1, 2, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // CTOUT_6 GREEN
000136  2301              MOVS     r3,#1
000138  22f0              MOVS     r2,#0xf0
00013a  2102              MOVS     r1,#2
00013c  4618              MOV      r0,r3
00013e  f7fffffe          BL       scu_pinmux
;;;110    	scu_pinmux(0x2, 9, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     	//  gpio1[10] CTOUT_3 WHITE
000142  2300              MOVS     r3,#0
000144  22f0              MOVS     r2,#0xf0
000146  2109              MOVS     r1,#9
000148  2002              MOVS     r0,#2
00014a  f7fffffe          BL       scu_pinmux
;;;111    
;;;112    	scu_pinmux(0x1, 5,  (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	       // RCS1=FUNC1=CTOUT_10 
00014e  2301              MOVS     r3,#1
000150  22f0              MOVS     r2,#0xf0
000152  2105              MOVS     r1,#5
000154  4618              MOV      r0,r3
000156  f7fffffe          BL       scu_pinmux
;;;113    	scu_pinmux(0x2, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // BLUE  FUNC1=CTOUT_1 
00015a  2301              MOVS     r3,#1
00015c  22f0              MOVS     r2,#0xf0
00015e  2107              MOVS     r1,#7
000160  2002              MOVS     r0,#2
000162  f7fffffe          BL       scu_pinmux
;;;114    	scu_pinmux(0x2, 10, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	       // GPIO0[4], PWM1=FUNC1-CTOUT_2
000166  2300              MOVS     r3,#0
000168  22f0              MOVS     r2,#0xf0
00016a  210a              MOVS     r1,#0xa
00016c  2002              MOVS     r0,#2
00016e  f7fffffe          BL       scu_pinmux
;;;115    
;;;116    	scu_pinmux(0x2, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC2); 	         // UART3 TX for debug console 
000172  2302              MOVS     r3,#2
000174  22f0              MOVS     r2,#0xf0
000176  2103              MOVS     r1,#3
000178  4618              MOV      r0,r3
00017a  f7fffffe          BL       scu_pinmux
;;;117    	scu_pinmux(0x2, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // GPIO
00017e  2304              MOVS     r3,#4
000180  22f0              MOVS     r2,#0xf0
000182  4619              MOV      r1,r3
000184  2002              MOVS     r0,#2
000186  f7fffffe          BL       scu_pinmux
;;;118    
;;;119    	scu_pinmux(0x3, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[8] VBUS_EN
00018a  2304              MOVS     r3,#4
00018c  22f0              MOVS     r2,#0xf0
00018e  2101              MOVS     r1,#1
000190  2003              MOVS     r0,#3
000192  f7fffffe          BL       scu_pinmux
;;;120    
;;;121    	//scu_pinmux(0x5, 6, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U1_TXD (output)
;;;122    	//scu_pinmux(0x5, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U1_RXD (input)
;;;123    	scu_pinmux(0x2, 0, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U0_TXD 
000196  2304              MOVS     r3,#4
000198  22f0              MOVS     r2,#0xf0
00019a  2100              MOVS     r1,#0
00019c  2002              MOVS     r0,#2
00019e  f7fffffe          BL       scu_pinmux
;;;124    	scu_pinmux(0x2, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // U0_RXD
0001a2  2304              MOVS     r3,#4
0001a4  22f0              MOVS     r2,#0xf0
0001a6  2101              MOVS     r1,#1
0001a8  2002              MOVS     r0,#2
0001aa  f7fffffe          BL       scu_pinmux
;;;125    
;;;126    	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); 	         // SSP1_MISO 
0001ae  2305              MOVS     r3,#5
0001b0  22f0              MOVS     r2,#0xf0
0001b2  2103              MOVS     r1,#3
0001b4  2001              MOVS     r0,#1
0001b6  f7fffffe          BL       scu_pinmux
;;;127    	scu_pinmux(0x1, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); 	         // SSP1_MOSI 
0001ba  2305              MOVS     r3,#5
0001bc  22f0              MOVS     r2,#0xf0
0001be  2104              MOVS     r1,#4
0001c0  2001              MOVS     r0,#1
0001c2  f7fffffe          BL       scu_pinmux
;;;128    	
;;;129    	scu_pinmux(0x1, 19, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // SSP1_SCK 
0001c6  2301              MOVS     r3,#1
0001c8  22f0              MOVS     r2,#0xf0
0001ca  2113              MOVS     r1,#0x13
0001cc  4618              MOV      r0,r3
0001ce  f7fffffe          BL       scu_pinmux
;;;130    	scu_pinmux(0x1, 20, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC1); 	         // SSP1_SSEL 
0001d2  2301              MOVS     r3,#1
0001d4  22f0              MOVS     r2,#0xf0
0001d6  2114              MOVS     r1,#0x14
0001d8  4618              MOV      r0,r3
0001da  f7fffffe          BL       scu_pinmux
;;;131    	scu_pinmux(0x2, 2, (MD_PDN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[2] 
0001de  2102              MOVS     r1,#2
0001e0  2304              MOVS     r3,#4
0001e2  22f8              MOVS     r2,#0xf8
0001e4  4608              MOV      r0,r1
0001e6  f7fffffe          BL       scu_pinmux
;;;132    	scu_pinmux(0x2, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); // FUNC4 	         // gpio5[5] rev 1.1 SS control
0001ea  2300              MOVS     r3,#0
0001ec  22f0              MOVS     r2,#0xf0
0001ee  2105              MOVS     r1,#5
0001f0  2002              MOVS     r0,#2
0001f2  f7fffffe          BL       scu_pinmux
;;;133    	scu_pinmux(0x3, 2, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC4); 	         // gpio5[9]
0001f6  2304              MOVS     r3,#4
0001f8  22f0              MOVS     r2,#0xf0
0001fa  2102              MOVS     r1,#2
0001fc  2003              MOVS     r0,#3
0001fe  f7fffffe          BL       scu_pinmux
;;;134    	
;;;135    	scu_pinmux(0x2, 8, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	         // SGPIO15 
000202  2300              MOVS     r3,#0
000204  22f0              MOVS     r2,#0xf0
000206  2108              MOVS     r1,#8
000208  2002              MOVS     r0,#2
00020a  f7fffffe          BL       scu_pinmux
;;;136    	scu_pinmux(0x4, 1, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	         // gpio2[1] rev 1.1 
00020e  2300              MOVS     r3,#0
000210  22f0              MOVS     r2,#0xf0
000212  2101              MOVS     r1,#1
000214  2004              MOVS     r0,#4
000216  f7fffffe          BL       scu_pinmux
;;;137    
;;;138    	// 
;;;139    	scu_pinmux(0x3, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	         
00021a  2303              MOVS     r3,#3
00021c  22f0              MOVS     r2,#0xf0
00021e  4619              MOV      r1,r3
000220  4618              MOV      r0,r3
000222  f7fffffe          BL       scu_pinmux
;;;140    	scu_pinmux(0x3, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	         
000226  2303              MOVS     r3,#3
000228  22f0              MOVS     r2,#0xf0
00022a  2104              MOVS     r1,#4
00022c  4618              MOV      r0,r3
00022e  f7fffffe          BL       scu_pinmux
;;;141    	scu_pinmux(0x3, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	         
000232  2303              MOVS     r3,#3
000234  22f0              MOVS     r2,#0xf0
000236  2105              MOVS     r1,#5
000238  4618              MOV      r0,r3
00023a  f7fffffe          BL       scu_pinmux
;;;142    	scu_pinmux(0x3, 6, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	         
00023e  2303              MOVS     r3,#3
000240  22f0              MOVS     r2,#0xf0
000242  2106              MOVS     r1,#6
000244  4618              MOV      r0,r3
000246  f7fffffe          BL       scu_pinmux
;;;143    	scu_pinmux(0x3, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	          
00024a  2303              MOVS     r3,#3
00024c  22f0              MOVS     r2,#0xf0
00024e  2107              MOVS     r1,#7
000250  4618              MOV      r0,r3
000252  f7fffffe          BL       scu_pinmux
;;;144    	scu_pinmux(0x3, 8, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC3); 	          
000256  2303              MOVS     r3,#3
000258  22f0              MOVS     r2,#0xf0
00025a  2108              MOVS     r1,#8
00025c  4618              MOV      r0,r3
00025e  f7fffffe          BL       scu_pinmux
;;;145    
;;;146    	//scu_pinmux(0x7, 4, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;147    	//scu_pinmux(0x7, 5, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;148    	//scu_pinmux(0x7, 6, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;149    	//scu_pinmux(0x7, 7, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC0); 	     // gpio4[9] 
;;;150    
;;;151    	LPC_SCU_CLK(0) = 1 + (MD_PLN | MD_EZI | MD_ZI | MD_EHS); /*  EXTBUS_CLK0  IDIVB input */
000262  4908              LDR      r1,|L5.644|
000264  20f1              MOVS     r0,#0xf1
000266  6008              STR      r0,[r1,#0]
;;;152    }
000268  bd10              POP      {r4,pc}
;;;153    	
                          ENDP

00026a  0000              DCW      0x0000
                  |L5.620|
                          DCD      0x40051600
                  |L5.624|
                          DCD      0x40051108
                  |L5.628|
                          DCD      0x40051418
                  |L5.632|
                          DCD      0x40052700
                  |L5.636|
                          DCD      0x40052000
                  |L5.640|
                          DCD      0x40052800
                  |L5.644|
                          DCD      0x40086c00

;*** Start embedded assembler ***

#line 1 "src\\platform_config.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_platform_config_c_9d0ba0a3____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___17_platform_config_c_9d0ba0a3____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___17_platform_config_c_9d0ba0a3____REVSH|
#line 144
|__asm___17_platform_config_c_9d0ba0a3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
