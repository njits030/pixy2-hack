; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\sccb.o --asm_dir=.\ --list_dir=.\ --depend=.\sccb.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\sccb.crf src\sccb.cpp]
                          THUMB

                          AREA ||i._ZN5CSccb5Read8Et||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb5Read8Et PROC ; CSccb::Read8(unsigned short)
;;;139    
;;;140    uint8_t CSccb::Read8(uint16_t addr)
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142    	return ReadReg(addr, 1); 
000002  2201              MOVS     r2,#1
000004  f7fffffe          BL       _ZN5CSccb7ReadRegEth ; CSccb::ReadReg(unsigned short, unsigned char)
000008  b2c0              UXTB     r0,r0
;;;143    }
00000a  bd10              POP      {r4,pc}
;;;144    
                          ENDP


                          AREA ||i._ZN5CSccb5ResetEv||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb5ResetEv PROC ; CSccb::Reset()
;;;30     
;;;31     void CSccb::Reset()
000000  4770              BX       lr
;;;32     {
;;;33     }
;;;34     
                          ENDP


                          AREA ||i._ZN5CSccb6Read16Et||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb6Read16Et PROC ; CSccb::Read16(unsigned short)
;;;144    
;;;145    uint16_t CSccb::Read16(uint16_t addr)
000000  b510              PUSH     {r4,lr}
;;;146    {
;;;147    	return ReadReg(addr, 2); 
000002  2202              MOVS     r2,#2
000004  f7fffffe          BL       _ZN5CSccb7ReadRegEth ; CSccb::ReadReg(unsigned short, unsigned char)
000008  b280              UXTH     r0,r0
;;;148    }
00000a  bd10              POP      {r4,pc}
;;;149    
                          ENDP


                          AREA ||i._ZN5CSccb6Read32Et||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb6Read32Et PROC ; CSccb::Read32(unsigned short)
;;;149    
;;;150    uint32_t CSccb::Read32(uint16_t addr)
000000  2204              MOVS     r2,#4
;;;151    {
;;;152    	return ReadReg(addr, 4); 
000002  f7ffbffe          B.W      _ZN5CSccb7ReadRegEth ; CSccb::ReadReg(unsigned short, unsigned char)
;;;153    }
;;;154    
                          ENDP


                          AREA ||i._ZN5CSccb6Write8Eth||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb6Write8Eth PROC ; CSccb::Write8(unsigned short, unsigned char)
;;;79     
;;;80     void CSccb::Write8(uint16_t addr, uint8_t val)
000000  2301              MOVS     r3,#1
;;;81     {
;;;82     	WriteReg(addr, val, 1);
000002  f7ffbffe          B.W      _ZN5CSccb8WriteRegEtjh ; CSccb::WriteReg(unsigned short, unsigned, unsigned char)
;;;83     }
;;;84     
                          ENDP


                          AREA ||i._ZN5CSccb7ReadRegEth||, CODE, READONLY, ALIGN=2

                  _ZN5CSccb7ReadRegEth PROC ; CSccb::ReadReg(unsigned short, unsigned char)
;;;95     
;;;96     uint32_t CSccb::ReadReg(uint16_t addr, uint8_t n)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;97     {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;98     	uint8_t i, j, a;
;;;99     	uint32_t val, tVal;
;;;100    	uint8_t *pVal = (uint8_t *)&val;
00000a  46e8              MOV      r8,sp
;;;101    
;;;102    	// 2 phase
;;;103    	Start();
00000c  4648              MOV      r0,r9
00000e  f7fffffe          BL       _ZN5CSccb5StartEv ; CSccb::Start()
;;;104    	WriteReg(m_dev, 1);
000012  f8991000          LDRB     r1,[r9,#0]
000016  2201              MOVS     r2,#1
000018  4648              MOV      r0,r9
00001a  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;105    	WriteReg(addr, 2);
00001e  2202              MOVS     r2,#2
000020  4621              MOV      r1,r4
000022  4648              MOV      r0,r9
000024  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;106    	Stop();
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       _ZN5CSccb4StopEv ; CSccb::Stop()
;;;107    
;;;108    	Start();
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       _ZN5CSccb5StartEv ; CSccb::Start()
;;;109    	WriteReg(m_dev+1, 1);
000034  f8991000          LDRB     r1,[r9,#0]
000038  2201              MOVS     r2,#1
00003a  1c49              ADDS     r1,r1,#1
00003c  4648              MOV      r0,r9
00003e  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;110    
;;;111    	for (i=0, val=0; i<n; i++)
000042  2500              MOVS     r5,#0
000044  2000              MOVS     r0,#0
000046  9000              STR      r0,[sp,#0]
000048  e03a              B        |L6.192|
                  |L6.74|
;;;112    	{
;;;113    		TriState();
00004a  4648              MOV      r0,r9
00004c  f7fffffe          BL       _ZN5CSccb8TriStateEv ; CSccb::TriState()
;;;114    		for (j=0, tVal=0; j<8; j++)
000050  2600              MOVS     r6,#0
000052  2400              MOVS     r4,#0
;;;115    		{
;;;116    			tVal <<= 1;
;;;117    			PortWrite(1, 0);
;;;118    			if (DATA_REG&DATA_MASK)
000054  f8dfa078          LDR      r10,|L6.208|
000058  e012              B        |L6.128|
                  |L6.90|
00005a  0064              LSLS     r4,r4,#1              ;116
00005c  2200              MOVS     r2,#0                 ;117
00005e  2101              MOVS     r1,#1                 ;117
000060  4648              MOV      r0,r9                 ;117
000062  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
000066  f8da0100          LDR      r0,[r10,#0x100]
00006a  07c0              LSLS     r0,r0,#31
00006c  d001              BEQ      |L6.114|
;;;119    				tVal |= 1;
00006e  f0440401          ORR      r4,r4,#1
                  |L6.114|
;;;120    			PortWrite(0, 0);
000072  2200              MOVS     r2,#0
000074  4611              MOV      r1,r2
000076  4648              MOV      r0,r9
000078  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
00007c  1c76              ADDS     r6,r6,#1              ;114
00007e  b2f6              UXTB     r6,r6                 ;114
                  |L6.128|
000080  2e08              CMP      r6,#8                 ;114
000082  d3ea              BCC      |L6.90|
;;;121    		}
;;;122    		pVal[n-1-i] = tVal; // little endian
000084  1b78              SUBS     r0,r7,r5
000086  4440              ADD      r0,r0,r8
000088  f8004c01          STRB     r4,[r0,#-1]
;;;123    
;;;124    		// send A or NA bit
;;;125    		if (i==n-1)
00008c  1e78              SUBS     r0,r7,#1
00008e  4285              CMP      r5,r0
000090  d101              BNE      |L6.150|
;;;126    			a = 1; // NA
000092  2401              MOVS     r4,#1
000094  e000              B        |L6.152|
                  |L6.150|
;;;127    		else 
;;;128    			a = 0; // A
000096  2400              MOVS     r4,#0
                  |L6.152|
;;;129    
;;;130    		PortWrite(0, a);
000098  4622              MOV      r2,r4
00009a  2100              MOVS     r1,#0
00009c  4648              MOV      r0,r9
00009e  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;131    		Drive();
0000a2  4648              MOV      r0,r9
0000a4  f7fffffe          BL       _ZN5CSccb5DriveEv ; CSccb::Drive()
;;;132    		PortWrite(1, a);
0000a8  4622              MOV      r2,r4
0000aa  2101              MOVS     r1,#1
0000ac  4648              MOV      r0,r9
0000ae  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;133    		PortWrite(0, a);
0000b2  4622              MOV      r2,r4
0000b4  2100              MOVS     r1,#0
0000b6  4648              MOV      r0,r9
0000b8  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
0000bc  1c6d              ADDS     r5,r5,#1              ;111
0000be  b2ed              UXTB     r5,r5                 ;111
                  |L6.192|
0000c0  42bd              CMP      r5,r7                 ;111
0000c2  d3c2              BCC      |L6.74|
;;;134    	}
;;;135    	Stop();
0000c4  4648              MOV      r0,r9
0000c6  f7fffffe          BL       _ZN5CSccb4StopEv ; CSccb::Stop()
;;;136    
;;;137    	return val;
0000ca  9800              LDR      r0,[sp,#0]
;;;138    }
0000cc  e8bd8ff8          POP      {r3-r11,pc}
;;;139    
                          ENDP

                  |L6.208|
                          DCD      0x400f6000

                          AREA ||i._ZN5CSccb7Write16Ett||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb7Write16Ett PROC ; CSccb::Write16(unsigned short, unsigned short)
;;;84     
;;;85     void CSccb::Write16(uint16_t addr, uint16_t val)
000000  2302              MOVS     r3,#2
;;;86     {
;;;87     	WriteReg(addr, val, 2);
000002  f7ffbffe          B.W      _ZN5CSccb8WriteRegEtjh ; CSccb::WriteReg(unsigned short, unsigned, unsigned char)
;;;88     }
;;;89     
                          ENDP


                          AREA ||i._ZN5CSccb7Write32Etj||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb7Write32Etj PROC ; CSccb::Write32(unsigned short, unsigned)
;;;89     
;;;90     void CSccb::Write32(uint16_t addr, uint32_t val)
000000  2304              MOVS     r3,#4
;;;91     {
;;;92     	WriteReg(addr, val, 4);
000002  f7ffbffe          B.W      _ZN5CSccb8WriteRegEtjh ; CSccb::WriteReg(unsigned short, unsigned, unsigned char)
;;;93     }
;;;94     
                          ENDP


                          AREA ||i._ZN5CSccb8WriteRegEjh||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb8WriteRegEjh PROC ; CSccb::WriteReg(unsigned, unsigned char)
;;;35     
;;;36     void CSccb::WriteReg(uint32_t val, uint8_t n)
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;37     {
000004  4681              MOV      r9,r0
000006  4617              MOV      r7,r2
;;;38     	uint8_t i, j, tVal;
;;;39     	uint8_t *pVal = (uint8_t *)&val;
000008  f10d0804          ADD      r8,sp,#4
;;;40     	 
;;;41     	for (i=0; i<n; i++)
00000c  2600              MOVS     r6,#0
00000e  e042              B        |L9.150|
                  |L9.16|
;;;42     	{
;;;43     		tVal = pVal[n-1-i]; // little endian
000010  1bb8              SUBS     r0,r7,r6
000012  4440              ADD      r0,r0,r8
000014  f8105c01          LDRB     r5,[r0,#-1]
;;;44     		for (j=0; j<8; j++, tVal<<=1)
000018  2400              MOVS     r4,#0
                  |L9.26|
;;;45     		{
;;;46     			if (tVal&0x80) // send msb first
00001a  0628              LSLS     r0,r5,#24
00001c  d50f              BPL      |L9.62|
;;;47     			{
;;;48     				PortWrite(0, 1);
00001e  2201              MOVS     r2,#1
000020  2100              MOVS     r1,#0
000022  4648              MOV      r0,r9
000024  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;49     				PortWrite(1, 1);
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;50     				PortWrite(0, 1);
000032  2201              MOVS     r2,#1
000034  2100              MOVS     r1,#0
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
00003c  e00e              B        |L9.92|
                  |L9.62|
;;;51     			}
;;;52     			else
;;;53     			{
;;;54     				PortWrite(0, 0);
00003e  2200              MOVS     r2,#0
000040  4611              MOV      r1,r2
000042  4648              MOV      r0,r9
000044  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;55     				PortWrite(1, 0);
000048  2200              MOVS     r2,#0
00004a  2101              MOVS     r1,#1
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;56     				PortWrite(0, 0);
000052  2200              MOVS     r2,#0
000054  4611              MOV      r1,r2
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
                  |L9.92|
00005c  1c64              ADDS     r4,r4,#1              ;44
00005e  b2e4              UXTB     r4,r4                 ;44
000060  0668              LSLS     r0,r5,#25             ;44
000062  0e05              LSRS     r5,r0,#24             ;44
000064  2c08              CMP      r4,#8                 ;44
000066  d3d8              BCC      |L9.26|
;;;57     			}
;;;58     		}
;;;59     		// send "don't care" bit
;;;60     		TriState();
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       _ZN5CSccb8TriStateEv ; CSccb::TriState()
;;;61     		PortWrite(0, 0);
00006e  2200              MOVS     r2,#0
000070  4611              MOV      r1,r2
000072  4648              MOV      r0,r9
000074  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;62     		PortWrite(1, 0);
000078  2200              MOVS     r2,#0
00007a  2101              MOVS     r1,#1
00007c  4648              MOV      r0,r9
00007e  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;63     		PortWrite(0, 0);
000082  2200              MOVS     r2,#0
000084  4611              MOV      r1,r2
000086  4648              MOV      r0,r9
000088  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;64     		Drive();
00008c  4648              MOV      r0,r9
00008e  f7fffffe          BL       _ZN5CSccb5DriveEv ; CSccb::Drive()
000092  1c76              ADDS     r6,r6,#1              ;41
000094  b2f6              UXTB     r6,r6                 ;41
                  |L9.150|
000096  42be              CMP      r6,r7                 ;41
000098  d3ba              BCC      |L9.16|
;;;65     	}
;;;66     }
00009a  e8bd83fe          POP      {r1-r9,pc}
;;;67     
                          ENDP


                          AREA ||i._ZN5CSccb8WriteRegEtjh||, CODE, READONLY, ALIGN=1

                  _ZN5CSccb8WriteRegEtjh PROC ; CSccb::WriteReg(unsigned short, unsigned, unsigned char)
;;;68     
;;;69     void CSccb::WriteReg(uint16_t addr, uint32_t val, uint8_t n)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;70     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;71     	//printf("%x %x %d\n", addr, val, n);
;;;72     	Start();
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN5CSccb5StartEv ; CSccb::Start()
;;;73     	WriteReg(m_dev, 1);
000012  7821              LDRB     r1,[r4,#0]
000014  2201              MOVS     r2,#1
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;74     	WriteReg(addr, 2);
00001c  2202              MOVS     r2,#2
00001e  4639              MOV      r1,r7
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;75     	WriteReg(val, n);
000026  4632              MOV      r2,r6
000028  4629              MOV      r1,r5
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN5CSccb8WriteRegEjh ; CSccb::WriteReg(unsigned, unsigned char)
;;;76     	Stop();
000030  4620              MOV      r0,r4
000032  e8bd41f0          POP      {r4-r8,lr}
000036  f7ffbffe          B.W      _ZN5CSccb4StopEv ; CSccb::Stop()
;;;77     }
;;;78     
                          ENDP


                          AREA ||i._ZN5CSccbC1Eh||, CODE, READONLY, ALIGN=2

                  _ZN5CSccbC2Eh                  ; Alternate entry point ; CSccb::CSccb__sub_object(unsigned char)
                  _ZN5CSccbC1Eh PROC ; CSccb::CSccb(unsigned char)
;;;20     
;;;21     CSccb::CSccb(uint8_t dev)
;;;22     {
;;;23     	m_dev = dev;
;;;24     	DIR_REG |= CLK_MASK;
;;;25     
;;;26     	TriState();	// set clock as output, data tristate
;;;27     	PortWrite(1, 0);	// set clock high (idle)	 
;;;28     }
;;;29     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  7021              STRB     r1,[r4,#0]
000006  4807              LDR      r0,|L11.36|
000008  6801              LDR      r1,[r0,#0]
00000a  f0410102          ORR      r1,r1,#2
00000e  6001              STR      r1,[r0,#0]
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN5CSccb8TriStateEv ; CSccb::TriState()
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
000020  4620              MOV      r0,r4
000022  bd10              POP      {r4,pc}
                          ENDP

                  |L11.36|
                          DCD      0x400f6000

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN5CSccbC1Eh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccbC1Eh||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN5CSccb8WriteRegEjh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb8WriteRegEjh||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN5CSccb8WriteRegEtjh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb8WriteRegEtjh||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN5CSccb6Write8Eth||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb6Write8Eth||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN5CSccb7Write16Ett||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb7Write16Ett||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN5CSccb7Write32Etj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb7Write32Etj||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN5CSccb7ReadRegEth||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb7ReadRegEth||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN5CSccb5Read8Et||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb5Read8Et||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN5CSccb6Read16Et||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb6Read16Et||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN5CSccb6Read32Et||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb6Read32Et||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN5CSccb5ResetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb5ResetEv||
                          DCD      0x00000001

                          AREA ||i._ZN5CSccb9PortWriteEhh||, COMGROUP=_ZN5CSccb9PortWriteEhh, CODE, READONLY, ALIGN=2

                  _ZN5CSccb9PortWriteEhh PROC ; CSccb::PortWrite(unsigned char, unsigned char)
;;;43     	uint32_t ReadReg(uint16_t addr, uint8_t n);
;;;44     	inline void PortWrite(uint8_t clk, uint8_t data)
000000  b508              PUSH     {r3,lr}
;;;45     		{
;;;46     		volatile uint32_t d;
;;;47     		uint32_t bits = DATA_REG;
000002  4b0e              LDR      r3,|L73.60|
000004  f8d30100          LDR      r0,[r3,#0x100]
;;;48     		if (clk)
000008  2900              CMP      r1,#0
00000a  d002              BEQ      |L73.18|
;;;49     			bits |= CLK_MASK;
00000c  f0400002          ORR      r0,r0,#2
000010  e001              B        |L73.22|
                  |L73.18|
;;;50     		else
;;;51     			bits &= ~CLK_MASK;
000012  f0200002          BIC      r0,r0,#2
                  |L73.22|
;;;52     		if(data)
000016  b112              CBZ      r2,|L73.30|
;;;53     			bits |= DATA_MASK;
000018  f0400001          ORR      r0,r0,#1
00001c  e001              B        |L73.34|
                  |L73.30|
;;;54     		else		 
;;;55     			bits &= ~DATA_MASK;
00001e  f0200001          BIC      r0,r0,#1
                  |L73.34|
;;;56     		
;;;57     		DATA_REG = bits; 	
000022  f8c30100          STR      r0,[r3,#0x100]
;;;58     		for (d=0; d<SCCB_DELAY; d++);
000026  2000              MOVS     r0,#0
000028  9000              STR      r0,[sp,#0]
00002a  e002              B        |L73.50|
                  |L73.44|
00002c  9800              LDR      r0,[sp,#0]
00002e  1c40              ADDS     r0,r0,#1
000030  9000              STR      r0,[sp,#0]
                  |L73.50|
000032  9800              LDR      r0,[sp,#0]
000034  2864              CMP      r0,#0x64
000036  d3f9              BCC      |L73.44|
;;;59     		}
000038  bd08              POP      {r3,pc}
;;;60     
                          ENDP

00003a  0000              DCW      0x0000
                  |L73.60|
                          DCD      0x400f6000

                          AREA ||area_number.74||, COMGROUP=_ZN5CSccb9PortWriteEhh, LINKORDER=||i._ZN5CSccb9PortWriteEhh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb9PortWriteEhh||
                          DCD      0x00000001

                          AREA ||i._ZN5CSccb8TriStateEv||, COMGROUP=_ZN5CSccb8TriStateEv, CODE, READONLY, ALIGN=2

                  _ZN5CSccb8TriStateEv PROC ; CSccb::TriState()
;;;67     
;;;68     	inline void TriState()
000000  b508              PUSH     {r3,lr}
;;;69     		{
;;;70     		volatile uint32_t d;
;;;71     		DIR_REG &= ~DATA_MASK;
000002  4807              LDR      r0,|L80.32|
000004  6801              LDR      r1,[r0,#0]
000006  f0210101          BIC      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;72     		for (d=0; d<SCCB_DELAY; d++);
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  e002              B        |L80.24|
                  |L80.18|
000012  9800              LDR      r0,[sp,#0]
000014  1c40              ADDS     r0,r0,#1
000016  9000              STR      r0,[sp,#0]
                  |L80.24|
000018  9800              LDR      r0,[sp,#0]
00001a  2864              CMP      r0,#0x64
00001c  d3f9              BCC      |L80.18|
;;;73     		}
00001e  bd08              POP      {r3,pc}
;;;74     
                          ENDP

                  |L80.32|
                          DCD      0x400f6000

                          AREA ||area_number.81||, COMGROUP=_ZN5CSccb8TriStateEv, LINKORDER=||i._ZN5CSccb8TriStateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb8TriStateEv||
                          DCD      0x00000001

                          AREA ||i._ZN5CSccb4StopEv||, COMGROUP=_ZN5CSccb4StopEv, CODE, READONLY, ALIGN=1

                  _ZN5CSccb4StopEv PROC ; CSccb::Stop()
;;;82     
;;;83     	inline void Stop()
000000  b510              PUSH     {r4,lr}
;;;84     		{
000002  4604              MOV      r4,r0
;;;85     		PortWrite(1, 0);	// clk high, data low
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;86     		PortWrite(1, 1);	// clk, data high
00000e  2201              MOVS     r2,#1
000010  4611              MOV      r1,r2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;87     		TriState();	// put data into tristate
000018  4620              MOV      r0,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      _ZN5CSccb8TriStateEv ; CSccb::TriState()
;;;88     		}
;;;89     
                          ENDP


                          AREA ||area_number.88||, COMGROUP=_ZN5CSccb4StopEv, LINKORDER=||i._ZN5CSccb4StopEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb4StopEv||
                          DCD      0x00000001

                          AREA ||i._ZN5CSccb5DriveEv||, COMGROUP=_ZN5CSccb5DriveEv, CODE, READONLY, ALIGN=2

                  _ZN5CSccb5DriveEv PROC ; CSccb::Drive()
;;;60     
;;;61     	inline void Drive()
000000  b508              PUSH     {r3,lr}
;;;62     		{
;;;63     		volatile uint32_t d;
;;;64     		DIR_REG |= DATA_MASK;
000002  4807              LDR      r0,|L94.32|
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;65     		for (d=0; d<SCCB_DELAY; d++);
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  e002              B        |L94.24|
                  |L94.18|
000012  9800              LDR      r0,[sp,#0]
000014  1c40              ADDS     r0,r0,#1
000016  9000              STR      r0,[sp,#0]
                  |L94.24|
000018  9800              LDR      r0,[sp,#0]
00001a  2864              CMP      r0,#0x64
00001c  d3f9              BCC      |L94.18|
;;;66     		}
00001e  bd08              POP      {r3,pc}
;;;67     
                          ENDP

                  |L94.32|
                          DCD      0x400f6000

                          AREA ||area_number.95||, COMGROUP=_ZN5CSccb5DriveEv, LINKORDER=||i._ZN5CSccb5DriveEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb5DriveEv||
                          DCD      0x00000001

                          AREA ||i._ZN5CSccb5StartEv||, COMGROUP=_ZN5CSccb5StartEv, CODE, READONLY, ALIGN=1

                  _ZN5CSccb5StartEv PROC ; CSccb::Start()
;;;74     
;;;75     	inline void Start()
000000  b510              PUSH     {r4,lr}
;;;76     		{
000002  4604              MOV      r4,r0
;;;77     		PortWrite(1, 1);	// data, clk high
000004  2201              MOVS     r2,#1
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;78     		Drive();	// take data out of tristate
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN5CSccb5DriveEv ; CSccb::Drive()
;;;79     		PortWrite(1, 0);	// data low
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;80     		PortWrite(0, 0);	// data low
00001e  4620              MOV      r0,r4
000020  2200              MOVS     r2,#0
000022  e8bd4010          POP      {r4,lr}
000026  4611              MOV      r1,r2
000028  f7ffbffe          B.W      _ZN5CSccb9PortWriteEhh ; CSccb::PortWrite(unsigned char, unsigned char)
;;;81     		}
;;;82     
                          ENDP


                          AREA ||area_number.102||, COMGROUP=_ZN5CSccb5StartEv, LINKORDER=||i._ZN5CSccb5StartEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5CSccb5StartEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\sccb.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_sccb_cpp_74338326___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___8_sccb_cpp_74338326___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_sccb_cpp_74338326___Z7__REVSHi|
#line 144
|__asm___8_sccb_cpp_74338326___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
