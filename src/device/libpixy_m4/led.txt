; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\led.o --asm_dir=.\ --list_dir=.\ --depend=.\led.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\led.crf src\led.cpp]
                          THUMB

                          AREA ||i._Z10led_setPWMht||, CODE, READONLY, ALIGN=2

                  _Z10led_setPWMht PROC ; led_setPWM(unsigned char, unsigned short)
;;;114    
;;;115    void led_setPWM(uint8_t led, uint16_t pwm)
000000  b510              PUSH     {r4,lr}
;;;116    {
;;;117    	uint32_t channel;
;;;118    		
;;;119    	if ((g_lampState&LED_LAMP_LOWER) || led>LED_BLUE)
000002  4a18              LDR      r2,|L1.100|
000004  7812              LDRB     r2,[r2,#0]  ; g_lampState
000006  0792              LSLS     r2,r2,#30
000008  d41c              BMI      |L1.68|
00000a  2802              CMP      r0,#2
00000c  d81a              BHI      |L1.68|
;;;120    		return;
;;;121    
;;;122    #if 0
;;;123    	// this code causes some glitchy looking flashes because it messes with 
;;;124    	// the pwm state machine, although this isn't clear to me why it would 
;;;125    	// be slow enough to be visible....
;;;126    	// This code turns the LED completely off --- disabling for now though.  
;;;127    	if (pwm==0)
;;;128    	{
;;;129    	 	LPC_SCT->OUT[led].SET = 1<<15; // disable
;;;130    		LPC_SCT->OUT[led].CLR = 1<<3;
;;;131    	} 
;;;132    	else
;;;133    #endif 
;;;134    	
;;;135    	if (led==LED_RED)
00000e  b320              CBZ      r0,|L1.90|
;;;136    		channel = LED_RED_CHANNEL;
;;;137    	else if (led==LED_GREEN)
000010  2801              CMP      r0,#1
000012  d024              BEQ      |L1.94|
;;;138    		channel = LED_GREEN_CHANNEL;
;;;139    	else // if (led==LED_BLUE)
;;;140    		channel = LED_BLUE_CHANNEL;
000014  2201              MOVS     r2,#1
                  |L1.22|
;;;141    		
;;;142    	if (pwm==LED_MAX_PWM)
;;;143    	{
;;;144    		LPC_SCT->OUT[channel].SET = 1<<3;
000016  2408              MOVS     r4,#8
000018  f5a1437f          SUB      r3,r1,#0xff00         ;142
00001c  3bff              SUBS     r3,r3,#0xff           ;142
00001e  d012              BEQ      |L1.70|
;;;145    	 	LPC_SCT->OUT[channel].CLR = 1<<15; 
;;;146    	}
;;;147    	else
;;;148    	{
;;;149    		LPC_SCT->MATCHREL[led+1].H = pwm;
000020  1c43              ADDS     r3,r0,#1
000022  009b              LSLS     r3,r3,#2
000024  f1034380          ADD      r3,r3,#0x40000000
000028  f8a31202          STRH     r1,[r3,#0x202]
;;;150    		LPC_SCT->MATCH[led+1].H = pwm;
00002c  f8a31102          STRH     r1,[r3,#0x102]
;;;151    		LPC_SCT->OUT[channel].SET = 1<<3;
000030  00d1              LSLS     r1,r2,#3
000032  f1014180          ADD      r1,r1,#0x40000000
000036  f8c14500          STR      r4,[r1,#0x500]
;;;152    		LPC_SCT->OUT[channel].CLR = 1<<(led+4);
00003a  1d00              ADDS     r0,r0,#4
00003c  2201              MOVS     r2,#1
00003e  4082              LSLS     r2,r2,r0
000040  f8c12504          STR      r2,[r1,#0x504]
                  |L1.68|
;;;153    	}	
;;;154    }
000044  bd10              POP      {r4,pc}
                  |L1.70|
000046  00d0              LSLS     r0,r2,#3              ;144
000048  f1004080          ADD      r0,r0,#0x40000000     ;144
00004c  f8c04500          STR      r4,[r0,#0x500]        ;144
000050  f44f4100          MOV      r1,#0x8000            ;145
000054  f8c01504          STR      r1,[r0,#0x504]        ;145
000058  bd10              POP      {r4,pc}
                  |L1.90|
00005a  2207              MOVS     r2,#7                 ;136
00005c  e7db              B        |L1.22|
                  |L1.94|
00005e  2206              MOVS     r2,#6                 ;138
000060  e7d9              B        |L1.22|
;;;155    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ||.data||

                          AREA ||i._Z10led_setRGBRKhS0_S0_||, CODE, READONLY, ALIGN=1

                  _Z10led_setRGBRKhS0_S0_ PROC ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;186    
;;;187    int32_t led_setRGB(const uint8_t &r, const uint8_t &g, const uint8_t &b)
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
;;;189    	led_set(LED_RED, r);
000006  7801              LDRB     r1,[r0,#0]
000008  2200              MOVS     r2,#0
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;190    	led_set(LED_GREEN, g);
000010  7829              LDRB     r1,[r5,#0]
000012  2200              MOVS     r2,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;191    	led_set(LED_BLUE, b);
00001a  7821              LDRB     r1,[r4,#0]
00001c  2200              MOVS     r2,#0
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;192    
;;;193    	return 0;
000024  2000              MOVS     r0,#0
;;;194    }
000026  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP


                          AREA ||i._Z11led_setLampRKhS0_||, CODE, READONLY, ALIGN=2

                  _Z11led_setLampRKhS0_ PROC ; led_setLamp(const unsigned char&, const unsigned char&)
;;;250    
;;;251    int32_t led_setLamp(const uint8_t &upper, const uint8_t &lower)
000000  b570              PUSH     {r4-r6,lr}
;;;252    {
000002  460e              MOV      r6,r1
;;;253    	uint16_t pwm;
;;;254    
;;;255    	g_lampState = 0;
000004  4d17              LDR      r5,|L3.100|
000006  2100              MOVS     r1,#0
000008  7029              STRB     r1,[r5,#0]
;;;256    	
;;;257    	if (upper)
00000a  7801              LDRB     r1,[r0,#0]
;;;258    	{
;;;259    		LPC_GPIO_PORT->PIN[1] |= 1<<10;
00000c  4816              LDR      r0,|L3.104|
00000e  2900              CMP      r1,#0                 ;257
000010  d008              BEQ      |L3.36|
000012  f8d01104          LDR      r1,[r0,#0x104]
000016  f4416180          ORR      r1,r1,#0x400
00001a  f8c01104          STR      r1,[r0,#0x104]
;;;260    		g_lampState |= LED_LAMP_UPPER;
00001e  2001              MOVS     r0,#1
000020  7028              STRB     r0,[r5,#0]
000022  e005              B        |L3.48|
                  |L3.36|
;;;261    	}
;;;262    	else
;;;263    		LPC_GPIO_PORT->PIN[1] &= ~(1<<10);
000024  f8d01104          LDR      r1,[r0,#0x104]
000028  f4216180          BIC      r1,r1,#0x400
00002c  f8c01104          STR      r1,[r0,#0x104]
                  |L3.48|
;;;264    
;;;265    	if (lower) // set LEDs to max
000030  7830              LDRB     r0,[r6,#0]
000032  b110              CBZ      r0,|L3.58|
;;;266    		pwm = LED_MAX_PWM;
000034  f64f74ff          MOV      r4,#0xffff
000038  e000              B        |L3.60|
                  |L3.58|
;;;267    	else 
;;;268    		pwm = 0;
00003a  2400              MOVS     r4,#0
                  |L3.60|
;;;269    		
;;;270    	led_setPWM(LED_RED, pwm);		
00003c  4621              MOV      r1,r4
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;271    	led_setPWM(LED_GREEN, pwm);		
000044  4621              MOV      r1,r4
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;272    	led_setPWM(LED_BLUE, pwm);
00004c  4621              MOV      r1,r4
00004e  2002              MOVS     r0,#2
000050  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;273    
;;;274    	if (lower)
000054  7830              LDRB     r0,[r6,#0]
000056  b118              CBZ      r0,|L3.96|
;;;275    		g_lampState |= LED_LAMP_LOWER;
000058  7828              LDRB     r0,[r5,#0]  ; g_lampState
00005a  f0400002          ORR      r0,r0,#2
00005e  7028              STRB     r0,[r5,#0]
                  |L3.96|
;;;276    	
;;;277    	return 0;
000060  2000              MOVS     r0,#0
;;;278    }
000062  bd70              POP      {r4-r6,pc}
;;;279    
                          ENDP

                  |L3.100|
                          DCD      ||.data||
                  |L3.104|
                          DCD      0x400f6000

                          AREA ||i._Z14led_toggleLampv||, CODE, READONLY, ALIGN=2

                  _Z14led_toggleLampv PROC ; led_toggleLamp()
;;;279    
;;;280    int led_toggleLamp()
000000  b51c              PUSH     {r2-r4,lr}
;;;281    {
;;;282    	if (g_lampState)
000002  4c0c              LDR      r4,|L4.52|
000004  7820              LDRB     r0,[r4,#0]  ; g_lampState
000006  2800              CMP      r0,#0
000008  d007              BEQ      |L4.26|
;;;283    		led_setLamp(0, 0);
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
00000e  9000              STR      r0,[sp,#0]
000010  4669              MOV      r1,sp
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
;;;284    	else
000018  e006              B        |L4.40|
                  |L4.26|
;;;285    		led_setLamp(0xff, 0xff);
00001a  20ff              MOVS     r0,#0xff
00001c  9001              STR      r0,[sp,#4]
00001e  9000              STR      r0,[sp,#0]
000020  4669              MOV      r1,sp
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
                  |L4.40|
;;;286    	return g_lampState!=0;
000028  7820              LDRB     r0,[r4,#0]  ; g_lampState
00002a  2800              CMP      r0,#0
00002c  d000              BEQ      |L4.48|
00002e  2001              MOVS     r0,#1
                  |L4.48|
;;;287    }
000030  bd1c              POP      {r2-r4,pc}
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      ||.data||

                          AREA ||i._Z17led_getMaxCurrentv||, CODE, READONLY, ALIGN=2

                  _Z17led_getMaxCurrentv PROC ; led_getMaxCurrent()
;;;244    
;;;245    uint32_t led_getMaxCurrent()
000000  4805              LDR      r0,|L5.24|
;;;246    {
;;;247    	return g_ledMaxCurrent*1000000;
000002  eddf0a06          VLDR     s1,|L5.28|
000006  ed900a02          VLDR     s0,[r0,#8]
00000a  ee200a20          VMUL.F32 s0,s0,s1
00000e  eebc0ac0          VCVT.U32.F32 s0,s0
000012  ee100a10          VMOV     r0,s0
;;;248    }
000016  4770              BX       lr
;;;249    
                          ENDP

                  |L5.24|
                          DCD      ||.data||
                  |L5.28|
00001c  49742400          DCFS     0x49742400 ; 1000000

                          AREA ||i._Z17led_setMaxCurrentRKj||, CODE, READONLY, ALIGN=2

                  _Z17led_setMaxCurrentRKj PROC ; led_setMaxCurrent(const unsigned&)
;;;210    
;;;211    int32_t led_setMaxCurrent(const uint32_t &uamps)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;212    {
000004  ed2d8b02          VPUSH    {d8}
;;;213    	int i;
;;;214    	float pwm;
;;;215    
;;;216    	// convert current back to amps
;;;217    	g_ledMaxCurrent = (float)uamps/1000000;
000008  ed900a00          VLDR     s0,[r0,#0]
00000c  eddf0a2a          VLDR     s1,|L6.184|
000010  4d2a              LDR      r5,|L6.188|
000012  eeb80a40          VCVT.F32.U32 s0,s0
000016  ee801a20          VDIV.F32 s2,s0,s1
00001a  ed851a02          VSTR     s2,[r5,#8]
;;;218    
;;;219    	// set maxCurrent to minimum of max (so we saturate only 1 led)
;;;220    	for (i=0; i<3; i++)
00001e  2000              MOVS     r0,#0
;;;221    	{
;;;222    		if (g_ledMaxCurrent>g_ledOnCurrent[i])
000020  4f27              LDR      r7,|L6.192|
                  |L6.34|
000022  edd50a02          VLDR     s1,[r5,#8]
000026  eb070180          ADD      r1,r7,r0,LSL #2
00002a  ed910a00          VLDR     s0,[r1,#0]
00002e  eeb40ae0          VCMPE.F32 s0,s1
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d201              BCS      |L6.60|
;;;223    			g_ledMaxCurrent = g_ledOnCurrent[i];
000038  ed850a02          VSTR     s0,[r5,#8]
                  |L6.60|
00003c  1c40              ADDS     r0,r0,#1              ;220
00003e  2803              CMP      r0,#3                 ;220
000040  dbef              BLT      |L6.34|
;;;224    	}
;;;225    
;;;226    	// brightness is log of current * constant
;;;227    	g_ledMaxBrightness = log(g_ledScale*g_ledMaxCurrent);
000042  ed950a03          VLDR     s0,[r5,#0xc]
000046  edd50a02          VLDR     s1,[r5,#8]
00004a  ee200a20          VMUL.F32 s0,s0,s1
00004e  f7fffffe          BL       __hardfp_logf
000052  ed850a01          VSTR     s0,[r5,#4]
;;;228    
;;;229    	for (i=0; i<3; i++)
000056  2400              MOVS     r4,#0
;;;230    	{
;;;231    		pwm = g_ledMaxCurrent/g_ledOnCurrent[i]*LED_MAX_PWM;
;;;232    		if ((uint32_t)pwm>LED_MAX_PWM)
;;;233    			g_ledMaxPWM[i] = LED_MAX_PWM;  // this shouldn't really happen, but might because of rounding
000058  4e18              LDR      r6,|L6.188|
00005a  ed9f8a1a          VLDR     s16,|L6.196|
00005e  3610              ADDS     r6,r6,#0x10
000060  f44f3980          MOV      r9,#0x10000           ;232
;;;234    		else
;;;235    			g_ledMaxPWM[i] = (uint16_t)pwm;
;;;236    
;;;237    		// restore vals (with new max current)
;;;238    	   led_set(i, g_ledVal[i], true);
000064  f1a6080f          SUB      r8,r6,#0xf
                  |L6.104|
000068  eb070084          ADD      r0,r7,r4,LSL #2       ;231
00006c  ed951a02          VLDR     s2,[r5,#8]            ;231
000070  edd00a00          VLDR     s1,[r0,#0]            ;231
000074  ee810a20          VDIV.F32 s0,s2,s1              ;231
000078  ee200a08          VMUL.F32 s0,s0,s16             ;231
00007c  eebc0ac0          VCVT.U32.F32 s0,s0                 ;232
000080  ee100a10          VMOV     r0,s0                 ;232
000084  4548              CMP      r0,r9                 ;232
000086  d304              BCC      |L6.146|
000088  f64f70ff          MOV      r0,#0xffff            ;233
00008c  f8260014          STRH     r0,[r6,r4,LSL #1]     ;233
000090  e003              B        |L6.154|
                  |L6.146|
000092  ee100a10          VMOV     r0,s0                 ;235
000096  f8260014          STRH     r0,[r6,r4,LSL #1]     ;235
                  |L6.154|
00009a  f8181004          LDRB     r1,[r8,r4]
00009e  b2e0              UXTB     r0,r4
0000a0  2201              MOVS     r2,#1
0000a2  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
0000a6  1c64              ADDS     r4,r4,#1              ;229
0000a8  2c03              CMP      r4,#3                 ;229
0000aa  dbdd              BLT      |L6.104|
;;;239    	}
;;;240    
;;;241    	return 0;
;;;242    }
0000ac  ecbd8b02          VPOP     {d8}
0000b0  2000              MOVS     r0,#0                 ;241
0000b2  e8bd87f0          POP      {r4-r10,pc}
;;;243    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L6.184|
0000b8  49742400          DCFS     0x49742400 ; 1000000
                  |L6.188|
                          DCD      ||.data||
                  |L6.192|
                          DCD      ||.bss||
                  |L6.196|
0000c4  477fff00          DCFS     0x477fff00 ; 65535

                          AREA ||i._Z7led_setRKj||, CODE, READONLY, ALIGN=1

                  _Z7led_setRKj PROC ; led_set(const unsigned&)
;;;195    
;;;196    int32_t led_set(const uint32_t &color)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
;;;198    	uint8_t r, g, b;
;;;199    
;;;200    	r = (color>>16)&0xff;
000002  6800              LDR      r0,[r0,#0]
000004  f3c04107          UBFX     r1,r0,#16,#8
;;;201    	g = (color>>8)&0xff;
000008  f3c02407          UBFX     r4,r0,#8,#8
;;;202    	b = color&0xff;
00000c  b2c5              UXTB     r5,r0
;;;203    	led_set(LED_RED, r);
00000e  2200              MOVS     r2,#0
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;204    	led_set(LED_GREEN, g);
000016  2200              MOVS     r2,#0
000018  4621              MOV      r1,r4
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;205    	led_set(LED_BLUE, b);
000020  2200              MOVS     r2,#0
000022  4629              MOV      r1,r5
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       _Z7led_sethhb ; led_set(unsigned char, unsigned char, bool)
;;;206    
;;;207    	return 0;
00002a  2000              MOVS     r0,#0
;;;208    }
00002c  bd70              POP      {r4-r6,pc}
;;;209    
                          ENDP


                          AREA ||i._Z7led_sethhb||, CODE, READONLY, ALIGN=2

                  _Z7led_sethhb PROC ; led_set(unsigned char, unsigned char, bool)
;;;155    
;;;156    void led_set(uint8_t led, uint8_t val, bool override)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
000004  4604              MOV      r4,r0
000006  ed2d8b02          VPUSH    {d8}
00000a  460d              MOV      r5,r1
;;;158    	float brightness, current, pwm;
;;;159    
;;;160    	if (led>2)
00000c  2c02              CMP      r4,#2
00000e  d849              BHI      |L8.164|
;;;161    		return;
;;;162    
;;;163    	if (!override && g_ledVal[led]==val)
000010  4f26              LDR      r7,|L8.172|
000012  b912              CBNZ     r2,|L8.26|
000014  5d38              LDRB     r0,[r7,r4]
000016  42a8              CMP      r0,r5
000018  d044              BEQ      |L8.164|
                  |L8.26|
;;;164    		return;
;;;165    				
;;;166    	// invert brightness to get current
;;;167    	if (val==0)
00001a  b3c5              CBZ      r5,|L8.142|
;;;168    		pwm = 0;
;;;169    	else
;;;170    	{
;;;171    		brightness = val/255.0*g_ledMaxBrightness;
00001c  4e23              LDR      r6,|L8.172|
00001e  1e76              SUBS     r6,r6,#1
000020  6870              LDR      r0,[r6,#4]  ; g_ledMaxBrightness
000022  f7fffffe          BL       __aeabi_f2d
000026  ec410b18          VMOV     d8,r0,r1
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_ui2d
000030  ed9f1b1f          VLDR     d1,|L8.176|
000034  ec532b11          VMOV     r2,r3,d1
000038  f7fffffe          BL       __aeabi_ddiv
00003c  ec532b18          VMOV     r2,r3,d8
000040  f7fffffe          BL       __aeabi_dmul
000044  f7fffffe          BL       __aeabi_d2f
000048  ee000a10          VMOV     s0,r0
00004c  f7fffffe          BL       __hardfp_expf
;;;172    		current = exp(brightness)/g_ledScale;
000050  ed961a03          VLDR     s2,[r6,#0xc]
000054  eec00a01          VDIV.F32 s1,s0,s2
;;;173    		pwm = current/g_ledMaxCurrent*g_ledMaxPWM[led];
000058  ed960a02          VLDR     s0,[r6,#8]
00005c  f1060010          ADD      r0,r6,#0x10
000060  f8300014          LDRH     r0,[r0,r4,LSL #1]
000064  ee801a80          VDIV.F32 s2,s1,s0
000068  ee000a10          VMOV     s0,r0
00006c  eeb80a40          VCVT.F32.U32 s0,s0
000070  ee210a00          VMUL.F32 s0,s2,s0
                  |L8.116|
;;;174    	}
;;;175    
;;;176    	// convert current into pwm
;;;177    
;;;178    	if ((uint32_t)pwm>LED_MAX_PWM)
000074  eebc0ac0          VCVT.U32.F32 s0,s0
000078  ee100a10          VMOV     r0,s0
00007c  f5b03f80          CMP      r0,#0x10000
000080  d309              BCC      |L8.150|
;;;179    		led_setPWM(led, LED_MAX_PWM);  // this shouldn't really happen, but might because of rounding
000082  f64f71ff          MOV      r1,#0xffff
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
00008c  e009              B        |L8.162|
                  |L8.142|
00008e  e7ff              B        |L8.144|
                  |L8.144|
000090  ed9f0a09          VLDR     s0,|L8.184|
000094  e7ee              B        |L8.116|
                  |L8.150|
;;;180    	else
;;;181    		led_setPWM(led, (uint16_t)pwm);
000096  ee100a10          VMOV     r0,s0
00009a  b281              UXTH     r1,r0
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
                  |L8.162|
;;;182    
;;;183    	g_ledVal[led] = val;
0000a2  553d              STRB     r5,[r7,r4]
                  |L8.164|
;;;184    }
0000a4  ecbd8b02          VPOP     {d8}
0000a8  e8bd81f0          POP      {r4-r8,pc}
;;;185    
                          ENDP

                  |L8.172|
                          DCD      ||.data||+0x1
                  |L8.176|
0000b0  00000000          DCFD     0x406fe00000000000 ; 255
0000b4  406fe000
                  |L8.184|
0000b8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z8led_initv||, CODE, READONLY, ALIGN=2

                  _Z8led_initv PROC ; led_init()
;;;76     
;;;77     void led_init()
000000  b530              PUSH     {r4,r5,lr}
;;;78     {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  b081              SUB      sp,sp,#4
;;;79     	int i;
;;;80     
;;;81     	// turn on LEDs (max)
;;;82     	led_setPWM(LED_RED, LED_MAX_PWM);
000008  f64f74ff          MOV      r4,#0xffff
00000c  4621              MOV      r1,r4
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;83     	led_setPWM(LED_GREEN, LED_MAX_PWM);
000014  4621              MOV      r1,r4
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;84     	led_setPWM(LED_BLUE, LED_MAX_PWM);
00001c  4621              MOV      r1,r4
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       _Z10led_setPWMht ; led_setPWM(unsigned char, unsigned short)
;;;85     
;;;86     	// wait for things to settle...
;;;87     	delayus(20000);
000024  f6446020          MOV      r0,#0x4e20
000028  f7fffffe          BL       delayus
;;;88     
;;;89     	// get current of each led.  This is needed because each LED has a different forward voltage.  But current determines
;;;90     	// brightness regardless of voltage drop.  So we normalize with respect to current for best color accuracy. 
;;;91     	// And we average for a goodly amount to try to minimize any noise
;;;92     	for (i=0, g_ledOnCurrent[LED_RED]=0.0f, g_ledOnCurrent[LED_GREEN]=0.0f, g_ledOnCurrent[LED_BLUE]=0.0f; i<100; i++)
00002c  2400              MOVS     r4,#0
00002e  4d36              LDR      r5,|L9.264|
000030  ed9f0a34          VLDR     s0,|L9.260|
000034  ed850a00          VSTR     s0,[r5,#0]
000038  ed850a01          VSTR     s0,[r5,#4]
00003c  ed850a02          VSTR     s0,[r5,#8]
;;;93     	{
;;;94     		g_ledOnCurrent[LED_RED] += (float)adc_get(LED_RED_ADCCHAN)/ADC_MAX*ADC_VOLTAGE/LED_RED_RESISTOR;
000040  eddf8a32          VLDR     s17,|L9.268|
000044  ed9f8a32          VLDR     s16,|L9.272|
000048  ed9f9a32          VLDR     s18,|L9.276|
;;;95     		g_ledOnCurrent[LED_GREEN] += (float)adc_get(LED_GREEN_ADCCHAN)/ADC_MAX*ADC_VOLTAGE/LED_GREEN_RESISTOR;
00004c  eddf9a32          VLDR     s19,|L9.280|
000050  e026              B        |L9.160|
                  |L9.82|
000052  2001              MOVS     r0,#1                 ;94
000054  f7fffffe          BL       adc_get
000058  ee000a10          VMOV     s0,r0                 ;94
00005c  eef80a40          VCVT.F32.U32 s1,s0                 ;94
000060  ee800aa8          VDIV.F32 s0,s1,s17             ;94
000064  ee200a08          VMUL.F32 s0,s0,s16             ;94
000068  eec00a09          VDIV.F32 s1,s0,s18             ;94
00006c  ed950a00          VLDR     s0,[r5,#0]            ;94
000070  ee300a80          VADD.F32 s0,s1,s0              ;94
000074  ed850a00          VSTR     s0,[r5,#0]            ;94
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       adc_get
00007e  ee000a10          VMOV     s0,r0
000082  eeb80a40          VCVT.F32.U32 s0,s0
000086  eec00a28          VDIV.F32 s1,s0,s17
00008a  ee600a88          VMUL.F32 s1,s1,s16
00008e  ee800aa9          VDIV.F32 s0,s1,s19
000092  edd50a01          VLDR     s1,[r5,#4]
000096  ee300a20          VADD.F32 s0,s0,s1
00009a  ed850a01          VSTR     s0,[r5,#4]
00009e  1c64              ADDS     r4,r4,#1              ;92
                  |L9.160|
0000a0  2c64              CMP      r4,#0x64              ;92
0000a2  dbd6              BLT      |L9.82|
;;;96     	}
;;;97     	g_ledOnCurrent[LED_RED] /= 100.0f;
0000a4  ed950a00          VLDR     s0,[r5,#0]
0000a8  eddf0a1c          VLDR     s1,|L9.284|
0000ac  ee801a20          VDIV.F32 s2,s0,s1
0000b0  ed851a00          VSTR     s2,[r5,#0]
;;;98     	g_ledOnCurrent[LED_GREEN] /= 100.0f;
0000b4  ed951a01          VLDR     s2,[r5,#4]
0000b8  ee810a20          VDIV.F32 s0,s2,s1
0000bc  ed850a01          VSTR     s0,[r5,#4]
;;;99     	g_ledOnCurrent[LED_BLUE] = g_ledOnCurrent[LED_GREEN];
0000c0  ed850a02          VSTR     s0,[r5,#8]
;;;100    	
;;;101    	g_ledVal[LED_RED] = 0xff;
0000c4  4916              LDR      r1,|L9.288|
0000c6  20ff              MOVS     r0,#0xff
0000c8  7008              STRB     r0,[r1,#0]
;;;102    	g_ledVal[LED_GREEN] = 0xff;
0000ca  7048              STRB     r0,[r1,#1]
;;;103    	g_ledVal[LED_BLUE] = 0xff;
0000cc  7088              STRB     r0,[r1,#2]
;;;104    
;;;105    	// turn off LEDs
;;;106    	led_set(0);
0000ce  2000              MOVS     r0,#0
0000d0  9000              STR      r0,[sp,#0]
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;107    		
;;;108    	// set other vals...
;;;109    	g_ledScale = LED_DEFAULT_SCALE;
0000d8  4811              LDR      r0,|L9.288|
0000da  ed9f0a12          VLDR     s0,|L9.292|
0000de  1e40              SUBS     r0,r0,#1
0000e0  ed800a03          VSTR     s0,[r0,#0xc]
;;;110    	led_setMaxCurrent(LED_DEFAULT_MAX_CURRENT);	
0000e4  f24020ee          MOV      r0,#0x2ee
0000e8  9000              STR      r0,[sp,#0]
0000ea  4668              MOV      r0,sp
0000ec  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;111    	
;;;112    	g_chirpUsb->registerModule(g_module);
0000f0  480e              LDR      r0,|L9.300|
0000f2  490d              LDR      r1,|L9.296|
0000f4  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
0000f6  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;113    }
0000fa  b001              ADD      sp,sp,#4
0000fc  ecbd8b04          VPOP     {d8-d9}
000100  bd30              POP      {r4,r5,pc}
;;;114    
                          ENDP

000102  0000              DCW      0x0000
                  |L9.260|
000104  00000000          DCFS     0x00000000 ; 0
                  |L9.264|
                          DCD      ||.bss||
                  |L9.268|
00010c  447fc000          DCFS     0x447fc000 ; 1023
                  |L9.272|
000110  40533333          DCFS     0x40533333 ; 3.2999999523162842
                  |L9.276|
000114  43160000          DCFS     0x43160000 ; 150
                  |L9.280|
000118  42b60000          DCFS     0x42b60000 ; 91
                  |L9.284|
00011c  42c80000          DCFS     0x42c80000 ; 100
                  |L9.288|
                          DCD      ||.data||+0x1
                  |L9.292|
000124  47c35000          DCFS     0x47c35000 ; 100000
                  |L9.296|
                          DCD      ||.constdata||
                  |L9.300|
                          DCD      g_chirpUsb

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z10led_setPWMht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z10led_setPWMht||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z7led_sethhb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7led_sethhb||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z17led_setMaxCurrentRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17led_setMaxCurrentRKj||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._Z7led_setRKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7led_setRKj||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._Z8led_initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8led_initv||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._Z10led_setRGBRKhS0_S0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10led_setRGBRKhS0_S0_||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._Z17led_getMaxCurrentv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17led_getMaxCurrentv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._Z11led_setLampRKhS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11led_setLampRKhS0_||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._Z14led_toggleLampv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14led_toggleLampv||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_ledOnCurrent
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z7led_setRKj ; led_set(const unsigned&)
000008  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x88
                          DCD      _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
000020  01010100          DCB      0x01,0x01,0x01,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x94
                          DCD      ||.conststring||+0x12c
                          DCD      _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
000038  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x140
                          DCD      ||.conststring||+0x1e4
                          DCD      _Z17led_getMaxCurrentv ; led_getMaxCurrent()
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f8
                          DCD      ||.conststring||+0x258
                          DCD      _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
000068  01010000          DCB      0x01,0x01,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x264
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6c65645f          DCB      "led_set",0
000004  73657400
000008  53657420          DCB      "Set RGB LED values@p color 24-bit value with red=bits 1"
00000c  52474220
000010  4c454420
000014  76616c75
000018  65734070
00001c  20636f6c
000020  6f722032
000024  342d6269
000028  74207661
00002c  6c756520
000030  77697468
000034  20726564
000038  3d626974
00003c  732031  
00003f  362d3233          DCB      "6-23, green=bits 8-15, blue=bits 0-7@r 0 if success, ne"
000043  2c206772
000047  65656e3d
00004b  62697473
00004f  20382d31
000053  352c2062
000057  6c75653d
00005b  62697473
00005f  20302d37
000063  40722030
000067  20696620
00006b  73756363
00006f  6573732c
000073  206e65  
000076  67617469          DCB      "gative if error",0
00007a  76652069
00007e  66206572
000082  726f7200
000086  00                DCB      0
000087  00                DCB      0
000088  6c65645f          DCB      "led_setRGB",0
00008c  73657452
000090  474200  
000093  00                DCB      0
000094  53657420          DCB      "Set RGB LED values@p red value ranging from 0-255@p gre"
000098  52474220
00009c  4c454420
0000a0  76616c75
0000a4  65734070
0000a8  20726564
0000ac  2076616c
0000b0  75652072
0000b4  616e6769
0000b8  6e672066
0000bc  726f6d20
0000c0  302d3235
0000c4  35407020
0000c8  677265  
0000cb  656e2076          DCB      "en value ranging from 0-255@p blue value ranging from 0"
0000cf  616c7565
0000d3  2072616e
0000d7  67696e67
0000db  2066726f
0000df  6d20302d
0000e3  32353540
0000e7  7020626c
0000eb  75652076
0000ef  616c7565
0000f3  2072616e
0000f7  67696e67
0000fb  2066726f
0000ff  6d2030  
000102  2d323535          DCB      "-255@r 0 if success, negative if error",0
000106  40722030
00010a  20696620
00010e  73756363
000112  6573732c
000116  206e6567
00011a  61746976
00011e  65206966
000122  20657272
000126  6f7200  
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
00012c  6c65645f          DCB      "led_setMaxCurrent",0
000130  7365744d
000134  61784375
000138  7272656e
00013c  7400    
00013e  00                DCB      0
00013f  00                DCB      0
000140  53657420          DCB      "Set maximum current each RGB LED, can be used to limit "
000144  6d617869
000148  6d756d20
00014c  63757272
000150  656e7420
000154  65616368
000158  20524742
00015c  204c4544
000160  2c206361
000164  6e206265
000168  20757365
00016c  6420746f
000170  206c696d
000174  697420  
000177  62726967          DCB      "brightness@p current current value in microamps, rangin"
00017b  68746e65
00017f  73734070
000183  20637572
000187  72656e74
00018b  20637572
00018f  72656e74
000193  2076616c
000197  75652069
00019b  6e206d69
00019f  63726f61
0001a3  6d70732c
0001a7  2072616e
0001ab  67696e  
0001ae  67206672          DCB      "g from 0 to 20000@r 0 if success, negative if error",0
0001b2  6f6d2030
0001b6  20746f20
0001ba  32303030
0001be  30407220
0001c2  30206966
0001c6  20737563
0001ca  63657373
0001ce  2c206e65
0001d2  67617469
0001d6  76652069
0001da  66206572
0001de  726f7200
0001e2  00                DCB      0
0001e3  00                DCB      0
0001e4  6c65645f          DCB      "led_getMaxCurrent",0
0001e8  6765744d
0001ec  61784375
0001f0  7272656e
0001f4  7400    
0001f6  00                DCB      0
0001f7  00                DCB      0
0001f8  47657420          DCB      "Get maximum current each RGB LED, can be used to limit "
0001fc  6d617869
000200  6d756d20
000204  63757272
000208  656e7420
00020c  65616368
000210  20524742
000214  204c4544
000218  2c206361
00021c  6e206265
000220  20757365
000224  6420746f
000228  206c696d
00022c  697420  
00022f  62726967          DCB      "brightness@r max curent in microamperes",0
000233  68746e65
000237  73734072
00023b  206d6178
00023f  20637572
000243  656e7420
000247  696e206d
00024b  6963726f
00024f  616d7065
000253  72657300
000257  00                DCB      0
000258  6c65645f          DCB      "led_setLamp",0
00025c  7365744c
000260  616d7000
000264  53657420          DCB      "Set the state of the lamp illumination LEDs@p upper sta"
000268  74686520
00026c  73746174
000270  65206f66
000274  20746865
000278  206c616d
00027c  7020696c
000280  6c756d69
000284  6e617469
000288  6f6e204c
00028c  45447340
000290  70207570
000294  70657220
000298  737461  
00029b  7465206f          DCB      "te of upper LEDs, 0 is off, nonzero is fully on@p lower"
00029f  66207570
0002a3  70657220
0002a7  4c454473
0002ab  2c203020
0002af  6973206f
0002b3  66662c20
0002b7  6e6f6e7a
0002bb  65726f20
0002bf  69732066
0002c3  756c6c79
0002c7  206f6e40
0002cb  70206c6f
0002cf  776572  
0002d2  20737461          DCB      " state of lower LED, 0 is off, nonzero is fully on@r 0 "
0002d6  7465206f
0002da  66206c6f
0002de  77657220
0002e2  4c45442c
0002e6  20302069
0002ea  73206f66
0002ee  662c206e
0002f2  6f6e7a65
0002f6  726f2069
0002fa  73206675
0002fe  6c6c7920
000302  6f6e4072
000306  203020  
000309  69662073          DCB      "if success, negative if error",0
00030d  75636365
000311  73732c20
000315  6e656761
000319  74697665
00031d  20696620
000321  6572726f
000325  7200    

                          AREA ||.data||, DATA, ALIGN=2

                  g_lampState
000000  00                DCB      0x00
                  g_ledVal
000001  000000            DCB      0x00,0x00,0x00
                  g_ledMaxBrightness
                          DCD      0x00000000
                  g_ledMaxCurrent
                          DCD      0x00000000
                  g_ledScale
                          DCD      0x00000000
                  g_ledMaxPWM
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "src\\led.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_led_cpp_8e9a479d___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___7_led_cpp_8e9a479d___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_led_cpp_8e9a479d___Z7__REVSHi|
#line 144
|__asm___7_led_cpp_8e9a479d___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
