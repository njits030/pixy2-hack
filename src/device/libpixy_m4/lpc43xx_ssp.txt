; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\lpc43xx_ssp.o --asm_dir=.\ --list_dir=.\ --depend=.\lpc43xx_ssp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\lpc43xx_ssp.crf ..\common\src\lpc43xx_ssp.c]
                          THUMB

                          AREA ||i.SSP_ClearIntPending||, CODE, READONLY, ALIGN=1

                  SSP_ClearIntPending PROC
;;;616     **********************************************************************/
;;;617    void SSP_ClearIntPending(LPC_SSPn_Type *SSPx, uint32_t IntType)
000000  6201              STR      r1,[r0,#0x20]
;;;618    {
;;;619    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;620    	CHECK_PARAM(PARAM_SSP_INTCLR(IntType));
;;;621    
;;;622    	SSPx->ICR = IntType;
;;;623    }
000002  4770              BX       lr
;;;624    
                          ENDP


                          AREA ||i.SSP_Cmd||, CODE, READONLY, ALIGN=1

                  SSP_Cmd PROC
;;;220     **********************************************************************/
;;;221    void SSP_Cmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;222    {
000002  d004              BEQ      |L2.14|
;;;223    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;224    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;225    
;;;226    	if (NewState == ENABLE)
;;;227    	{
;;;228    		SSPx->CR1 |= SSP_CR1_SSP_EN;
;;;229    	}
;;;230    	else
;;;231    	{
;;;232    		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
000004  6841              LDR      r1,[r0,#4]
000006  f001010d          AND      r1,r1,#0xd
00000a  6041              STR      r1,[r0,#4]
;;;233    	}
;;;234    }
00000c  4770              BX       lr
                  |L2.14|
00000e  6841              LDR      r1,[r0,#4]            ;228
000010  f0410102          ORR      r1,r1,#2              ;228
000014  6041              STR      r1,[r0,#4]            ;228
000016  4770              BX       lr
;;;235    
                          ENDP


                          AREA ||i.SSP_ConfigStructInit||, CODE, READONLY, ALIGN=2

                  SSP_ConfigStructInit PROC
;;;199     *******************************************************************************/
;;;200    void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
000000  2100              MOVS     r1,#0
;;;201    {
;;;202    	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
000002  6041              STR      r1,[r0,#4]
;;;203    	SSP_InitStruct->CPOL = SSP_CPOL_HI;
000004  6081              STR      r1,[r0,#8]
;;;204    	SSP_InitStruct->ClockRate = 100000;
000006  4a03              LDR      r2,|L3.20|
000008  6142              STR      r2,[r0,#0x14]
;;;205    	SSP_InitStruct->Databit = SSP_DATABIT_8;
00000a  2207              MOVS     r2,#7
00000c  6002              STR      r2,[r0,#0]
;;;206    	SSP_InitStruct->Mode = SSP_MASTER_MODE;
00000e  60c1              STR      r1,[r0,#0xc]
;;;207    	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
000010  6101              STR      r1,[r0,#0x10]
;;;208    }
000012  4770              BX       lr
;;;209    
                          ENDP

                  |L3.20|
                          DCD      0x000186a0

                          AREA ||i.SSP_DMACmd||, CODE, READONLY, ALIGN=1

                  SSP_DMACmd PROC
;;;638     **********************************************************************/
;;;639    void SSP_DMACmd(LPC_SSPn_Type *SSPx, uint32_t DMAMode, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;640    {
000002  d005              BEQ      |L4.16|
;;;641    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;642    	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
;;;643    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;644    
;;;645    	if (NewState == ENABLE)
;;;646    	{
;;;647    		SSPx->DMACR |= DMAMode;
;;;648    	}
;;;649    	else
;;;650    	{
;;;651    		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
000004  6a42              LDR      r2,[r0,#0x24]
000006  2303              MOVS     r3,#3
000008  438b              BICS     r3,r3,r1
00000a  401a              ANDS     r2,r2,r3
00000c  6242              STR      r2,[r0,#0x24]
;;;652    	}
;;;653    }
00000e  4770              BX       lr
                  |L4.16|
000010  6a42              LDR      r2,[r0,#0x24]         ;647
000012  430a              ORRS     r2,r2,r1              ;647
000014  6242              STR      r2,[r0,#0x24]         ;647
000016  4770              BX       lr
;;;654    
                          ENDP


                          AREA ||i.SSP_DeInit||, CODE, READONLY, ALIGN=1

                  SSP_DeInit PROC
;;;162     **********************************************************************/
;;;163    void SSP_DeInit(LPC_SSPn_Type* SSPx)
000000  6841              LDR      r1,[r0,#4]
;;;164    {
;;;165    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;166    
;;;167    	/* Disable SSP operation*/
;;;168    	SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
000002  f001010d          AND      r1,r1,#0xd
000006  6041              STR      r1,[r0,#4]
;;;169    }
000008  4770              BX       lr
;;;170    
                          ENDP


                          AREA ||i.SSP_GetDataSize||, CODE, READONLY, ALIGN=1

                  SSP_GetDataSize PROC
;;;181    *******************************************************************************/
;;;182    uint8_t SSP_GetDataSize(LPC_SSPn_Type* SSPx)
000000  6800              LDR      r0,[r0,#0]
;;;183    {
;;;184    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;185    	return (SSPx->CR0 & (0xF));
000002  f000000f          AND      r0,r0,#0xf
;;;186    }
000006  4770              BX       lr
;;;187    
                          ENDP


                          AREA ||i.SSP_GetIntStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetIntStatus PROC
;;;596     **********************************************************************/
;;;597    IntStatus SSP_GetIntStatus (LPC_SSPn_Type *SSPx, uint32_t IntType)
000000  69c0              LDR      r0,[r0,#0x1c]
;;;598    {
;;;599    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;600    	CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));
;;;601    
;;;602    	return ((SSPx->MIS & IntType) ? SET :RESET);
000002  4208              TST      r0,r1
000004  d001              BEQ      |L7.10|
000006  2001              MOVS     r0,#1
;;;603    }
000008  4770              BX       lr
                  |L7.10|
00000a  2000              MOVS     r0,#0                 ;602
00000c  4770              BX       lr
;;;604    
                          ENDP


                          AREA ||i.SSP_GetRawIntStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetRawIntStatus PROC
;;;572     **********************************************************************/
;;;573    IntStatus SSP_GetRawIntStatus(LPC_SSPn_Type *SSPx, uint32_t RawIntType)
000000  6980              LDR      r0,[r0,#0x18]
;;;574    {
;;;575    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;576    	CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));
;;;577    
;;;578    	return ((SSPx->RIS & RawIntType) ? SET : RESET);
000002  4208              TST      r0,r1
000004  d001              BEQ      |L8.10|
000006  2001              MOVS     r0,#1
;;;579    }
000008  4770              BX       lr
                  |L8.10|
00000a  2000              MOVS     r0,#0                 ;578
00000c  4770              BX       lr
;;;580    
                          ENDP


                          AREA ||i.SSP_GetStatus||, CODE, READONLY, ALIGN=1

                  SSP_GetStatus PROC
;;;519     **********************************************************************/
;;;520    FlagStatus SSP_GetStatus(LPC_SSPn_Type* SSPx, uint32_t FlagType)
000000  68c0              LDR      r0,[r0,#0xc]
;;;521    {
;;;522    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;523    	CHECK_PARAM(PARAM_SSP_STAT(FlagType));
;;;524    
;;;525    	return ((SSPx->SR & FlagType) ? SET : RESET);
000002  4208              TST      r0,r1
000004  d001              BEQ      |L9.10|
000006  2001              MOVS     r0,#1
;;;526    }
000008  4770              BX       lr
                  |L9.10|
00000a  2000              MOVS     r0,#0                 ;525
00000c  4770              BX       lr
;;;527    
                          ENDP


                          AREA ||i.SSP_Init||, CODE, READONLY, ALIGN=2

                  SSP_Init PROC
;;;93      *********************************************************************/
;;;94     void SSP_Init(LPC_SSPn_Type *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;95     {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
;;;96     	uint32_t tmp;
;;;97     	uint32_t prescale, cr0_div, cmp_clk;
;;;98     	uint64_t ssp_clk;
;;;99     
;;;100    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;101    
;;;102    	if(SSPx == LPC_SSP0) {
000008  4c29              LDR      r4,|L10.176|
00000a  42a7              CMP      r7,r4
00000c  d104              BNE      |L10.24|
;;;103    		/* Set up clock and power for SSP0 module */
;;;104    		//LPC_CGU->BASE_SSP0_CLK = (SRC_PL160M_0<<24) | (1<<11);
;;;105    		CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_SSP0);
00000e  211f              MOVS     r1,#0x1f
000010  2009              MOVS     r0,#9
000012  f7fffffe          BL       CGU_EntityConnect
000016  e006              B        |L10.38|
                  |L10.24|
;;;106    	} else if(SSPx == LPC_SSP1) {
000018  4826              LDR      r0,|L10.180|
00001a  4287              CMP      r7,r0
00001c  d145              BNE      |L10.170|
;;;107    		/* Set up clock and power for SSP1 module */
;;;108    		//LPC_CGU->BASE_SSP1_CLK = (SRC_PL160M_0<<24) | (1<<11);
;;;109    		CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_SSP1);
00001e  2120              MOVS     r1,#0x20
000020  2009              MOVS     r0,#9
000022  f7fffffe          BL       CGU_EntityConnect
                  |L10.38|
;;;110    	} else {
;;;111    		return;
;;;112    	}
;;;113    
;;;114    	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
;;;115    	 * SSP is disable, Slave output is disable as default
;;;116    	 */
;;;117    	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
000026  f8b90004          LDRH     r0,[r9,#4]
00002a  f8b91008          LDRH     r1,[r9,#8]
00002e  f8b92000          LDRH     r2,[r9,#0]
000032  4308              ORRS     r0,r0,r1
000034  f8b91010          LDRH     r1,[r9,#0x10]
000038  4311              ORRS     r1,r1,r2
00003a  4308              ORRS     r0,r0,r1
00003c  b280              UXTH     r0,r0
;;;118    		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
;;;119    		& SSP_CR0_BITMASK;
;;;120    	// write back to SSP control register
;;;121    	SSPx->CR0 = tmp;
00003e  6038              STR      r0,[r7,#0]
;;;122    
;;;123    	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
000040  f899000c          LDRB     r0,[r9,#0xc]
000044  f000000f          AND      r0,r0,#0xf
;;;124    	// Write back to CR1
;;;125    	SSPx->CR1 = tmp;
000048  6078              STR      r0,[r7,#4]
;;;126    
;;;127    	// Set clock rate for SSP peripheral
;;;128    	if(SSPx == LPC_SSP0)
00004a  2500              MOVS     r5,#0
00004c  42a7              CMP      r7,r4
00004e  d104              BNE      |L10.90|
;;;129    		ssp_clk = CGU_GetPCLKFrequency(CGU_PERIPHERAL_SSP0);
000050  201a              MOVS     r0,#0x1a
000052  f7fffffe          BL       CGU_GetPCLKFrequency
000056  4604              MOV      r4,r0
000058  e003              B        |L10.98|
                  |L10.90|
;;;130    	else
;;;131    		ssp_clk = CGU_GetPCLKFrequency(CGU_PERIPHERAL_SSP1);
00005a  201b              MOVS     r0,#0x1b
00005c  f7fffffe          BL       CGU_GetPCLKFrequency
000060  4604              MOV      r4,r0
                  |L10.98|
;;;132    	cr0_div = 0;
000062  2600              MOVS     r6,#0
;;;133    	cmp_clk = 0xFFFFFFFF;
000064  1e70              SUBS     r0,r6,#1
;;;134    	prescale = 2;
000066  f04f0802          MOV      r8,#2
;;;135    	while (cmp_clk > SSP_ConfigStruct->ClockRate)
;;;136    	{
;;;137    		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
;;;138    		if (cmp_clk > SSP_ConfigStruct->ClockRate)
00006a  f8d99014          LDR      r9,[r9,#0x14]
00006e  e00f              B        |L10.144|
                  |L10.112|
000070  1c72              ADDS     r2,r6,#1              ;137
000072  fb02f208          MUL      r2,r2,r8              ;137
000076  2300              MOVS     r3,#0                 ;137
000078  4620              MOV      r0,r4                 ;137
00007a  4629              MOV      r1,r5                 ;137
00007c  f7fffffe          BL       __aeabi_uldivmod
000080  4581              CMP      r9,r0
000082  d205              BCS      |L10.144|
;;;139    		{
;;;140    			cr0_div++;
000084  1c76              ADDS     r6,r6,#1
;;;141    			if (cr0_div > 0xFF)
000086  2eff              CMP      r6,#0xff
000088  d902              BLS      |L10.144|
;;;142    			{
;;;143    				cr0_div = 0;
00008a  2600              MOVS     r6,#0
;;;144    				prescale += 2;
00008c  f1080802          ADD      r8,r8,#2
                  |L10.144|
000090  4581              CMP      r9,r0                 ;135
000092  d3ed              BCC      |L10.112|
;;;145    			}
;;;146    		}
;;;147    	}
;;;148    
;;;149        /* Write computed prescaler and divider back to register */
;;;150        SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
000094  6838              LDR      r0,[r7,#0]
000096  b2c0              UXTB     r0,r0
000098  6038              STR      r0,[r7,#0]
;;;151        SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
00009a  6838              LDR      r0,[r7,#0]
00009c  b2f1              UXTB     r1,r6
00009e  ea402001          ORR      r0,r0,r1,LSL #8
0000a2  6038              STR      r0,[r7,#0]
;;;152        SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
0000a4  f00800ff          AND      r0,r8,#0xff
0000a8  6138              STR      r0,[r7,#0x10]
                  |L10.170|
;;;153    }
0000aa  e8bd87f0          POP      {r4-r10,pc}
;;;154    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L10.176|
                          DCD      0x40083000
                  |L10.180|
                          DCD      0x400c5000

                          AREA ||i.SSP_IntConfig||, CODE, READONLY, ALIGN=1

                  SSP_IntConfig PROC
;;;542     **********************************************************************/
;;;543    void SSP_IntConfig(LPC_SSPn_Type *SSPx, uint32_t IntType, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;544    {
000002  d005              BEQ      |L11.16|
;;;545    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;546    	CHECK_PARAM(PARAM_SSP_INTCFG(IntType));
;;;547    
;;;548    	if (NewState == ENABLE)
;;;549    	{
;;;550    		SSPx->IMSC |= IntType;
;;;551    	}
;;;552    	else
;;;553    	{
;;;554    		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
000004  6942              LDR      r2,[r0,#0x14]
000006  230f              MOVS     r3,#0xf
000008  438b              BICS     r3,r3,r1
00000a  401a              ANDS     r2,r2,r3
00000c  6142              STR      r2,[r0,#0x14]
;;;555    	}
;;;556    }
00000e  4770              BX       lr
                  |L11.16|
000010  6942              LDR      r2,[r0,#0x14]         ;550
000012  430a              ORRS     r2,r2,r1              ;550
000014  6142              STR      r2,[r0,#0x14]         ;550
000016  4770              BX       lr
;;;557    
                          ENDP


                          AREA ||i.SSP_LoopBackCmd||, CODE, READONLY, ALIGN=1

                  SSP_LoopBackCmd PROC
;;;245     **********************************************************************/
;;;246    void SSP_LoopBackCmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;247    {
000002  d004              BEQ      |L12.14|
;;;248    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;249    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;250    
;;;251    	if (NewState == ENABLE)
;;;252    	{
;;;253    		SSPx->CR1 |= SSP_CR1_LBM_EN;
;;;254    	}
;;;255    	else
;;;256    	{
;;;257    		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
000004  6841              LDR      r1,[r0,#4]
000006  f001010e          AND      r1,r1,#0xe
00000a  6041              STR      r1,[r0,#4]
;;;258    	}
;;;259    }
00000c  4770              BX       lr
                  |L12.14|
00000e  6841              LDR      r1,[r0,#4]            ;253
000010  f0410101          ORR      r1,r1,#1              ;253
000014  6041              STR      r1,[r0,#4]            ;253
000016  4770              BX       lr
;;;260    
                          ENDP


                          AREA ||i.SSP_ReadWrite||, CODE, READONLY, ALIGN=1

                  SSP_ReadWrite PROC
;;;335     ***********************************************************************/
;;;336    int32_t SSP_ReadWrite (LPC_SSPn_Type *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;337    						SSP_TRANSFER_Type xfType)
;;;338    {
000004  460b              MOV      r3,r1
000006  4605              MOV      r5,r0
000008  4611              MOV      r1,r2
;;;339    	uint8_t *rdata8;
;;;340        uint8_t *wdata8;
;;;341    	uint16_t *rdata16;
;;;342        uint16_t *wdata16;
;;;343        uint32_t stat;
;;;344        uint32_t tmp;
;;;345        int32_t dataword;
;;;346    
;;;347        dataCfg->rx_cnt = 0;
00000a  2000              MOVS     r0,#0
00000c  60d8              STR      r0,[r3,#0xc]
;;;348        dataCfg->tx_cnt = 0;
00000e  6058              STR      r0,[r3,#4]
;;;349        dataCfg->status = 0;
000010  6158              STR      r0,[r3,#0x14]
000012  e002              B        |L13.26|
                  |L13.20|
;;;350    
;;;351    
;;;352    	/* Clear all remaining data in RX FIFO */
;;;353    	while (SSPx->SR & SSP_SR_RNE){
;;;354    		tmp = (uint32_t) SSP_ReceiveData(SSPx);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       SSP_ReceiveData
                  |L13.26|
00001a  68e8              LDR      r0,[r5,#0xc]          ;353
00001c  0740              LSLS     r0,r0,#29             ;353
00001e  d4f9              BMI      |L13.20|
;;;355    	}
;;;356    
;;;357    	// Clear status
;;;358    	SSPx->ICR = SSP_ICR_BITMASK;
000020  2003              MOVS     r0,#3
000022  6228              STR      r0,[r5,#0x20]
;;;359    	if(SSP_GetDataSize(SSPx)>8)
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       SSP_GetDataSize
00002a  2808              CMP      r0,#8
00002c  d901              BLS      |L13.50|
;;;360    		dataword = 1;
00002e  2401              MOVS     r4,#1
000030  e000              B        |L13.52|
                  |L13.50|
;;;361    	else dataword = 0;
000032  2400              MOVS     r4,#0
                  |L13.52|
;;;362    
;;;363    	// Polling mode ----------------------------------------------------------------------
;;;364    	if (xfType == SSP_TRANSFER_POLLING){
;;;365    		if (dataword == 0){
;;;366    			rdata8 = (uint8_t *)dataCfg->rx_data;
;;;367    			wdata8 = (uint8_t *)dataCfg->tx_data;
;;;368    		} else {
;;;369    			rdata16 = (uint16_t *)dataCfg->rx_data;
;;;370    			wdata16 = (uint16_t *)dataCfg->tx_data;
;;;371    		}
;;;372    		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
;;;373    			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
;;;374    				// Write data to buffer
;;;375    				if(dataCfg->tx_data == NULL){
;;;376    					if (dataword == 0){
;;;377    						SSP_SendData(SSPx, 0xFF);
;;;378    						dataCfg->tx_cnt++;
;;;379    					} else {
;;;380    						SSP_SendData(SSPx, 0xFFFF);
;;;381    						dataCfg->tx_cnt += 2;
;;;382    					}
;;;383    				} else {
;;;384    					if (dataword == 0){
;;;385    						SSP_SendData(SSPx, *wdata8);
;;;386    						wdata8++;
;;;387    						dataCfg->tx_cnt++;
;;;388    					} else {
;;;389    						SSP_SendData(SSPx, *wdata16);
;;;390    						wdata16++;
;;;391    						dataCfg->tx_cnt += 2;
;;;392    					}
;;;393    				}
;;;394    			}
;;;395    
;;;396    			// Check overrun error
;;;397    			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
;;;398    				// save status and return
;;;399    				dataCfg->status = stat | SSP_STAT_ERROR;
;;;400    				return (-1);
000034  f04f3bff          MOV      r11,#0xffffffff
;;;401    			}
;;;402    
;;;403    			// Check for any data available in RX FIFO
;;;404    			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
;;;405    				// Read data from SSP data
;;;406    				tmp = SSP_ReceiveData(SSPx);
;;;407    
;;;408    				// Store data to destination
;;;409    				if (dataCfg->rx_data != NULL)
;;;410    				{
;;;411    					if (dataword == 0){
;;;412    						*(rdata8) = (uint8_t) tmp;
;;;413    						rdata8++;
;;;414    					} else {
;;;415    						*(rdata16) = (uint16_t) tmp;
;;;416    						rdata16++;
;;;417    					}
;;;418    				}
;;;419    				// Increase counter
;;;420    				if (dataword == 0){
;;;421    					dataCfg->rx_cnt++;
;;;422    				} else {
;;;423    					dataCfg->rx_cnt += 2;
;;;424    				}
;;;425    			}
;;;426    		}
;;;427    
;;;428    		// save status
;;;429    		dataCfg->status = SSP_STAT_DONE;
000038  f44f7a80          MOV      r10,#0x100
00003c  f64f72ff          MOV      r2,#0xffff            ;380
000040  b121              CBZ      r1,|L13.76|
;;;430    
;;;431    		if (dataCfg->tx_data != NULL){
;;;432    			return dataCfg->tx_cnt;
;;;433    		} else if (dataCfg->rx_data != NULL){
;;;434    			return dataCfg->rx_cnt;
;;;435    		} else {
;;;436    			return (0);
;;;437    		}
;;;438    	}
;;;439    
;;;440    	// Interrupt mode ----------------------------------------------------------------------
;;;441    	else if (xfType == SSP_TRANSFER_INTERRUPT){
000042  2901              CMP      r1,#1
000044  d06f              BEQ      |L13.294|
;;;442    
;;;443    		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
;;;444    			// Write data to buffer
;;;445    			if(dataCfg->tx_data == NULL){
;;;446    				if (dataword == 0){
;;;447    					SSP_SendData(SSPx, 0xFF);
;;;448    					dataCfg->tx_cnt++;
;;;449    				} else {
;;;450    					SSP_SendData(SSPx, 0xFFFF);
;;;451    					dataCfg->tx_cnt += 2;
;;;452    				}
;;;453    			} else {
;;;454    				if (dataword == 0){
;;;455    					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
;;;456    					dataCfg->tx_cnt++;
;;;457    				} else {
;;;458    					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
;;;459    					dataCfg->tx_cnt += 2;
;;;460    				}
;;;461    			}
;;;462    
;;;463    			// Check error
;;;464    			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
;;;465    				// save status and return
;;;466    				dataCfg->status = stat | SSP_STAT_ERROR;
;;;467    				return (-1);
;;;468    			}
;;;469    
;;;470    			// Check for any data available in RX FIFO
;;;471    			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
;;;472    				// Read data from SSP data
;;;473    				tmp = SSP_ReceiveData(SSPx);
;;;474    
;;;475    				// Store data to destination
;;;476    				if (dataCfg->rx_data != NULL)
;;;477    				{
;;;478    					if (dataword == 0){
;;;479    						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
;;;480    					} else {
;;;481    						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
;;;482    					}
;;;483    				}
;;;484    				// Increase counter
;;;485    				if (dataword == 0){
;;;486    					dataCfg->rx_cnt++;
;;;487    				} else {
;;;488    					dataCfg->rx_cnt += 2;
;;;489    				}
;;;490    			}
;;;491    		}
;;;492    
;;;493    		// If there more data to sent or receive
;;;494    		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
;;;495    			// Enable all interrupt
;;;496    			SSPx->IMSC = SSP_IMSC_BITMASK;
;;;497    		} else {
;;;498    			// Save status
;;;499    			dataCfg->status = SSP_STAT_DONE;
;;;500    		}
;;;501    		return (0);
;;;502    	}
;;;503    
;;;504    	return (-1);
000046  4658              MOV      r0,r11
                  |L13.72|
;;;505    }
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.76|
00004c  b11c              CBZ      r4,|L13.86|
00004e  689f              LDR      r7,[r3,#8]            ;369
000050  f8d39000          LDR      r9,[r3,#0]            ;370
000054  e04e              B        |L13.244|
                  |L13.86|
000056  689e              LDR      r6,[r3,#8]            ;366
000058  f8d38000          LDR      r8,[r3,#0]            ;367
00005c  e04a              B        |L13.244|
                  |L13.94|
00005e  f8d5c00c          LDR      r12,[r5,#0xc]         ;373
000062  ea5f7c8c          LSLS     r12,r12,#30           ;373
000066  d50e              BPL      |L13.134|
000068  4281              CMP      r1,r0                 ;373
00006a  d00c              BEQ      |L13.134|
00006c  6818              LDR      r0,[r3,#0]            ;375
00006e  b190              CBZ      r0,|L13.150|
000070  b314              CBZ      r4,|L13.184|
000072  f8b91000          LDRH     r1,[r9,#0]            ;389
000076  4628              MOV      r0,r5                 ;389
000078  f7fffffe          BL       SSP_SendData
00007c  f1090902          ADD      r9,r9,#2              ;390
000080  6858              LDR      r0,[r3,#4]            ;391
000082  1c80              ADDS     r0,r0,#2              ;391
000084  6058              STR      r0,[r3,#4]            ;391
                  |L13.134|
000086  69a8              LDR      r0,[r5,#0x18]         ;397
000088  07c1              LSLS     r1,r0,#31             ;397
00008a  d02c              BEQ      |L13.230|
00008c  f4407000          ORR      r0,r0,#0x200          ;399
000090  6158              STR      r0,[r3,#0x14]         ;399
000092  4658              MOV      r0,r11                ;400
000094  e7d8              B        |L13.72|
                  |L13.150|
000096  b13c              CBZ      r4,|L13.168|
000098  4611              MOV      r1,r2                 ;380
00009a  4628              MOV      r0,r5                 ;380
00009c  f7fffffe          BL       SSP_SendData
0000a0  6858              LDR      r0,[r3,#4]            ;381
0000a2  1c80              ADDS     r0,r0,#2              ;381
0000a4  6058              STR      r0,[r3,#4]            ;381
0000a6  e7ee              B        |L13.134|
                  |L13.168|
0000a8  21ff              MOVS     r1,#0xff              ;377
0000aa  4628              MOV      r0,r5                 ;377
0000ac  f7fffffe          BL       SSP_SendData
0000b0  6858              LDR      r0,[r3,#4]            ;378
0000b2  1c40              ADDS     r0,r0,#1              ;378
0000b4  6058              STR      r0,[r3,#4]            ;378
0000b6  e7e6              B        |L13.134|
                  |L13.184|
0000b8  f8981000          LDRB     r1,[r8,#0]            ;385
0000bc  4628              MOV      r0,r5                 ;385
0000be  f7fffffe          BL       SSP_SendData
0000c2  f1080801          ADD      r8,r8,#1              ;386
0000c6  6858              LDR      r0,[r3,#4]            ;387
0000c8  1c40              ADDS     r0,r0,#1              ;387
0000ca  6058              STR      r0,[r3,#4]            ;387
0000cc  e7db              B        |L13.134|
                  |L13.206|
0000ce  4628              MOV      r0,r5                 ;406
0000d0  f7fffffe          BL       SSP_ReceiveData
0000d4  6899              LDR      r1,[r3,#8]            ;409
0000d6  b111              CBZ      r1,|L13.222|
0000d8  b1d4              CBZ      r4,|L13.272|
0000da  f8270b02          STRH     r0,[r7],#2            ;415
                  |L13.222|
0000de  b1d4              CBZ      r4,|L13.278|
0000e0  68d8              LDR      r0,[r3,#0xc]          ;423
0000e2  1c80              ADDS     r0,r0,#2              ;423
0000e4  60d8              STR      r0,[r3,#0xc]          ;423
                  |L13.230|
0000e6  68e8              LDR      r0,[r5,#0xc]          ;404
0000e8  0740              LSLS     r0,r0,#29             ;404
0000ea  d503              BPL      |L13.244|
0000ec  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;404
0000f0  4288              CMP      r0,r1                 ;404
0000f2  d1ec              BNE      |L13.206|
                  |L13.244|
0000f4  6859              LDR      r1,[r3,#4]            ;372
0000f6  6918              LDR      r0,[r3,#0x10]         ;372
0000f8  4281              CMP      r1,r0                 ;372
0000fa  d1b0              BNE      |L13.94|
0000fc  f8d3c00c          LDR      r12,[r3,#0xc]         ;372
000100  4584              CMP      r12,r0                ;372
000102  d1ac              BNE      |L13.94|
000104  f8c3a014          STR      r10,[r3,#0x14]        ;429
000108  6818              LDR      r0,[r3,#0]            ;431
00010a  b140              CBZ      r0,|L13.286|
00010c  6858              LDR      r0,[r3,#4]            ;432
00010e  e79b              B        |L13.72|
                  |L13.272|
000110  f8060b01          STRB     r0,[r6],#1            ;412
000114  e7e3              B        |L13.222|
                  |L13.278|
000116  68d8              LDR      r0,[r3,#0xc]          ;421
000118  1c40              ADDS     r0,r0,#1              ;421
00011a  60d8              STR      r0,[r3,#0xc]          ;421
00011c  e7e3              B        |L13.230|
                  |L13.286|
00011e  6898              LDR      r0,[r3,#8]            ;433
000120  b110              CBZ      r0,|L13.296|
000122  68d8              LDR      r0,[r3,#0xc]          ;434
000124  e790              B        |L13.72|
                  |L13.294|
000126  e03f              B        |L13.424|
                  |L13.296|
000128  2000              MOVS     r0,#0                 ;436
00012a  e78d              B        |L13.72|
                  |L13.300|
00012c  6818              LDR      r0,[r3,#0]            ;445
00012e  b178              CBZ      r0,|L13.336|
000130  b1fc              CBZ      r4,|L13.370|
000132  5a41              LDRH     r1,[r0,r1]            ;458
000134  4628              MOV      r0,r5                 ;458
000136  f7fffffe          BL       SSP_SendData
00013a  6858              LDR      r0,[r3,#4]            ;459
00013c  1c80              ADDS     r0,r0,#2              ;459
00013e  6058              STR      r0,[r3,#4]            ;459
                  |L13.320|
000140  69a8              LDR      r0,[r5,#0x18]         ;464
000142  07c1              LSLS     r1,r0,#31             ;464
000144  d029              BEQ      |L13.410|
000146  f4407000          ORR      r0,r0,#0x200          ;466
00014a  6158              STR      r0,[r3,#0x14]         ;466
00014c  4658              MOV      r0,r11                ;467
00014e  e77b              B        |L13.72|
                  |L13.336|
000150  b13c              CBZ      r4,|L13.354|
000152  4611              MOV      r1,r2                 ;450
000154  4628              MOV      r0,r5                 ;450
000156  f7fffffe          BL       SSP_SendData
00015a  6858              LDR      r0,[r3,#4]            ;451
00015c  1c80              ADDS     r0,r0,#2              ;451
00015e  6058              STR      r0,[r3,#4]            ;451
000160  e7ee              B        |L13.320|
                  |L13.354|
000162  21ff              MOVS     r1,#0xff              ;447
000164  4628              MOV      r0,r5                 ;447
000166  f7fffffe          BL       SSP_SendData
00016a  6858              LDR      r0,[r3,#4]            ;448
00016c  1c40              ADDS     r0,r0,#1              ;448
00016e  6058              STR      r0,[r3,#4]            ;448
000170  e7e6              B        |L13.320|
                  |L13.370|
000172  5c41              LDRB     r1,[r0,r1]            ;455
000174  4628              MOV      r0,r5                 ;455
000176  f7fffffe          BL       SSP_SendData
00017a  6858              LDR      r0,[r3,#4]            ;456
00017c  1c40              ADDS     r0,r0,#1              ;456
00017e  6058              STR      r0,[r3,#4]            ;456
000180  e7de              B        |L13.320|
                  |L13.386|
000182  4628              MOV      r0,r5                 ;473
000184  f7fffffe          BL       SSP_ReceiveData
000188  6899              LDR      r1,[r3,#8]            ;476
00018a  b111              CBZ      r1,|L13.402|
00018c  b1ec              CBZ      r4,|L13.458|
00018e  68de              LDR      r6,[r3,#0xc]          ;481
000190  5388              STRH     r0,[r1,r6]            ;481
                  |L13.402|
000192  b1ec              CBZ      r4,|L13.464|
000194  68d8              LDR      r0,[r3,#0xc]          ;488
000196  1c80              ADDS     r0,r0,#2              ;488
000198  60d8              STR      r0,[r3,#0xc]          ;488
                  |L13.410|
00019a  68e8              LDR      r0,[r5,#0xc]          ;471
00019c  0740              LSLS     r0,r0,#29             ;471
00019e  d503              BPL      |L13.424|
0001a0  e9d30103          LDRD     r0,r1,[r3,#0xc]       ;471
0001a4  4288              CMP      r0,r1                 ;471
0001a6  d1ec              BNE      |L13.386|
                  |L13.424|
0001a8  68e8              LDR      r0,[r5,#0xc]          ;443
0001aa  0780              LSLS     r0,r0,#30             ;443
0001ac  d503              BPL      |L13.438|
0001ae  6859              LDR      r1,[r3,#4]            ;443
0001b0  6918              LDR      r0,[r3,#0x10]         ;443
0001b2  4281              CMP      r1,r0                 ;443
0001b4  d1ba              BNE      |L13.300|
                  |L13.438|
0001b6  e9d31003          LDRD     r1,r0,[r3,#0xc]       ;494
0001ba  4281              CMP      r1,r0                 ;494
0001bc  d102              BNE      |L13.452|
0001be  6859              LDR      r1,[r3,#4]            ;494
0001c0  4281              CMP      r1,r0                 ;494
0001c2  d009              BEQ      |L13.472|
                  |L13.452|
0001c4  200f              MOVS     r0,#0xf               ;496
0001c6  6168              STR      r0,[r5,#0x14]         ;496
0001c8  e008              B        |L13.476|
                  |L13.458|
0001ca  68de              LDR      r6,[r3,#0xc]          ;479
0001cc  5588              STRB     r0,[r1,r6]            ;479
0001ce  e7e0              B        |L13.402|
                  |L13.464|
0001d0  68d8              LDR      r0,[r3,#0xc]          ;486
0001d2  1c40              ADDS     r0,r0,#1              ;486
0001d4  60d8              STR      r0,[r3,#0xc]          ;486
0001d6  e7e0              B        |L13.410|
                  |L13.472|
0001d8  f8c3a014          STR      r10,[r3,#0x14]        ;499
                  |L13.476|
0001dc  2000              MOVS     r0,#0                 ;501
0001de  e733              B        |L13.72|
;;;506    
                          ENDP


                          AREA ||i.SSP_ReceiveData||, CODE, READONLY, ALIGN=1

                  SSP_ReceiveData PROC
;;;312     **********************************************************************/
;;;313    uint16_t SSP_ReceiveData(LPC_SSPn_Type* SSPx)
000000  6880              LDR      r0,[r0,#8]
;;;314    {
;;;315    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;316    
;;;317    	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
000002  b280              UXTH     r0,r0
;;;318    }
000004  4770              BX       lr
;;;319    
                          ENDP


                          AREA ||i.SSP_SendData||, CODE, READONLY, ALIGN=1

                  SSP_SendData PROC
;;;296     **********************************************************************/
;;;297    void SSP_SendData(LPC_SSPn_Type* SSPx, uint16_t Data)
000000  6081              STR      r1,[r0,#8]
;;;298    {
;;;299    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;300    
;;;301    	SSPx->DR = SSP_DR_BITMASK(Data);
;;;302    }
000002  4770              BX       lr
;;;303    
                          ENDP


                          AREA ||i.SSP_SlaveOutputCmd||, CODE, READONLY, ALIGN=1

                  SSP_SlaveOutputCmd PROC
;;;272     **********************************************************************/
;;;273    void SSP_SlaveOutputCmd(LPC_SSPn_Type* SSPx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;274    {
000002  d004              BEQ      |L16.14|
;;;275    	CHECK_PARAM(PARAM_SSPx(SSPx));
;;;276    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
;;;277    
;;;278    	if (NewState == ENABLE)
;;;279    	{
;;;280    		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
;;;281    	}
;;;282    	else
;;;283    	{
;;;284    		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
000004  6841              LDR      r1,[r0,#4]
000006  f0410108          ORR      r1,r1,#8
00000a  6041              STR      r1,[r0,#4]
;;;285    	}
;;;286    }
00000c  4770              BX       lr
                  |L16.14|
00000e  6841              LDR      r1,[r0,#4]            ;280
000010  f0010107          AND      r1,r1,#7              ;280
000014  6041              STR      r1,[r0,#4]            ;280
000016  4770              BX       lr
;;;287    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\common\\src\\lpc43xx_ssp.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_ssp_c_SSP_Init____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___13_lpc43xx_ssp_c_SSP_Init____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_ssp_c_SSP_Init____REVSH|
#line 144
|__asm___13_lpc43xx_ssp_c_SSP_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
