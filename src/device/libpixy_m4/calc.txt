; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\calc.o --asm_dir=.\ --list_dir=.\ --depend=.\calc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\calc.crf ..\..\common\src\calc.cpp]
                          THUMB

                          AREA ||i._Z11interpolatePhtttS_S_S_||, CODE, READONLY, ALIGN=1

                  _Z11interpolatePhtttS_S_S_ PROC ; interpolate(unsigned char*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char*, unsigned char*)
;;;109    
;;;110    void interpolate(uint8_t *frame, uint16_t x, uint16_t y, uint16_t width, uint8_t *r, uint8_t *g, uint8_t *b)
000000  b5f0              PUSH     {r4-r7,lr}
;;;111    {
000002  ad05              ADD      r5,sp,#0x14
000004  cde0              LDM      r5,{r5-r7}
;;;112    	uint8_t *pixel = frame + y*width + x;
000006  1844              ADDS     r4,r0,r1
000008  fb024403          MLA      r4,r2,r3,r4
00000c  4408              ADD      r0,r0,r1
00000e  fb020003          MLA      r0,r2,r3,r0
;;;113        if (y&1)
000012  ea5f7cc2          LSLS     r12,r2,#31
;;;114        {
;;;115            if (x&1)
;;;116            {
;;;117                *r = *pixel;
;;;118                *g = (*(pixel-1)+*(pixel+1)+*(pixel+width)+*(pixel-width))>>2;
000016  eb000203          ADD      r2,r0,r3
00001a  eba00003          SUB      r0,r0,r3
00001e  d027              BEQ      |L1.112|
000020  07c9              LSLS     r1,r1,#31             ;115
000022  d017              BEQ      |L1.84|
000024  7821              LDRB     r1,[r4,#0]            ;117
000026  7029              STRB     r1,[r5,#0]            ;117
000028  f8141c01          LDRB     r1,[r4,#-1]
00002c  7865              LDRB     r5,[r4,#1]
00002e  5ce3              LDRB     r3,[r4,r3]
000030  7804              LDRB     r4,[r0,#0]
000032  4429              ADD      r1,r1,r5
000034  4423              ADD      r3,r3,r4
000036  4419              ADD      r1,r1,r3
000038  0889              LSRS     r1,r1,#2
00003a  7031              STRB     r1,[r6,#0]
;;;119                *b = (*(pixel-width-1)+*(pixel-width+1)+*(pixel+width-1)+*(pixel+width+1))>>2;
00003c  f8101c01          LDRB     r1,[r0,#-1]
000040  7840              LDRB     r0,[r0,#1]
000042  4408              ADD      r0,r0,r1
000044  f8121c01          LDRB     r1,[r2,#-1]
000048  7852              LDRB     r2,[r2,#1]
00004a  4411              ADD      r1,r1,r2
00004c  4408              ADD      r0,r0,r1
00004e  0880              LSRS     r0,r0,#2
000050  7038              STRB     r0,[r7,#0]
;;;120            }
;;;121            else
;;;122            {
;;;123                *r = (*(pixel-1)+*(pixel+1))>>1;
;;;124                *g = *pixel;
;;;125                *b = (*(pixel-width)+*(pixel+width))>>1;
;;;126            }
;;;127        }
;;;128        else
;;;129        {
;;;130            if (x&1)
;;;131            {
;;;132                *r = (*(pixel-width)+*(pixel+width))>>1;
;;;133                *g = *pixel;
;;;134    			*b = (*(pixel-1)+*(pixel+1))>>1;
;;;135            }
;;;136            else
;;;137            {
;;;138                *r = (*(pixel-width-1)+*(pixel-width+1)+*(pixel+width-1)+*(pixel+width+1))>>2;
;;;139                *g = (*(pixel-1)+*(pixel+1)+*(pixel+width)+*(pixel-width))>>2;
;;;140                *b = *pixel;
;;;141            }
;;;142        }
;;;143    }
000052  bdf0              POP      {r4-r7,pc}
                  |L1.84|
000054  f8141c01          LDRB     r1,[r4,#-1]           ;123
000058  7862              LDRB     r2,[r4,#1]            ;123
00005a  4411              ADD      r1,r1,r2              ;123
00005c  0849              LSRS     r1,r1,#1              ;123
00005e  7029              STRB     r1,[r5,#0]            ;123
000060  7821              LDRB     r1,[r4,#0]            ;124
000062  7031              STRB     r1,[r6,#0]            ;124
000064  7800              LDRB     r0,[r0,#0]            ;125
000066  5ce1              LDRB     r1,[r4,r3]            ;125
000068  4408              ADD      r0,r0,r1              ;125
00006a  0840              LSRS     r0,r0,#1              ;125
00006c  7038              STRB     r0,[r7,#0]            ;125
00006e  bdf0              POP      {r4-r7,pc}
                  |L1.112|
000070  07c9              LSLS     r1,r1,#31             ;130
000072  d00d              BEQ      |L1.144|
000074  7800              LDRB     r0,[r0,#0]            ;132
000076  5ce1              LDRB     r1,[r4,r3]            ;132
000078  4408              ADD      r0,r0,r1              ;132
00007a  0840              LSRS     r0,r0,#1              ;132
00007c  7028              STRB     r0,[r5,#0]            ;132
00007e  7820              LDRB     r0,[r4,#0]            ;133
000080  7030              STRB     r0,[r6,#0]            ;133
000082  f8140c01          LDRB     r0,[r4,#-1]           ;134
000086  7861              LDRB     r1,[r4,#1]            ;134
000088  4408              ADD      r0,r0,r1              ;134
00008a  0840              LSRS     r0,r0,#1              ;134
00008c  7038              STRB     r0,[r7,#0]            ;134
00008e  bdf0              POP      {r4-r7,pc}
                  |L1.144|
000090  f8101c01          LDRB     r1,[r0,#-1]           ;138
000094  f890c001          LDRB     r12,[r0,#1]           ;138
000098  4461              ADD      r1,r1,r12             ;138
00009a  f812cc01          LDRB     r12,[r2,#-1]          ;138
00009e  7852              LDRB     r2,[r2,#1]            ;138
0000a0  4462              ADD      r2,r2,r12             ;138
0000a2  4411              ADD      r1,r1,r2              ;138
0000a4  0889              LSRS     r1,r1,#2              ;138
0000a6  7029              STRB     r1,[r5,#0]            ;138
0000a8  f8141c01          LDRB     r1,[r4,#-1]           ;139
0000ac  7862              LDRB     r2,[r4,#1]            ;139
0000ae  7800              LDRB     r0,[r0,#0]            ;139
0000b0  4411              ADD      r1,r1,r2              ;139
0000b2  5ce2              LDRB     r2,[r4,r3]            ;139
0000b4  4410              ADD      r0,r0,r2              ;139
0000b6  4408              ADD      r0,r0,r1              ;139
0000b8  0880              LSRS     r0,r0,#2              ;139
0000ba  7030              STRB     r0,[r6,#0]            ;139
0000bc  7820              LDRB     r0,[r4,#0]            ;140
0000be  7038              STRB     r0,[r7,#0]            ;140
0000c0  bdf0              POP      {r4-r7,pc}
;;;144    
                          ENDP


                          AREA ||i._Z4hsvchhhPhS_S_S_||, CODE, READONLY, ALIGN=1

                  _Z4hsvchhhPhS_S_S_ PROC ; hsvc(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
;;;17     
;;;18     void hsvc(uint8_t r, uint8_t g, uint8_t b, uint8_t *h, uint8_t *s, uint8_t *v, uint8_t *c)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;19     {
000004  e9ddc707          LDRD     r12,r7,[sp,#0x1c]
000008  9e06              LDR      r6,[sp,#0x18]
;;;20         uint8_t min, max, delta;
;;;21         int hue;
;;;22         min = MIN(r, g);
00000a  4288              CMP      r0,r1
00000c  d201              BCS      |L2.18|
00000e  4605              MOV      r5,r0
000010  e000              B        |L2.20|
                  |L2.18|
000012  460d              MOV      r5,r1
                  |L2.20|
;;;23         min = MIN(min, b);
000014  4295              CMP      r5,r2
000016  d300              BCC      |L2.26|
000018  4615              MOV      r5,r2
                  |L2.26|
;;;24         max = MAX(r, g);
00001a  4288              CMP      r0,r1
00001c  d901              BLS      |L2.34|
00001e  4604              MOV      r4,r0
000020  e000              B        |L2.36|
                  |L2.34|
000022  460c              MOV      r4,r1
                  |L2.36|
;;;25         max = MAX(max, b);
000024  4294              CMP      r4,r2
000026  d800              BHI      |L2.42|
000028  4614              MOV      r4,r2
                  |L2.42|
;;;26     
;;;27         *v = max;
00002a  f88c4000          STRB     r4,[r12,#0]
;;;28         delta = max - min;
00002e  1b65              SUBS     r5,r4,r5
000030  b2ed              UXTB     r5,r5
;;;29         if (max>50)
000032  f04f0c00          MOV      r12,#0
000036  2c32              CMP      r4,#0x32
000038  d906              BLS      |L2.72|
;;;30         {
;;;31             //if (delta>50)
;;;32                 *s = ((int)delta<<8)/max;
00003a  ea4f2805          LSL      r8,r5,#8
00003e  fbb8f8f4          UDIV     r8,r8,r4
000042  f8868000          STRB     r8,[r6,#0]
000046  e001              B        |L2.76|
                  |L2.72|
;;;33             //else
;;;34             //    *s = 0;
;;;35         }
;;;36         else
;;;37             *s = 0;
000048  f886c000          STRB     r12,[r6,#0]
                  |L2.76|
;;;38         if (max==0 || delta==0)
00004c  b13c              CBZ      r4,|L2.94|
00004e  b135              CBZ      r5,|L2.94|
;;;39         {
;;;40             *s = 0;
;;;41             *h = 0;
;;;42             *c = 0;
;;;43             return;
;;;44         }
;;;45         if (r==max)
000050  42a0              CMP      r0,r4
000052  d10c              BNE      |L2.110|
;;;46             hue = (((int)g - (int)b)<<8)/delta;         // between yellow & magenta
000054  1a88              SUBS     r0,r1,r2
000056  0200              LSLS     r0,r0,#8
000058  fb90f0f5          SDIV     r0,r0,r5
00005c  e016              B        |L2.140|
                  |L2.94|
00005e  f886c000          STRB     r12,[r6,#0]           ;40
000062  f883c000          STRB     r12,[r3,#0]           ;41
000066  f887c000          STRB     r12,[r7,#0]           ;42
                  |L2.106|
;;;47         else if (g==max)
;;;48             hue = (2<<8) + (((int)b - (int)r)<<8)/delta;     // between cyan & yellow
;;;49         else
;;;50             hue = (4<<8) + (((int)r - (int)g)<<8)/delta;     // between magenta & cyan
;;;51         if(hue < 0)
;;;52             hue += 6<<8;
;;;53         hue /= 6;
;;;54         *h = hue;
;;;55         *c = delta;
;;;56     }
00006a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.110|
00006e  42a1              CMP      r1,r4                 ;47
000070  d106              BNE      |L2.128|
000072  1a10              SUBS     r0,r2,r0              ;48
000074  0200              LSLS     r0,r0,#8              ;48
000076  fb90f0f5          SDIV     r0,r0,r5              ;48
00007a  f5007000          ADD      r0,r0,#0x200          ;48
00007e  e005              B        |L2.140|
                  |L2.128|
000080  1a40              SUBS     r0,r0,r1              ;50
000082  0200              LSLS     r0,r0,#8              ;50
000084  fb90f0f5          SDIV     r0,r0,r5              ;50
000088  f5006080          ADD      r0,r0,#0x400          ;50
                  |L2.140|
00008c  2800              CMP      r0,#0                 ;51
00008e  da01              BGE      |L2.148|
000090  f50060c0          ADD      r0,r0,#0x600          ;52
                  |L2.148|
000094  2106              MOVS     r1,#6                 ;53
000096  fb90f0f1          SDIV     r0,r0,r1              ;53
00009a  7018              STRB     r0,[r3,#0]            ;54
00009c  703d              STRB     r5,[r7,#0]            ;55
00009e  e7e4              B        |L2.106|
;;;57     
                          ENDP


                          AREA ||i._Z7lightenjh||, CODE, READONLY, ALIGN=1

                  _Z7lightenjh PROC ; lighten(unsigned, unsigned char)
;;;57     
;;;58     uint32_t lighten(uint32_t color, uint8_t factor)
000000  b51e              PUSH     {r1-r4,lr}
;;;59     {
000002  460c              MOV      r4,r1
;;;60         uint32_t r, g, b;
;;;61     
;;;62         rgbUnpack(color, &r, &g, &b);
000004  466b              MOV      r3,sp
000006  aa01              ADD      r2,sp,#4
000008  a902              ADD      r1,sp,#8
00000a  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;63     
;;;64         r += factor;
00000e  9802              LDR      r0,[sp,#8]
000010  4420              ADD      r0,r0,r4
000012  9002              STR      r0,[sp,#8]
;;;65         g += factor;
000014  9901              LDR      r1,[sp,#4]
000016  4421              ADD      r1,r1,r4
000018  9101              STR      r1,[sp,#4]
;;;66         b += factor;
00001a  9a00              LDR      r2,[sp,#0]
00001c  4422              ADD      r2,r2,r4
00001e  9200              STR      r2,[sp,#0]
;;;67     
;;;68         return rgbPack(r, g, b);
000020  f7fffffe          BL       _Z7rgbPackjjj ; rgbPack(unsigned, unsigned, unsigned)
;;;69     }
000024  bd1e              POP      {r1-r4,pc}
;;;70     
                          ENDP


                          AREA ||i._Z7rgbPackjjj||, CODE, READONLY, ALIGN=1

                  _Z7rgbPackjjj PROC ; rgbPack(unsigned, unsigned, unsigned)
;;;70     
;;;71     uint32_t rgbPack(uint32_t r, uint32_t g, uint32_t b)
000000  28ff              CMP      r0,#0xff
;;;72     {
000002  d900              BLS      |L4.6|
;;;73         if (r>0xff)
;;;74             r = 0xff;
000004  20ff              MOVS     r0,#0xff
                  |L4.6|
;;;75         if (g>0xff)
000006  29ff              CMP      r1,#0xff
000008  d900              BLS      |L4.12|
;;;76             g = 0xff;
00000a  21ff              MOVS     r1,#0xff
                  |L4.12|
;;;77         if (b>0xff)
00000c  2aff              CMP      r2,#0xff
00000e  d900              BLS      |L4.18|
;;;78             b = 0xff;
000010  22ff              MOVS     r2,#0xff
                  |L4.18|
;;;79         return (r<<16) | (g<<8) | b;
000012  0400              LSLS     r0,r0,#16
000014  ea402001          ORR      r0,r0,r1,LSL #8
000018  4310              ORRS     r0,r0,r2
;;;80     }
00001a  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i._Z8saturatej||, CODE, READONLY, ALIGN=2

                  _Z8saturatej PROC ; saturate(unsigned)
;;;90     
;;;91     uint32_t saturate(uint32_t color)
000000  b50e              PUSH     {r1-r3,lr}
;;;92     {
;;;93         float m;
;;;94         uint32_t max, r, g, b;
;;;95     
;;;96         rgbUnpack(color, &r, &g, &b);
000002  466b              MOV      r3,sp
000004  aa01              ADD      r2,sp,#4
000006  a902              ADD      r1,sp,#8
000008  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;97     
;;;98         max = MAX(r, g);
00000c  e9dd1001          LDRD     r1,r0,[sp,#4]
000010  4288              CMP      r0,r1
000012  d901              BLS      |L5.24|
000014  4603              MOV      r3,r0
000016  e000              B        |L5.26|
                  |L5.24|
000018  460b              MOV      r3,r1
                  |L5.26|
;;;99         max = MAX(max, b);
00001a  9a00              LDR      r2,[sp,#0]
00001c  4293              CMP      r3,r2
00001e  d800              BHI      |L5.34|
000020  4613              MOV      r3,r2
                  |L5.34|
000022  ee003a10          VMOV     s0,r3
;;;100    
;;;101        // saturate while maintaining ratios
;;;102        m = 255.0f/max;
000026  ed9f1a19          VLDR     s2,|L5.140|
00002a  eef80a40          VCVT.F32.U32 s1,s0
00002e  ee810a20          VDIV.F32 s0,s2,s1
;;;103        r = (uint8_t)(m*r+0.5f);
000032  ee000a90          VMOV     s1,r0
000036  eef81a60          VCVT.F32.U32 s3,s1
00003a  eef60a00          VMOV.F32 s1,#0.50000000
00003e  eeb01a60          VMOV.F32 s2,s1
000042  ee001a21          VMLA.F32 s2,s0,s3
000046  eebc1ac1          VCVT.U32.F32 s2,s2
00004a  ee110a10          VMOV     r0,s2
00004e  b2c0              UXTB     r0,r0
000050  9002              STR      r0,[sp,#8]
;;;104        g = (uint8_t)(m*g+0.5f);
000052  ee011a10          VMOV     s2,r1
000056  eef81a41          VCVT.F32.U32 s3,s2
00005a  eeb01a60          VMOV.F32 s2,s1
00005e  ee001a21          VMLA.F32 s2,s0,s3
000062  eebc1ac1          VCVT.U32.F32 s2,s2
000066  ee111a10          VMOV     r1,s2
00006a  b2c9              UXTB     r1,r1
00006c  9101              STR      r1,[sp,#4]
;;;105        b = (uint8_t)(m*b+0.5f);
00006e  ee012a10          VMOV     s2,r2
000072  eeb81a41          VCVT.F32.U32 s2,s2
000076  ee400a01          VMLA.F32 s1,s0,s2
00007a  eebc0ae0          VCVT.U32.F32 s0,s1
00007e  ee102a10          VMOV     r2,s0
000082  b2d2              UXTB     r2,r2
000084  9200              STR      r2,[sp,#0]
;;;106    
;;;107        return rgbPack(r, g, b);
000086  f7fffffe          BL       _Z7rgbPackjjj ; rgbPack(unsigned, unsigned, unsigned)
;;;108    }
00008a  bd0e              POP      {r1-r3,pc}
;;;109    
                          ENDP

                  |L5.140|
00008c  437f0000          DCFS     0x437f0000 ; 255

                          AREA ||i._Z9rgbUnpackjPjS_S_||, CODE, READONLY, ALIGN=1

                  _Z9rgbUnpackjPjS_S_ PROC ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;81     
;;;82     void rgbUnpack(uint32_t color, uint32_t *r, uint32_t *g, uint32_t *b)
000000  b510              PUSH     {r4,lr}
;;;83     {
;;;84         *b = color&0xff;
000002  b2c4              UXTB     r4,r0
000004  601c              STR      r4,[r3,#0]
;;;85         color >>= 8;
000006  0a00              LSRS     r0,r0,#8
;;;86         *g = color&0xff;
000008  b2c3              UXTB     r3,r0
00000a  6013              STR      r3,[r2,#0]
;;;87         color >>= 8;
00000c  0a00              LSRS     r0,r0,#8
;;;88         *r = color&0xff;
00000e  b2c0              UXTB     r0,r0
000010  6008              STR      r0,[r1,#0]
;;;89     }
000012  bd10              POP      {r4,pc}
;;;90     
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._Z4hsvchhhPhS_S_S_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z4hsvchhhPhS_S_S_||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._Z7rgbPackjjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7rgbPackjjj||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z9rgbUnpackjPjS_S_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9rgbUnpackjPjS_S_||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z7lightenjh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7lightenjh||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z8saturatej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8saturatej||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z11interpolatePhtttS_S_S_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11interpolatePhtttS_S_S_||
                          DCD      0x00000001
