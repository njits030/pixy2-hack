; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\debug_frmwrk.o --asm_dir=.\ --list_dir=.\ --depend=.\debug_frmwrk.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\debug_frmwrk.crf ..\common\src\debug_frmwrk.c]
                          THUMB

                          AREA ||i.UARTGetChar||, CODE, READONLY, ALIGN=1

                  UARTGetChar PROC
;;;84      **********************************************************************/
;;;85     uint8_t UARTGetChar (LPC_USARTn_Type *UARTx)
000000  b508              PUSH     {r3,lr}
;;;86     {
;;;87     	uint8_t tmp = 0;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;88     	UART_Receive(UARTx, &tmp, 1, BLOCKING);
000006  2301              MOVS     r3,#1
000008  461a              MOV      r2,r3
00000a  4669              MOV      r1,sp
00000c  f7fffffe          BL       UART_Receive
;;;89     	return(tmp);
000010  f89d0000          LDRB     r0,[sp,#0]
;;;90     }
000014  bd08              POP      {r3,pc}
;;;91     
                          ENDP


                          AREA ||i.UARTPutChar||, CODE, READONLY, ALIGN=1

                  UARTPutChar PROC
;;;69      **********************************************************************/
;;;70     void UARTPutChar (LPC_USARTn_Type *UARTx, uint8_t ch)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;71     {
;;;72     	#if defined(HITEX_LCD_TERM)
;;;73     	//Write character to the LCD
;;;74     	WriteChar(ch, xferConfig, NoHighlight);
;;;75     	#endif
;;;76     	UART_Send(UARTx, &ch, 1, BLOCKING);
000002  2301              MOVS     r3,#1
000004  461a              MOV      r2,r3
000006  a901              ADD      r1,sp,#4
000008  f7fffffe          BL       UART_Send
;;;77     }
00000c  bd1c              POP      {r2-r4,pc}
;;;78     
                          ENDP


                          AREA ||i.UARTPutDec||, CODE, READONLY, ALIGN=1

                  UARTPutDec PROC
;;;128     **********************************************************************/
;;;129    void UARTPutDec(LPC_USARTn_Type *UARTx, uint8_t decnum)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4604              MOV      r4,r0
;;;131    	uint8_t c1=decnum%10;
000004  220a              MOVS     r2,#0xa
000006  fbb1f0f2          UDIV     r0,r1,r2
00000a  fb021510          MLS      r5,r2,r0,r1
;;;132    	uint8_t c2=(decnum/10)%10;
00000e  fbb1f3f2          UDIV     r3,r1,r2
000012  fbb3f0f2          UDIV     r0,r3,r2
000016  fb023610          MLS      r6,r2,r0,r3
;;;133    	uint8_t c3=(decnum/100)%10;
00001a  2064              MOVS     r0,#0x64
00001c  fbb1f1f0          UDIV     r1,r1,r0
000020  fbb1f0f2          UDIV     r0,r1,r2
000024  fb021010          MLS      r0,r2,r0,r1
;;;134    	UARTPutChar(UARTx, '0'+c3);
000028  3030              ADDS     r0,r0,#0x30
00002a  b2c1              UXTB     r1,r0
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       UARTPutChar
;;;135    	UARTPutChar(UARTx, '0'+c2);
000032  3630              ADDS     r6,r6,#0x30
000034  b2f1              UXTB     r1,r6
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       UARTPutChar
;;;136    	UARTPutChar(UARTx, '0'+c1);
00003c  3530              ADDS     r5,r5,#0x30
00003e  b2e9              UXTB     r1,r5
000040  4620              MOV      r0,r4
000042  e8bd4070          POP      {r4-r6,lr}
000046  f7ffbffe          B.W      UARTPutChar
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.UARTPutDec16||, CODE, READONLY, ALIGN=1

                  UARTPutDec16 PROC
;;;144     **********************************************************************/
;;;145    void UARTPutDec16(LPC_USARTn_Type *UARTx, uint16_t decnum)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;146    {
000004  4604              MOV      r4,r0
;;;147    	uint8_t c1=decnum%10;
000006  220a              MOVS     r2,#0xa
000008  fbb1f0f2          UDIV     r0,r1,r2
00000c  fb021510          MLS      r5,r2,r0,r1
;;;148    	uint8_t c2=(decnum/10)%10;
000010  fbb1f0f2          UDIV     r0,r1,r2
000014  fbb0f3f2          UDIV     r3,r0,r2
000018  fb020613          MLS      r6,r2,r3,r0
;;;149    	uint8_t c3=(decnum/100)%10;
00001c  2064              MOVS     r0,#0x64
00001e  fbb1f0f0          UDIV     r0,r1,r0
000022  fbb0f3f2          UDIV     r3,r0,r2
000026  fb020713          MLS      r7,r2,r3,r0
;;;150    	uint8_t c4=(decnum/1000)%10;
00002a  f44f707a          MOV      r0,#0x3e8
00002e  fbb1f0f0          UDIV     r0,r1,r0
000032  fbb0f3f2          UDIV     r3,r0,r2
000036  fb020813          MLS      r8,r2,r3,r0
;;;151    	uint8_t c5=(decnum/10000)%10;
00003a  f2427010          MOV      r0,#0x2710
00003e  fbb1f0f0          UDIV     r0,r1,r0
000042  fbb0f1f2          UDIV     r1,r0,r2
000046  fb020011          MLS      r0,r2,r1,r0
;;;152    	UARTPutChar(UARTx, '0'+c5);
00004a  3030              ADDS     r0,r0,#0x30
00004c  b2c1              UXTB     r1,r0
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       UARTPutChar
;;;153    	UARTPutChar(UARTx, '0'+c4);
000054  f1080830          ADD      r8,r8,#0x30
000058  f00801ff          AND      r1,r8,#0xff
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       UARTPutChar
;;;154    	UARTPutChar(UARTx, '0'+c3);
000062  3730              ADDS     r7,r7,#0x30
000064  b2f9              UXTB     r1,r7
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       UARTPutChar
;;;155    	UARTPutChar(UARTx, '0'+c2);
00006c  3630              ADDS     r6,r6,#0x30
00006e  b2f1              UXTB     r1,r6
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       UARTPutChar
;;;156    	UARTPutChar(UARTx, '0'+c1);
000076  3530              ADDS     r5,r5,#0x30
000078  b2e9              UXTB     r1,r5
00007a  4620              MOV      r0,r4
00007c  e8bd41f0          POP      {r4-r8,lr}
000080  f7ffbffe          B.W      UARTPutChar
;;;157    }
;;;158    
                          ENDP


                          AREA ||i.UARTPutDec32||, CODE, READONLY, ALIGN=2

                  UARTPutDec32 PROC
;;;164     **********************************************************************/
;;;165    void UARTPutDec32(LPC_USARTn_Type *UARTx, uint32_t decnum)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;166    {
000004  b081              SUB      sp,sp,#4
;;;167    	uint8_t c1=decnum%10;
000006  200a              MOVS     r0,#0xa
000008  fbb1f2f0          UDIV     r2,r1,r0
00000c  fb001412          MLS      r4,r0,r2,r1
;;;168    	uint8_t c2=(decnum/10)%10;
000010  fbb1f2f0          UDIV     r2,r1,r0
000014  fbb2f3f0          UDIV     r3,r2,r0
000018  fb002513          MLS      r5,r0,r3,r2
;;;169    	uint8_t c3=(decnum/100)%10;
00001c  2264              MOVS     r2,#0x64
00001e  fbb1f2f2          UDIV     r2,r1,r2
000022  fbb2f3f0          UDIV     r3,r2,r0
000026  fb002613          MLS      r6,r0,r3,r2
;;;170    	uint8_t c4=(decnum/1000)%10;
00002a  f44f727a          MOV      r2,#0x3e8
00002e  fbb1f2f2          UDIV     r2,r1,r2
000032  fbb2f3f0          UDIV     r3,r2,r0
000036  fb002713          MLS      r7,r0,r3,r2
;;;171    	uint8_t c5=(decnum/10000)%10;
00003a  f2427210          MOV      r2,#0x2710
00003e  fbb1f2f2          UDIV     r2,r1,r2
000042  fbb2f3f0          UDIV     r3,r2,r0
000046  fb002813          MLS      r8,r0,r3,r2
;;;172    	uint8_t c6=(decnum/100000)%10;
00004a  4a31              LDR      r2,|L5.272|
00004c  fbb1f2f2          UDIV     r2,r1,r2
000050  fbb2f3f0          UDIV     r3,r2,r0
000054  fb002913          MLS      r9,r0,r3,r2
;;;173    	uint8_t c7=(decnum/1000000)%10;
000058  4a2e              LDR      r2,|L5.276|
00005a  fbb1f2f2          UDIV     r2,r1,r2
00005e  fbb2f3f0          UDIV     r3,r2,r0
000062  fb002a13          MLS      r10,r0,r3,r2
;;;174    	uint8_t c8=(decnum/10000000)%10;
000066  4a2c              LDR      r2,|L5.280|
000068  fbb1f2f2          UDIV     r2,r1,r2
00006c  fbb2f3f0          UDIV     r3,r2,r0
000070  fb002213          MLS      r2,r0,r3,r2
000074  9200              STR      r2,[sp,#0]
;;;175    	uint8_t c9=(decnum/100000000)%10;
000076  4a29              LDR      r2,|L5.284|
000078  fbb1f2f2          UDIV     r2,r1,r2
00007c  fbb2f3f0          UDIV     r3,r2,r0
000080  fb002b13          MLS      r11,r0,r3,r2
;;;176    	uint8_t c10=(decnum/1000000000)%10;
000084  4a26              LDR      r2,|L5.288|
000086  fbb1f1f2          UDIV     r1,r1,r2
00008a  fbb1f2f0          UDIV     r2,r1,r0
00008e  fb001012          MLS      r0,r0,r2,r1
;;;177    	UARTPutChar(UARTx, '0'+c10);
000092  3030              ADDS     r0,r0,#0x30
000094  b2c1              UXTB     r1,r0
000096  9801              LDR      r0,[sp,#4]
000098  f7fffffe          BL       UARTPutChar
;;;178    	UARTPutChar(UARTx, '0'+c9);
00009c  f10b0b30          ADD      r11,r11,#0x30
0000a0  f00b01ff          AND      r1,r11,#0xff
0000a4  9801              LDR      r0,[sp,#4]
0000a6  f7fffffe          BL       UARTPutChar
;;;179    	UARTPutChar(UARTx, '0'+c8);
0000aa  9a00              LDR      r2,[sp,#0]
0000ac  9801              LDR      r0,[sp,#4]
0000ae  3230              ADDS     r2,r2,#0x30
0000b0  b2d1              UXTB     r1,r2
0000b2  f7fffffe          BL       UARTPutChar
;;;180    	UARTPutChar(UARTx, '0'+c7);
0000b6  f10a0a30          ADD      r10,r10,#0x30
0000ba  f00a01ff          AND      r1,r10,#0xff
0000be  9801              LDR      r0,[sp,#4]
0000c0  f7fffffe          BL       UARTPutChar
;;;181    	UARTPutChar(UARTx, '0'+c6);
0000c4  f1090930          ADD      r9,r9,#0x30
0000c8  f00901ff          AND      r1,r9,#0xff
0000cc  9801              LDR      r0,[sp,#4]
0000ce  f7fffffe          BL       UARTPutChar
;;;182    	UARTPutChar(UARTx, '0'+c5);
0000d2  f1080830          ADD      r8,r8,#0x30
0000d6  f00801ff          AND      r1,r8,#0xff
0000da  9801              LDR      r0,[sp,#4]
0000dc  f7fffffe          BL       UARTPutChar
;;;183    	UARTPutChar(UARTx, '0'+c4);
0000e0  3730              ADDS     r7,r7,#0x30
0000e2  b2f9              UXTB     r1,r7
0000e4  9801              LDR      r0,[sp,#4]
0000e6  f7fffffe          BL       UARTPutChar
;;;184    	UARTPutChar(UARTx, '0'+c3);
0000ea  3630              ADDS     r6,r6,#0x30
0000ec  b2f1              UXTB     r1,r6
0000ee  9801              LDR      r0,[sp,#4]
0000f0  f7fffffe          BL       UARTPutChar
;;;185    	UARTPutChar(UARTx, '0'+c2);
0000f4  3530              ADDS     r5,r5,#0x30
0000f6  b2e9              UXTB     r1,r5
0000f8  9801              LDR      r0,[sp,#4]
0000fa  f7fffffe          BL       UARTPutChar
;;;186    	UARTPutChar(UARTx, '0'+c1);
0000fe  9801              LDR      r0,[sp,#4]
000100  3430              ADDS     r4,r4,#0x30
000102  b003              ADD      sp,sp,#0xc
000104  b2e1              UXTB     r1,r4
000106  e8bd4ff0          POP      {r4-r11,lr}
00010a  f7ffbffe          B.W      UARTPutChar
;;;187    }
;;;188    
                          ENDP

00010e  0000              DCW      0x0000
                  |L5.272|
                          DCD      0x000186a0
                  |L5.276|
                          DCD      0x000f4240
                  |L5.280|
                          DCD      0x00989680
                  |L5.284|
                          DCD      0x05f5e100
                  |L5.288|
                          DCD      0x3b9aca00

                          AREA ||i.UARTPutHex||, CODE, READONLY, ALIGN=2

                  UARTPutHex PROC
;;;194     **********************************************************************/
;;;195    void UARTPutHex (LPC_USARTn_Type *UARTx, uint8_t hexnum)
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;197    	uint8_t nibble, i;
;;;198    
;;;199    	UARTPuts(UARTx, "0x");
000006  a10b              ADR      r1,|L6.52|
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       UARTPuts
;;;200    	i = 1;
00000e  2401              MOVS     r4,#1
                  |L6.16|
;;;201    	do {
;;;202    		nibble = (hexnum >> (4*i)) & 0x0F;
000010  00a0              LSLS     r0,r4,#2
000012  fa25f000          LSR      r0,r5,r0
000016  f000010f          AND      r1,r0,#0xf
;;;203    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001a  2909              CMP      r1,#9
00001c  d901              BLS      |L6.34|
00001e  3137              ADDS     r1,r1,#0x37
000020  e000              B        |L6.36|
                  |L6.34|
000022  3130              ADDS     r1,r1,#0x30
                  |L6.36|
000024  b2c9              UXTB     r1,r1
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       UARTPutChar
;;;204    	} while (i--);
00002c  1e64              SUBS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4
000030  d2ee              BCS      |L6.16|
;;;205    }
000032  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP

                  |L6.52|
000034  307800            DCB      "0x",0
000037  00                DCB      0

                          AREA ||i.UARTPutHex16||, CODE, READONLY, ALIGN=2

                  UARTPutHex16 PROC
;;;213     **********************************************************************/
;;;214    void UARTPutHex16 (LPC_USARTn_Type *UARTx, uint16_t hexnum)
000000  b570              PUSH     {r4-r6,lr}
;;;215    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;216    	uint8_t nibble, i;
;;;217    
;;;218    	UARTPuts(UARTx, "0x");
000006  a10b              ADR      r1,|L7.52|
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       UARTPuts
;;;219    	i = 3;
00000e  2403              MOVS     r4,#3
                  |L7.16|
;;;220    	do {
;;;221    		nibble = (hexnum >> (4*i)) & 0x0F;
000010  00a0              LSLS     r0,r4,#2
000012  fa25f000          LSR      r0,r5,r0
000016  f000010f          AND      r1,r0,#0xf
;;;222    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001a  2909              CMP      r1,#9
00001c  d901              BLS      |L7.34|
00001e  3137              ADDS     r1,r1,#0x37
000020  e000              B        |L7.36|
                  |L7.34|
000022  3130              ADDS     r1,r1,#0x30
                  |L7.36|
000024  b2c9              UXTB     r1,r1
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       UARTPutChar
;;;223    	} while (i--);
00002c  1e64              SUBS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4
000030  d2ee              BCS      |L7.16|
;;;224    }
000032  bd70              POP      {r4-r6,pc}
;;;225    
                          ENDP

                  |L7.52|
000034  307800            DCB      "0x",0
000037  00                DCB      0

                          AREA ||i.UARTPutHex32||, CODE, READONLY, ALIGN=2

                  UARTPutHex32 PROC
;;;231     **********************************************************************/
;;;232    void UARTPutHex32 (LPC_USARTn_Type *UARTx, uint32_t hexnum)
000000  b570              PUSH     {r4-r6,lr}
;;;233    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;234    	uint8_t nibble, i;
;;;235    
;;;236    	UARTPuts(UARTx, "0x");
000006  a10b              ADR      r1,|L8.52|
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       UARTPuts
;;;237    	i = 7;
00000e  2407              MOVS     r4,#7
                  |L8.16|
;;;238    	do {
;;;239    		nibble = (hexnum >> (4*i)) & 0x0F;
000010  00a0              LSLS     r0,r4,#2
000012  fa25f000          LSR      r0,r5,r0
000016  f000010f          AND      r1,r0,#0xf
;;;240    		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
00001a  2909              CMP      r1,#9
00001c  d901              BLS      |L8.34|
00001e  3137              ADDS     r1,r1,#0x37
000020  e000              B        |L8.36|
                  |L8.34|
000022  3130              ADDS     r1,r1,#0x30
                  |L8.36|
000024  b2c9              UXTB     r1,r1
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       UARTPutChar
;;;241    	} while (i--);
00002c  1e64              SUBS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4
000030  d2ee              BCS      |L8.16|
;;;242    }
000032  bd70              POP      {r4-r6,pc}
;;;243    
                          ENDP

                  |L8.52|
000034  307800            DCB      "0x",0
000037  00                DCB      0

                          AREA ||i.UARTPuts||, CODE, READONLY, ALIGN=1

                  UARTPuts PROC
;;;98      **********************************************************************/
;;;99     void UARTPuts(LPC_USARTn_Type *UARTx, const void *str)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;101    	uint8_t *s = (uint8_t *) str;
;;;102    
;;;103    	while (*s)
;;;104    	{
;;;105    		UARTPutChar(UARTx, *s++);
000006  e003              B        |L9.16|
                  |L9.8|
000008  1c64              ADDS     r4,r4,#1
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       UARTPutChar
                  |L9.16|
000010  7821              LDRB     r1,[r4,#0]            ;103
000012  2900              CMP      r1,#0                 ;103
000014  d1f8              BNE      |L9.8|
;;;106    	}
;;;107    }
000016  bd70              POP      {r4-r6,pc}
;;;108    
                          ENDP


                          AREA ||i.UARTPuts_||, CODE, READONLY, ALIGN=2

                  UARTPuts_ PROC
;;;115     **********************************************************************/
;;;116    void UARTPuts_(LPC_USARTn_Type *UARTx, const void *str)
000000  b510              PUSH     {r4,lr}
;;;117    {
000002  4604              MOV      r4,r0
;;;118    	UARTPuts (UARTx, str);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       UARTPuts
;;;119    	UARTPuts (UARTx, "\n\r");
00000a  4620              MOV      r0,r4
00000c  e8bd4010          POP      {r4,lr}
000010  a101              ADR      r1,|L10.24|
000012  f7ffbffe          B.W      UARTPuts
;;;120    }
;;;121    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
000018  0a0d00            DCB      "\n\r",0
00001b  00                DCB      0

                          AREA ||i.debug_frmwrk_init_clk||, CODE, READONLY, ALIGN=2

                  debug_frmwrk_init_clk PROC
;;;265     **********************************************************************/
;;;266    void debug_frmwrk_init_clk(uint32_t Clock_Speed)
000000  b53e              PUSH     {r1-r5,lr}
;;;267    {
000002  4604              MOV      r4,r0
;;;268    	UART_CFG_Type UARTConfigStruct;
;;;269    
;;;270    	/* Initialize UART Configuration parameter structure to default state:
;;;271    	 * Baudrate = 9600bps
;;;272    	 * 8 data bit
;;;273    	 * 1 Stop bit
;;;274    	 * None parity
;;;275    	 */
;;;276    	UART_ConfigStructInit(&UARTConfigStruct);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       UART_ConfigStructInit
;;;277    	// Re-configure baudrate to 115200bps
;;;278    	UARTConfigStruct.Baud_rate = 115200;
00000a  f44f31e1          MOV      r1,#0x1c200
00000e  9100              STR      r1,[sp,#0]
;;;279    	UARTConfigStruct.Clock_Speed = Clock_Speed;
000010  9402              STR      r4,[sp,#8]
;;;280    
;;;281    	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
;;;282    	UART_Init((LPC_USARTn_Type*)DEBUG_UART_PORT, &UARTConfigStruct);
000012  4c05              LDR      r4,|L11.40|
000014  4669              MOV      r1,sp
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_Init
;;;283    
;;;284    	// Enable UART Transmit
;;;285    	UART_TxCmd((LPC_USARTn_Type*)DEBUG_UART_PORT, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       UART_TxCmd
;;;286    
;;;287    #if defined(HITEX_LCD_TERM)
;;;288    	xferConfig = InitLCDTerm();
;;;289    #endif
;;;290    }
000024  bd3e              POP      {r1-r5,pc}
;;;291    
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      0x400c2000

                          AREA ||i.lpc_printf||, CODE, READONLY, ALIGN=2

                  lpc_printf PROC
;;;249     **********************************************************************/
;;;250    void  lpc_printf (const  char *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;251    {
000002  b500              PUSH     {lr}
000004  f5ad7d01          SUB      sp,sp,#0x204
;;;252        char  buffer[512 + 1];
;;;253                va_list     vArgs;
;;;254        va_start(vArgs, format);
000008  aa83              ADD      r2,sp,#0x20c
;;;255        vsprintf((char *)buffer, (char const *)format, vArgs);
00000a  4668              MOV      r0,sp
00000c  9982              LDR      r1,[sp,#0x208]
00000e  f7fffffe          BL       __c89vsprintf
;;;256        va_end(vArgs);
;;;257    
;;;258        _DBG(buffer);
000012  4669              MOV      r1,sp
000014  4803              LDR      r0,|L12.36|
000016  f7fffffe          BL       UARTPuts
;;;259    }
00001a  f50d7d01          ADD      sp,sp,#0x204
00001e  f85dfb14          LDR      pc,[sp],#0x14
;;;260    
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      0x400c2000

;*** Start embedded assembler ***

#line 1 "..\\common\\src\\debug_frmwrk.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___14_debug_frmwrk_c_e73e2caf____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_debug_frmwrk_c_e73e2caf____REVSH|
#line 144
|__asm___14_debug_frmwrk_c_e73e2caf____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
