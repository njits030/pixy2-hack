; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\smlink.o --asm_dir=.\ --list_dir=.\ --depend=.\smlink.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\smlink.crf src\smlink.cpp]
                          THUMB

                          AREA ||i._ZN6SMLink4sendEPKhjt||, CODE, READONLY, ALIGN=2

                  _ZN6SMLink4sendEPKhjt PROC ; SMLink::send(const unsigned char*, unsigned, unsigned short)
;;;34     
;;;35     int SMLink::send(const uint8_t *data, uint32_t len, uint16_t timeoutMs)
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
000002  4610              MOV      r0,r2
;;;37     	uint32_t time, start, timeout = timeoutMs * CLKRATEMS;
000004  4909              LDR      r1,|L1.44|
000006  434b              MULS     r3,r1,r3
;;;38     
;;;39     	start = LPC_TIMER1->TC;
000008  4d09              LDR      r5,|L1.48|
00000a  68ac              LDR      r4,[r5,#8]
;;;40     	// wait for data to go out
;;;41     	while(SM_OBJECT->sendStatus==SM_STATUS_DATA_AVAIL)
00000c  4e09              LDR      r6,|L1.52|
00000e  e006              B        |L1.30|
                  |L1.16|
;;;42     	{
;;;43     		time = LPC_TIMER1->TC; 
000010  68a9              LDR      r1,[r5,#8]
;;;44     		if ((uint32_t)(time-start) > timeout)
000012  1b09              SUBS     r1,r1,r4
000014  4299              CMP      r1,r3
000016  d902              BLS      |L1.30|
;;;45     			return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
;;;46     	}
;;;47     	// set status to indicate data is avail
;;;48     	SM_OBJECT->sendStatus = SM_STATUS_DATA_AVAIL;	
;;;49     	return len;
;;;50     }
00001c  bd70              POP      {r4-r6,pc}
                  |L1.30|
00001e  8831              LDRH     r1,[r6,#0]            ;41
000020  2901              CMP      r1,#1                 ;41
000022  d0f5              BEQ      |L1.16|
000024  2101              MOVS     r1,#1                 ;48
000026  8031              STRH     r1,[r6,#0]            ;48
000028  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x00031ce0
                  |L1.48|
                          DCD      0x40085000
                  |L1.52|
                          DCD      0x2000fc0a

                          AREA ||i._ZN6SMLink7receiveEPhjt||, CODE, READONLY, ALIGN=2

                  _ZN6SMLink7receiveEPhjt PROC ; SMLink::receive(unsigned char*, unsigned, unsigned short)
;;;51     
;;;52     int SMLink::receive(uint8_t *data, uint32_t len, uint16_t timeoutMs)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4610              MOV      r0,r2
;;;54     	uint32_t time, start, timeout = timeoutMs * CLKRATEMS;
000004  4909              LDR      r1,|L2.44|
000006  434b              MULS     r3,r1,r3
;;;55     
;;;56     	start = LPC_TIMER1->TC;
000008  4d09              LDR      r5,|L2.48|
00000a  68ac              LDR      r4,[r5,#8]
;;;57     	// wait for data to come in
;;;58     	while(!(SM_OBJECT->recvStatus==SM_STATUS_DATA_AVAIL))
00000c  4e09              LDR      r6,|L2.52|
00000e  e006              B        |L2.30|
                  |L2.16|
;;;59     	{
;;;60     		time = LPC_TIMER1->TC; 
000010  68a9              LDR      r1,[r5,#8]
;;;61     		if ((uint32_t)(time-start) > timeout)
000012  1b09              SUBS     r1,r1,r4
000014  4299              CMP      r1,r3
000016  d902              BLS      |L2.30|
;;;62     			return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
;;;63     	}
;;;64     	// set status to indicate data has been read	
;;;65     	SM_OBJECT->recvStatus = 0;	
;;;66     
;;;67     	return len;
;;;68     }
00001c  bd70              POP      {r4-r6,pc}
                  |L2.30|
00001e  8831              LDRH     r1,[r6,#0]            ;58
000020  2901              CMP      r1,#1                 ;58
000022  d1f5              BNE      |L2.16|
000024  2100              MOVS     r1,#0                 ;65
000026  8031              STRH     r1,[r6,#0]            ;65
000028  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x00031ce0
                  |L2.48|
                          DCD      0x40085000
                  |L2.52|
                          DCD      0x2000fc08

                          AREA ||i._ZN6SMLink8getFlagsEh||, CODE, READONLY, ALIGN=2

                  _ZN6SMLink8getFlagsEh PROC ; SMLink::getFlags(unsigned char)
;;;80     
;;;81     uint32_t SMLink::getFlags(uint8_t index)
000000  2901              CMP      r1,#1
;;;82     {
000002  d004              BEQ      |L3.14|
;;;83     	if (index==LINK_FLAG_INDEX_SHARED_MEMORY_LOCATION)
;;;84     		return (uint32_t)SM_OBJECT->buf;
;;;85     	else if (index==LINK_FLAG_INDEX_SHARED_MEMORY_SIZE)
000004  2902              CMP      r1,#2
000006  d004              BEQ      |L3.18|
000008  b131              CBZ      r1,|L3.24|
00000a  2000              MOVS     r0,#0
;;;86     		return SM_BUFSIZE;
;;;87     	else 
;;;88     		return Link::getFlags(index);
;;;89     }
00000c  4770              BX       lr
                  |L3.14|
00000e  4803              LDR      r0,|L3.28|
000010  4770              BX       lr
                  |L3.18|
000012  f44f707d          MOV      r0,#0x3f4             ;86
000016  4770              BX       lr
                  |L3.24|
000018  6840              LDR      r0,[r0,#4]
00001a  4770              BX       lr
;;;90     
                          ENDP

                  |L3.28|
                          DCD      0x2000fc0c

                          AREA ||i._ZN6SMLink8getTimerEv||, CODE, READONLY, ALIGN=1

                  _ZN6SMLink8getTimerEv PROC ; SMLink::getTimer()
;;;75     
;;;76     uint32_t SMLink::getTimer()
000000  68c0              LDR      r0,[r0,#0xc]
;;;77     {
;;;78     	return ::getTimer(m_timer);
000002  f7ffbffe          B.W      getTimer
;;;79     }
;;;80     
                          ENDP


                          AREA ||i._ZN6SMLink8setTimerEv||, CODE, READONLY, ALIGN=1

                  _ZN6SMLink8setTimerEv PROC ; SMLink::setTimer()
;;;70     
;;;71     void SMLink::setTimer()
000000  300c              ADDS     r0,r0,#0xc
;;;72     {
;;;73     	::setTimer(&m_timer);
000002  f7ffbffe          B.W      setTimer
;;;74     }
;;;75     
                          ENDP


                          AREA ||i._ZN6SMLinkC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN6SMLinkC2Ev                  ; Alternate entry point ; SMLink::SMLink__sub_object()
                  _ZN6SMLinkC1Ev PROC ; SMLink::SMLink()
;;;23     
;;;24     SMLink::SMLink()
;;;25     {
;;;26     	m_flags = LINK_FLAG_ERROR_CORRECTED | LINK_FLAG_SHARED_MEM;
;;;27     
;;;28     	memset((void *)SM_OBJECT, 0, sizeof(SmMap));
;;;29     }
;;;30     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2000              MOVS     r0,#0
000006  60a0              STR      r0,[r4,#8]
000008  4805              LDR      r0,|L6.32|
00000a  6020              STR      r0,[r4,#0]
00000c  2003              MOVS     r0,#3
00000e  6060              STR      r0,[r4,#4]
000010  f44f6180          MOV      r1,#0x400
000014  4803              LDR      r0,|L6.36|
000016  f7fffffe          BL       __aeabi_memclr4
00001a  4620              MOV      r0,r4
00001c  bd10              POP      {r4,pc}
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      _ZTV6SMLink+0x8 ; vtable for SMLink
                  |L6.36|
                          DCD      0x2000fc00

                          AREA ||i._ZN6SMLinkD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN6SMLinkD2Ev                  ; Alternate entry point ; SMLink::~SMLink__sub_object()
                  _ZN6SMLinkD1Ev PROC ; SMLink::~SMLink()
;;;30     
;;;31     SMLink::~SMLink()
;;;32     {
;;;33     }
;;;34     
000000  4770              BX       lr
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN6SMLinkC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLinkC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN6SMLinkD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLinkD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN6SMLink4sendEPKhjt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLink4sendEPKhjt||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN6SMLink7receiveEPhjt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLink7receiveEPhjt||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN6SMLink8setTimerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLink8setTimerEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN6SMLink8getTimerEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLink8getTimerEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN6SMLink8getFlagsEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6SMLink8getFlagsEh||
                          DCD      0x00000001

                          AREA ||.constdata__ZTV6SMLink||, COMGROUP=_ZTV6SMLink, DATA, READONLY, ALIGN=2

                  _ZTV6SMLink ; vtable for SMLink
                          DCD      0x00000000
                          DCD      _ZTI6SMLink ; typeinfo for SMLink
                          DCD      _ZN6SMLink4sendEPKhjt ; SMLink::send(const unsigned char*, unsigned, unsigned short)
                          DCD      _ZN6SMLink7receiveEPhjt ; SMLink::receive(unsigned char*, unsigned, unsigned short)
                          DCD      _ZN6SMLink8setTimerEv ; SMLink::setTimer()
                          DCD      _ZN6SMLink8getTimerEv ; SMLink::getTimer()
                          DCD      _ZN6SMLink8getFlagsEh ; SMLink::getFlags(unsigned char)
                          DCD      _ZN4Link9blockSizeEv ; Link::blockSize()
                          DCD      _ZN4Link9getBufferEPPhPj ; Link::getBuffer(unsigned char**, unsigned*)

                          AREA ||i._ZN4Link9blockSizeEv||, COMGROUP=_ZN4Link9blockSizeEv, CODE, READONLY, ALIGN=1

                  _ZN4Link9blockSizeEv PROC ; Link::blockSize()
;;;61         }
;;;62         virtual uint32_t blockSize()
000000  6880              LDR      r0,[r0,#8]
;;;63         {
;;;64             return m_blockSize;
;;;65         }
000002  4770              BX       lr
;;;66         virtual int getBuffer(uint8_t **buf, uint32_t *len)
                          ENDP


                          AREA ||area_number.53||, COMGROUP=_ZN4Link9blockSizeEv, LINKORDER=||i._ZN4Link9blockSizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Link9blockSizeEv||
                          DCD      0x00000001

                          AREA ||i._ZN4Link9getBufferEPPhPj||, COMGROUP=_ZN4Link9getBufferEPPhPj, CODE, READONLY, ALIGN=1

                  _ZN4Link9getBufferEPPhPj PROC ; Link::getBuffer(unsigned char**, unsigned*)
;;;65         }
;;;66         virtual int getBuffer(uint8_t **buf, uint32_t *len)
000000  f06f0063          MVN      r0,#0x63
;;;67         {
;;;68             return LINK_RESULT_ERROR;
;;;69         }
000004  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||area_number.60||, COMGROUP=_ZN4Link9getBufferEPPhPj, LINKORDER=||i._ZN4Link9getBufferEPPhPj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Link9getBufferEPPhPj||
                          DCD      0x00000001

                          AREA ||.constdata__ZTI6SMLink||, COMGROUP=_ZTI6SMLink, DATA, READONLY, ALIGN=2

                  _ZTI6SMLink ; typeinfo for SMLink
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS6SMLink ; typeinfo name for SMLink
                          DCD      _ZTI4Link ; typeinfo for Link

                          AREA ||.constdata__ZTI4Link||, COMGROUP=_ZTI4Link, DATA, READONLY, ALIGN=2

                  _ZTI4Link ; typeinfo for Link
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS4Link ; typeinfo name for Link

                          AREA ||.constdata__ZTS6SMLink||, COMGROUP=_ZTS6SMLink, DATA, READONLY, ALIGN=0

                  _ZTS6SMLink ; typeinfo name for SMLink
000000  36534d4c          DCB      0x36,0x53,0x4d,0x4c
000004  696e6b00          DCB      0x69,0x6e,0x6b,0x00

                          AREA ||.constdata__ZTS4Link||, COMGROUP=_ZTS4Link, DATA, READONLY, ALIGN=0

                  _ZTS4Link ; typeinfo name for Link
000000  344c696e          DCB      0x34,0x4c,0x69,0x6e
000004  6b00              DCB      0x6b,0x00

;*** Start embedded assembler ***

#line 1 "src\\smlink.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_smlink_cpp_d3e28a8e___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___10_smlink_cpp_d3e28a8e___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_smlink_cpp_d3e28a8e___Z7__REVSHi|
#line 144
|__asm___10_smlink_cpp_d3e28a8e___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
