; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\param.o --asm_dir=.\ --list_dir=.\ --depend=.\param.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\param.crf src\param.cpp]
                          THUMB

                          AREA ||i._Z10prm_formatv||, CODE, READONLY, ALIGN=2

                  _Z10prm_formatv PROC ; prm_format()
;;;269    
;;;270    int prm_format()
000000  b510              PUSH     {r4,lr}
;;;271    {
;;;272    	flash_erase(PRM_FLASH_LOC, PRM_ALLOCATED_LEN);
000002  4808              LDR      r0,|L1.36|
000004  4a08              LDR      r2,|L1.40|
000006  f44f4100          MOV      r1,#0x8000
00000a  6800              LDR      r0,[r0,#0]  ; g_flashSize
00000c  4410              ADD      r0,r0,r2
00000e  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
;;;273    	cprintf(TM_FLAG_PRIORITY_HIGH, "All parameters have been erased and restored to their defaults!\n");
000012  4906              LDR      r1,|L1.44|
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
;;;274    	g_dirty = true;
00001a  4905              LDR      r1,|L1.48|
00001c  2001              MOVS     r0,#1
00001e  7008              STRB     r0,[r1,#0]
;;;275    	return 0;
000020  2000              MOVS     r0,#0
;;;276    }
000022  bd10              POP      {r4,pc}
;;;277    
                          ENDP

                  |L1.36|
                          DCD      g_flashSize
                  |L1.40|
                          DCD      0x13ff8000
                  |L1.44|
                          DCD      ||.conststring||+0x3d4
                  |L1.48|
                          DCD      ||.data||

                          AREA ||i._Z10prm_getAllRKhRKtP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z10prm_getAllRKhRKtP5Chirp PROC ; prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
;;;228    
;;;229    int32_t prm_getAll(const uint8_t &contextual, const uint16_t &index, Chirp *chirp)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;230    {
000004  b091              SUB      sp,sp,#0x44
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4692              MOV      r10,r2
;;;231    	int res;
;;;232    	uint16_t i;
;;;233    	uint32_t len;
;;;234    	uint8_t *data, argList[CRP_MAX_ARGS];
;;;235    	ParamRecord *rec;
;;;236    	Shadow *shadow;
;;;237    
;;;238    	for (i=0, rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
00000c  2500              MOVS     r5,#0
00000e  f8df90c4          LDR      r9,|L2.212|
000012  4931              LDR      r1,|L2.216|
000014  f8d90000          LDR      r0,[r9,#0]  ; g_flashSize
000018  1844              ADDS     r4,r0,r1
;;;239    	{
;;;240    		// only look at parameters that pass the program flag test
;;;241    		if (!contextual || PROG_FLAGS_TEST(exec_progIndex(), rec->flags))
00001a  f04f0801          MOV      r8,#1
00001e  f64f7bff          MOV      r11,#0xffff           ;238
000022  e04a              B        |L2.186|
                  |L2.36|
000024  7830              LDRB     r0,[r6,#0]
000026  b138              CBZ      r0,|L2.56|
000028  f7fffffe          BL       _Z14exec_progIndexv ; exec_progIndex()
00002c  3019              ADDS     r0,r0,#0x19
00002e  6861              LDR      r1,[r4,#4]
000030  fa08f000          LSL      r0,r8,r0
000034  4388              BICS     r0,r0,r1
000036  d03e              BEQ      |L2.182|
                  |L2.56|
;;;242    		{
;;;243    			if(i==index)
000038  8838              LDRH     r0,[r7,#0]
00003a  42a8              CMP      r0,r5
00003c  d139              BNE      |L2.178|
;;;244    			{
;;;245    				shadow = prm_findShadow(prm_getId(rec));
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       _Z9prm_getIdP11ParamRecord ; prm_getId(ParamRecord*)
000044  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
;;;246    
;;;247    				if (shadow && shadow->data)
000048  b118              CBZ      r0,|L2.82|
00004a  6885              LDR      r5,[r0,#8]
00004c  b10d              CBZ      r5,|L2.82|
;;;248    				{
;;;249    					len = shadow->len;
00004e  8886              LDRH     r6,[r0,#4]
;;;250    					data = shadow->data;
000050  e004              B        |L2.92|
                  |L2.82|
;;;251    				}
;;;252    				else
;;;253    				{
;;;254    					len = rec->len;
000052  8866              LDRH     r6,[r4,#2]
;;;255    					data = (uint8_t *)rec+prm_getDataOffset(rec);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00005a  1905              ADDS     r5,r0,r4
                  |L2.92|
;;;256    				}
;;;257    				res = Chirp::getArgList(data, rec->len, argList);
00005c  8861              LDRH     r1,[r4,#2]
00005e  aa0e              ADD      r2,sp,#0x38
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       _ZN5Chirp10getArgListEPhjS0_ ; Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
;;;258    				if (res<0)
000066  2800              CMP      r0,#0
000068  db20              BLT      |L2.172|
;;;259    					return res;
;;;260    				CRP_RETURN(chirp, UINT32(rec->flags), UINT32(rec->priority), STRING(argList), STRING(prm_getId(rec)), STRING(prm_getDesc(rec)),  UINTS8(len, data), END);
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
000070  4602              MOV      r2,r0
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       _Z9prm_getIdP11ParamRecord ; prm_getId(ParamRecord*)
000078  4601              MOV      r1,r0
00007a  2000              MOVS     r0,#0
00007c  e9cd500a          STRD     r5,r0,[sp,#0x28]
000080  900c              STR      r0,[sp,#0x30]
000082  ad06              ADD      r5,sp,#0x18
000084  2381              MOVS     r3,#0x81
000086  9609              STR      r6,[sp,#0x24]
000088  20a1              MOVS     r0,#0xa1
00008a  c50d              STM      r5!,{r0,r2,r3}
00008c  9105              STR      r1,[sp,#0x14]
00008e  68a1              LDR      r1,[r4,#8]
000090  e9cd1001          STRD     r1,r0,[sp,#4]
000094  aa0e              ADD      r2,sp,#0x38
000096  e9cd2003          STRD     r2,r0,[sp,#0xc]
00009a  2004              MOVS     r0,#4
00009c  9000              STR      r0,[sp,#0]
00009e  4602              MOV      r2,r0
0000a0  2100              MOVS     r1,#0
0000a2  4650              MOV      r0,r10
0000a4  6863              LDR      r3,[r4,#4]
0000a6  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;261    				return 0;
0000aa  2000              MOVS     r0,#0
                  |L2.172|
;;;262    			}
;;;263    			i++;
;;;264    		}
;;;265    	}
;;;266    	return -1;	
;;;267    }
0000ac  b011              ADD      sp,sp,#0x44
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.178|
0000b2  1c6d              ADDS     r5,r5,#1              ;263
0000b4  b2ad              UXTH     r5,r5                 ;263
                  |L2.182|
0000b6  f5047480          ADD      r4,r4,#0x100          ;238
                  |L2.186|
0000ba  8820              LDRH     r0,[r4,#0]            ;238
0000bc  4558              CMP      r0,r11                ;238
0000be  d005              BEQ      |L2.204|
0000c0  f8d90000          LDR      r0,[r9,#0]            ;238  ; g_flashSize
0000c4  f10050a0          ADD      r0,r0,#0x14000000     ;238
0000c8  4284              CMP      r4,r0                 ;238
0000ca  d3ab              BCC      |L2.36|
                  |L2.204|
0000cc  f04f30ff          MOV      r0,#0xffffffff        ;266
0000d0  e7ec              B        |L2.172|
;;;268    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L2.212|
                          DCD      g_flashSize
                  |L2.216|
                          DCD      0x13ff8000

                          AREA ||i._Z11prm_getDescP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z11prm_getDescP11ParamRecord PROC ; prm_getDesc(ParamRecord*)
;;;191    
;;;192    const char *prm_getDesc(ParamRecord *rec)
000000  b510              PUSH     {r4,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194    	uint32_t offset = PRM_HEADER_LEN;
;;;195    	offset += strlen((char *)rec+offset) + 1;
000004  f104000c          ADD      r0,r4,#0xc
000008  f7fffffe          BL       strlen
00000c  300d              ADDS     r0,r0,#0xd
;;;196    	return (char *)rec+offset;
00000e  4420              ADD      r0,r0,r4
;;;197    }
000010  bd10              POP      {r4,pc}
;;;198    
                          ENDP


                          AREA ||i._Z11prm_getInfoPKcP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z11prm_getInfoPKcP5Chirp PROC ; prm_getInfo(const char*, Chirp*)
;;;212    
;;;213    int32_t prm_getInfo(const char *id, Chirp *chirp)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;214    {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
;;;215    	ParamRecord *rec;
;;;216    
;;;217    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000008  4d13              LDR      r5,|L4.88|
00000a  4914              LDR      r1,|L4.92|
00000c  6828              LDR      r0,[r5,#0]  ; g_flashSize
00000e  1844              ADDS     r4,r0,r1
000010  f64f76ff          MOV      r6,#0xffff
000014  e007              B        |L4.38|
                  |L4.22|
;;;218    	{
;;;219    		if(strcmp(id, (char *)rec->data)==0)
000016  f104010c          ADD      r1,r4,#0xc
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       strcmp
000020  b168              CBZ      r0,|L4.62|
000022  f5047480          ADD      r4,r4,#0x100          ;217
                  |L4.38|
000026  8820              LDRH     r0,[r4,#0]            ;217
000028  42b0              CMP      r0,r6                 ;217
00002a  d004              BEQ      |L4.54|
00002c  6828              LDR      r0,[r5,#0]            ;217  ; g_flashSize
00002e  f10050a0          ADD      r0,r0,#0x14000000     ;217
000032  4284              CMP      r4,r0                 ;217
000034  d3ef              BCC      |L4.22|
                  |L4.54|
;;;220    		{
;;;221    			CRP_RETURN(chirp, STRING(prm_getDesc(rec)));
;;;222    			return 0;
;;;223    		}
;;;224    	}
;;;225    	return -1;	
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L4.58|
;;;226    }
00003a  e8bd83f8          POP      {r3-r9,pc}
                  |L4.62|
00003e  4620              MOV      r0,r4                 ;221
000040  f7fffffe          BL       _Z11prm_getDescP11ParamRecord ; prm_getDesc(ParamRecord*)
000044  4603              MOV      r3,r0                 ;221
000046  2000              MOVS     r0,#0                 ;221
000048  4601              MOV      r1,r0                 ;221
00004a  9000              STR      r0,[sp,#0]            ;221
00004c  22a1              MOVS     r2,#0xa1              ;221
00004e  4638              MOV      r0,r7                 ;221
000050  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
000054  2000              MOVS     r0,#0                 ;222
000056  e7f0              B        |L4.58|
;;;227    
                          ENDP

                  |L4.88|
                          DCD      g_flashSize
                  |L4.92|
                          DCD      0x13ff8000

                          AREA ||i._Z12prm_getChirpPKcP5Chirp||, CODE, READONLY, ALIGN=1

                  _Z12prm_getChirpPKcP5Chirp PROC ; prm_getChirp(const char*, Chirp*)
;;;466    
;;;467    int32_t prm_getChirp(const char *id, Chirp *chirp)
000000  b5fe              PUSH     {r1-r7,lr}
;;;468    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;469    	ParamRecord *rec;
;;;470    
;;;471    	Shadow *shadow = prm_findShadow(id);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
;;;472    
;;;473    	if (shadow && shadow->data)
00000c  2600              MOVS     r6,#0
00000e  b158              CBZ      r0,|L5.40|
000010  6882              LDR      r2,[r0,#8]
000012  b14a              CBZ      r2,|L5.40|
;;;474    		CRP_RETURN(chirp, UINTS8(shadow->len, shadow->data), END);
000014  e9cd2600          STRD     r2,r6,[sp,#0]
000018  9602              STR      r6,[sp,#8]
00001a  8883              LDRH     r3,[r0,#4]
00001c  2281              MOVS     r2,#0x81
00001e  2100              MOVS     r1,#0
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
000026  e012              B        |L5.78|
                  |L5.40|
;;;475    	else
;;;476    	{
;;;477    		rec = prm_find(id);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000030  4604              MOV      r4,r0
;;;478    		if (rec==NULL)
000032  b174              CBZ      r4,|L5.82|
;;;479    			return -1;
;;;480    	
;;;481    		CRP_RETURN(chirp, UINTS8(rec->len, (uint8_t *)rec+prm_getDataOffset(rec)), END);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00003a  4420              ADD      r0,r0,r4
00003c  e9cd0600          STRD     r0,r6,[sp,#0]
000040  9602              STR      r6,[sp,#8]
000042  8863              LDRH     r3,[r4,#2]
000044  2281              MOVS     r2,#0x81
000046  2100              MOVS     r1,#0
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L5.78|
;;;482    	}
;;;483    
;;;484    	return 0;
00004e  2000              MOVS     r0,#0
;;;485    }
000050  bdfe              POP      {r1-r7,pc}
                  |L5.82|
000052  f04f30ff          MOV      r0,#0xffffffff        ;479
000056  bdfe              POP      {r1-r7,pc}
;;;486    
                          ENDP


                          AREA ||i._Z12prm_nextFreev||, CODE, READONLY, ALIGN=2

                  _Z12prm_nextFreev PROC ; prm_nextFree()
;;;316    
;;;317    uint32_t prm_nextFree()
000000  4809              LDR      r0,|L6.40|
;;;318    {
;;;319    	ParamRecord *rec;
;;;320    
;;;321    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++);
000002  6801              LDR      r1,[r0,#0]  ; g_flashSize
000004  4809              LDR      r0,|L6.44|
000006  4408              ADD      r0,r0,r1
000008  f10151a0          ADD      r1,r1,#0x14000000
00000c  f64f72ff          MOV      r2,#0xffff
000010  e001              B        |L6.22|
                  |L6.18|
000012  f5007080          ADD      r0,r0,#0x100
                  |L6.22|
000016  8803              LDRH     r3,[r0,#0]
000018  4293              CMP      r3,r2
00001a  d001              BEQ      |L6.32|
00001c  4288              CMP      r0,r1
00001e  d3f8              BCC      |L6.18|
                  |L6.32|
;;;322    
;;;323    	if (rec>=(ParamRecord *)PRM_ENDREC)
000020  4288              CMP      r0,r1
000022  d300              BCC      |L6.38|
;;;324    		return NULL;
000024  2000              MOVS     r0,#0
                  |L6.38|
;;;325    	return (uint32_t)rec; 
;;;326    }
000026  4770              BX       lr
;;;327    
                          ENDP

                  |L6.40|
                          DCD      g_flashSize
                  |L6.44|
                          DCD      0x13ff8000

                          AREA ||i._Z12prm_setChirpPKcRKjPKh||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  _Z12prm_setChirpPKcRKjPKh PROC ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
;;;362    
;;;363    int32_t prm_setChirp(const char *id, const uint32_t &valLen, const uint8_t *val)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;364    {
000004  b09d              SUB      sp,sp,#0x74
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;365    	ParamRecord *rec;
;;;366    	uint8_t *buf;
;;;367    	uint32_t offset;
;;;368    	void *sector;
;;;369    	int32_t res = 0;
00000c  f04f0800          MOV      r8,#0
;;;370    	
;;;371    	printf("set %s\n", id);
000010  4621              MOV      r1,r4
000012  a03a              ADR      r0,|L7.252|
000014  f7fffffe          BL       lpc_printf
;;;372    	rec = prm_find(id);
000018  2100              MOVS     r1,#0
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000020  4683              MOV      r11,r0
;;;373    
;;;374    	if (rec==NULL)
;;;375    	{
;;;376    		// Good god this is an ugly hack.  But, creating parameters should only be handled from within the firmware, so that the correct
;;;377    		// description can be inserted.  There may be other parameters like this, such that when these parameters are lost, we want to resave,
;;;378    		// in which case, we should formalize this hack somehow.
;;;379    		if (strncmp(id, "Signature label", 15)==0)
;;;380    		{
;;;381    			char desc[100];
;;;382    			sprintf(desc, "@c Signature_Labels Sets the label for objects that match signature%s.", id+15);
;;;383    			prm_add(id, 0, PRM_PRIORITY_3, desc, val[0], val+1, END);
;;;384    			return 0;
;;;385    		}
;;;386    		return -1;
000022  f04f3aff          MOV      r10,#0xffffffff
000026  f1bb0f00          CMP      r11,#0                ;374
00002a  d03a              BEQ      |L7.162|
;;;387    	}
;;;388    
;;;389    #if 0
;;;390    	// don't set parameters if the corresponding programs aren't being run
;;;391    	if (!PROG_FLAGS_TEST(exec_progIndex(), rec->flags))
;;;392    	{
;;;393    		printf("prm error 1\n");
;;;394    		return -2;
;;;395    	}
;;;396    #endif
;;;397    	
;;;398    	buf = (uint8_t *)malloc(FLASH_SECTOR_SIZE);
00002c  f44f5980          MOV      r9,#0x1000
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       malloc
000036  4607              MOV      r7,r0
;;;399       	
;;;400    	if (buf==NULL)
000038  0038              MOVS     r0,r7
00003a  d04f              BEQ      |L7.220|
;;;401    	{
;;;402    		printf("prm error 2\n");
;;;403    		return -2;
;;;404    	}
;;;405    
;;;406    	sector = (void *)FLASH_SECTOR_MASK((uint32_t)rec);
00003c  f36f0b0b          BFC      r11,#0,#12
;;;407    	memcpy(buf, sector, FLASH_SECTOR_SIZE);
000040  464a              MOV      r2,r9
000042  4659              MOV      r1,r11
000044  f7fffffe          BL       __aeabi_memcpy
;;;408    
;;;409    	rec = prm_find(id, buf);
000048  4639              MOV      r1,r7
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000050  4604              MOV      r4,r0
;;;410    
;;;411    	if (rec==NULL)
000052  2c00              CMP      r4,#0
000054  d048              BEQ      |L7.232|
;;;412    	{
;;;413    		res = -1;
;;;414    		printf("prm error 3\n");
;;;415    		goto end;
;;;416    	}
;;;417    
;;;418    	offset = prm_getDataOffset(rec);	
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
;;;419    	if (memcmp((uint8_t *)rec+offset, val, valLen)==0)
00005c  4420              ADD      r0,r0,r4
00005e  4682              MOV      r10,r0
000060  4631              MOV      r1,r6
000062  682a              LDR      r2,[r5,#0]
000064  f7fffffe          BL       memcmp
000068  2800              CMP      r0,#0
00006a  d042              BEQ      |L7.242|
;;;420    	{
;;;421    		printf("no change\n");
;;;422    		goto end;
;;;423    	}
;;;424    	memcpy((uint8_t *)rec+offset, val, valLen);
00006c  4650              MOV      r0,r10
00006e  4631              MOV      r1,r6
000070  682a              LDR      r2,[r5,#0]
000072  f7fffffe          BL       __aeabi_memcpy
;;;425    	 	
;;;426    	rec->len = valLen;
000076  8828              LDRH     r0,[r5,#0]
000078  8060              STRH     r0,[r4,#2]
;;;427    	rec->crc = prm_crc(rec);
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
000080  8020              STRH     r0,[r4,#0]
;;;428    	
;;;429    	flash_erase((uint32_t)sector, FLASH_SECTOR_SIZE); 
000082  4649              MOV      r1,r9
000084  4658              MOV      r0,r11
000086  f7fffffe          BL       _Z11flash_erasejj ; flash_erase(unsigned, unsigned)
;;;430    	flash_program((uint32_t)sector, buf, FLASH_SECTOR_SIZE);
00008a  464a              MOV      r2,r9
00008c  4639              MOV      r1,r7
00008e  4658              MOV      r0,r11
000090  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
                  |L7.148|
;;;431    
;;;432    
;;;433    end:
;;;434    	free(buf); 	
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       free
;;;435    	return res;
00009a  4640              MOV      r0,r8
                  |L7.156|
;;;436    }
00009c  b01d              ADD      sp,sp,#0x74
00009e  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.162|
0000a2  220f              MOVS     r2,#0xf               ;379
0000a4  a117              ADR      r1,|L7.260|
0000a6  4620              MOV      r0,r4                 ;379
0000a8  f7fffffe          BL       strncmp
0000ac  b108              CBZ      r0,|L7.178|
0000ae  4650              MOV      r0,r10                ;386
0000b0  e7f4              B        |L7.156|
                  |L7.178|
0000b2  f104020f          ADD      r2,r4,#0xf            ;382
0000b6  4917              LDR      r1,|L7.276|
0000b8  a804              ADD      r0,sp,#0x10           ;382
0000ba  f7fffffe          BL       __2sprintf
0000be  2200              MOVS     r2,#0                 ;383
0000c0  1c70              ADDS     r0,r6,#1              ;383
0000c2  7831              LDRB     r1,[r6,#0]            ;383
0000c4  e9cd0201          STRD     r0,r2,[sp,#4]         ;383
0000c8  9100              STR      r1,[sp,#0]            ;383
0000ca  ab04              ADD      r3,sp,#0x10           ;383
0000cc  f64032b8          MOV      r2,#0xbb8             ;383
0000d0  2100              MOVS     r1,#0                 ;383
0000d2  4620              MOV      r0,r4                 ;383
0000d4  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0000d8  2000              MOVS     r0,#0                 ;384
0000da  e7df              B        |L7.156|
                  |L7.220|
0000dc  a00e              ADR      r0,|L7.280|
0000de  f7fffffe          BL       lpc_printf
0000e2  f06f0001          MVN      r0,#1                 ;403
0000e6  e7d9              B        |L7.156|
                  |L7.232|
0000e8  46d0              MOV      r8,r10                ;413
0000ea  a00f              ADR      r0,|L7.296|
0000ec  f7fffffe          BL       lpc_printf
0000f0  e7d0              B        |L7.148|
                  |L7.242|
0000f2  a011              ADR      r0,|L7.312|
0000f4  f7fffffe          BL       lpc_printf
0000f8  e7cc              B        |L7.148|
;;;437    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L7.252|
0000fc  73657420          DCB      "set %s\n",0
000100  25730a00
                  |L7.260|
000104  5369676e          DCB      "Signature label",0
000108  61747572
00010c  65206c61
000110  62656c00
                  |L7.276|
                          DCD      ||.conststring||+0x418
                  |L7.280|
000118  70726d20          DCB      "prm error 2\n",0
00011c  6572726f
000120  7220320a
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L7.296|
000128  70726d20          DCB      "prm error 3\n",0
00012c  6572726f
000130  7220330a
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L7.312|
000138  6e6f2063          DCB      "no change\n",0
00013c  68616e67
000140  650a00  
000143  00                DCB      0

                          AREA ||i._Z12prm_setDirtyv||, CODE, READONLY, ALIGN=2

                  _Z12prm_setDirtyv PROC ; prm_setDirty()
;;;550    
;;;551    int32_t prm_setDirty()
000000  4902              LDR      r1,|L8.12|
;;;552    {
;;;553    	g_dirty = true; // set dirty flag
000002  2001              MOVS     r0,#1
000004  7008              STRB     r0,[r1,#0]
;;;554    	return 0;
000006  2000              MOVS     r0,#0
;;;555    }
000008  4770              BX       lr
;;;556    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      ||.data||

                          AREA ||i._Z13prm_verifyAllv||, CODE, READONLY, ALIGN=2

                  _Z13prm_verifyAllv PROC ; prm_verifyAll()
;;;332    
;;;333    bool prm_verifyAll()
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
;;;335    	ParamRecord *rec;
;;;336    
;;;337    	for (rec=(ParamRecord *)PRM_FLASH_LOC; rec->crc!=0xffff && rec<(ParamRecord *)PRM_ENDREC; rec++)
000002  4d0c              LDR      r5,|L9.52|
000004  490c              LDR      r1,|L9.56|
000006  6828              LDR      r0,[r5,#0]  ; g_flashSize
000008  1844              ADDS     r4,r0,r1
00000a  f64f76ff          MOV      r6,#0xffff
00000e  e005              B        |L9.28|
                  |L9.16|
;;;338    	{
;;;339    		if (prm_verifyRecord(rec)==false)
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _Z16prm_verifyRecordPK11ParamRecord ; prm_verifyRecord(const ParamRecord*)
000016  b158              CBZ      r0,|L9.48|
000018  f5047480          ADD      r4,r4,#0x100          ;337
                  |L9.28|
00001c  8820              LDRH     r0,[r4,#0]            ;337
00001e  42b0              CMP      r0,r6                 ;337
000020  d004              BEQ      |L9.44|
000022  6828              LDR      r0,[r5,#0]            ;337  ; g_flashSize
000024  f10050a0          ADD      r0,r0,#0x14000000     ;337
000028  4284              CMP      r4,r0                 ;337
00002a  d3f1              BCC      |L9.16|
                  |L9.44|
;;;340    			return false;
;;;341    	}
;;;342    
;;;343    	return true;
00002c  2001              MOVS     r0,#1
;;;344    }
00002e  bd70              POP      {r4-r6,pc}
                  |L9.48|
000030  2000              MOVS     r0,#0                 ;340
000032  bd70              POP      {r4-r6,pc}
;;;345    
                          ENDP

                  |L9.52|
                          DCD      g_flashSize
                  |L9.56|
                          DCD      0x13ff8000

                          AREA ||i._Z14prm_findShadowPKc||, CODE, READONLY, ALIGN=2

                  _Z14prm_findShadowPKc PROC ; prm_findShadow(const char*)
;;;151    
;;;152    Shadow *prm_findShadow(const char *id)
000000  b570              PUSH     {r4-r6,lr}
;;;153    {
000002  4606              MOV      r6,r0
;;;154    	int i;
;;;155    
;;;156    	for (i=0; i<g_shadowTable.size(); i++)
000004  2400              MOVS     r4,#0
000006  4d0a              LDR      r5,|L10.48|
000008  e008              B        |L10.28|
                  |L10.10|
00000a  68a8              LDR      r0,[r5,#8]            ;153
00000c  eb001004          ADD      r0,r0,r4,LSL #4       ;153
;;;157    	{
;;;158    		if (strcmp(g_shadowTable[i].id, id)==0)
000010  4631              MOV      r1,r6
000012  6800              LDR      r0,[r0,#0]
000014  f7fffffe          BL       strcmp
000018  b128              CBZ      r0,|L10.38|
00001a  1c64              ADDS     r4,r4,#1              ;156
                  |L10.28|
00001c  6828              LDR      r0,[r5,#0]            ;156
00001e  42a0              CMP      r0,r4                 ;156
000020  dcf3              BGT      |L10.10|
;;;159    			return &g_shadowTable[i];
;;;160    	}
;;;161    	return NULL;
000022  2000              MOVS     r0,#0
;;;162    }
000024  bd70              POP      {r4-r6,pc}
                  |L10.38|
000026  68a8              LDR      r0,[r5,#8]
000028  eb001004          ADD      r0,r0,r4,LSL #4
00002c  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      ||.bss||

                          AREA ||i._Z16prm_resetShadowsv||, CODE, READONLY, ALIGN=2

                  _Z16prm_resetShadowsv PROC ; prm_resetShadows()
;;;164    
;;;165    int32_t prm_resetShadows()
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
;;;167    	int i, n;
;;;168    
;;;169    	printf("reset shadows\n");
000002  a011              ADR      r0,|L11.72|
000004  f7fffffe          BL       lpc_printf
;;;170    	
;;;171    	for (i=0, n=0; i<g_shadowTable.size(); i++)
000008  2400              MOVS     r4,#0
00000a  2500              MOVS     r5,#0
00000c  4e12              LDR      r6,|L11.88|
00000e  e011              B        |L11.52|
                  |L11.16|
000010  68b0              LDR      r0,[r6,#8]
000012  eb001004          ADD      r0,r0,r4,LSL #4
;;;172    	{
;;;173    		if (g_shadowTable[i].data)
000016  6880              LDR      r0,[r0,#8]
000018  b158              CBZ      r0,|L11.50|
00001a  f7fffffe          BL       free
;;;174    		{
;;;175    			free(g_shadowTable[i].data);
00001e  68b0              LDR      r0,[r6,#8]
000020  eb001104          ADD      r1,r0,r4,LSL #4
;;;176    			g_shadowTable[i].data = NULL;
000024  2000              MOVS     r0,#0
000026  6088              STR      r0,[r1,#8]
000028  68b1              LDR      r1,[r6,#8]
00002a  eb011104          ADD      r1,r1,r4,LSL #4
;;;177    			g_shadowTable[i].len = 0;
00002e  8088              STRH     r0,[r1,#4]
;;;178    			n++;
000030  1c6d              ADDS     r5,r5,#1
                  |L11.50|
000032  1c64              ADDS     r4,r4,#1              ;171
                  |L11.52|
000034  6830              LDR      r0,[r6,#0]            ;171
000036  42a0              CMP      r0,r4                 ;171
000038  dcea              BGT      |L11.16|
;;;179    		}
;;;180    	}
;;;181    	if (n>0)
00003a  2d00              CMP      r5,#0
00003c  dd02              BLE      |L11.68|
;;;182    		g_dirty = true;	// force a reloading of parameters
00003e  4907              LDR      r1,|L11.92|
000040  2001              MOVS     r0,#1
000042  7008              STRB     r0,[r1,#0]
                  |L11.68|
;;;183    	return n;
000044  4628              MOV      r0,r5
;;;184    }
000046  bd70              POP      {r4-r6,pc}
;;;185    
                          ENDP

                  |L11.72|
000048  72657365          DCB      "reset shadows\n",0
00004c  74207368
000050  61646f77
000054  730a00  
000057  00                DCB      0
                  |L11.88|
                          DCD      ||.bss||
                  |L11.92|
                          DCD      ||.data||

                          AREA ||i._Z16prm_verifyRecordPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z16prm_verifyRecordPK11ParamRecord PROC ; prm_verifyRecord(const ParamRecord*)
;;;327    
;;;328    bool prm_verifyRecord(const ParamRecord *rec)
000000  b510              PUSH     {r4,lr}
;;;329    {	
000002  4604              MOV      r4,r0
;;;330    	return prm_crc(rec)==rec->crc;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
00000a  8821              LDRH     r1,[r4,#0]
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L12.20|
000010  2001              MOVS     r0,#1
;;;331    }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  2000              MOVS     r0,#0                 ;330
000016  bd10              POP      {r4,pc}
;;;332    
                          ENDP


                          AREA ||i._Z17prm_getDataOffsetPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z17prm_getDataOffsetPK11ParamRecord PROC ; prm_getDataOffset(const ParamRecord*)
;;;198    
;;;199    uint32_t prm_getDataOffset(const ParamRecord *rec)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4604              MOV      r4,r0
;;;201    	uint32_t offset = PRM_HEADER_LEN;
;;;202    
;;;203    	offset += strlen((char *)rec+offset) + 1;
000004  f104000c          ADD      r0,r4,#0xc
000008  f7fffffe          BL       strlen
00000c  f100050d          ADD      r5,r0,#0xd
;;;204    	offset += strlen((char *)rec+offset) + 1;
000010  1960              ADDS     r0,r4,r5
000012  f7fffffe          BL       strlen
000016  4428              ADD      r0,r0,r5
000018  1c40              ADDS     r0,r0,#1
;;;205    
;;;206    	// skip padding
;;;207    	while(*((uint8_t *)rec+offset)==0)
00001a  e000              B        |L13.30|
                  |L13.28|
;;;208    		offset++;
00001c  1c40              ADDS     r0,r0,#1
                  |L13.30|
00001e  5c21              LDRB     r1,[r4,r0]            ;207
000020  2900              CMP      r1,#0                 ;207
000022  d0fb              BEQ      |L13.28|
;;;209    
;;;210    	return offset; 
;;;211    }
000024  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP


                          AREA ||i._Z18prm_setShadowChirpPKcRKjPKh||, CODE, READONLY, ALIGN=1

                  _Z18prm_setShadowChirpPKcRKjPKh PROC ; prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
;;;557    
;;;558    int32_t prm_setShadowChirp(const char *id, const uint32_t &valLen, const uint8_t *val)
000000  b5f0              PUSH     {r4-r7,lr}
;;;559    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;560    	Shadow *shadow = prm_findShadow(id);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
000010  4604              MOV      r4,r0
;;;561        void *args[CRP_MAX_ARGS+1];	// +1 for the null arg
;;;562    
;;;563    	if (shadow==NULL)
000012  0020              MOVS     r0,r4
000014  d009              BEQ      |L14.42|
;;;564    		return -1;
;;;565    
;;;566       	if (shadow->data==NULL)
000016  68a0              LDR      r0,[r4,#8]
000018  b150              CBZ      r0,|L14.48|
;;;567    	{
;;;568    		shadow->data = (uint8_t *)malloc(valLen);
;;;569    		shadow->len = valLen;
;;;570    	}
;;;571    	else if (valLen!=shadow->len)
00001a  88a1              LDRH     r1,[r4,#4]
00001c  6828              LDR      r0,[r5,#0]
00001e  4288              CMP      r0,r1
000020  d00c              BEQ      |L14.60|
;;;572    		return -2;
000022  f06f0001          MVN      r0,#1
                  |L14.38|
;;;573    
;;;574    	memcpy(shadow->data, val, valLen);
;;;575    
;;;576    	if (shadow->callback)
;;;577    	{
;;;578    		Chirp::deserializeParse((uint8_t *)val, valLen, args);
;;;579    		(*shadow->callback)(id, args[0]);  // only 1 arg for now, but we can add other cases by looking for the null arg
;;;580    	}
;;;581    
;;;582    	return 0;
;;;583    }
000026  b00b              ADD      sp,sp,#0x2c
000028  bdf0              POP      {r4-r7,pc}
                  |L14.42|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;564
00002e  e7fa              B        |L14.38|
                  |L14.48|
000030  6828              LDR      r0,[r5,#0]            ;568
000032  f7fffffe          BL       malloc
000036  60a0              STR      r0,[r4,#8]            ;568
000038  8828              LDRH     r0,[r5,#0]            ;569
00003a  80a0              STRH     r0,[r4,#4]            ;569
                  |L14.60|
00003c  682a              LDR      r2,[r5,#0]            ;574
00003e  4639              MOV      r1,r7                 ;574
000040  68a0              LDR      r0,[r4,#8]            ;574
000042  f7fffffe          BL       __aeabi_memcpy
000046  68e0              LDR      r0,[r4,#0xc]          ;576
000048  b140              CBZ      r0,|L14.92|
00004a  466a              MOV      r2,sp                 ;578
00004c  4638              MOV      r0,r7                 ;578
00004e  6829              LDR      r1,[r5,#0]            ;578
000050  f7fffffe          BL       _ZN5Chirp16deserializeParseEPhjPPv ; Chirp::deserializeParse(unsigned char*, unsigned, void**)
000054  68e2              LDR      r2,[r4,#0xc]          ;579
000056  9900              LDR      r1,[sp,#0]            ;579
000058  4630              MOV      r0,r6                 ;579
00005a  4790              BLX      r2                    ;579
                  |L14.92|
00005c  2000              MOVS     r0,#0                 ;582
00005e  e7e2              B        |L14.38|
;;;584    
                          ENDP


                          AREA ||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||, CODE, READONLY, ALIGN=2

                  _Z21prm_setShadowCallbackPKcPFvS0_PKvE PROC ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;584    
;;;585    int prm_setShadowCallback(const char *id, ShadowCallback callback)
000000  b57f              PUSH     {r0-r6,lr}
;;;586    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;587    	Shadow shadow, *pshadow;
;;;588    
;;;589    	// can't create a shadow if it doesn't exist
;;;590    	if (prm_find(id)==NULL)
000006  2100              MOVS     r1,#0
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
00000e  b128              CBZ      r0,|L15.28|
;;;591    		return -1;
;;;592    
;;;593    	pshadow = prm_findShadow(id);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
;;;594    	if (pshadow) // shadow is already in the table
000016  b128              CBZ      r0,|L15.36|
;;;595    		pshadow->callback = callback;
000018  60c4              STR      r4,[r0,#0xc]
00001a  e017              B        |L15.76|
                  |L15.28|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;591
                  |L15.32|
;;;596    	else // create new entry
;;;597    	{
;;;598    		uint32_t len = strlen(id)+1;
;;;599    		shadow.id = (const char *)malloc(len);
;;;600    		strcpy((char *)shadow.id, id);
;;;601    		shadow.len = 0;
;;;602    		shadow.data = NULL;
;;;603    		shadow.callback = callback;
;;;604    
;;;605    		g_shadowTable.push_back(shadow);
;;;606    	}
;;;607    
;;;608    	return 0;
;;;609    }
000020  b004              ADD      sp,sp,#0x10
000022  bd70              POP      {r4-r6,pc}
                  |L15.36|
000024  4628              MOV      r0,r5                 ;598
000026  f7fffffe          BL       strlen
00002a  1c40              ADDS     r0,r0,#1              ;598
00002c  f7fffffe          BL       malloc
000030  9000              STR      r0,[sp,#0]            ;599
000032  4629              MOV      r1,r5                 ;600
000034  9800              LDR      r0,[sp,#0]            ;600
000036  f7fffffe          BL       strcpy
00003a  2000              MOVS     r0,#0                 ;601
00003c  f8ad0004          STRH     r0,[sp,#4]            ;601
000040  9002              STR      r0,[sp,#8]            ;602
000042  9403              STR      r4,[sp,#0xc]          ;603
000044  4669              MOV      r1,sp                 ;605
000046  4802              LDR      r0,|L15.80|
000048  f7fffffe          BL       _ZN12SimpleVectorI6ShadowE9push_backERKS0_ ; SimpleVector<Shadow>::push_back(const Shadow&)
                  |L15.76|
00004c  2000              MOVS     r0,#0                 ;608
00004e  e7e7              B        |L15.32|
;;;610    
                          ENDP

                  |L15.80|
                          DCD      ||.bss||

                          AREA ||i._Z7prm_addPKcjjS0_z||, CODE, READONLY, ALIGN=2

                  _Z7prm_addPKcjjS0_z PROC ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;487    
;;;488    int prm_add(const char *id, uint32_t flags, uint32_t priority, const char *desc, ...)
000000  b40f              PUSH     {r0-r3}
;;;489    {
000002  e92d43f0          PUSH     {r4-r9,lr}
000006  b0c1              SUB      sp,sp,#0x104
000008  4681              MOV      r9,r0
00000a  460f              MOV      r7,r1
00000c  4690              MOV      r8,r2
;;;490    	int res;
;;;491    	char buf[PRM_MAX_LEN];
;;;492    	int len;
;;;493        uint32_t freeLoc, offset=PRM_HEADER_LEN;
;;;494        va_list args;
;;;495    	ParamRecord *rec = (ParamRecord *)buf;
00000e  ad01              ADD      r5,sp,#4
;;;496    
;;;497    	// if it already exists, 
;;;498    	if (prm_find(id))
000010  2100              MOVS     r1,#0
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000018  b130              CBZ      r0,|L16.40|
;;;499    		return -2;
00001a  f06f0001          MVN      r0,#1
                  |L16.30|
;;;500    
;;;501    	memset((void *)rec, 0, PRM_MAX_LEN);
;;;502    
;;;503    	strcpy((char *)rec+offset, id);
;;;504    	offset += strlen(id) + 1;
;;;505    	if (desc!=NULL)
;;;506    	{
;;;507    		strcpy((char *)rec+offset, desc);
;;;508    		offset += strlen(desc) + 1;
;;;509    	}
;;;510    	else
;;;511    	{
;;;512    		*(char *)(rec+offset) = '\0';
;;;513    	 	offset++;
;;;514    	}
;;;515    
;;;516    	// data section should be aligned to 4 bytes	
;;;517    	ALIGN(offset, 4);
;;;518    
;;;519        va_start(args, desc);
;;;520        len = Chirp::vserialize(NULL, (uint8_t *)rec+offset, PRM_MAX_LEN-offset, &args);
;;;521        va_end(args);
;;;522    
;;;523    	if (len<0)
;;;524    		return -3;
;;;525    
;;;526    	rec->flags = flags;
;;;527    	rec->priority = priority;
;;;528    	rec->len = len;
;;;529    	rec->crc = prm_crc(rec); 
;;;530    
;;;531    	if ((freeLoc=prm_nextFree())==NULL)
;;;532    		while(1); //return -4;
;;;533    	
;;;534    	printf("add %s\n", id);
;;;535    	res = flash_program(freeLoc, (uint8_t *)rec, len+prm_getDataOffset(rec));	
;;;536    	if (!prm_find(id))
;;;537    		printf("flash error %d %s\n", res, id);
;;;538    
;;;539    	return res;
;;;540    }
00001e  b041              ADD      sp,sp,#0x104
000020  e8bd03f0          POP      {r4-r9}
000024  f85dfb14          LDR      pc,[sp],#0x14
                  |L16.40|
000028  f44f7180          MOV      r1,#0x100             ;501
00002c  4628              MOV      r0,r5                 ;501
00002e  f7fffffe          BL       __aeabi_memclr4
000032  f105000c          ADD      r0,r5,#0xc            ;503
000036  4649              MOV      r1,r9                 ;503
000038  f7fffffe          BL       strcpy
00003c  4648              MOV      r0,r9                 ;504
00003e  f7fffffe          BL       strlen
000042  f100040d          ADD      r4,r0,#0xd            ;504
000046  994b              LDR      r1,[sp,#0x12c]        ;505
000048  2600              MOVS     r6,#0                 ;505
00004a  b141              CBZ      r1,|L16.94|
00004c  1928              ADDS     r0,r5,r4              ;507
00004e  f7fffffe          BL       strcpy
000052  984b              LDR      r0,[sp,#0x12c]        ;508
000054  f7fffffe          BL       strlen
000058  4404              ADD      r4,r4,r0              ;508
00005a  1c64              ADDS     r4,r4,#1              ;508
00005c  e003              B        |L16.102|
                  |L16.94|
00005e  eb052004          ADD      r0,r5,r4,LSL #8       ;512
000062  7006              STRB     r6,[r0,#0]            ;512
000064  1c64              ADDS     r4,r4,#1              ;513
                  |L16.102|
000066  07a0              LSLS     r0,r4,#30             ;517
000068  d002              BEQ      |L16.112|
00006a  f0240403          BIC      r4,r4,#3              ;517
00006e  1d24              ADDS     r4,r4,#4              ;517
                  |L16.112|
000070  a84c              ADD      r0,sp,#0x130          ;519
000072  9000              STR      r0,[sp,#0]            ;519
000074  f5c47280          RSB      r2,r4,#0x100          ;520
000078  1929              ADDS     r1,r5,r4              ;520
00007a  466b              MOV      r3,sp                 ;520
00007c  2000              MOVS     r0,#0                 ;520
00007e  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
000082  4604              MOV      r4,r0                 ;520
000084  9600              STR      r6,[sp,#0]            ;521
000086  2c00              CMP      r4,#0                 ;523
000088  da02              BGE      |L16.144|
00008a  f06f0002          MVN      r0,#2                 ;524
00008e  e7c6              B        |L16.30|
                  |L16.144|
000090  9702              STR      r7,[sp,#8]            ;526
000092  f8cd800c          STR      r8,[sp,#0xc]          ;527
000096  f8ad4006          STRH     r4,[sp,#6]            ;528
00009a  4628              MOV      r0,r5                 ;529
00009c  f7fffffe          BL       _Z7prm_crcPK11ParamRecord ; prm_crc(const ParamRecord*)
0000a0  f8ad0004          STRH     r0,[sp,#4]            ;529
0000a4  f7fffffe          BL       _Z12prm_nextFreev ; prm_nextFree()
0000a8  1e06              SUBS     r6,r0,#0              ;531
0000aa  d012              BEQ      |L16.210|
0000ac  4649              MOV      r1,r9                 ;534
0000ae  a00d              ADR      r0,|L16.228|
0000b0  f7fffffe          BL       lpc_printf
0000b4  4628              MOV      r0,r5                 ;535
0000b6  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
0000ba  1902              ADDS     r2,r0,r4              ;535
0000bc  4629              MOV      r1,r5                 ;535
0000be  4630              MOV      r0,r6                 ;535
0000c0  f7fffffe          BL       _Z13flash_programjPKhj ; flash_program(unsigned, const unsigned char*, unsigned)
0000c4  4604              MOV      r4,r0                 ;535
0000c6  2100              MOVS     r1,#0                 ;536
0000c8  4648              MOV      r0,r9                 ;536
0000ca  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
0000ce  b108              CBZ      r0,|L16.212|
0000d0  e005              B        |L16.222|
                  |L16.210|
0000d2  e7fe              B        |L16.210|
                  |L16.212|
0000d4  464a              MOV      r2,r9                 ;537
0000d6  4621              MOV      r1,r4                 ;537
0000d8  a004              ADR      r0,|L16.236|
0000da  f7fffffe          BL       lpc_printf
                  |L16.222|
0000de  4620              MOV      r0,r4                 ;539
0000e0  e79d              B        |L16.30|
;;;541    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L16.228|
0000e4  61646420          DCB      "add %s\n",0
0000e8  25730a00
                  |L16.236|
0000ec  666c6173          DCB      "flash error %d %s\n",0
0000f0  68206572
0000f4  726f7220
0000f8  25642025
0000fc  730a00  
0000ff  00                DCB      0

                          AREA ||i._Z7prm_crcPK11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z7prm_crcPK11ParamRecord PROC ; prm_crc(const ParamRecord*)
;;;277    
;;;278    uint16_t prm_crc(const ParamRecord *rec)
000000  b510              PUSH     {r4,lr}
;;;279    {
000002  4604              MOV      r4,r0
;;;280    	uint16_t crc;
;;;281    
;;;282    	if (rec->len>PRM_MAX_LEN)
000004  8860              LDRH     r0,[r4,#2]
000006  f5b07f80          CMP      r0,#0x100
00000a  d901              BLS      |L17.16|
;;;283    		return 0;
00000c  2000              MOVS     r0,#0
                  |L17.14|
;;;284    
;;;285    	crc = Chirp::calcCrc((uint8_t *)rec+2, rec->len+prm_getDataOffset(rec)-2); // +2, -2 because we don't include crc 
;;;286    
;;;287    	// crc can't equal 0xffff
;;;288    	if (crc==0xffff)
;;;289    		crc = 0;
;;;290    
;;;291    	return crc;
;;;292    }
00000e  bd10              POP      {r4,pc}
                  |L17.16|
000010  4620              MOV      r0,r4                 ;285
000012  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
000016  8861              LDRH     r1,[r4,#2]            ;285
000018  1e80              SUBS     r0,r0,#2              ;285
00001a  4401              ADD      r1,r1,r0              ;285
00001c  1ca0              ADDS     r0,r4,#2              ;285
00001e  f7fffffe          BL       _ZN5Chirp7calcCrcEPhj ; Chirp::calcCrc(unsigned char*, unsigned)
000022  f5a0417f          SUB      r1,r0,#0xff00         ;288
000026  39ff              SUBS     r1,r1,#0xff           ;288
000028  d1f1              BNE      |L17.14|
00002a  2000              MOVS     r0,#0                 ;289
00002c  bd10              POP      {r4,pc}
;;;293    
                          ENDP


                          AREA ||i._Z7prm_getPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_getPKcz PROC ; prm_get(const char*, ...)
;;;439    
;;;440    int32_t prm_get(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;441    {
000002  b5f8              PUSH     {r3-r7,lr}
;;;442    	va_list args;
;;;443    	ParamRecord *rec;
;;;444    	int res;
;;;445    	Shadow *shadow = prm_findShadow(id);
000004  9806              LDR      r0,[sp,#0x18]
000006  f7fffffe          BL       _Z14prm_findShadowPKc ; prm_findShadow(const char*)
;;;446    
;;;447    	if (shadow && shadow->data)
00000a  2600              MOVS     r6,#0
;;;448    	{
;;;449    		va_start(args, id);
00000c  ad07              ADD      r5,sp,#0x1c
00000e  b158              CBZ      r0,|L18.40|
000010  6883              LDR      r3,[r0,#8]            ;447
000012  b14b              CBZ      r3,|L18.40|
000014  9500              STR      r5,[sp,#0]
;;;450    		res = Chirp::vdeserialize(shadow->data, shadow->len, &args);
000016  8881              LDRH     r1,[r0,#4]
000018  466a              MOV      r2,sp
00001a  4618              MOV      r0,r3
00001c  f7fffffe          BL       _ZN5Chirp12vdeserializeEPhjPSt9__va_list ; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
;;;451    		va_end(args);
000020  9600              STR      r6,[sp,#0]
                  |L18.34|
;;;452    	}
;;;453    	else
;;;454    	{
;;;455    		rec = prm_find(id);
;;;456    		if (rec==NULL)
;;;457    			return -1;
;;;458    	
;;;459    		va_start(args, id);
;;;460    		res = Chirp::vdeserialize((uint8_t *)rec+prm_getDataOffset(rec), rec->len, &args);
;;;461    		va_end(args);
;;;462    	}
;;;463    	 	
;;;464    	return res;
;;;465    }
000022  bcf8              POP      {r3-r7}
000024  f85dfb14          LDR      pc,[sp],#0x14
                  |L18.40|
000028  2100              MOVS     r1,#0                 ;455
00002a  9806              LDR      r0,[sp,#0x18]         ;455
00002c  f7fffffe          BL       _Z8prm_findPKcPh ; prm_find(const char*, unsigned char*)
000030  4604              MOV      r4,r0                 ;455
000032  b154              CBZ      r4,|L18.74|
000034  9500              STR      r5,[sp,#0]            ;459
000036  4620              MOV      r0,r4                 ;460
000038  f7fffffe          BL       _Z17prm_getDataOffsetPK11ParamRecord ; prm_getDataOffset(const ParamRecord*)
00003c  4420              ADD      r0,r0,r4              ;460
00003e  8861              LDRH     r1,[r4,#2]            ;460
000040  466a              MOV      r2,sp                 ;460
000042  f7fffffe          BL       _ZN5Chirp12vdeserializeEPhjPSt9__va_list ; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
000046  9600              STR      r6,[sp,#0]            ;461
000048  e7eb              B        |L18.34|
                  |L18.74|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;457
00004e  e7e8              B        |L18.34|
;;;466    
                          ENDP


                          AREA ||i._Z7prm_setPKcz||, CODE, READONLY, ALIGN=1

                  _Z7prm_setPKcz PROC ; prm_set(const char*, ...)
;;;345    
;;;346    int32_t prm_set(const char *id, ...)
000000  b40f              PUSH     {r0-r3}
;;;347    {
000002  b500              PUSH     {lr}
000004  b0c3              SUB      sp,sp,#0x10c
;;;348    	va_list args;
;;;349    	int res;
;;;350       	uint8_t buf[PRM_MAX_LEN];
;;;351    
;;;352    	va_start(args, id);
000006  a845              ADD      r0,sp,#0x114
000008  9041              STR      r0,[sp,#0x104]
;;;353    	res = Chirp::vserialize(NULL, buf, PRM_MAX_LEN, &args);
00000a  ab41              ADD      r3,sp,#0x104
00000c  f44f7280          MOV      r2,#0x100
000010  a901              ADD      r1,sp,#4
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       _ZN5Chirp10vserializeEPS_PhjPSt9__va_list ; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
;;;354    	va_end(args);
000018  2100              MOVS     r1,#0
00001a  9141              STR      r1,[sp,#0x104]
;;;355    	if (res<0)
00001c  2800              CMP      r0,#0
00001e  db06              BLT      |L19.46|
;;;356    		return res;
;;;357    
;;;358    	prm_setChirp(id, res, buf);
000020  9042              STR      r0,[sp,#0x108]
000022  aa01              ADD      r2,sp,#4
000024  a942              ADD      r1,sp,#0x108
000026  9844              LDR      r0,[sp,#0x110]
000028  f7fffffe          BL       _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
;;;359    
;;;360    	return 0;
00002c  2000              MOVS     r0,#0
                  |L19.46|
;;;361    }
00002e  b043              ADD      sp,sp,#0x10c
000030  f85dfb14          LDR      pc,[sp],#0x14
;;;362    
                          ENDP


                          AREA ||i._Z8prm_findPKcPh||, CODE, READONLY, ALIGN=2

                  _Z8prm_findPKcPh PROC ; prm_find(const char*, unsigned char*)
;;;293    
;;;294    ParamRecord *prm_find(const char *id, uint8_t *buf=NULL)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;295    {
000004  4607              MOV      r7,r0
;;;296    	ParamRecord *rec, *begin, *end;
;;;297    
;;;298    	if (buf)
000006  2900              CMP      r1,#0
000008  d002              BEQ      |L20.16|
;;;299    	{
;;;300    		begin =  (ParamRecord *)buf;
;;;301    		end = (ParamRecord *)(buf+FLASH_SECTOR_SIZE);
00000a  f5015580          ADD      r5,r1,#0x1000
00000e  e005              B        |L20.28|
                  |L20.16|
;;;302    	}
;;;303    	else
;;;304    	{
;;;305    		begin =	(ParamRecord *)PRM_FLASH_LOC;
000010  480d              LDR      r0,|L20.72|
000012  6805              LDR      r5,[r0,#0]  ; g_flashSize
000014  480d              LDR      r0,|L20.76|
000016  1829              ADDS     r1,r5,r0
;;;306    		end = (ParamRecord *)PRM_ENDREC;
000018  f10555a0          ADD      r5,r5,#0x14000000
                  |L20.28|
;;;307    	}
;;;308    	
;;;309    	for (rec=begin; rec->crc!=0xffff && rec<end; rec++)
00001c  460c              MOV      r4,r1
00001e  f64f76ff          MOV      r6,#0xffff
000022  e007              B        |L20.52|
                  |L20.36|
;;;310    	{
;;;311    		if(strcmp(id, (char *)rec->data)==0)
000024  f104010c          ADD      r1,r4,#0xc
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       strcmp
00002e  b148              CBZ      r0,|L20.68|
000030  f5047480          ADD      r4,r4,#0x100          ;309
                  |L20.52|
000034  8820              LDRH     r0,[r4,#0]            ;309
000036  42b0              CMP      r0,r6                 ;309
000038  d001              BEQ      |L20.62|
00003a  42ac              CMP      r4,r5                 ;309
00003c  d3f2              BCC      |L20.36|
                  |L20.62|
;;;312    			return rec;
;;;313    	}
;;;314    	return NULL;
00003e  2000              MOVS     r0,#0
                  |L20.64|
;;;315    }
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L20.68|
000044  4620              MOV      r0,r4                 ;312
000046  e7fb              B        |L20.64|
;;;316    
                          ENDP

                  |L20.72|
                          DCD      g_flashSize
                  |L20.76|
                          DCD      0x13ff8000

                          AREA ||i._Z8prm_initP5Chirp||, CODE, READONLY, ALIGN=2

                  _Z8prm_initP5Chirp PROC ; prm_init(Chirp*)
;;;124    
;;;125    int prm_init(Chirp *chirp)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127    #if 0
;;;128    	int i, count;
;;;129    	// check integrity
;;;130    	if (!prm_verifyAll()) 
;;;131    	{
;;;132    		// take a more stochastic approach becuause there may be power-related issues that would cause us to 
;;;133    		// mis-read.  But if we truly are corrupt, count will not increment. 
;;;134    		for (i=0, count=0; i<10; i++)
;;;135    		{
;;;136    			if (prm_verifyAll())
;;;137    				count++;
;;;138    		}	
;;;139    		// if we're corrupt, format, start over
;;;140    		if (count==0)
;;;141    			prm_format();
;;;142    	} 
;;;143    #endif
;;;144    	if (!prm_verifyAll())
000004  f7fffffe          BL       _Z13prm_verifyAllv ; prm_verifyAll()
000008  b910              CBNZ     r0,|L21.16|
;;;145    		printf("verify parameters failed\n");
00000a  a004              ADR      r0,|L21.28|
00000c  f7fffffe          BL       lpc_printf
                  |L21.16|
;;;146    
;;;147    	chirp->registerModule(g_module);
000010  4909              LDR      r1,|L21.56|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;148    		
;;;149    	return 0;	
000018  2000              MOVS     r0,#0
;;;150    }
00001a  bd10              POP      {r4,pc}
;;;151    
                          ENDP

                  |L21.28|
00001c  76657269          DCB      "verify parameters failed\n",0
000020  66792070
000024  6172616d
000028  65746572
00002c  73206661
000030  696c6564
000034  0a00    
000036  00                DCB      0
000037  00                DCB      0
                  |L21.56|
                          DCD      ||.constdata||

                          AREA ||i._Z9prm_dirtyv||, CODE, READONLY, ALIGN=2

                  _Z9prm_dirtyv PROC ; prm_dirty()
;;;541    
;;;542    bool prm_dirty()
000000  4902              LDR      r1,|L22.12|
;;;543    {
;;;544    	// one-shot 
;;;545    	bool res = g_dirty;
000002  7808              LDRB     r0,[r1,#0]  ; g_dirty
;;;546    	g_dirty = false;
000004  2200              MOVS     r2,#0
000006  700a              STRB     r2,[r1,#0]
;;;547    
;;;548    	return res;
;;;549    }
000008  4770              BX       lr
;;;550    
                          ENDP

00000a  0000              DCW      0x0000
                  |L22.12|
                          DCD      ||.data||

                          AREA ||i._Z9prm_getIdP11ParamRecord||, CODE, READONLY, ALIGN=1

                  _Z9prm_getIdP11ParamRecord PROC ; prm_getId(ParamRecord*)
;;;186    
;;;187    const char *prm_getId(ParamRecord *rec)
000000  300c              ADDS     r0,r0,#0xc
;;;188    {
;;;189    	return (char *)rec+PRM_HEADER_LEN;
;;;190    }
000002  4770              BX       lr
;;;191    
                          ENDP


                          AREA ||i.__sti___9_param_cpp_55d340e8||, CODE, READONLY, ALIGN=2

                  __sti___9_param_cpp_55d340e8 PROC
000000  b510              PUSH     {r4,lr}
000002  4c08              LDR      r4,|L24.36|
000004  2000              MOVS     r0,#0
000006  6020              STR      r0,[r4,#0]
000008  2010              MOVS     r0,#0x10
00000a  6060              STR      r0,[r4,#4]
00000c  0100              LSLS     r0,r0,#4
00000e  f7fffffe          BL       _Znaj ; operator new[] (unsigned)
000012  60a0              STR      r0,[r4,#8]
000014  4620              MOV      r0,r4
000016  e8bd4010          POP      {r4,lr}
00001a  4a03              LDR      r2,|L24.40|
00001c  4903              LDR      r1,|L24.44|
00001e  f7ffbffe          B.W      __aeabi_atexit
                          ENDP

000022  0000              DCW      0x0000
                  |L24.36|
                          DCD      ||.bss||
                  |L24.40|
                          DCD      __dso_handle
                  |L24.44|
                          DCD      _ZN12SimpleVectorI6ShadowED1Ev ; SimpleVector<Shadow>::~SimpleVector()

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z17prm_getDataOffsetPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z17prm_getDataOffsetPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._Z7prm_crcPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_crcPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._Z16prm_verifyRecordPK11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16prm_verifyRecordPK11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._Z13prm_verifyAllv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13prm_verifyAllv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._Z8prm_initP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_initP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._Z14prm_findShadowPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14prm_findShadowPKc||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z16prm_resetShadowsv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16prm_resetShadowsv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z9prm_getIdP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_getIdP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z11prm_getDescP11ParamRecord||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getDescP11ParamRecord||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z11prm_getInfoPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11prm_getInfoPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z10prm_getAllRKhRKtP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_getAllRKhRKtP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z10prm_formatv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10prm_formatv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z8prm_findPKcPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8prm_findPKcPh||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z12prm_nextFreev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_nextFreev||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z7prm_addPKcjjS0_z||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_addPKcjjS0_z||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._Z12prm_setChirpPKcRKjPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setChirpPKcRKjPKh||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._Z7prm_setPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_setPKcz||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._Z7prm_getPKcz||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7prm_getPKcz||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._Z12prm_getChirpPKcP5Chirp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_getChirpPKcP5Chirp||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._Z9prm_dirtyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9prm_dirtyv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._Z12prm_setDirtyv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12prm_setDirtyv||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._Z18prm_setShadowChirpPKcRKjPKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18prm_setShadowChirpPKcRKjPKh||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z21prm_setShadowCallbackPKcPFvS0_PKvE||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i.__sti___9_param_cpp_55d340e8||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___9_param_cpp_55d340e8||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_shadowTable
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z10prm_formatv ; prm_format()
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x64
                          DCD      _Z12prm_setChirpPKcRKjPKh ; prm_setChirp(const char*, const unsigned&, const unsigned char*)
000020  a1810000          DCB      0xa1,0x81,0x00,0x00
                          DCD      0x00000000
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x6c
                          DCD      ||.conststring||+0xf0
                          DCD      _Z12prm_setDirtyv ; prm_setDirty()
000038  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xfc
                          DCD      ||.conststring||+0x144
                          DCD      _Z18prm_setShadowChirpPKcRKjPKh ; prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
000050  a1810000          DCB      0xa1,0x81,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x154
                          DCD      ||.conststring||+0x1e0
                          DCD      _Z16prm_resetShadowsv ; prm_resetShadows()
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1f4
                          DCD      ||.conststring||+0x240
                          DCD      _Z12prm_getChirpPKcP5Chirp ; prm_getChirp(const char*, Chirp*)
000080  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x248
                          DCD      ||.conststring||+0x2a8
                          DCD      _Z11prm_getInfoPKcP5Chirp ; prm_getInfo(const char*, Chirp*)
000098  a1000000          DCB      0xa1,0x00,0x00,0x00
                          DCD      0x00000000
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2b4
                          DCD      ||.conststring||+0x318
                          DCD      _Z10prm_getAllRKhRKtP5Chirp ; prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
0000b0  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      0x00000000
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x324
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  70726d5f          DCB      "prm_restore",0
000004  72657374
000008  6f726500
00000c  45726173          DCB      "Erase all parameters and restore to default values@r 0 "
000010  6520616c
000014  6c207061
000018  72616d65
00001c  74657273
000020  20616e64
000024  20726573
000028  746f7265
00002c  20746f20
000030  64656661
000034  756c7420
000038  76616c75
00003c  65734072
000040  203020  
000043  69662073          DCB      "if success, negative if error",0
000047  75636365
00004b  73732c20
00004f  6e656761
000053  74697665
000057  20696620
00005b  6572726f
00005f  7200    
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  70726d5f          DCB      "prm_set",0
000068  73657400
00006c  53657420          DCB      "Set parameter value@p identifier name of parameter (str"
000070  70617261
000074  6d657465
000078  72207661
00007c  6c756540
000080  70206964
000084  656e7469
000088  66696572
00008c  206e616d
000090  65206f66
000094  20706172
000098  616d6574
00009c  65722028
0000a0  737472  
0000a3  696e6729          DCB      "ing)@p value value of parameter (encoded)@r 0 if succes"
0000a7  40702076
0000ab  616c7565
0000af  2076616c
0000b3  7565206f
0000b7  66207061
0000bb  72616d65
0000bf  74657220
0000c3  28656e63
0000c7  6f646564
0000cb  29407220
0000cf  30206966
0000d3  20737563
0000d7  636573  
0000da  732c206e          DCB      "s, negative if error",0
0000de  65676174
0000e2  69766520
0000e6  69662065
0000ea  72726f72
0000ee  00      
0000ef  00                DCB      0
0000f0  70726d5f          DCB      "prm_reload",0
0000f4  72656c6f
0000f8  616400  
0000fb  00                DCB      0
0000fc  43617573          DCB      "Causes all parameters to be reloaded@r 0 if success, ne"
000100  65732061
000104  6c6c2070
000108  6172616d
00010c  65746572
000110  7320746f
000114  20626520
000118  72656c6f
00011c  61646564
000120  40722030
000124  20696620
000128  73756363
00012c  6573732c
000130  206e65  
000133  67617469          DCB      "gative if error",0
000137  76652069
00013b  66206572
00013f  726f7200
000143  00                DCB      0
000144  70726d5f          DCB      "prm_setShadow",0
000148  73657453
00014c  6861646f
000150  7700    
000152  00                DCB      0
000153  00                DCB      0
000154  53657420          DCB      "Set parameter's shadow value@p identifier name of param"
000158  70617261
00015c  6d657465
000160  72277320
000164  73686164
000168  6f772076
00016c  616c7565
000170  40702069
000174  64656e74
000178  69666965
00017c  72206e61
000180  6d65206f
000184  66207061
000188  72616d  
00018b  65746572          DCB      "eter (string)@p value value of parameter (encoded)@r 0 "
00018f  20287374
000193  72696e67
000197  29407020
00019b  76616c75
00019f  65207661
0001a3  6c756520
0001a7  6f662070
0001ab  6172616d
0001af  65746572
0001b3  2028656e
0001b7  636f6465
0001bb  64294072
0001bf  203020  
0001c2  69662073          DCB      "if success, negative if error",0
0001c6  75636365
0001ca  73732c20
0001ce  6e656761
0001d2  74697665
0001d6  20696620
0001da  6572726f
0001de  7200    
0001e0  70726d5f          DCB      "prm_resetShadows",0
0001e4  72657365
0001e8  74536861
0001ec  646f7773
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
0001f4  52657365          DCB      "Reset the shadow values of all parameters@r 0 if succes"
0001f8  74207468
0001fc  65207368
000200  61646f77
000204  2076616c
000208  75657320
00020c  6f662061
000210  6c6c2070
000214  6172616d
000218  65746572
00021c  73407220
000220  30206966
000224  20737563
000228  636573  
00022b  732c206e          DCB      "s, negative if error",0
00022f  65676174
000233  69766520
000237  69662065
00023b  72726f72
00023f  00      
000240  70726d5f          DCB      "prm_get",0
000244  67657400
000248  47657420          DCB      "Get parameter value@p identifier name of parameter (str"
00024c  70617261
000250  6d657465
000254  72207661
000258  6c756540
00025c  70206964
000260  656e7469
000264  66696572
000268  206e616d
00026c  65206f66
000270  20706172
000274  616d6574
000278  65722028
00027c  737472  
00027f  696e6729          DCB      "ing)@r 0 if success, negative if error",0
000283  40722030
000287  20696620
00028b  73756363
00028f  6573732c
000293  206e6567
000297  61746976
00029b  65206966
00029f  20657272
0002a3  6f7200  
0002a6  00                DCB      0
0002a7  00                DCB      0
0002a8  70726d5f          DCB      "prm_getInfo",0
0002ac  67657449
0002b0  6e666f00
0002b4  47657420          DCB      "Get parameter information@p identifier name of paramete"
0002b8  70617261
0002bc  6d657465
0002c0  7220696e
0002c4  666f726d
0002c8  6174696f
0002cc  6e407020
0002d0  6964656e
0002d4  74696669
0002d8  6572206e
0002dc  616d6520
0002e0  6f662070
0002e4  6172616d
0002e8  657465  
0002eb  72202873          DCB      "r (string)@r 0 if success, negative if error",0
0002ef  7472696e
0002f3  67294072
0002f7  20302069
0002fb  66207375
0002ff  63636573
000303  732c206e
000307  65676174
00030b  69766520
00030f  69662065
000313  72726f72
000317  00      
000318  70726d5f          DCB      "prm_getAll",0
00031c  67657441
000320  6c6c00  
000323  00                DCB      0
000324  47657420          DCB      "Get all information@p contextual if true, return only p"
000328  616c6c20
00032c  696e666f
000330  726d6174
000334  696f6e40
000338  7020636f
00033c  6e746578
000340  7475616c
000344  20696620
000348  74727565
00034c  2c207265
000350  7475726e
000354  206f6e6c
000358  792070  
00035b  726f6772          DCB      "rogram-related parameters, if false, return all paramet"
00035f  616d2d72
000363  656c6174
000367  65642070
00036b  6172616d
00036f  65746572
000373  732c2069
000377  66206661
00037b  6c73652c
00037f  20726574
000383  75726e20
000387  616c6c20
00038b  70617261
00038f  6d6574  
000392  65727340          DCB      "ers@p index index of parameter@r 0 if success, negative"
000396  7020696e
00039a  64657820
00039e  696e6465
0003a2  78206f66
0003a6  20706172
0003aa  616d6574
0003ae  65724072
0003b2  20302069
0003b6  66207375
0003ba  63636573
0003be  732c206e
0003c2  65676174
0003c6  697665  
0003c9  20696620          DCB      " if error",0
0003cd  6572726f
0003d1  7200    
0003d3  00                DCB      0
0003d4  416c6c20          DCB      "All parameters have been erased and restored to their d"
0003d8  70617261
0003dc  6d657465
0003e0  72732068
0003e4  61766520
0003e8  6265656e
0003ec  20657261
0003f0  73656420
0003f4  616e6420
0003f8  72657374
0003fc  6f726564
000400  20746f20
000404  74686569
000408  722064  
00040b  65666175          DCB      "efaults!\n",0
00040f  6c747321
000413  0a00    
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
000418  40632053          DCB      "@c Signature_Labels Sets the label for objects that mat"
00041c  69676e61
000420  74757265
000424  5f4c6162
000428  656c7320
00042c  53657473
000430  20746865
000434  206c6162
000438  656c2066
00043c  6f72206f
000440  626a6563
000444  74732074
000448  68617420
00044c  6d6174  
00044f  63682073          DCB      "ch signature%s.",0
000453  69676e61
000457  74757265
00045b  25732e00

                          AREA ||.data||, DATA, ALIGN=0

                  g_dirty
000000  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___9_param_cpp_55d340e8

                          AREA ||t._ZN12SimpleVectorI6ShadowE9push_backERKS0_||, COMGROUP=_ZN12SimpleVectorI6ShadowE9push_backERKS0_, CODE, READONLY, ALIGN=2

                  _ZN12SimpleVectorI6ShadowE9push_backERKS0_ PROC ; SimpleVector<Shadow>::push_back(const Shadow&)
;;;73     
;;;74         int push_back(const Object& x)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;75         {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;76             if(m_size == m_capacity)
000008  e9d40500          LDRD     r0,r5,[r4,#0]
00000c  42a8              CMP      r0,r5
00000e  d12b              BNE      |L177.104|
;;;77                 if (resize(m_capacity + SPARE_CAPACITY)<0)
000010  3510              ADDS     r5,r5,#0x10
000012  2700              MOVS     r7,#0
000014  f04f38ff          MOV      r8,#0xffffffff
000018  42a8              CMP      r0,r5
00001a  dc20              BGT      |L177.94|
00001c  68a6              LDR      r6,[r4,#8]
00001e  0128              LSLS     r0,r5,#4
000020  4917              LDR      r1,|L177.128|
000022  f7fffffe          BL       _ZnajRKSt9nothrow_t ; operator new[] (unsigned, const std::nothrow_t&)
000026  60a0              STR      r0,[r4,#8]
000028  b108              CBZ      r0,|L177.46|
00002a  2000              MOVS     r0,#0
00002c  e010              B        |L177.80|
                  |L177.46|
00002e  60a6              STR      r6,[r4,#8]
000030  4647              MOV      r7,r8
000032  e014              B        |L177.94|
                  |L177.52|
000034  68a1              LDR      r1,[r4,#8]
000036  eb011200          ADD      r2,r1,r0,LSL #4
00003a  eb061100          ADD      r1,r6,r0,LSL #4
00003e  e9d1ca01          LDRD     r12,r10,[r1,#4]
000042  680b              LDR      r3,[r1,#0]
000044  68c9              LDR      r1,[r1,#0xc]
000046  e9c2ca01          STRD     r12,r10,[r2,#4]
00004a  6013              STR      r3,[r2,#0]
00004c  60d1              STR      r1,[r2,#0xc]
00004e  1c40              ADDS     r0,r0,#1
                  |L177.80|
000050  6821              LDR      r1,[r4,#0]
000052  4281              CMP      r1,r0
000054  dcee              BGT      |L177.52|
000056  6065              STR      r5,[r4,#4]
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
                  |L177.94|
00005e  2f00              CMP      r7,#0
000060  da02              BGE      |L177.104|
;;;78                     return -1;
000062  4640              MOV      r0,r8
                  |L177.100|
;;;79             m_objects[m_size++] = x;
;;;80             return 0;
;;;81         }
000064  e8bd87f0          POP      {r4-r10,pc}
                  |L177.104|
000068  6820              LDR      r0,[r4,#0]            ;79
00006a  1c41              ADDS     r1,r0,#1              ;79
00006c  6021              STR      r1,[r4,#0]            ;79
00006e  68a1              LDR      r1,[r4,#8]            ;79
000070  eb011000          ADD      r0,r1,r0,LSL #4       ;79
000074  e8b9001e          LDM      r9!,{r1-r4}           ;79
000078  c01e              STM      r0!,{r1-r4}           ;79
00007a  2000              MOVS     r0,#0                 ;80
00007c  e7f2              B        |L177.100|
;;;82     
                          ENDP

00007e  0000              DCW      0x0000
                  |L177.128|
                          DCD      _ZSt7nothrow ; std::nothrow

                          AREA ||area_number.178||, COMGROUP=_ZN12SimpleVectorI6ShadowE9push_backERKS0_, LINKORDER=||t._ZN12SimpleVectorI6ShadowE9push_backERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.178||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI6ShadowE9push_backERKS0_||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI6ShadowED1Ev||, COMGROUP=_ZN12SimpleVectorI6ShadowED1Ev, CODE, READONLY, ALIGN=1

                  _ZN12SimpleVectorI6ShadowED2Ev                  ; Alternate entry point ; SimpleVector<Shadow>::~SimpleVector__sub_object()
                  _ZN12SimpleVectorI6ShadowED1Ev PROC ; SimpleVector<Shadow>::~SimpleVector()
;;;30     
;;;31         ~SimpleVector()
;;;32         { delete [] m_objects; }
;;;33     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  68a0              LDR      r0,[r4,#8]
000006  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.185||, COMGROUP=_ZN12SimpleVectorI6ShadowED1Ev, LINKORDER=||t._ZN12SimpleVectorI6ShadowED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.185||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI6ShadowED1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\param.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___9_param_cpp_55d340e8___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_param_cpp_55d340e8___Z7__REVSHi|
#line 144
|__asm___9_param_cpp_55d340e8___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
