; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\lpc43xx_cgu.o --asm_dir=.\ --list_dir=.\ --depend=.\lpc43xx_cgu.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\lpc43xx_cgu.crf ..\common\src\lpc43xx_cgu.c]
                          THUMB

                          AREA ||i.CGU_ConfigPWR||, CODE, READONLY, ALIGN=2

                  CGU_ConfigPWR PROC
;;;265     **********************************************************************/
;;;266    uint32_t CGU_ConfigPWR (CGU_PERIPHERAL_T PPType,  FunctionalState en){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460e              MOV      r6,r1
;;;267    	if(PPType >= CGU_PERIPHERAL_WWDT && PPType <= CGU_PERIPHERAL_ADC0)
;;;268    		return CGU_ERROR_INVALID_PARAM;
;;;269    	if(en == DISABLE){/* Going to disable clock */
;;;270    		/*Get Reg branch status */
;;;271    		if(CGU_PERIPHERAL_Info[PPType].RegBranchOffset!= 0 &&
000006  f8df8104          LDR      r8,|L1.268|
;;;272    				CGU_REG_BRANCH_STATUS(PPType) & 1){
00000a  4f3f              LDR      r7,|L1.264|
00000c  eb000580          ADD      r5,r0,r0,LSL #2       ;271
000010  eb080445          ADD      r4,r8,r5,LSL #1       ;271
000014  2e00              CMP      r6,#0                 ;269
000016  d014              BEQ      |L1.66|
;;;273    			CGU_REG_BRANCH_CTRL(PPType) &= ~1; /* Disable branch clock */
;;;274    			while(CGU_REG_BRANCH_STATUS(PPType) & 1);
;;;275    		}
;;;276    		/* GetBase Status*/
;;;277    		if((CGU_PERIPHERAL_Info[PPType].RegBaseEntity!=CGU_ENTITY_NONE) &&
;;;278    			CGU_GetBaseStatus((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity) == 0){
;;;279    			/* Disable Base */
;;;280    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity,0);
;;;281    		}
;;;282    
;;;283    		/* Same for Peripheral */
;;;284    		if((CGU_PERIPHERAL_Info[PPType].PerBranchOffset!= 0) && (CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
;;;285    			CGU_PER_BRANCH_CTRL(PPType) &= ~1; /* Disable branch clock */
;;;286    			while(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK);
;;;287    		}
;;;288    		/* GetBase Status*/
;;;289    		if((CGU_PERIPHERAL_Info[PPType].PerBaseEntity!=CGU_ENTITY_NONE) &&
;;;290    			CGU_GetBaseStatus((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity) == 0){
;;;291    			/* Disable Base */
;;;292    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity,0);
;;;293    		}
;;;294    	}else{
;;;295    		/* enable */
;;;296    		/* GetBase Status*/
;;;297    		if((CGU_PERIPHERAL_Info[PPType].RegBaseEntity!=CGU_ENTITY_NONE) && CGU_REG_BASE_CTRL(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK){
000018  f8180015          LDRB     r0,[r8,r5,LSL #1]
00001c  f5a87556          SUB      r5,r8,#0x358
000020  282d              CMP      r0,#0x2d
000022  d007              BEQ      |L1.52|
000024  f9351010          LDRSH    r1,[r5,r0,LSL #1]
000028  59c9              LDR      r1,[r1,r7]
00002a  07c9              LSLS     r1,r1,#31
00002c  d002              BEQ      |L1.52|
;;;298    			/* Enable Base */
;;;299    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].RegBaseEntity, 1);
00002e  2101              MOVS     r1,#1
000030  f7fffffe          BL       CGU_EnableEntity
                  |L1.52|
;;;300    		}
;;;301    		/*Get Reg branch status */
;;;302    		if((CGU_PERIPHERAL_Info[PPType].RegBranchOffset!= 0) && !(CGU_REG_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
000034  8860              LDRH     r0,[r4,#2]
000036  b3c8              CBZ      r0,|L1.172|
000038  4438              ADD      r0,r0,r7
00003a  6841              LDR      r1,[r0,#4]
00003c  07c9              LSLS     r1,r1,#31
00003e  d036              BEQ      |L1.174|
000040  e03e              B        |L1.192|
                  |L1.66|
000042  8860              LDRH     r0,[r4,#2]            ;271
000044  b160              CBZ      r0,|L1.96|
000046  4438              ADD      r0,r0,r7              ;272
000048  6841              LDR      r1,[r0,#4]            ;272
00004a  07c9              LSLS     r1,r1,#31             ;272
00004c  d008              BEQ      |L1.96|
00004e  6801              LDR      r1,[r0,#0]            ;273
000050  f0210101          BIC      r1,r1,#1              ;273
000054  6001              STR      r1,[r0,#0]            ;273
000056  8860              LDRH     r0,[r4,#2]            ;271
000058  4438              ADD      r0,r0,r7              ;272
                  |L1.90|
00005a  6842              LDR      r2,[r0,#4]            ;274
00005c  07d1              LSLS     r1,r2,#31             ;274
00005e  d1fc              BNE      |L1.90|
                  |L1.96|
000060  f8180015          LDRB     r0,[r8,r5,LSL #1]     ;277
000064  282d              CMP      r0,#0x2d              ;277
000066  d007              BEQ      |L1.120|
000068  f7fffffe          BL       CGU_GetBaseStatus
00006c  b920              CBNZ     r0,|L1.120|
00006e  f8180015          LDRB     r0,[r8,r5,LSL #1]     ;280
000072  2100              MOVS     r1,#0                 ;280
000074  f7fffffe          BL       CGU_EnableEntity
                  |L1.120|
000078  88e0              LDRH     r0,[r4,#6]            ;284
00007a  b160              CBZ      r0,|L1.150|
00007c  4438              ADD      r0,r0,r7              ;284
00007e  6841              LDR      r1,[r0,#4]            ;284
000080  07c9              LSLS     r1,r1,#31             ;284
000082  d008              BEQ      |L1.150|
000084  6801              LDR      r1,[r0,#0]            ;285
000086  f0210101          BIC      r1,r1,#1              ;285
00008a  6001              STR      r1,[r0,#0]            ;285
00008c  88e0              LDRH     r0,[r4,#6]            ;284
00008e  4438              ADD      r0,r0,r7              ;284
                  |L1.144|
000090  6841              LDR      r1,[r0,#4]            ;286
000092  07c9              LSLS     r1,r1,#31             ;286
000094  d1fc              BNE      |L1.144|
                  |L1.150|
000096  7920              LDRB     r0,[r4,#4]            ;289
000098  282d              CMP      r0,#0x2d              ;289
00009a  d02b              BEQ      |L1.244|
00009c  f7fffffe          BL       CGU_GetBaseStatus
0000a0  bb40              CBNZ     r0,|L1.244|
0000a2  7920              LDRB     r0,[r4,#4]            ;292
0000a4  2100              MOVS     r1,#0                 ;292
0000a6  f7fffffe          BL       CGU_EnableEntity
0000aa  e023              B        |L1.244|
                  |L1.172|
0000ac  e008              B        |L1.192|
                  |L1.174|
;;;303    			CGU_REG_BRANCH_CTRL(PPType) |= 1; /* Enable branch clock */
0000ae  6801              LDR      r1,[r0,#0]
0000b0  f0410101          ORR      r1,r1,#1
0000b4  6001              STR      r1,[r0,#0]
0000b6  8860              LDRH     r0,[r4,#2]            ;271
0000b8  4438              ADD      r0,r0,r7              ;272
                  |L1.186|
;;;304    			while(!(CGU_REG_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK));
0000ba  6841              LDR      r1,[r0,#4]
0000bc  07c9              LSLS     r1,r1,#31
0000be  d0fc              BEQ      |L1.186|
                  |L1.192|
;;;305    		}
;;;306    
;;;307    		/* Same for Peripheral */
;;;308    		/* GetBase Status*/
;;;309    		if((CGU_PERIPHERAL_Info[PPType].PerBaseEntity != CGU_ENTITY_NONE) &&
0000c0  7920              LDRB     r0,[r4,#4]
0000c2  282d              CMP      r0,#0x2d
0000c4  d007              BEQ      |L1.214|
;;;310    				(CGU_PER_BASE_CTRL(PPType) & 1)){
0000c6  f9351010          LDRSH    r1,[r5,r0,LSL #1]
0000ca  59c9              LDR      r1,[r1,r7]
0000cc  07c9              LSLS     r1,r1,#31
0000ce  d002              BEQ      |L1.214|
;;;311    			/* Enable Base */
;;;312    			CGU_EnableEntity((CGU_ENTITY_T)CGU_PERIPHERAL_Info[PPType].PerBaseEntity, 1);
0000d0  2101              MOVS     r1,#1
0000d2  f7fffffe          BL       CGU_EnableEntity
                  |L1.214|
;;;313    		}
;;;314    		/*Get Reg branch status */
;;;315    		if((CGU_PERIPHERAL_Info[PPType].PerBranchOffset!= 0) && !(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK)){
0000d6  88e0              LDRH     r0,[r4,#6]
0000d8  b160              CBZ      r0,|L1.244|
0000da  4438              ADD      r0,r0,r7
0000dc  6841              LDR      r1,[r0,#4]
0000de  07c9              LSLS     r1,r1,#31
0000e0  d108              BNE      |L1.244|
;;;316    			CGU_PER_BRANCH_CTRL(PPType) |= 1; /* Enable branch clock */
0000e2  6801              LDR      r1,[r0,#0]
0000e4  f0410101          ORR      r1,r1,#1
0000e8  6001              STR      r1,[r0,#0]
0000ea  88e0              LDRH     r0,[r4,#6]            ;284
0000ec  4438              ADD      r0,r0,r7              ;284
                  |L1.238|
;;;317    			while(!(CGU_PER_BRANCH_STATUS(PPType) & CGU_BRANCH_STATUS_ENABLE_MASK));
0000ee  6841              LDR      r1,[r0,#4]
0000f0  07c9              LSLS     r1,r1,#31
0000f2  d0fc              BEQ      |L1.238|
                  |L1.244|
;;;318    		}
;;;319    
;;;320    	}
;;;321    
;;;322    	if(CGU_PERIPHERAL_Info[PPType].next){
0000f4  7a20              LDRB     r0,[r4,#8]
0000f6  b118              CBZ      r0,|L1.256|
;;;323    		return CGU_ConfigPWR((CGU_PERIPHERAL_T)CGU_PERIPHERAL_Info[PPType].next, en);
0000f8  4631              MOV      r1,r6
0000fa  e8bd41f0          POP      {r4-r8,lr}
0000fe  e7fe              B        CGU_ConfigPWR
                  |L1.256|
;;;324    	}
;;;325    	return CGU_ERROR_SUCCESS;
000100  2000              MOVS     r0,#0
;;;326    }
000102  e8bd81f0          POP      {r4-r8,pc}
;;;327    
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
                          DCD      0x40050000
                  |L1.268|
                          DCD      ||.constdata||+0x358

                          AREA ||i.CGU_EnableEntity||, CODE, READONLY, ALIGN=2

                  CGU_EnableEntity PROC
;;;523     **********************************************************************/
;;;524    uint32_t CGU_EnableEntity(CGU_ENTITY_T ClockEntity, uint32_t en){
000000  b510              PUSH     {r4,lr}
;;;525    	int32_t RegOffset;
;;;526    	int32_t i;
;;;527    	if(ClockEntity == CGU_CLKSRC_32KHZ_OSC){
;;;528    		if(en){
;;;529    			LPC_CREG->CREG0 &= ~((1<<3)|(1<<2));
;;;530    			LPC_CREG->CREG0 |= (1<<1)|(1<<0);
;;;531    		}else{
;;;532    			LPC_CREG->CREG0 &= ~((1<<1)|(1<<0));
;;;533    			LPC_CREG->CREG0 |= (1<<3);
;;;534    		}
;;;535    		for(i = 0;i<1000000;i++);
000002  4a34              LDR      r2,|L2.212|
000004  2800              CMP      r0,#0                 ;527
000006  d018              BEQ      |L2.58|
;;;536    
;;;537    	}else if(ClockEntity == CGU_CLKSRC_ENET_RX_CLK){
000008  2802              CMP      r0,#2
00000a  d02e              BEQ      |L2.106|
;;;538    		scu_pinmux(0xC ,0 , MD_PLN, FUNC3);
;;;539    
;;;540    	}else if(ClockEntity == CGU_CLKSRC_ENET_TX_CLK){
00000c  2803              CMP      r0,#3
00000e  d033              BEQ      |L2.120|
;;;541    		scu_pinmux(0x1 ,19 , MD_PLN, FUNC0);
;;;542    
;;;543    	}else if(ClockEntity == CGU_CLKSRC_GP_CLKIN){
000010  2804              CMP      r0,#4
000012  d05b              BEQ      |L2.204|
;;;544    
;;;545    	}else if(ClockEntity == CGU_CLKSRC_TCK){
000014  2805              CMP      r0,#5
000016  d059              BEQ      |L2.204|
;;;546    
;;;547    	}else if(ClockEntity == CGU_CLKSRC_XTAL_OSC){
;;;548    		if(!en)
;;;549    			LPC_CGU->XTAL_OSC_CTRL |= CGU_CTRL_EN_MASK;
000018  4b2f              LDR      r3,|L2.216|
00001a  2806              CMP      r0,#6                 ;547
00001c  d033              BEQ      |L2.134|
;;;550    		else
;;;551    			LPC_CGU->XTAL_OSC_CTRL &= ~CGU_CTRL_EN_MASK;
;;;552    		/*Delay for stable clock*/
;;;553    		for(i = 0;i<1000000;i++);
;;;554    
;;;555    	}else{
;;;556    		RegOffset = CGU_Entity_ControlReg_Offset[ClockEntity];
00001e  4a2f              LDR      r2,|L2.220|
000020  f9322010          LDRSH    r2,[r2,r0,LSL #1]
;;;557    		if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
000024  1c54              ADDS     r4,r2,#1
000026  d03e              BEQ      |L2.166|
;;;558    		if(!en){
000028  b3b9              CBZ      r1,|L2.154|
;;;559    			CGU_ADDRESS32(CGU_CGU_ADDR,RegOffset) |= CGU_CTRL_EN_MASK;
;;;560    		}else{
;;;561    			CGU_ADDRESS32(CGU_CGU_ADDR,RegOffset) &= ~CGU_CTRL_EN_MASK;
00002a  18d1              ADDS     r1,r2,r3
00002c  680a              LDR      r2,[r1,#0]
00002e  f0220201          BIC      r2,r2,#1
000032  600a              STR      r2,[r1,#0]
;;;562    			/*if PLL is selected check if it is locked */
;;;563    			if(ClockEntity == CGU_CLKSRC_PLL0){
000034  2807              CMP      r0,#7
000036  d03e              BEQ      |L2.182|
000038  e040              B        |L2.188|
                  |L2.58|
00003a  4829              LDR      r0,|L2.224|
00003c  b141              CBZ      r1,|L2.80|
00003e  6841              LDR      r1,[r0,#4]            ;529
000040  f021010c          BIC      r1,r1,#0xc            ;529
000044  6041              STR      r1,[r0,#4]            ;529
000046  6841              LDR      r1,[r0,#4]            ;530
000048  f0410103          ORR      r1,r1,#3              ;530
00004c  6041              STR      r1,[r0,#4]            ;530
00004e  e007              B        |L2.96|
                  |L2.80|
000050  6841              LDR      r1,[r0,#4]            ;532
000052  f0210103          BIC      r1,r1,#3              ;532
000056  6041              STR      r1,[r0,#4]            ;532
000058  6841              LDR      r1,[r0,#4]            ;533
00005a  f0410108          ORR      r1,r1,#8              ;533
00005e  6041              STR      r1,[r0,#4]            ;533
                  |L2.96|
000060  2000              MOVS     r0,#0                 ;535
                  |L2.98|
000062  1c40              ADDS     r0,r0,#1              ;535
000064  4290              CMP      r0,r2                 ;535
000066  dbfc              BLT      |L2.98|
000068  e030              B        |L2.204|
                  |L2.106|
00006a  2303              MOVS     r3,#3                 ;538
00006c  2210              MOVS     r2,#0x10              ;538
00006e  2100              MOVS     r1,#0                 ;538
000070  200c              MOVS     r0,#0xc               ;538
000072  f7fffffe          BL       scu_pinmux
000076  e029              B        |L2.204|
                  |L2.120|
000078  2300              MOVS     r3,#0                 ;541
00007a  2210              MOVS     r2,#0x10              ;541
00007c  2113              MOVS     r1,#0x13              ;541
00007e  2001              MOVS     r0,#1                 ;541
000080  f7fffffe          BL       scu_pinmux
000084  e022              B        |L2.204|
                  |L2.134|
000086  b149              CBZ      r1,|L2.156|
000088  6998              LDR      r0,[r3,#0x18]         ;551
00008a  f0200001          BIC      r0,r0,#1              ;551
00008e  6198              STR      r0,[r3,#0x18]         ;551
                  |L2.144|
000090  2000              MOVS     r0,#0                 ;553
                  |L2.146|
000092  1c40              ADDS     r0,r0,#1              ;553
000094  4290              CMP      r0,r2                 ;553
000096  dbfc              BLT      |L2.146|
000098  e018              B        |L2.204|
                  |L2.154|
00009a  e006              B        |L2.170|
                  |L2.156|
00009c  6998              LDR      r0,[r3,#0x18]         ;549
00009e  f0400001          ORR      r0,r0,#1              ;549
0000a2  6198              STR      r0,[r3,#0x18]         ;549
0000a4  e7f4              B        |L2.144|
                  |L2.166|
0000a6  2002              MOVS     r0,#2                 ;557
;;;564    				while((LPC_CGU->PLL0USB_STAT&1) == 0x0);
;;;565    			}
;;;566    			if(ClockEntity == CGU_CLKSRC_PLL1){
;;;567    				while((LPC_CGU->PLL1_STAT&1) == 0x0);
;;;568    				/*post check lock status */
;;;569    				if(!(LPC_CGU->PLL1_STAT&1))
;;;570    					while(1);
;;;571    			}
;;;572    		}
;;;573    	}
;;;574    	return CGU_ERROR_SUCCESS;
;;;575    }
0000a8  bd10              POP      {r4,pc}
                  |L2.170|
0000aa  18d0              ADDS     r0,r2,r3              ;559
0000ac  6801              LDR      r1,[r0,#0]            ;559
0000ae  f0410101          ORR      r1,r1,#1              ;559
0000b2  6001              STR      r1,[r0,#0]            ;559
0000b4  e00a              B        |L2.204|
                  |L2.182|
0000b6  69d9              LDR      r1,[r3,#0x1c]         ;564
0000b8  07c9              LSLS     r1,r1,#31             ;564
0000ba  d0fc              BEQ      |L2.182|
                  |L2.188|
0000bc  2809              CMP      r0,#9                 ;566
0000be  d105              BNE      |L2.204|
                  |L2.192|
0000c0  6c18              LDR      r0,[r3,#0x40]         ;567
0000c2  07c0              LSLS     r0,r0,#31             ;567
0000c4  d0fc              BEQ      |L2.192|
0000c6  6c18              LDR      r0,[r3,#0x40]         ;569
0000c8  07c0              LSLS     r0,r0,#31             ;569
0000ca  d001              BEQ      |L2.208|
                  |L2.204|
0000cc  2000              MOVS     r0,#0                 ;574
0000ce  bd10              POP      {r4,pc}
                  |L2.208|
0000d0  e7fe              B        |L2.208|
;;;576    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L2.212|
                          DCD      0x000f4240
                  |L2.216|
                          DCD      0x40050000
                  |L2.220|
                          DCD      ||.constdata||
                  |L2.224|
                          DCD      0x40043000

                          AREA ||i.CGU_EntityConnect||, CODE, READONLY, ALIGN=2

                  CGU_EntityConnect PROC
;;;626    /* Connect one entity into clock source */
;;;627    uint32_t CGU_EntityConnect(CGU_ENTITY_T ClockSource, CGU_ENTITY_T ClockEntity){
000000  b570              PUSH     {r4-r6,lr}
;;;628    	int32_t RegOffset;
;;;629    	uint32_t tempReg;
;;;630    
;;;631    	if(ClockSource > CGU_CLKSRC_IDIVE)
000002  2810              CMP      r0,#0x10
000004  d901              BLS      |L3.10|
;;;632    		return CGU_ERROR_INVALID_CLOCK_SOURCE;
000006  2003              MOVS     r0,#3
;;;633    
;;;634    	if(ClockEntity >= CGU_CLKSRC_PLL0 && ClockEntity <= CGU_BASE_CLKOUT){
;;;635    		if(CGU_ConnectAlloc_Tbl[ClockSource][ClockEntity]){
;;;636    			RegOffset = CGU_Entity_ControlReg_Offset[ClockSource];
;;;637    			if(RegOffset != -1){
;;;638    				if(ClockEntity<=CGU_CLKSRC_IDIVE &&
;;;639    					ClockEntity>=CGU_CLKSRC_PLL0)
;;;640    				{
;;;641    					//RegOffset = (CGU_ADDRESS32(LPC_CGU,RegOffset)>>24)&0xF;
;;;642    					if(((CGU_ADDRESS32(LPC_CGU,RegOffset)>>24)& 0xF) == ClockEntity)
;;;643    						return CGU_ERROR_CONNECT_TOGETHER;
;;;644    				}
;;;645    			}
;;;646    			RegOffset = CGU_Entity_ControlReg_Offset[ClockEntity];
;;;647    			if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
;;;648    			tempReg = CGU_ADDRESS32(LPC_CGU,RegOffset);
;;;649    			tempReg &= ~CGU_CTRL_SRC_MASK;
;;;650    			tempReg |= ClockSource<<24 | CGU_CTRL_AUTOBLOCK_MASK;
;;;651    			CGU_ADDRESS32(LPC_CGU,RegOffset) = tempReg;
;;;652    			return CGU_ERROR_SUCCESS;
;;;653    		}else
;;;654    			return CGU_ERROR_INVALID_CLOCK_SOURCE;
;;;655    	}else
;;;656    		return CGU_ERROR_INVALID_ENTITY;
;;;657    }
000008  bd70              POP      {r4-r6,pc}
                  |L3.10|
00000a  1fca              SUBS     r2,r1,#7              ;634
00000c  4613              MOV      r3,r2                 ;634
00000e  2a1e              CMP      r2,#0x1e              ;634
000010  d82a              BHI      |L3.104|
000012  ebc01200          RSB      r2,r0,r0,LSL #4       ;635
000016  4c15              LDR      r4,|L3.108|
000018  eb020242          ADD      r2,r2,r2,LSL #1       ;635
00001c  4422              ADD      r2,r2,r4              ;635
00001e  5c52              LDRB     r2,[r2,r1]            ;635
000020  b302              CBZ      r2,|L3.100|
000022  f1a4055a          SUB      r5,r4,#0x5a           ;636
000026  f9352010          LDRSH    r2,[r5,r0,LSL #1]     ;636
00002a  4c11              LDR      r4,|L3.112|
00002c  1c56              ADDS     r6,r2,#1              ;637
00002e  d008              BEQ      |L3.66|
000030  2b09              CMP      r3,#9                 ;638
000032  d806              BHI      |L3.66|
000034  5912              LDR      r2,[r2,r4]            ;642
000036  f3c26203          UBFX     r2,r2,#24,#4          ;642
00003a  428a              CMP      r2,r1                 ;642
00003c  d101              BNE      |L3.66|
00003e  2001              MOVS     r0,#1                 ;643
000040  bd70              POP      {r4-r6,pc}
                  |L3.66|
000042  f9351011          LDRSH    r1,[r5,r1,LSL #1]     ;646
000046  1c4a              ADDS     r2,r1,#1              ;647
000048  d00a              BEQ      |L3.96|
00004a  4421              ADD      r1,r1,r4              ;648
00004c  680a              LDR      r2,[r1,#0]            ;648
00004e  f0226270          BIC      r2,r2,#0xf000000      ;649
000052  ea426000          ORR      r0,r2,r0,LSL #24      ;650
000056  f4406000          ORR      r0,r0,#0x800          ;650
00005a  6008              STR      r0,[r1,#0]            ;651
00005c  2000              MOVS     r0,#0                 ;652
00005e  bd70              POP      {r4-r6,pc}
                  |L3.96|
000060  2002              MOVS     r0,#2                 ;647
000062  bd70              POP      {r4-r6,pc}
                  |L3.100|
000064  2003              MOVS     r0,#3                 ;654
000066  bd70              POP      {r4-r6,pc}
                  |L3.104|
000068  2002              MOVS     r0,#2                 ;656
00006a  bd70              POP      {r4-r6,pc}
;;;658    
                          ENDP

                  |L3.108|
                          DCD      ||.constdata||+0x5a
                  |L3.112|
                          DCD      0x40050000

                          AREA ||i.CGU_FrequencyMonitor||, CODE, READONLY, ALIGN=2

                  CGU_FrequencyMonitor PROC
;;;832     **********************************************************************/
;;;833    int CGU_FrequencyMonitor(CGU_ENTITY_T Clock, uint32_t *m, uint32_t *d){
000000  b5f0              PUSH     {r4-r7,lr}
;;;834    	uint32_t n,c,temp;
;;;835    	int i;
;;;836    
;;;837    	/* Maximum allow RCOUNT number */
;;;838    	c= 511;
000002  f24014ff          MOV      r4,#0x1ff
;;;839    	/* Check Source Clock Freq is larger or smaller */
;;;840    	LPC_CGU->FREQ_MON = (Clock<<24) | 1<<23 | c;
000006  4e1b              LDR      r6,|L4.116|
000008  ea446300          ORR      r3,r4,r0,LSL #24
00000c  f4430300          ORR      r3,r3,#0x800000
000010  6173              STR      r3,[r6,#0x14]
                  |L4.18|
;;;841    	while(LPC_CGU->FREQ_MON & (1 <<23));
000012  6973              LDR      r3,[r6,#0x14]
000014  021b              LSLS     r3,r3,#8
000016  d4fc              BMI      |L4.18|
;;;842    	for(i=0;i<10000;i++);
000018  2300              MOVS     r3,#0
00001a  f2427710          MOV      r7,#0x2710
                  |L4.30|
00001e  1c5b              ADDS     r3,r3,#1
000020  42bb              CMP      r3,r7
000022  dbfc              BLT      |L4.30|
;;;843    	temp = (LPC_CGU->FREQ_MON >>9) & 0x3FFF;
000024  6973              LDR      r3,[r6,#0x14]
000026  f3c3254d          UBFX     r5,r3,#9,#14
;;;844    
;;;845    	if(temp == 0) /* too low F < 12000000/511*/
00002a  b14d              CBZ      r5,|L4.64|
;;;846    		return -1;
;;;847    	if(temp > 511){ /* larger */
00002c  f5b57f00          CMP      r5,#0x200
000030  d309              BCC      |L4.70|
;;;848    
;;;849    		c = 511 - (LPC_CGU->FREQ_MON&0x1FF);
000032  6970              LDR      r0,[r6,#0x14]
000034  f3c00008          UBFX     r0,r0,#0,#9
000038  f2a010ff          SUB      r0,r0,#0x1ff
00003c  4244              RSBS     r4,r0,#0
00003e  e015              B        |L4.108|
                  |L4.64|
000040  f04f30ff          MOV      r0,#0xffffffff        ;846
;;;850    	}else{
;;;851    		do{
;;;852    			c--;
;;;853    			LPC_CGU->FREQ_MON = (Clock<<24) | 1<<23 | c;
;;;854    			while(LPC_CGU->FREQ_MON & (1 <<23));
;;;855    			for(i=0;i<10000;i++);
;;;856    			n = (LPC_CGU->FREQ_MON >>9) & 0x3FFF;
;;;857    		}while(n==temp);
;;;858    		c++;
;;;859    	}
;;;860    	*m = temp;
;;;861    	*d = c;
;;;862    	return 0;
;;;863    }
000044  bdf0              POP      {r4-r7,pc}
                  |L4.70|
000046  1e64              SUBS     r4,r4,#1              ;852
000048  ea446300          ORR      r3,r4,r0,LSL #24      ;853
00004c  f4430300          ORR      r3,r3,#0x800000       ;853
000050  6173              STR      r3,[r6,#0x14]         ;853
                  |L4.82|
000052  6973              LDR      r3,[r6,#0x14]         ;854
000054  021b              LSLS     r3,r3,#8              ;854
000056  d4fc              BMI      |L4.82|
000058  2300              MOVS     r3,#0                 ;855
                  |L4.90|
00005a  1c5b              ADDS     r3,r3,#1              ;855
00005c  42bb              CMP      r3,r7                 ;855
00005e  dbfc              BLT      |L4.90|
000060  6973              LDR      r3,[r6,#0x14]         ;856
000062  f3c3234d          UBFX     r3,r3,#9,#14          ;856
000066  42ab              CMP      r3,r5                 ;857
000068  d0ed              BEQ      |L4.70|
00006a  1c64              ADDS     r4,r4,#1              ;858
                  |L4.108|
00006c  600d              STR      r5,[r1,#0]            ;860
00006e  6014              STR      r4,[r2,#0]            ;861
000070  2000              MOVS     r0,#0                 ;862
000072  bdf0              POP      {r4-r7,pc}
;;;864    
                          ENDP

                  |L4.116|
                          DCD      0x40050000

                          AREA ||i.CGU_GetBaseStatus||, CODE, READONLY, ALIGN=2

                  CGU_GetBaseStatus PROC
;;;737     **********************************************************************/
;;;738    uint32_t	CGU_GetBaseStatus(CGU_ENTITY_T Base){
000000  3811              SUBS     r0,r0,#0x11
;;;739    	switch(Base){
;;;740    	/*CCU1*/
;;;741    	case CGU_BASE_APB3:
;;;742    		return LPC_CCU1->BASE_STAT & 1;
000002  4a23              LDR      r2,|L5.144|
;;;743    
;;;744    	case CGU_BASE_APB1:
;;;745    		return (LPC_CCU1->BASE_STAT>>1) & 1;
;;;746    
;;;747    	case CGU_BASE_SPIFI:
;;;748    		return (LPC_CCU1->BASE_STAT>>2) & 1;
;;;749    
;;;750    	case CGU_BASE_M3:
;;;751    		return (LPC_CCU1->BASE_STAT>>3) & 1;
;;;752    
;;;753    	case CGU_BASE_USB0:
;;;754    		return (LPC_CCU1->BASE_STAT>>7) & 1;
;;;755    
;;;756    	case CGU_BASE_USB1:
;;;757    		return (LPC_CCU1->BASE_STAT>>8) & 1;
;;;758    
;;;759    	/*CCU2*/
;;;760    	case CGU_BASE_UART3:
;;;761    		return (LPC_CCU2->BASE_STAT>>1) & 1;
000004  4923              LDR      r1,|L5.148|
000006  2814              CMP      r0,#0x14              ;739
000008  d23f              BCS      |L5.138|
00000a  e8dff000          TBB      [pc,r0]               ;739
00000e  3e1a              DCB      0x3e,0x1a
000010  3e1e1612          DCB      0x3e,0x1e,0x16,0x12
000014  3e3e3e0e          DCB      0x3e,0x3e,0x3e,0x0e
000018  0a3e3e3a          DCB      0x0a,0x3e,0x3e,0x3a
00001c  36322e2a          DCB      0x36,0x32,0x2e,0x2a
000020  2622              DCB      0x26,0x22
000022  6850              LDR      r0,[r2,#4]            ;742
000024  f0000001          AND      r0,r0,#1              ;742
;;;762    
;;;763    	case CGU_BASE_UART2:
;;;764    		return (LPC_CCU2->BASE_STAT>>2) & 1;
;;;765    
;;;766    	case CGU_BASE_UART1:
;;;767    		return (LPC_CCU2->BASE_STAT>>3) & 1;
;;;768    
;;;769    	case CGU_BASE_UART0:
;;;770    		return (LPC_CCU2->BASE_STAT>>4) & 1;
;;;771    
;;;772    	case CGU_BASE_SSP1:
;;;773    		return (LPC_CCU2->BASE_STAT>>5) & 1;
;;;774    
;;;775    	case CGU_BASE_SSP0:
;;;776    		return (LPC_CCU2->BASE_STAT>>6) & 1;
;;;777    
;;;778    	case CGU_BASE_SDIO:
;;;779    		return (LPC_CCU2->BASE_STAT>>7) & 1;
;;;780    
;;;781    	/*BASE SAFE is used by WWDT and RGU*/
;;;782    	case CGU_BASE_SAFE:
;;;783    		break;
;;;784    	default:
;;;785    		break;
;;;786    	}
;;;787    	return 0;
;;;788    }
000028  4770              BX       lr
00002a  6850              LDR      r0,[r2,#4]            ;745
00002c  f3c00040          UBFX     r0,r0,#1,#1           ;745
000030  4770              BX       lr
000032  6850              LDR      r0,[r2,#4]            ;748
000034  f3c00080          UBFX     r0,r0,#2,#1           ;748
000038  4770              BX       lr
00003a  6850              LDR      r0,[r2,#4]            ;751
00003c  f3c000c0          UBFX     r0,r0,#3,#1           ;751
000040  4770              BX       lr
000042  6850              LDR      r0,[r2,#4]            ;754
000044  f3c010c0          UBFX     r0,r0,#7,#1           ;754
000048  4770              BX       lr
00004a  6850              LDR      r0,[r2,#4]            ;757
00004c  f3c02000          UBFX     r0,r0,#8,#1           ;757
000050  4770              BX       lr
000052  6848              LDR      r0,[r1,#4]            ;761
000054  f3c00040          UBFX     r0,r0,#1,#1           ;761
000058  4770              BX       lr
00005a  6848              LDR      r0,[r1,#4]            ;764
00005c  f3c00080          UBFX     r0,r0,#2,#1           ;764
000060  4770              BX       lr
000062  6848              LDR      r0,[r1,#4]            ;767
000064  f3c000c0          UBFX     r0,r0,#3,#1           ;767
000068  4770              BX       lr
00006a  6848              LDR      r0,[r1,#4]            ;770
00006c  f3c01000          UBFX     r0,r0,#4,#1           ;770
000070  4770              BX       lr
000072  6848              LDR      r0,[r1,#4]            ;773
000074  f3c01040          UBFX     r0,r0,#5,#1           ;773
000078  4770              BX       lr
00007a  6848              LDR      r0,[r1,#4]            ;776
00007c  f3c01080          UBFX     r0,r0,#6,#1           ;776
000080  4770              BX       lr
000082  6848              LDR      r0,[r1,#4]            ;779
000084  f3c010c0          UBFX     r0,r0,#7,#1           ;779
000088  4770              BX       lr
                  |L5.138|
00008a  2000              MOVS     r0,#0                 ;787
00008c  4770              BX       lr
;;;789    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x40051000
                  |L5.148|
                          DCD      0x40052000

                          AREA ||i.CGU_GetPCLKFrequency||, CODE, READONLY, ALIGN=2

                  CGU_GetPCLKFrequency PROC
;;;371     **********************************************************************/
;;;372    uint32_t CGU_GetPCLKFrequency (CGU_PERIPHERAL_T Clock){
000000  b530              PUSH     {r4,r5,lr}
;;;373    	uint32_t ClkSrc;
;;;374    	if(Clock >= CGU_PERIPHERAL_WWDT && Clock <= CGU_PERIPHERAL_ADC0)
;;;375    		return CGU_ERROR_INVALID_PARAM;
;;;376    
;;;377    	if(CGU_PERIPHERAL_Info[Clock].PerBaseEntity != CGU_ENTITY_NONE){
000002  4d1b              LDR      r5,|L6.112|
000004  eb000180          ADD      r1,r0,r0,LSL #2
000008  eb050041          ADD      r0,r5,r1,LSL #1
;;;378    		/* Get Base Clock Source */
;;;379    		ClkSrc = (CGU_PER_BASE_CTRL(Clock) & CGU_CTRL_SRC_MASK) >> 24;
00000c  4b19              LDR      r3,|L6.116|
00000e  7902              LDRB     r2,[r0,#4]            ;377
000010  f5a57456          SUB      r4,r5,#0x358
000014  2a2d              CMP      r2,#0x2d              ;377
000016  d011              BEQ      |L6.60|
000018  f9341012          LDRSH    r1,[r4,r2,LSL #1]
00001c  18ca              ADDS     r2,r1,r3
00001e  6811              LDR      r1,[r2,#0]
000020  f3c16103          UBFX     r1,r1,#24,#4
;;;380    		/* GetBase Status*/
;;;381    		if(CGU_PER_BASE_CTRL(Clock) & 1)
000024  6812              LDR      r2,[r2,#0]
000026  07d2              LSLS     r2,r2,#31
000028  d001              BEQ      |L6.46|
;;;382    			return 0;
00002a  2000              MOVS     r0,#0
;;;383    		/* check Branch if it is enabled */
;;;384    		if((CGU_PERIPHERAL_Info[Clock].PerBranchOffset!= 0) && !(CGU_PER_BRANCH_STATUS(Clock) & CGU_BRANCH_STATUS_ENABLE_MASK)) return 0;
;;;385    	}else{
;;;386    		if(CGU_REG_BASE_CTRL(Clock) & 1)	return 0;
;;;387    		ClkSrc = (CGU_REG_BASE_CTRL(Clock) & CGU_CTRL_SRC_MASK) >> 24;
;;;388    		/* check Branch if it is enabled */
;;;389    		if((CGU_PERIPHERAL_Info[Clock].RegBranchOffset!= 0) && !(CGU_REG_BRANCH_STATUS(Clock) & CGU_BRANCH_STATUS_ENABLE_MASK)) return 0;
;;;390    	}
;;;391    	return CGU_ClockSourceFrequency[ClkSrc];
;;;392    }
00002c  bd30              POP      {r4,r5,pc}
                  |L6.46|
00002e  88c0              LDRH     r0,[r0,#6]            ;384
000030  b1b8              CBZ      r0,|L6.98|
000032  4418              ADD      r0,r0,r3              ;384
000034  6840              LDR      r0,[r0,#4]            ;384
000036  07c0              LSLS     r0,r0,#31             ;384
000038  d113              BNE      |L6.98|
00003a  bd30              POP      {r4,r5,pc}
                  |L6.60|
00003c  f8151011          LDRB     r1,[r5,r1,LSL #1]     ;386
000040  f9341011          LDRSH    r1,[r4,r1,LSL #1]     ;386
000044  4419              ADD      r1,r1,r3              ;386
000046  680a              LDR      r2,[r1,#0]            ;386
000048  07d2              LSLS     r2,r2,#31             ;386
00004a  d001              BEQ      |L6.80|
00004c  2000              MOVS     r0,#0                 ;386
00004e  bd30              POP      {r4,r5,pc}
                  |L6.80|
000050  6809              LDR      r1,[r1,#0]            ;387
000052  f3c16103          UBFX     r1,r1,#24,#4          ;387
000056  8840              LDRH     r0,[r0,#2]            ;389
000058  b118              CBZ      r0,|L6.98|
00005a  4418              ADD      r0,r0,r3              ;389
00005c  6840              LDR      r0,[r0,#4]            ;389
00005e  07c0              LSLS     r0,r0,#31             ;389
000060  d003              BEQ      |L6.106|
                  |L6.98|
000062  4805              LDR      r0,|L6.120|
000064  f8500021          LDR      r0,[r0,r1,LSL #2]     ;391
000068  bd30              POP      {r4,r5,pc}
                  |L6.106|
00006a  2000              MOVS     r0,#0                 ;389
00006c  bd30              POP      {r4,r5,pc}
;;;393    
                          ENDP

00006e  0000              DCW      0x0000
                  |L6.112|
                          DCD      ||.constdata||+0x358
                  |L6.116|
                          DCD      0x40050000
                  |L6.120|
                          DCD      ||.data||

                          AREA ||i.CGU_Init||, CODE, READONLY, ALIGN=2

                  CGU_Init PROC
;;;204     **********************************************************************/
;;;205    uint32_t	CGU_Init(void){
000000  b510              PUSH     {r4,lr}
;;;206    	CGU_SetXTALOSC(12000000);
000002  480d              LDR      r0,|L7.56|
000004  f7fffffe          BL       CGU_SetXTALOSC
;;;207    	CGU_EnableEntity(CGU_CLKSRC_XTAL_OSC, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2006              MOVS     r0,#6
00000c  f7fffffe          BL       CGU_EnableEntity
;;;208    	CGU_EntityConnect(CGU_CLKSRC_XTAL_OSC, CGU_CLKSRC_PLL1);
000010  2109              MOVS     r1,#9
000012  2006              MOVS     r0,#6
000014  f7fffffe          BL       CGU_EntityConnect
;;;209    	// Disable PLL1 CPU hang???
;;;210    	//CGU_EnableEntity(CGU_CLKSRC_PLL1, DISABLE);
;;;211    	CGU_SetPLL1(6);
000018  2006              MOVS     r0,#6
00001a  f7fffffe          BL       CGU_SetPLL1
;;;212    	CGU_EnableEntity(CGU_CLKSRC_PLL1, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2009              MOVS     r0,#9
000022  f7fffffe          BL       CGU_EnableEntity
;;;213    	CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_M3);
000026  2115              MOVS     r1,#0x15
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       CGU_EntityConnect
;;;214    	CGU_UpdateClock();
00002e  f7fffffe          BL       CGU_UpdateClock
;;;215    	return 0;
000032  2000              MOVS     r0,#0
;;;216    }
000034  bd10              POP      {r4,pc}
;;;217    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x00b71b00

                          AREA ||i.CGU_RealFrequencyCompare||, CODE, READONLY, ALIGN=1

                  CGU_RealFrequencyCompare PROC
;;;908     **********************************************************************/
;;;909    uint32_t CGU_RealFrequencyCompare(CGU_ENTITY_T Clock, CGU_ENTITY_T CompareToClock, uint32_t *m, uint32_t *d){
000000  b57f              PUSH     {r0-r6,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
000006  461e              MOV      r6,r3
;;;910    	uint32_t m1,m2,d1,d2;
;;;911    	/* Check Parameter */
;;;912    	if((Clock>CGU_CLKSRC_IDIVE) || (CompareToClock>CGU_CLKSRC_IDIVE))
000008  2810              CMP      r0,#0x10
00000a  d801              BHI      |L8.16|
00000c  2c10              CMP      r4,#0x10
00000e  d902              BLS      |L8.22|
                  |L8.16|
;;;913    		return CGU_ERROR_INVALID_PARAM;
000010  2004              MOVS     r0,#4
                  |L8.18|
;;;914    	/* Check for Clock Enable - Not yet implement
;;;915    	 * The Comparator will hang if Clock has not been set*/
;;;916    	CGU_FrequencyMonitor(Clock, &m1, &d1);
;;;917    	CGU_FrequencyMonitor(CompareToClock, &m2, &d2);
;;;918    	*m= m1*d2;
;;;919    	*d= d1*m2;
;;;920    	return 0;
;;;921    
;;;922    }
000012  b004              ADD      sp,sp,#0x10
000014  bd70              POP      {r4-r6,pc}
                  |L8.22|
000016  aa01              ADD      r2,sp,#4              ;916
000018  a903              ADD      r1,sp,#0xc            ;916
00001a  f7fffffe          BL       CGU_FrequencyMonitor
00001e  466a              MOV      r2,sp                 ;917
000020  a902              ADD      r1,sp,#8              ;917
000022  4620              MOV      r0,r4                 ;917
000024  f7fffffe          BL       CGU_FrequencyMonitor
000028  9900              LDR      r1,[sp,#0]            ;918
00002a  9803              LDR      r0,[sp,#0xc]          ;918
00002c  4348              MULS     r0,r1,r0              ;918
00002e  6028              STR      r0,[r5,#0]            ;918
000030  e9dd0101          LDRD     r0,r1,[sp,#4]         ;919
000034  4348              MULS     r0,r1,r0              ;919
000036  6030              STR      r0,[r6,#0]            ;919
000038  2000              MOVS     r0,#0                 ;920
00003a  e7ea              B        |L8.18|
;;;923    /**
                          ENDP


                          AREA ||i.CGU_SetDIV||, CODE, READONLY, ALIGN=2

                  CGU_SetDIV PROC
;;;466    /* divisor number must >=1*/
;;;467    uint32_t	CGU_SetDIV(CGU_ENTITY_T SelectDivider, uint32_t divisor){
000000  f1a0020c          SUB      r2,r0,#0xc
;;;468    	int32_t RegOffset;
;;;469    	uint32_t tempReg;
;;;470    	if(SelectDivider>=CGU_CLKSRC_IDIVA && SelectDivider<=CGU_CLKSRC_IDIVE){
000004  2a04              CMP      r2,#4
000006  d812              BHI      |L9.46|
;;;471    		RegOffset = CGU_Entity_ControlReg_Offset[SelectDivider];
000008  4a0a              LDR      r2,|L9.52|
00000a  f9320010          LDRSH    r0,[r2,r0,LSL #1]
;;;472    		if(RegOffset == -1) return CGU_ERROR_INVALID_ENTITY;
00000e  1c42              ADDS     r2,r0,#1
000010  d00b              BEQ      |L9.42|
;;;473    		tempReg = CGU_ADDRESS32(LPC_CGU,RegOffset);
000012  4a09              LDR      r2,|L9.56|
000014  4410              ADD      r0,r0,r2
000016  6802              LDR      r2,[r0,#0]
;;;474    		tempReg &= ~(0xFF<<2);
000018  f422727f          BIC      r2,r2,#0x3fc
;;;475    		tempReg |= ((divisor-1)&0xFF)<<2;
00001c  1e49              SUBS     r1,r1,#1
00001e  b2c9              UXTB     r1,r1
000020  ea420181          ORR      r1,r2,r1,LSL #2
;;;476    		CGU_ADDRESS32(LPC_CGU,RegOffset) = tempReg;
000024  6001              STR      r1,[r0,#0]
;;;477    		return CGU_ERROR_SUCCESS;
000026  2000              MOVS     r0,#0
;;;478    	}
;;;479    	return CGU_ERROR_INVALID_ENTITY;
;;;480    }
000028  4770              BX       lr
                  |L9.42|
00002a  2002              MOVS     r0,#2                 ;472
00002c  4770              BX       lr
                  |L9.46|
00002e  2002              MOVS     r0,#2                 ;479
000030  4770              BX       lr
;;;481    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      ||.constdata||
                  |L9.56|
                          DCD      0x40050000

                          AREA ||i.CGU_SetPLL0||, CODE, READONLY, ALIGN=2

                  CGU_SetPLL0 PROC
;;;664     **********************************************************************/
;;;665    uint32_t CGU_SetPLL0(void){
000000  4806              LDR      r0,|L10.28|
;;;666    	// Setup PLL550 to generate 480MHz from 12 MHz crystal
;;;667    	LPC_CGU->PLL0USB_CTRL |= 1; 	// Power down PLL
000002  6a01              LDR      r1,[r0,#0x20]
000004  f0410101          ORR      r1,r1,#1
000008  6201              STR      r1,[r0,#0x20]
;;;668    						//	P			N
;;;669    	LPC_CGU->PLL0USB_NP_DIV = (98<<0) | (514<<12);
00000a  4905              LDR      r1,|L10.32|
00000c  6281              STR      r1,[r0,#0x28]
;;;670    						//	SELP	SELI	SELR	MDEC
;;;671    	LPC_CGU->PLL0USB_MDIV = (0xB<<17)|(0x10<<22)|(0<<28)|(0x7FFA<<0);
00000e  4905              LDR      r1,|L10.36|
000010  6241              STR      r1,[r0,#0x24]
;;;672    	LPC_CGU->PLL0USB_CTRL =(CGU_CLKSRC_XTAL_OSC<<24) | (0x3<<2) | (1<<4);
000012  4905              LDR      r1,|L10.40|
000014  6201              STR      r1,[r0,#0x20]
;;;673    	return CGU_ERROR_SUCCESS;
000016  2000              MOVS     r0,#0
;;;674    }
000018  4770              BX       lr
;;;675    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40050000
                  |L10.32|
                          DCD      0x00202062
                  |L10.36|
                          DCD      0x04167ffa
                  |L10.40|
                          DCD      0x0600001c

                          AREA ||i.CGU_SetPLL1||, CODE, READONLY, ALIGN=2

                  CGU_SetPLL1 PROC
;;;683     **********************************************************************/
;;;684    uint32_t	CGU_SetPLL1(uint32_t mult){
000000  b5f0              PUSH     {r4-r7,lr}
;;;685    	uint32_t msel=0, nsel=0, psel=0, pval=1;
000002  2700              MOVS     r7,#0
000004  2100              MOVS     r1,#0
000006  2201              MOVS     r2,#1
;;;686    	uint32_t freq;
;;;687    	uint32_t ClkSrc = (LPC_CGU->PLL1_CTRL & CGU_CTRL_SRC_MASK)>>24;
000008  4e17              LDR      r6,|L11.104|
00000a  6c73              LDR      r3,[r6,#0x44]
00000c  f3c36303          UBFX     r3,r3,#24,#4
;;;688    	freq = CGU_ClockSourceFrequency[ClkSrc];
000010  4c16              LDR      r4,|L11.108|
000012  f8543023          LDR      r3,[r4,r3,LSL #2]
;;;689    	freq *= mult;
000016  4343              MULS     r3,r0,r3
;;;690    	msel = mult-1;
000018  1e40              SUBS     r0,r0,#1
;;;691    
;;;692    	LPC_CGU->PLL1_CTRL &= ~(CGU_PLL1_FBSEL_MASK |
00001a  6c74              LDR      r4,[r6,#0x44]
00001c  4d14              LDR      r5,|L11.112|
00001e  402c              ANDS     r4,r4,r5
000020  6474              STR      r4,[r6,#0x44]
;;;693    									CGU_PLL1_BYPASS_MASK |
;;;694    									CGU_PLL1_DIRECT_MASK |
;;;695    									(0x03<<8) | (0xFF<<16) | (0x03<<12));
;;;696    
;;;697    	if(freq<156000000){
000022  4c14              LDR      r4,|L11.116|
000024  42a3              CMP      r3,r4
000026  d301              BCC      |L11.44|
000028  e010              B        |L11.76|
                  |L11.42|
;;;698    		//psel is encoded such that 0=1, 1=2, 2=4, 3=8
;;;699    		while(2*(pval)*freq < 156000000) {
;;;700    			psel++;
00002a  1c49              ADDS     r1,r1,#1
                  |L11.44|
00002c  0052              LSLS     r2,r2,#1              ;699
00002e  fb02f503          MUL      r5,r2,r3              ;699
000032  42a5              CMP      r5,r4                 ;699
000034  d3f9              BCC      |L11.42|
;;;701    			pval*=2;
;;;702    		}
;;;703    //		if(2*(pval)*freq > 320000000) {
;;;704    //			//THIS IS OUT OF RANGE!!!
;;;705    //			//HOW DO WE ASSERT IN SAMPLE CODE?
;;;706    //			//__breakpoint(0);
;;;707    //			return CGU_ERROR_INVALID_PARAM;
;;;708    //		}
;;;709    		LPC_CGU->PLL1_CTRL |= (msel<<16) | (nsel<<12) | (psel<<8) | CGU_PLL1_FBSEL_MASK;
000036  6c72              LDR      r2,[r6,#0x44]
000038  ea424000          ORR      r0,r2,r0,LSL #16
00003c  033a              LSLS     r2,r7,#12
00003e  ea422101          ORR      r1,r2,r1,LSL #8
000042  4308              ORRS     r0,r0,r1
000044  f0400040          ORR      r0,r0,#0x40
000048  6470              STR      r0,[r6,#0x44]
00004a  e008              B        |L11.94|
                  |L11.76|
;;;710    	}else if(freq<320000000){
00004c  490a              LDR      r1,|L11.120|
00004e  428b              CMP      r3,r1
000050  d207              BCS      |L11.98|
;;;711    		LPC_CGU->PLL1_CTRL |= (msel<<16) | (nsel<<12) | (psel<<8) |CGU_PLL1_DIRECT_MASK | CGU_PLL1_FBSEL_MASK;
000052  6c71              LDR      r1,[r6,#0x44]
000054  ea414000          ORR      r0,r1,r0,LSL #16
000058  f04000c0          ORR      r0,r0,#0xc0
00005c  6470              STR      r0,[r6,#0x44]
                  |L11.94|
;;;712    	}else
;;;713    		return CGU_ERROR_INVALID_PARAM;
;;;714    
;;;715    	return CGU_ERROR_SUCCESS;
00005e  2000              MOVS     r0,#0
;;;716    }
000060  bdf0              POP      {r4-r7,pc}
                  |L11.98|
000062  2004              MOVS     r0,#4                 ;713
000064  bdf0              POP      {r4-r7,pc}
;;;717    
                          ENDP

000066  0000              DCW      0x0000
                  |L11.104|
                          DCD      0x40050000
                  |L11.108|
                          DCD      ||.data||
                  |L11.112|
                          DCD      0xff00cc3d
                  |L11.116|
                          DCD      0x094c5f00
                  |L11.120|
                          DCD      0x1312d000

                          AREA ||i.CGU_SetXTALOSC||, CODE, READONLY, ALIGN=2

                  CGU_SetXTALOSC PROC
;;;439     **********************************************************************/
;;;440    uint32_t	CGU_SetXTALOSC(uint32_t ClockFrequency){
000000  4a0a              LDR      r2,|L12.44|
;;;441    	if(ClockFrequency < 15000000){
;;;442    		LPC_CGU->XTAL_OSC_CTRL &= ~(1<<2);
000002  490b              LDR      r1,|L12.48|
000004  4290              CMP      r0,r2                 ;441
000006  d204              BCS      |L12.18|
000008  698a              LDR      r2,[r1,#0x18]
00000a  f0220204          BIC      r2,r2,#4
00000e  618a              STR      r2,[r1,#0x18]
000010  e006              B        |L12.32|
                  |L12.18|
;;;443    	}else if(ClockFrequency < 25000000){
000012  4a08              LDR      r2,|L12.52|
000014  4290              CMP      r0,r2
000016  d207              BCS      |L12.40|
;;;444    		LPC_CGU->XTAL_OSC_CTRL |= (1<<2);
000018  698a              LDR      r2,[r1,#0x18]
00001a  f0420204          ORR      r2,r2,#4
00001e  618a              STR      r2,[r1,#0x18]
                  |L12.32|
;;;445    	}else
;;;446    		return CGU_ERROR_FREQ_OUTOF_RANGE;
;;;447    
;;;448    	CGU_ClockSourceFrequency[CGU_CLKSRC_XTAL_OSC] = ClockFrequency;
000020  4905              LDR      r1,|L12.56|
000022  6188              STR      r0,[r1,#0x18]  ; CGU_ClockSourceFrequency
;;;449    	return CGU_ERROR_SUCCESS;
000024  2000              MOVS     r0,#0
;;;450    }
000026  4770              BX       lr
                  |L12.40|
000028  2005              MOVS     r0,#5                 ;446
00002a  4770              BX       lr
;;;451    
                          ENDP

                  |L12.44|
                          DCD      0x00e4e1c0
                  |L12.48|
                          DCD      0x40050000
                  |L12.52|
                          DCD      0x017d7840
                  |L12.56|
                          DCD      ||.data||

                          AREA ||i.CGU_UpdateClock||, CODE, READONLY, ALIGN=2

                  CGU_UpdateClock PROC
;;;399     **********************************************************************/
;;;400    void CGU_UpdateClock(void){
000000  b570              PUSH     {r4-r6,lr}
;;;401    	uint32_t ClkSrc;
;;;402    	uint32_t div;
;;;403    	uint32_t divisor;
;;;404    	int32_t RegOffset;
;;;405    	/* 32OSC */
;;;406    	if(ISBITSET(LPC_CREG->CREG0,1) && ISBITCLR(LPC_CREG->CREG0,3))
000002  481f              LDR      r0,|L13.128|
000004  6841              LDR      r1,[r0,#4]
;;;407    		CGU_ClockSourceFrequency[CGU_CLKSRC_32KHZ_OSC] = 32768;
000006  4b1f              LDR      r3,|L13.132|
000008  0789              LSLS     r1,r1,#30             ;406
00000a  f04f0400          MOV      r4,#0                 ;406
00000e  d507              BPL      |L13.32|
000010  6840              LDR      r0,[r0,#4]            ;406
000012  43c0              MVNS     r0,r0                 ;406
000014  0700              LSLS     r0,r0,#28             ;406
000016  d503              BPL      |L13.32|
000018  f44f4000          MOV      r0,#0x8000
00001c  6018              STR      r0,[r3,#0]  ; CGU_ClockSourceFrequency
00001e  e000              B        |L13.34|
                  |L13.32|
;;;408    	else
;;;409    		CGU_ClockSourceFrequency[CGU_CLKSRC_32KHZ_OSC] = 0;
000020  601c              STR      r4,[r3,#0]  ; CGU_ClockSourceFrequency
                  |L13.34|
;;;410    	/*PLL0*/
;;;411    	/* PLL1 */
;;;412    	if(ISBITCLR(LPC_CGU->PLL1_CTRL,1) /* Enabled */
000022  4d19              LDR      r5,|L13.136|
000024  6c68              LDR      r0,[r5,#0x44]
000026  43c0              MVNS     r0,r0
000028  0780              LSLS     r0,r0,#30
00002a  d50e              BPL      |L13.74|
;;;413    			&& (LPC_CGU->PLL1_STAT&1)){ /* Locked? */
00002c  6c28              LDR      r0,[r5,#0x40]
00002e  07c0              LSLS     r0,r0,#31
000030  d00b              BEQ      |L13.74|
;;;414    		ClkSrc = (LPC_CGU->PLL1_CTRL & CGU_CTRL_SRC_MASK)>>24;
000032  6c68              LDR      r0,[r5,#0x44]
000034  f3c06003          UBFX     r0,r0,#24,#4
;;;415    		CGU_ClockSourceFrequency[CGU_CLKSRC_PLL1] = CGU_ClockSourceFrequency[ClkSrc] *
000038  6c69              LDR      r1,[r5,#0x44]
00003a  f8530020          LDR      r0,[r3,r0,LSL #2]
00003e  f3c14107          UBFX     r1,r1,#16,#8
000042  1c49              ADDS     r1,r1,#1
000044  4348              MULS     r0,r1,r0
000046  6258              STR      r0,[r3,#0x24]  ; CGU_ClockSourceFrequency
000048  e000              B        |L13.76|
                  |L13.74|
;;;416    															(((LPC_CGU->PLL1_CTRL>>16)&0xFF)+1);
;;;417    	}else
;;;418    		CGU_ClockSourceFrequency[CGU_CLKSRC_PLL1] = 0;
00004a  625c              STR      r4,[r3,#0x24]  ; CGU_ClockSourceFrequency
                  |L13.76|
;;;419    
;;;420    	/* DIV */
;;;421    	for(div = CGU_CLKSRC_IDIVA; div <= CGU_CLKSRC_IDIVE; div++){
00004c  200c              MOVS     r0,#0xc
;;;422    		RegOffset = CGU_Entity_ControlReg_Offset[div];
00004e  4e0f              LDR      r6,|L13.140|
                  |L13.80|
000050  f9361010          LDRSH    r1,[r6,r0,LSL #1]
;;;423    		if(ISBITCLR(CGU_ADDRESS32(LPC_CGU,RegOffset),1)){
000054  5949              LDR      r1,[r1,r5]
000056  43ca              MVNS     r2,r1
000058  0792              LSLS     r2,r2,#30
00005a  d50b              BPL      |L13.116|
;;;424    			ClkSrc = (CGU_ADDRESS32(LPC_CGU,RegOffset) & CGU_CTRL_SRC_MASK) >> 24;
00005c  f3c16203          UBFX     r2,r1,#24,#4
;;;425    			divisor = (CGU_ADDRESS32(LPC_CGU,RegOffset)>>2) & 0xFF;
000060  f3c10187          UBFX     r1,r1,#2,#8
;;;426    			divisor ++;
000064  1c49              ADDS     r1,r1,#1
;;;427    			CGU_ClockSourceFrequency[div] = CGU_ClockSourceFrequency[ClkSrc] / divisor;
000066  f8532022          LDR      r2,[r3,r2,LSL #2]
00006a  fbb2f1f1          UDIV     r1,r2,r1
00006e  f8431020          STR      r1,[r3,r0,LSL #2]
000072  e001              B        |L13.120|
                  |L13.116|
;;;428    		}else
;;;429    			CGU_ClockSourceFrequency[div] = 0;
000074  f8434020          STR      r4,[r3,r0,LSL #2]
                  |L13.120|
000078  1c40              ADDS     r0,r0,#1              ;421
00007a  2810              CMP      r0,#0x10              ;421
00007c  d9e8              BLS      |L13.80|
;;;430    	}
;;;431    }
00007e  bd70              POP      {r4-r6,pc}
;;;432    
                          ENDP

                  |L13.128|
                          DCD      0x40043000
                  |L13.132|
                          DCD      ||.data||
                  |L13.136|
                          DCD      0x40050000
                  |L13.140|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  CGU_Entity_ControlReg_Offset
000000  ffffffff          DCW      0xffff,0xffff
000004  ffffffff          DCW      0xffff,0xffff
000008  ffffffff          DCW      0xffff,0xffff
00000c  00180020          DCW      0x0018,0x0020
000010  00300044          DCW      0x0030,0x0044
000014  ffffffff          DCW      0xffff,0xffff
000018  0048004c          DCW      0x0048,0x004c
00001c  00500054          DCW      0x0050,0x0054
000020  0058005c          DCW      0x0058,0x005c
000024  0060ffff          DCW      0x0060,0xffff
000028  0068006c          DCW      0x0068,0x006c
00002c  0070ffff          DCW      0x0070,0xffff
000030  0078007c          DCW      0x0078,0x007c
000034  00800084          DCW      0x0080,0x0084
000038  0088008c          DCW      0x0088,0x008c
00003c  00900094          DCW      0x0090,0x0094
000040  0098009c          DCW      0x0098,0x009c
000044  00a000a4          DCW      0x00a0,0x00a4
000048  00a800ac          DCW      0x00a8,0x00ac
00004c  ffffffff          DCW      0xffff,0xffff
000050  ffffffff          DCW      0xffff,0xffff
000054  00c000c4          DCW      0x00c0,0x00c4
000058  00c8              DCW      0x00c8
                  CGU_ConnectAlloc_Tbl
00005a  0000              DCB      0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00010101          DCB      0x00,0x01,0x01,0x01
000064  00000101          DCB      0x00,0x00,0x01,0x01
000068  01010100          DCB      0x01,0x01,0x01,0x00
00006c  00000101          DCB      0x00,0x00,0x01,0x01
000070  01000101          DCB      0x01,0x00,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  01010100          DCB      0x01,0x01,0x01,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000101          DCB      0x00,0x00,0x01,0x01
000090  01000001          DCB      0x01,0x00,0x00,0x01
000094  01010101          DCB      0x01,0x01,0x01,0x01
000098  01000001          DCB      0x01,0x00,0x00,0x01
00009c  01010001          DCB      0x01,0x01,0x00,0x01
0000a0  01010101          DCB      0x01,0x01,0x01,0x01
0000a4  01010101          DCB      0x01,0x01,0x01,0x01
0000a8  01010101          DCB      0x01,0x01,0x01,0x01
0000ac  01000000          DCB      0x01,0x00,0x00,0x00
0000b0  00010101          DCB      0x00,0x01,0x01,0x01
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000001          DCB      0x00,0x00,0x00,0x01
0000bc  01010000          DCB      0x01,0x01,0x00,0x00
0000c0  01010101          DCB      0x01,0x01,0x01,0x01
0000c4  01000000          DCB      0x01,0x00,0x00,0x00
0000c8  01010100          DCB      0x01,0x01,0x01,0x00
0000cc  01010101          DCB      0x01,0x01,0x01,0x01
0000d0  01010101          DCB      0x01,0x01,0x01,0x01
0000d4  01010101          DCB      0x01,0x01,0x01,0x01
0000d8  01010000          DCB      0x01,0x01,0x00,0x00
0000dc  00000101          DCB      0x00,0x00,0x01,0x01
0000e0  01000000          DCB      0x01,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  01010100          DCB      0x01,0x01,0x01,0x00
0000ec  00010101          DCB      0x00,0x01,0x01,0x01
0000f0  01010000          DCB      0x01,0x01,0x00,0x00
0000f4  00010101          DCB      0x00,0x01,0x01,0x01
0000f8  00010101          DCB      0x00,0x01,0x01,0x01
0000fc  01010101          DCB      0x01,0x01,0x01,0x01
000100  01010101          DCB      0x01,0x01,0x01,0x01
000104  01010100          DCB      0x01,0x01,0x01,0x00
000108  00000001          DCB      0x00,0x00,0x00,0x01
00010c  01010000          DCB      0x01,0x01,0x00,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00010101          DCB      0x00,0x01,0x01,0x01
000118  00000101          DCB      0x00,0x00,0x01,0x01
00011c  01010100          DCB      0x01,0x01,0x01,0x00
000120  00000101          DCB      0x00,0x00,0x01,0x01
000124  01000101          DCB      0x01,0x00,0x01,0x01
000128  01010101          DCB      0x01,0x01,0x01,0x01
00012c  01010101          DCB      0x01,0x01,0x01,0x01
000130  01010101          DCB      0x01,0x01,0x01,0x01
000134  00000000          DCB      0x00,0x00,0x00,0x00
000138  01010100          DCB      0x01,0x01,0x01,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  01000000          DCB      0x01,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000001          DCB      0x00,0x00,0x00,0x01
000170  01010000          DCB      0x01,0x01,0x00,0x00
000174  01010101          DCB      0x01,0x01,0x01,0x01
000178  01000000          DCB      0x01,0x00,0x00,0x00
00017c  01010100          DCB      0x01,0x01,0x01,0x00
000180  01010101          DCB      0x01,0x01,0x01,0x01
000184  01010101          DCB      0x01,0x01,0x01,0x01
000188  01010101          DCB      0x01,0x01,0x01,0x01
00018c  01010000          DCB      0x01,0x01,0x00,0x00
000190  00000101          DCB      0x00,0x00,0x01,0x01
000194  01000000          DCB      0x01,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000100          DCB      0x00,0x00,0x01,0x00
0001a0  00010000          DCB      0x00,0x01,0x00,0x00
0001a4  00000001          DCB      0x00,0x00,0x00,0x01
0001a8  00010000          DCB      0x00,0x01,0x00,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  00000000          DCB      0x00,0x00,0x00,0x00
0001b4  00000000          DCB      0x00,0x00,0x00,0x00
0001b8  00000100          DCB      0x00,0x00,0x01,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  01010000          DCB      0x01,0x01,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000001          DCB      0x00,0x00,0x00,0x01
0001cc  00000101          DCB      0x00,0x00,0x01,0x01
0001d0  01010100          DCB      0x01,0x01,0x01,0x00
0001d4  00000101          DCB      0x00,0x00,0x01,0x01
0001d8  01000101          DCB      0x01,0x00,0x01,0x01
0001dc  01010101          DCB      0x01,0x01,0x01,0x01
0001e0  01010101          DCB      0x01,0x01,0x01,0x01
0001e4  01010101          DCB      0x01,0x01,0x01,0x01
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  01010100          DCB      0x01,0x01,0x01,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000101          DCB      0x00,0x00,0x01,0x01
0001f8  00000001          DCB      0x00,0x00,0x00,0x01
0001fc  01010101          DCB      0x01,0x01,0x01,0x01
000200  00000001          DCB      0x00,0x00,0x00,0x01
000204  01010001          DCB      0x01,0x01,0x00,0x01
000208  01010101          DCB      0x01,0x01,0x01,0x01
00020c  01010101          DCB      0x01,0x01,0x01,0x01
000210  01010101          DCB      0x01,0x01,0x01,0x01
000214  01000000          DCB      0x01,0x00,0x00,0x00
000218  00010101          DCB      0x00,0x01,0x01,0x01
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  00000000          DCB      0x00,0x00,0x00,0x00
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00000000          DCB      0x00,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  00000000          DCB      0x00,0x00,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00000000          DCB      0x00,0x00,0x00,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00010101          DCB      0x00,0x01,0x01,0x01
000280  00000001          DCB      0x00,0x00,0x00,0x01
000284  01010100          DCB      0x01,0x01,0x01,0x00
000288  00000101          DCB      0x00,0x00,0x01,0x01
00028c  01000101          DCB      0x01,0x00,0x01,0x01
000290  01010101          DCB      0x01,0x01,0x01,0x01
000294  01010101          DCB      0x01,0x01,0x01,0x01
000298  01010101          DCB      0x01,0x01,0x01,0x01
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  01010100          DCB      0x01,0x01,0x01,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000101          DCB      0x00,0x00,0x01,0x01
0002ac  01000000          DCB      0x01,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000001          DCB      0x00,0x00,0x00,0x01
0002b8  01010001          DCB      0x01,0x01,0x00,0x01
0002bc  01010101          DCB      0x01,0x01,0x01,0x01
0002c0  01010101          DCB      0x01,0x01,0x01,0x01
0002c4  01010101          DCB      0x01,0x01,0x01,0x01
0002c8  01000000          DCB      0x01,0x00,0x00,0x00
0002cc  00010101          DCB      0x00,0x01,0x01,0x01
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000001          DCB      0x00,0x00,0x00,0x01
0002d8  01010000          DCB      0x01,0x01,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  01010100          DCB      0x01,0x01,0x01,0x00
0002e8  01010101          DCB      0x01,0x01,0x01,0x01
0002ec  01010101          DCB      0x01,0x01,0x01,0x01
0002f0  01010101          DCB      0x01,0x01,0x01,0x01
0002f4  01010000          DCB      0x01,0x01,0x00,0x00
0002f8  00000101          DCB      0x00,0x00,0x01,0x01
0002fc  01000000          DCB      0x01,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  01010100          DCB      0x01,0x01,0x01,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00010101          DCB      0x00,0x01,0x01,0x01
000314  00010101          DCB      0x00,0x01,0x01,0x01
000318  01010101          DCB      0x01,0x01,0x01,0x01
00031c  01010101          DCB      0x01,0x01,0x01,0x01
000320  01010100          DCB      0x01,0x01,0x01,0x00
000324  00000001          DCB      0x00,0x00,0x00,0x01
000328  01010000          DCB      0x01,0x01,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00010101          DCB      0x00,0x01,0x01,0x01
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000101          DCB      0x00,0x00,0x01,0x01
000340  01000101          DCB      0x01,0x00,0x01,0x01
000344  01010101          DCB      0x01,0x01,0x01,0x01
000348  01010101          DCB      0x01,0x01,0x01,0x01
00034c  01010101          DCB      0x01,0x01,0x01,0x01
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  01010100          DCB      0x01,0x01,0x01,0x00
                  CGU_PERIPHERAL_Info
000358  1b00              DCB      0x1b,0x00
00035a  1118              DCW      0x1118
00035c  2d00              DCB      0x2d,0x00
00035e  0000              DCW      0x0000
000360  00001b00          DCB      0x00,0x00,0x1b,0x00
000364  1120              DCW      0x1120
000366  2d00              DCB      0x2d,0x00
000368  0000              DCW      0x0000
00036a  0000              DCB      0x00,0x00
00036c  1500              DCB      0x15,0x00
00036e  1460              DCW      0x1460
000370  2d00              DCB      0x2d,0x00
000372  0000              DCW      0x0000
000374  00001a00          DCB      0x00,0x00,0x1a,0x00
000378  1200              DCW      0x1200
00037a  2d00              DCB      0x2d,0x00
00037c  0000              DCW      0x0000
00037e  0000              DCB      0x00,0x00
000380  1b00              DCB      0x1b,0x00
000382  1100              DCW      0x1100
000384  2d00              DCB      0x2d,0x00
000386  0000              DCW      0x0000
000388  00001b00          DCB      0x00,0x00,0x1b,0x00
00038c  1128              DCW      0x1128
00038e  2d00              DCB      0x2d,0x00
000390  0000              DCW      0x0000
000392  0000              DCB      0x00,0x00
000394  1500              DCB      0x15,0x00
000396  1538              DCW      0x1538
000398  2d00              DCB      0x2d,0x00
00039a  0000              DCW      0x0000
00039c  00001b00          DCB      0x00,0x00,0x1b,0x00
0003a0  1110              DCW      0x1110
0003a2  2d00              DCB      0x2d,0x00
0003a4  0000              DCW      0x0000
0003a6  0000              DCB      0x00,0x00
0003a8  1500              DCB      0x15,0x00
0003aa  1440              DCW      0x1440
0003ac  2d00              DCB      0x2d,0x00
0003ae  0000              DCW      0x0000
0003b0  00001500          DCB      0x00,0x00,0x15,0x00
0003b4  1430              DCW      0x1430
0003b6  1500              DCB      0x15,0x00
0003b8  1478              DCW      0x1478
0003ba  0000              DCB      0x00,0x00
0003bc  1500              DCB      0x15,0x00
0003be  1420              DCW      0x1420
0003c0  1800              DCB      0x18,0x00
0003c2  0000              DCW      0x0000
0003c4  0b002d00          DCB      0x0b,0x00,0x2d,0x00
0003c8  0000              DCW      0x0000
0003ca  1900              DCB      0x19,0x00
0003cc  0000              DCW      0x0000
0003ce  0000              DCB      0x00,0x00
0003d0  1500              DCB      0x15,0x00
0003d2  1410              DCW      0x1410
0003d4  2d00              DCB      0x2d,0x00
0003d6  0000              DCW      0x0000
0003d8  00001a00          DCB      0x00,0x00,0x1a,0x00
0003dc  1210              DCW      0x1210
0003de  2d00              DCB      0x2d,0x00
0003e0  0000              DCW      0x0000
0003e2  0000              DCB      0x00,0x00
0003e4  1b00              DCB      0x1b,0x00
0003e6  1108              DCW      0x1108
0003e8  2d00              DCB      0x2d,0x00
0003ea  0000              DCW      0x0000
0003ec  00001a00          DCB      0x00,0x00,0x1a,0x00
0003f0  1218              DCW      0x1218
0003f2  2d00              DCB      0x2d,0x00
0003f4  0000              DCW      0x0000
0003f6  0000              DCB      0x00,0x00
0003f8  1500              DCB      0x15,0x00
0003fa  1418              DCW      0x1418
0003fc  1c00              DCB      0x1c,0x00
0003fe  0000              DCW      0x0000
000400  00001500          DCB      0x00,0x00,0x15,0x00
000404  1448              DCW      0x1448
000406  2d00              DCB      0x2d,0x00
000408  0000              DCW      0x0000
00040a  0000              DCB      0x00,0x00
00040c  1500              DCB      0x15,0x00
00040e  1400              DCW      0x1400
000410  2d00              DCB      0x2d,0x00
000412  0000              DCW      0x0000
000414  00001a00          DCB      0x00,0x00,0x1a,0x00
000418  1208              DCW      0x1208
00041a  2d00              DCB      0x2d,0x00
00041c  0000              DCW      0x0000
00041e  0000              DCB      0x00,0x00
000420  1500              DCB      0x15,0x00
000422  1630              DCW      0x1630
000424  2d00              DCB      0x2d,0x00
000426  0000              DCW      0x0000
000428  00001500          DCB      0x00,0x00,0x15,0x00
00042c  1600              DCW      0x1600
00042e  2d00              DCB      0x2d,0x00
000430  0000              DCW      0x0000
000432  0000              DCB      0x00,0x00
000434  1500              DCB      0x15,0x00
000436  1468              DCW      0x1468
000438  2d00              DCB      0x2d,0x00
00043a  0000              DCW      0x0000
00043c  00001500          DCB      0x00,0x00,0x15,0x00
000440  1530              DCW      0x1530
000442  2d00              DCB      0x2d,0x00
000444  0000              DCW      0x0000
000446  0000              DCB      0x00,0x00
000448  1500              DCB      0x15,0x00
00044a  1438              DCW      0x1438
00044c  1e00              DCB      0x1e,0x00
00044e  2800              DCW      0x2800
000450  00001500          DCB      0x00,0x00,0x15,0x00
000454  1408              DCW      0x1408
000456  1600              DCB      0x16,0x00
000458  1300              DCW      0x1300
00045a  0000              DCB      0x00,0x00
00045c  1500              DCB      0x15,0x00
00045e  1518              DCW      0x1518
000460  1f00              DCB      0x1f,0x00
000462  2700              DCW      0x2700
000464  00001500          DCB      0x00,0x00,0x15,0x00
000468  1628              DCW      0x1628
00046a  2000              DCB      0x20,0x00
00046c  2600              DCW      0x2600
00046e  0000              DCB      0x00,0x00
000470  1500              DCB      0x15,0x00
000472  1520              DCW      0x1520
000474  2d00              DCB      0x2d,0x00
000476  0000              DCW      0x0000
000478  00001500          DCB      0x00,0x00,0x15,0x00
00047c  1528              DCW      0x1528
00047e  2d00              DCB      0x2d,0x00
000480  0000              DCW      0x0000
000482  0000              DCB      0x00,0x00
000484  1500              DCB      0x15,0x00
000486  1618              DCW      0x1618
000488  2d00              DCB      0x2d,0x00
00048a  0000              DCW      0x0000
00048c  00001500          DCB      0x00,0x00,0x15,0x00
000490  1620              DCW      0x1620
000492  2d00              DCB      0x2d,0x00
000494  0000              DCW      0x0000
000496  0000              DCB      0x00,0x00
000498  1500              DCB      0x15,0x00
00049a  1508              DCW      0x1508
00049c  2100              DCB      0x21,0x00
00049e  2500              DCW      0x2500
0004a0  00001500          DCB      0x00,0x00,0x15,0x00
0004a4  1510              DCW      0x1510
0004a6  2200              DCB      0x22,0x00
0004a8  2400              DCW      0x2400
0004aa  0000              DCB      0x00,0x00
0004ac  1500              DCB      0x15,0x00
0004ae  1608              DCW      0x1608
0004b0  2300              DCB      0x23,0x00
0004b2  2300              DCW      0x2300
0004b4  00001500          DCB      0x00,0x00,0x15,0x00
0004b8  1610              DCW      0x1610
0004ba  2400              DCB      0x24,0x00
0004bc  2200              DCW      0x2200
0004be  0000              DCB      0x00,0x00
0004c0  1500              DCB      0x15,0x00
0004c2  1428              DCW      0x1428
0004c4  1200              DCB      0x12,0x00
0004c6  1800              DCW      0x1800
0004c8  00001500          DCB      0x00,0x00,0x15,0x00
0004cc  1470              DCW      0x1470
0004ce  1400              DCB      0x14,0x00
0004d0  1900              DCW      0x1900
0004d2  0000              DCB      0x00,0x00
0004d4  1500              DCB      0x15,0x00
0004d6  1500              DCW      0x1500
0004d8  1100              DCB      0x11,0x00
0004da  0000              DCW      0x0000
0004dc  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CGU_ClockSourceFrequency
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x1c9c3800
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\common\\src\\lpc43xx_cgu.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_cgu_c_468ae9cb____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___13_lpc43xx_cgu_c_468ae9cb____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc43xx_cgu_c_468ae9cb____REVSH|
#line 144
|__asm___13_lpc43xx_cgu_c_468ae9cb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
