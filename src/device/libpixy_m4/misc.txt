; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\misc.o --asm_dir=.\ --list_dir=.\ --depend=.\misc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\misc.crf src\misc.cpp]
                          THUMB

                          AREA ||i.adc_get||, CODE, READONLY, ALIGN=2

                  adc_get PROC
;;;62     
;;;63     uint32_t adc_get(uint32_t channel)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4604              MOV      r4,r0
;;;65     	uint32_t res;
;;;66     
;;;67     	ADC_ChannelCmd(LPC_ADC0, channel, ENABLE);
000004  4d10              LDR      r5,|L1.72|
000006  b2e1              UXTB     r1,r4
000008  2201              MOVS     r2,#1
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ADC_ChannelCmd
;;;68     	delayus(500);
000010  f44f70fa          MOV      r0,#0x1f4
000014  f7fffffe          BL       delayus
;;;69     	ADC_StartCmd(LPC_ADC0, ADC_START_NOW);
000018  2101              MOVS     r1,#1
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       ADC_StartCmd
                  |L1.32|
;;;70     	while (!(ADC_ChannelGetStatus(LPC_ADC0, channel, ADC_DATA_DONE)));
000020  b2e1              UXTB     r1,r4
000022  2201              MOVS     r2,#1
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       ADC_ChannelGetStatus
00002a  2800              CMP      r0,#0
00002c  d0f8              BEQ      |L1.32|
;;;71     	res = ADC_ChannelGetData(LPC_ADC0, channel);
00002e  b2e1              UXTB     r1,r4
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       ADC_ChannelGetData
000036  4606              MOV      r6,r0
;;;72     	ADC_ChannelCmd(LPC_ADC0, channel, DISABLE);
000038  b2e1              UXTB     r1,r4
00003a  2200              MOVS     r2,#0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       ADC_ChannelCmd
;;;73     
;;;74     	return res;
000042  4630              MOV      r0,r6
;;;75     }
000044  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x400e3000

                          AREA ||i.button||, CODE, READONLY, ALIGN=2

                  button PROC
;;;44     
;;;45     uint32_t button(void)
000000  b530              PUSH     {r4,r5,lr}
;;;46     {
;;;47     	static uint32_t bPrev = 0;
;;;48     	uint32_t b;
;;;49     
;;;50     	b = LPC_SGPIO->GPIO_INREG & (1<<15);
000002  4c09              LDR      r4,|L2.40|
000004  f8d40210          LDR      r0,[r4,#0x210]
000008  f4004000          AND      r0,r0,#0x8000
;;;51     
;;;52     	// debounce	
;;;53     	if (b!=bPrev)
00000c  4d07              LDR      r5,|L2.44|
00000e  6829              LDR      r1,[r5,#0]  ; bPrev
000010  4288              CMP      r0,r1
000012  d007              BEQ      |L2.36|
;;;54     	{
;;;55     		delayus(2000);
000014  f44f60fa          MOV      r0,#0x7d0
000018  f7fffffe          BL       delayus
;;;56     		b = LPC_SGPIO->GPIO_INREG & (1<<15);
00001c  f8d40210          LDR      r0,[r4,#0x210]
000020  f4004000          AND      r0,r0,#0x8000
                  |L2.36|
;;;57     	}
;;;58     	
;;;59     	bPrev = b;		 
000024  6028              STR      r0,[r5,#0]  ; bPrev
;;;60     	return b;
;;;61     }
000026  bd30              POP      {r4,r5,pc}
;;;62     
                          ENDP

                  |L2.40|
                          DCD      0x40101000
                  |L2.44|
                          DCD      ||.data||

                          AREA ||i.delayms||, CODE, READONLY, ALIGN=1

                  delayms PROC
;;;32     
;;;33     void delayms(uint32_t ms)
000000  b508              PUSH     {r3,lr}
;;;34     {
000002  4602              MOV      r2,r0
;;;35     	uint32_t timer;
;;;36     	
;;;37     	setTimer(&timer);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       setTimer
;;;38     
;;;39     	ms *= 1000;
00000a  f44f707a          MOV      r0,#0x3e8
00000e  4342              MULS     r2,r0,r2
                  |L3.16|
;;;40     	
;;;41     	while(getTimer(timer)<ms);
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       getTimer
000016  4290              CMP      r0,r2
000018  d3fa              BCC      |L3.16|
;;;42     }
00001a  bd08              POP      {r3,pc}
;;;43     
                          ENDP


                          AREA ||i.delayus||, CODE, READONLY, ALIGN=1

                  delayus PROC
;;;22     // can be called before timer is set up
;;;23     void delayus(uint32_t us)
000000  b508              PUSH     {r3,lr}
;;;24     {
000002  4602              MOV      r2,r0
;;;25     	uint32_t timer;
;;;26     	
;;;27     	setTimer(&timer);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       setTimer
                  |L4.10|
;;;28     	
;;;29     	while(getTimer(timer)<us);
00000a  9800              LDR      r0,[sp,#0]
00000c  f7fffffe          BL       getTimer
000010  4290              CMP      r0,r2
000012  d3fa              BCC      |L4.10|
;;;30     }
000014  bd08              POP      {r3,pc}
;;;31     
                          ENDP


                          AREA ||i.getTimer||, CODE, READONLY, ALIGN=2

                  getTimer PROC
;;;81     
;;;82     uint32_t getTimer(uint32_t timer)
000000  4901              LDR      r1,|L5.8|
;;;83     {
;;;84     	uint32_t result; 
;;;85     	result = LPC_TIMER2->TC-timer;	
000002  6889              LDR      r1,[r1,#8]
000004  1a08              SUBS     r0,r1,r0
;;;86     
;;;87     	return result;
;;;88     }
000006  4770              BX       lr
;;;89     
                          ENDP

                  |L5.8|
                          DCD      0x400c3000

                          AREA ||i.getTimerMs||, CODE, READONLY, ALIGN=2

                  getTimerMs PROC
;;;94     
;;;95     uint16_t getTimerMs(uint16_t timer)
000000  4902              LDR      r1,|L6.12|
;;;96     {
;;;97     	uint16_t result, t;
;;;98     	t = (LPC_TIMER2->TC)>>10;
000002  6889              LDR      r1,[r1,#8]
000004  0a89              LSRS     r1,r1,#10
;;;99     	result = t-timer;	
000006  1a08              SUBS     r0,r1,r0
000008  b280              UXTH     r0,r0
;;;100    
;;;101    	return result;
;;;102    }
00000a  4770              BX       lr
;;;103    
                          ENDP

                  |L6.12|
                          DCD      0x400c3000

                          AREA ||i.setTimer||, CODE, READONLY, ALIGN=2

                  setTimer PROC
;;;76     
;;;77     void setTimer(uint32_t *timer)
000000  4901              LDR      r1,|L7.8|
;;;78     {
;;;79     	*timer = LPC_TIMER2->TC;
000002  6889              LDR      r1,[r1,#8]
000004  6001              STR      r1,[r0,#0]
;;;80     }
000006  4770              BX       lr
;;;81     
                          ENDP

                  |L7.8|
                          DCD      0x400c3000

                          AREA ||i.setTimerMs||, CODE, READONLY, ALIGN=2

                  setTimerMs PROC
;;;89     
;;;90     void setTimerMs(uint16_t *timer)
000000  4902              LDR      r1,|L8.12|
;;;91     {
;;;92     	*timer = (LPC_TIMER2->TC)>>10;
000002  6889              LDR      r1,[r1,#8]
000004  0a89              LSRS     r1,r1,#10
000006  8001              STRH     r1,[r0,#0]
;;;93     }
000008  4770              BX       lr
;;;94     
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0x400c3000

                          AREA ||i.showError||, CODE, READONLY, ALIGN=2

                  showError PROC
;;;103    
;;;104    void showError(uint8_t num, uint32_t color, const char *message)
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;105    {
000004  b084              SUB      sp,sp,#0x10
000006  4607              MOV      r7,r0
000008  4690              MOV      r8,r2
;;;106    	int i;
;;;107    
;;;108    	while(1)
00000a  2500              MOVS     r5,#0
;;;109    	{
;;;110    		// flash signal number
;;;111    		for (i=0; i<num; i++)
;;;112    		{
;;;113    			led_set(color);
;;;114    			delayus(150000);
00000c  4e11              LDR      r6,|L9.84|
;;;115    			led_setRGB(0, 0, 0);
;;;116    			delayus(150000);
;;;117    		}
;;;118    		delayus(500000);
00000e  f8df9048          LDR      r9,|L9.88|
000012  e01c              B        |L9.78|
                  |L9.20|
000014  a805              ADD      r0,sp,#0x14           ;113
000016  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
00001a  4630              MOV      r0,r6                 ;114
00001c  f7fffffe          BL       delayus
000020  9503              STR      r5,[sp,#0xc]          ;115
000022  9502              STR      r5,[sp,#8]            ;115
000024  aa01              ADD      r2,sp,#4              ;115
000026  a902              ADD      r1,sp,#8              ;115
000028  a803              ADD      r0,sp,#0xc            ;115
00002a  9501              STR      r5,[sp,#4]            ;115
00002c  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
000030  4630              MOV      r0,r6                 ;116
000032  f7fffffe          BL       delayus
000036  1c64              ADDS     r4,r4,#1              ;111
                  |L9.56|
000038  42bc              CMP      r4,r7                 ;111
00003a  dbeb              BLT      |L9.20|
00003c  4648              MOV      r0,r9
00003e  f7fffffe          BL       delayus
;;;119    		// print message
;;;120    		if (message)
000042  f1b80f00          CMP      r8,#0
000046  d002              BEQ      |L9.78|
;;;121    			lpc_printf(message);
000048  4640              MOV      r0,r8
00004a  f7fffffe          BL       lpc_printf
                  |L9.78|
00004e  2400              MOVS     r4,#0                 ;111
000050  e7f2              B        |L9.56|
;;;122    	}
;;;123     }
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x000249f0
                  |L9.88|
                          DCD      0x0007a120

                          AREA ||.ARM.exidx||, LINKORDER=||i.getTimer||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.getTimer||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i.setTimer||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.setTimer||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i.delayus||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.delayus||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i.delayms||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.delayms||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i.button||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.button||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i.adc_get||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.adc_get||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i.setTimerMs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.setTimerMs||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i.getTimerMs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.getTimerMs||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i.showError||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.showError||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  bPrev
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\misc.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_misc_cpp_delayus___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___8_misc_cpp_delayus___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_misc_cpp_delayus___Z7__REVSHi|
#line 144
|__asm___8_misc_cpp_delayus___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
