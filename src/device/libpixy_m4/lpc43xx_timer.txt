; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\lpc43xx_timer.o --asm_dir=.\ --list_dir=.\ --depend=.\lpc43xx_timer.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\lpc43xx_timer.crf ..\common\src\lpc43xx_timer.c]
                          THUMB

                          AREA ||i.TIM_ClearIntCapturePending||, CODE, READONLY, ALIGN=1

                  TIM_ClearIntCapturePending PROC
;;;246     **********************************************************************/
;;;247    void TIM_ClearIntCapturePending(LPC_TIMERn_Type *TIMx, TIM_INT_TYPE IntFlag)
000000  1d09              ADDS     r1,r1,#4
;;;248    {
;;;249    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;250    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;251    	TIMx->IR = (1<<(4+IntFlag));
000002  2201              MOVS     r2,#1
000004  408a              LSLS     r2,r2,r1
000006  6002              STR      r2,[r0,#0]
;;;252    }
000008  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.TIM_ClearIntPending||, CODE, READONLY, ALIGN=1

                  TIM_ClearIntPending PROC
;;;223     **********************************************************************/
;;;224    void TIM_ClearIntPending(LPC_TIMERn_Type *TIMx, TIM_INT_TYPE IntFlag)
000000  2201              MOVS     r2,#1
;;;225    {
;;;226    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;227    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;228    	TIMx->IR = TIM_IR_CLR(IntFlag);
000002  408a              LSLS     r2,r2,r1
000004  6002              STR      r2,[r0,#0]
;;;229    }
000006  4770              BX       lr
;;;230    
                          ENDP


                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=1

                  TIM_Cmd PROC
;;;388     **********************************************************************/
;;;389    void TIM_Cmd(LPC_TIMERn_Type *TIMx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;390    {
000002  d004              BEQ      |L3.14|
;;;391    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;392    	if (NewState == ENABLE)
;;;393    	{
;;;394    		TIMx->TCR	|=  TIM_ENABLE;
;;;395    	}
;;;396    	else
;;;397    	{
;;;398    		TIMx->TCR &= ~TIM_ENABLE;
000004  6841              LDR      r1,[r0,#4]
000006  f0210101          BIC      r1,r1,#1
00000a  6041              STR      r1,[r0,#4]
;;;399    	}
;;;400    }
00000c  4770              BX       lr
                  |L3.14|
00000e  6841              LDR      r1,[r0,#4]            ;394
000010  f0410101          ORR      r1,r1,#1              ;394
000014  6041              STR      r1,[r0,#4]            ;394
000016  4770              BX       lr
;;;401    
                          ENDP


                          AREA ||i.TIM_ConfigCapture||, CODE, READONLY, ALIGN=1

                  TIM_ConfigCapture PROC
;;;530     **********************************************************************/
;;;531    void TIM_ConfigCapture(LPC_TIMERn_Type *TIMx, TIM_CAPTURECFG_Type *TIM_CaptureConfigStruct)
000000  b510              PUSH     {r4,lr}
;;;532    {
;;;533    
;;;534    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;535    	TIMx->CCR &= ~TIM_CCR_CHANNEL_MASKBIT(TIM_CaptureConfigStruct->CaptureChannel);
000002  6a83              LDR      r3,[r0,#0x28]
000004  780a              LDRB     r2,[r1,#0]
000006  eb020442          ADD      r4,r2,r2,LSL #1
00000a  2207              MOVS     r2,#7
00000c  40a2              LSLS     r2,r2,r4
00000e  4393              BICS     r3,r3,r2
000010  6283              STR      r3,[r0,#0x28]
;;;536    
;;;537    	if (TIM_CaptureConfigStruct->RisingEdge)
000012  784a              LDRB     r2,[r1,#1]
;;;538    		TIMx->CCR |= TIM_CAP_RISING(TIM_CaptureConfigStruct->CaptureChannel);
000014  2301              MOVS     r3,#1
000016  2a00              CMP      r2,#0                 ;537
000018  d007              BEQ      |L4.42|
00001a  6a84              LDR      r4,[r0,#0x28]
00001c  780a              LDRB     r2,[r1,#0]
00001e  eb020242          ADD      r2,r2,r2,LSL #1
000022  fa03f202          LSL      r2,r3,r2
000026  4314              ORRS     r4,r4,r2
000028  6284              STR      r4,[r0,#0x28]
                  |L4.42|
;;;539    
;;;540    	if (TIM_CaptureConfigStruct->FallingEdge)
00002a  788a              LDRB     r2,[r1,#2]
00002c  b142              CBZ      r2,|L4.64|
;;;541    		TIMx->CCR |= TIM_CAP_FALLING(TIM_CaptureConfigStruct->CaptureChannel);
00002e  6a84              LDR      r4,[r0,#0x28]
000030  780a              LDRB     r2,[r1,#0]
000032  eb020242          ADD      r2,r2,r2,LSL #1
000036  1c52              ADDS     r2,r2,#1
000038  fa03f202          LSL      r2,r3,r2
00003c  4314              ORRS     r4,r4,r2
00003e  6284              STR      r4,[r0,#0x28]
                  |L4.64|
;;;542    
;;;543    	if (TIM_CaptureConfigStruct->IntOnCaption)
000040  78ca              LDRB     r2,[r1,#3]
000042  2a00              CMP      r2,#0
000044  d007              BEQ      |L4.86|
;;;544    		TIMx->CCR |= TIM_INT_ON_CAP(TIM_CaptureConfigStruct->CaptureChannel);
000046  6a82              LDR      r2,[r0,#0x28]
000048  7809              LDRB     r1,[r1,#0]
00004a  eb010141          ADD      r1,r1,r1,LSL #1
00004e  1c89              ADDS     r1,r1,#2
000050  408b              LSLS     r3,r3,r1
000052  431a              ORRS     r2,r2,r3
000054  6282              STR      r2,[r0,#0x28]
                  |L4.86|
;;;545    }
000056  bd10              POP      {r4,pc}
;;;546    
                          ENDP


                          AREA ||i.TIM_ConfigMatch||, CODE, READONLY, ALIGN=1

                  TIM_ConfigMatch PROC
;;;442     **********************************************************************/
;;;443    void TIM_ConfigMatch(LPC_TIMERn_Type *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;444    {
;;;445    
;;;446    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;447    	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
;;;448    
;;;449    	switch(TIM_MatchConfigStruct->MatchChannel)
000002  780a              LDRB     r2,[r1,#0]
000004  2a00              CMP      r2,#0
000006  d006              BEQ      |L5.22|
000008  2a01              CMP      r2,#1
00000a  d007              BEQ      |L5.28|
00000c  2a02              CMP      r2,#2
00000e  d008              BEQ      |L5.34|
000010  2a03              CMP      r2,#3
000012  d009              BEQ      |L5.40|
                  |L5.20|
;;;450    	{
;;;451    	case 0:
;;;452    		TIMx->MR[0] = TIM_MatchConfigStruct->MatchValue;
;;;453    		break;
;;;454    	case 1:
;;;455    		TIMx->MR[1] = TIM_MatchConfigStruct->MatchValue;
;;;456    		break;
;;;457    	case 2:
;;;458    		TIMx->MR[2] = TIM_MatchConfigStruct->MatchValue;
;;;459    		break;
;;;460    	case 3:
;;;461    		TIMx->MR[3] = TIM_MatchConfigStruct->MatchValue;
;;;462    		break;
;;;463    	default:
;;;464    		//Error match value
;;;465    		//Error loop
;;;466    		while(1);
000014  e7fe              B        |L5.20|
                  |L5.22|
000016  688a              LDR      r2,[r1,#8]            ;452
000018  6182              STR      r2,[r0,#0x18]         ;452
00001a  e007              B        |L5.44|
                  |L5.28|
00001c  688a              LDR      r2,[r1,#8]            ;455
00001e  61c2              STR      r2,[r0,#0x1c]         ;455
000020  e004              B        |L5.44|
                  |L5.34|
000022  688a              LDR      r2,[r1,#8]            ;458
000024  6202              STR      r2,[r0,#0x20]         ;458
000026  e001              B        |L5.44|
                  |L5.40|
000028  688a              LDR      r2,[r1,#8]            ;461
00002a  6242              STR      r2,[r0,#0x24]         ;461
                  |L5.44|
;;;467    	}
;;;468    	//interrupt on MRn
;;;469    	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
00002c  6943              LDR      r3,[r0,#0x14]
00002e  780a              LDRB     r2,[r1,#0]
000030  eb020442          ADD      r4,r2,r2,LSL #1
000034  2207              MOVS     r2,#7
000036  40a2              LSLS     r2,r2,r4
000038  4393              BICS     r3,r3,r2
00003a  6143              STR      r3,[r0,#0x14]
;;;470    
;;;471    	if (TIM_MatchConfigStruct->IntOnMatch)
00003c  784a              LDRB     r2,[r1,#1]
00003e  2301              MOVS     r3,#1                 ;449
000040  b13a              CBZ      r2,|L5.82|
;;;472    		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
000042  6944              LDR      r4,[r0,#0x14]
000044  780a              LDRB     r2,[r1,#0]
000046  eb020242          ADD      r2,r2,r2,LSL #1
00004a  fa03f202          LSL      r2,r3,r2
00004e  4314              ORRS     r4,r4,r2
000050  6144              STR      r4,[r0,#0x14]
                  |L5.82|
;;;473    
;;;474    	//reset on MRn
;;;475    	if (TIM_MatchConfigStruct->ResetOnMatch)
000052  78ca              LDRB     r2,[r1,#3]
000054  b142              CBZ      r2,|L5.104|
;;;476    		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
000056  6944              LDR      r4,[r0,#0x14]
000058  780a              LDRB     r2,[r1,#0]
00005a  eb020242          ADD      r2,r2,r2,LSL #1
00005e  1c52              ADDS     r2,r2,#1
000060  fa03f202          LSL      r2,r3,r2
000064  4314              ORRS     r4,r4,r2
000066  6144              STR      r4,[r0,#0x14]
                  |L5.104|
;;;477    
;;;478    	//stop on MRn
;;;479    	if (TIM_MatchConfigStruct->StopOnMatch)
000068  788a              LDRB     r2,[r1,#2]
00006a  b13a              CBZ      r2,|L5.124|
;;;480    		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
00006c  6944              LDR      r4,[r0,#0x14]
00006e  780a              LDRB     r2,[r1,#0]
000070  eb020242          ADD      r2,r2,r2,LSL #1
000074  1c92              ADDS     r2,r2,#2
000076  4093              LSLS     r3,r3,r2
000078  431c              ORRS     r4,r4,r3
00007a  6144              STR      r4,[r0,#0x14]
                  |L5.124|
;;;481    
;;;482    	// match output type
;;;483    
;;;484    	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
00007c  6bc2              LDR      r2,[r0,#0x3c]
00007e  780c              LDRB     r4,[r1,#0]
000080  2304              MOVS     r3,#4
000082  eb030544          ADD      r5,r3,r4,LSL #1
000086  2403              MOVS     r4,#3
000088  40ac              LSLS     r4,r4,r5
00008a  43a2              BICS     r2,r2,r4
00008c  63c2              STR      r2,[r0,#0x3c]
;;;485    	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
00008e  790a              LDRB     r2,[r1,#4]
000090  7809              LDRB     r1,[r1,#0]
000092  f0020203          AND      r2,r2,#3
000096  eb030141          ADD      r1,r3,r1,LSL #1
00009a  408a              LSLS     r2,r2,r1
00009c  6bc1              LDR      r1,[r0,#0x3c]
00009e  430a              ORRS     r2,r2,r1
0000a0  63c2              STR      r2,[r0,#0x3c]
;;;486    }
0000a2  bd30              POP      {r4,r5,pc}
;;;487    /*********************************************************************//**
                          ENDP


                          AREA ||i.TIM_ConfigStructInit||, CODE, READONLY, ALIGN=1

                  TIM_ConfigStructInit PROC
;;;264     **********************************************************************/
;;;265    void TIM_ConfigStructInit(TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
000000  2800              CMP      r0,#0
;;;266    {
000002  d002              BEQ      |L6.10|
;;;267    	if (TimerCounterMode == TIM_TIMER_MODE )
;;;268    	{
;;;269    		TIM_TIMERCFG_Type * pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
;;;270    		pTimeCfg->PrescaleOption = TIM_PRESCALE_USVAL;
;;;271    		pTimeCfg->PrescaleValue = 1;
;;;272    	}
;;;273    	else
;;;274    	{
;;;275    		TIM_COUNTERCFG_Type * pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
;;;276    		pCounterCfg->CountInputSelect = TIM_COUNTER_INCAP0;
000004  2000              MOVS     r0,#0
000006  7048              STRB     r0,[r1,#1]
;;;277    	}
;;;278    }
000008  4770              BX       lr
                  |L6.10|
00000a  2001              MOVS     r0,#1                 ;270
00000c  7008              STRB     r0,[r1,#0]            ;270
00000e  6048              STR      r0,[r1,#4]            ;271
000010  4770              BX       lr
;;;279    
                          ENDP


                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=1

                  TIM_DeInit PROC
;;;368     **********************************************************************/
;;;369    void TIM_DeInit (LPC_TIMERn_Type *TIMx)
000000  2100              MOVS     r1,#0
;;;370    {
;;;371    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;372    	// Disable timer/counter
;;;373    	TIMx->TCR = 0x00;
000002  6041              STR      r1,[r0,#4]
;;;374    
;;;375    }
000004  4770              BX       lr
;;;376    
                          ENDP


                          AREA ||i.TIM_GetCaptureValue||, CODE, READONLY, ALIGN=1

                  TIM_GetCaptureValue PROC
;;;560     **********************************************************************/
;;;561    uint32_t TIM_GetCaptureValue(LPC_TIMERn_Type *TIMx, TIM_COUNTER_INPUT_OPT CaptureChannel)
000000  2900              CMP      r1,#0
;;;562    {
000002  d007              BEQ      |L8.20|
;;;563    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;564    	CHECK_PARAM(PARAM_TIM_COUNTER_INPUT_OPT(CaptureChannel));
;;;565    
;;;566    	switch(CaptureChannel){
000004  2901              CMP      r1,#1
000006  d007              BEQ      |L8.24|
000008  2902              CMP      r1,#2
00000a  d007              BEQ      |L8.28|
00000c  2903              CMP      r1,#3
00000e  d007              BEQ      |L8.32|
;;;567    		case 0: return TIMx->CR[0];
;;;568    		case 1:	return TIMx->CR[1];
;;;569    		case 2:	return TIMx->CR[2];
;;;570    		case 3:	return TIMx->CR[3];
;;;571    	}
;;;572    	return 0;
000010  2000              MOVS     r0,#0
;;;573    }
000012  4770              BX       lr
                  |L8.20|
000014  6ac0              LDR      r0,[r0,#0x2c]         ;567
000016  4770              BX       lr
                  |L8.24|
000018  6b00              LDR      r0,[r0,#0x30]         ;568
00001a  4770              BX       lr
                  |L8.28|
00001c  6b40              LDR      r0,[r0,#0x34]         ;569
00001e  4770              BX       lr
                  |L8.32|
000020  6b80              LDR      r0,[r0,#0x38]         ;570
000022  4770              BX       lr
;;;574    /*---------------Advanced TIMER functions -----------------------------------------*/
                          ENDP


                          AREA ||i.TIM_GetIntCaptureStatus||, CODE, READONLY, ALIGN=1

                  TIM_GetIntCaptureStatus PROC
;;;197     **********************************************************************/
;;;198    FlagStatus TIM_GetIntCaptureStatus(LPC_TIMERn_Type *TIMx, TIM_INT_TYPE IntFlag)
000000  6800              LDR      r0,[r0,#0]
;;;199    {
;;;200    	uint8_t temp;
;;;201    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;202    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;203    	temp = (TIMx->IR) & (1<<(4+IntFlag));
000002  1d09              ADDS     r1,r1,#4
000004  2201              MOVS     r2,#1
000006  408a              LSLS     r2,r2,r1
000008  b2d1              UXTB     r1,r2
00000a  4008              ANDS     r0,r0,r1
;;;204    	if(temp)
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L9.20|
;;;205    		return SET;
000010  2001              MOVS     r0,#1
;;;206    	return RESET;
;;;207    }
000012  4770              BX       lr
                  |L9.20|
000014  2000              MOVS     r0,#0                 ;206
000016  4770              BX       lr
;;;208    /*********************************************************************//**
                          ENDP


                          AREA ||i.TIM_GetIntStatus||, CODE, READONLY, ALIGN=1

                  TIM_GetIntStatus PROC
;;;167     **********************************************************************/
;;;168    FlagStatus TIM_GetIntStatus(LPC_TIMERn_Type *TIMx, TIM_INT_TYPE IntFlag)
000000  6800              LDR      r0,[r0,#0]
;;;169    {
;;;170    	uint8_t temp;
;;;171    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;172    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;173    	temp = (TIMx->IR)& TIM_IR_CLR(IntFlag);
000002  2201              MOVS     r2,#1
000004  408a              LSLS     r2,r2,r1
000006  b2d1              UXTB     r1,r2
000008  4008              ANDS     r0,r0,r1
;;;174    	if (temp)
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L10.18|
;;;175    		return SET;
00000e  2001              MOVS     r0,#1
;;;176    
;;;177    	return RESET;
;;;178    
;;;179    }
000010  4770              BX       lr
                  |L10.18|
000012  2000              MOVS     r0,#0                 ;177
000014  4770              BX       lr
;;;180    /*********************************************************************//**
                          ENDP


                          AREA ||i.TIM_Init||, CODE, READONLY, ALIGN=2

                  TIM_Init PROC
;;;298     **********************************************************************/
;;;299    void TIM_Init(LPC_TIMERn_Type *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;300    {
000002  4604              MOV      r4,r0
;;;301    	TIM_TIMERCFG_Type *pTimeCfg;
;;;302    	TIM_COUNTERCFG_Type *pCounterCfg;
;;;303    
;;;304    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;305    	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
;;;306    
;;;307    	//set power
;;;308    	if (TIMx== LPC_TIMER0)
000004  481d              LDR      r0,|L11.124|
000006  4284              CMP      r4,r0
000008  d003              BEQ      |L11.18|
;;;309    	{
;;;310    
;;;311    	}
;;;312    	else if (TIMx== LPC_TIMER1)
00000a  481d              LDR      r0,|L11.128|
00000c  4284              CMP      r4,r0
00000e  d000              BEQ      |L11.18|
;;;313    	{
;;;314    
;;;315    	}
;;;316    
;;;317    	else if (TIMx== LPC_TIMER2)
000010  481c              LDR      r0,|L11.132|
                  |L11.18|
;;;318    	{
;;;319    
;;;320    	}
;;;321    	else if (TIMx== LPC_TIMER3)
;;;322    	{
;;;323    
;;;324    	}
;;;325    
;;;326    	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
000012  6aa0              LDR      r0,[r4,#0x28]
000014  f0200003          BIC      r0,r0,#3
000018  62a0              STR      r0,[r4,#0x28]
;;;327    	TIMx->CCR |= TIM_TIMER_MODE;
00001a  6aa0              LDR      r0,[r4,#0x28]
00001c  62a0              STR      r0,[r4,#0x28]
;;;328    
;;;329    	TIMx->TC =0;
00001e  2000              MOVS     r0,#0
000020  60a0              STR      r0,[r4,#8]
;;;330    	TIMx->PC =0;
000022  6120              STR      r0,[r4,#0x10]
;;;331    	TIMx->PR =0;
000024  60e0              STR      r0,[r4,#0xc]
;;;332    	TIMx->TCR = 0;
000026  6060              STR      r0,[r4,#4]
;;;333    	TIMx->TCR |= (1<<1); //Reset Counter
000028  6860              LDR      r0,[r4,#4]
00002a  f0400002          ORR      r0,r0,#2
00002e  6060              STR      r0,[r4,#4]
;;;334    	TIMx->TCR &= ~(1<<1); //release reset
000030  6860              LDR      r0,[r4,#4]
000032  f0200002          BIC      r0,r0,#2
000036  6060              STR      r0,[r4,#4]
;;;335    	if (TimerCounterMode == TIM_TIMER_MODE )
000038  b139              CBZ      r1,|L11.74|
;;;336    	{
;;;337    		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
;;;338    		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
;;;339    		{
;;;340    			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
;;;341    		}
;;;342    		else
;;;343    		{
;;;344    			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
;;;345    		}
;;;346    	}
;;;347    	else
;;;348    	{
;;;349    
;;;350    		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
;;;351    		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
00003a  6aa0              LDR      r0,[r4,#0x28]
00003c  f020000c          BIC      r0,r0,#0xc
000040  62a0              STR      r0,[r4,#0x28]
;;;352    		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
000042  7850              LDRB     r0,[r2,#1]
000044  2801              CMP      r0,#1
000046  d010              BEQ      |L11.106|
000048  e013              B        |L11.114|
                  |L11.74|
00004a  4615              MOV      r5,r2                 ;337
00004c  7828              LDRB     r0,[r5,#0]            ;338
00004e  b140              CBZ      r0,|L11.98|
000050  4620              MOV      r0,r4                 ;344
000052  f7fffffe          BL       converPtrToTimeNum
000056  6869              LDR      r1,[r5,#4]            ;344
000058  f7fffffe          BL       converUSecToVal
00005c  1e40              SUBS     r0,r0,#1              ;344
00005e  60e0              STR      r0,[r4,#0xc]          ;344
000060  e007              B        |L11.114|
                  |L11.98|
000062  6868              LDR      r0,[r5,#4]            ;340
000064  1e40              SUBS     r0,r0,#1              ;340
000066  60e0              STR      r0,[r4,#0xc]          ;340
000068  e003              B        |L11.114|
                  |L11.106|
;;;353    			TIMx->CCR |= _BIT(2);
00006a  6aa0              LDR      r0,[r4,#0x28]
00006c  f0400004          ORR      r0,r0,#4
000070  62a0              STR      r0,[r4,#0x28]
                  |L11.114|
;;;354    	}
;;;355    
;;;356    	// Clear interrupt pending
;;;357    	TIMx->IR = 0xFFFFFFFF;
000072  f04f30ff          MOV      r0,#0xffffffff
000076  6020              STR      r0,[r4,#0]
;;;358    }
000078  bd70              POP      {r4-r6,pc}
;;;359    
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
                          DCD      0x40084000
                  |L11.128|
                          DCD      0x40085000
                  |L11.132|
                          DCD      0x400c3000

                          AREA ||i.TIM_ResetCounter||, CODE, READONLY, ALIGN=1

                  TIM_ResetCounter PROC
;;;412     **********************************************************************/
;;;413    void TIM_ResetCounter(LPC_TIMERn_Type *TIMx)
000000  6841              LDR      r1,[r0,#4]
;;;414    {
;;;415    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;416    	TIMx->TCR |= TIM_RESET;
000002  f0410102          ORR      r1,r1,#2
000006  6041              STR      r1,[r0,#4]
;;;417    	TIMx->TCR &= ~TIM_RESET;
000008  6841              LDR      r1,[r0,#4]
00000a  f0210102          BIC      r1,r1,#2
00000e  6041              STR      r1,[r0,#4]
;;;418    }
000010  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.TIM_UpdateMatchValue||, CODE, READONLY, ALIGN=1

                  TIM_UpdateMatchValue PROC
;;;497     **********************************************************************/
;;;498    void TIM_UpdateMatchValue(LPC_TIMERn_Type *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
000000  2900              CMP      r1,#0
;;;499    {
000002  d006              BEQ      |L13.18|
;;;500    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;501    	switch(MatchChannel)
000004  2901              CMP      r1,#1
000006  d006              BEQ      |L13.22|
000008  2902              CMP      r1,#2
00000a  d006              BEQ      |L13.26|
00000c  2903              CMP      r1,#3
00000e  d006              BEQ      |L13.30|
                  |L13.16|
;;;502    	{
;;;503    	case 0:
;;;504    		TIMx->MR[0] = MatchValue;
;;;505    		break;
;;;506    	case 1:
;;;507    		TIMx->MR[1] = MatchValue;
;;;508    		break;
;;;509    	case 2:
;;;510    		TIMx->MR[2] = MatchValue;
;;;511    		break;
;;;512    	case 3:
;;;513    		TIMx->MR[3] = MatchValue;
;;;514    		break;
;;;515    	default:
;;;516    		//Error Loop
;;;517    		while(1);
000010  e7fe              B        |L13.16|
                  |L13.18|
000012  6182              STR      r2,[r0,#0x18]         ;504
;;;518    	}
;;;519    
;;;520    }
000014  4770              BX       lr
                  |L13.22|
000016  61c2              STR      r2,[r0,#0x1c]         ;507
000018  4770              BX       lr
                  |L13.26|
00001a  6202              STR      r2,[r0,#0x20]         ;510
00001c  4770              BX       lr
                  |L13.30|
00001e  6242              STR      r2,[r0,#0x24]         ;513
000020  4770              BX       lr
;;;521    /*********************************************************************//**
                          ENDP


                          AREA ||i.TIM_Waitms||, CODE, READONLY, ALIGN=1

                  TIM_Waitms PROC
;;;602     **********************************************************************/
;;;603    void TIM_Waitms(uint32_t time)
000000  f44f717a          MOV      r1,#0x3e8
;;;604    {
;;;605    	TIM_Waitus(time * 1000);
000004  4348              MULS     r0,r1,r0
000006  f7ffbffe          B.W      TIM_Waitus
;;;606    }
;;;607    /**
                          ENDP


                          AREA ||i.TIM_Waitus||, CODE, READONLY, ALIGN=2

                  TIM_Waitus PROC
;;;579     **********************************************************************/
;;;580    void TIM_Waitus(uint32_t time)
000000  b51e              PUSH     {r1-r4,lr}
;;;581    {
;;;582    	TIM_MATCHCFG_Type MatchConfigStruct;
;;;583    	LPC_TIMER0->IR = 0xFFFFFFFF;
000002  4c10              LDR      r4,|L15.68|
000004  f04f31ff          MOV      r1,#0xffffffff
000008  6021              STR      r1,[r4,#0]
;;;584    
;;;585    	MatchConfigStruct.MatchChannel = 0;
00000a  2200              MOVS     r2,#0
00000c  f88d2000          STRB     r2,[sp,#0]
;;;586    	MatchConfigStruct.IntOnMatch = ENABLE;
000010  2101              MOVS     r1,#1
000012  f88d1001          STRB     r1,[sp,#1]
;;;587    	MatchConfigStruct.ResetOnMatch = ENABLE;
000016  f88d1003          STRB     r1,[sp,#3]
;;;588    	MatchConfigStruct.StopOnMatch = ENABLE;
00001a  f88d1002          STRB     r1,[sp,#2]
;;;589    	MatchConfigStruct.ExtMatchOutputType = 0;
00001e  f88d2004          STRB     r2,[sp,#4]
;;;590    	MatchConfigStruct.MatchValue = time;
000022  9002              STR      r0,[sp,#8]
;;;591    
;;;592    	TIM_ConfigMatch(LPC_TIMER0, &MatchConfigStruct);
000024  4669              MOV      r1,sp
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       TIM_ConfigMatch
;;;593    	TIM_Cmd(LPC_TIMER0,ENABLE);
00002c  2101              MOVS     r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       TIM_Cmd
000034  4620              MOV      r0,r4                 ;583
                  |L15.54|
;;;594    	//wait until interrupt flag occur
;;;595    	while(!(LPC_TIMER0->IR & 0x01));
000036  6801              LDR      r1,[r0,#0]
000038  07c9              LSLS     r1,r1,#31
00003a  d0fc              BEQ      |L15.54|
;;;596    	TIM_ResetCounter(LPC_TIMER0);
00003c  f7fffffe          BL       TIM_ResetCounter
;;;597    }
000040  bd1e              POP      {r1-r4,pc}
;;;598    /*********************************************************************//**
                          ENDP

000042  0000              DCW      0x0000
                  |L15.68|
                          DCD      0x40084000

                          AREA ||i.converPtrToTimeNum||, CODE, READONLY, ALIGN=2

                  converPtrToTimeNum PROC
;;;117     **********************************************************************/
;;;118    uint32_t converPtrToTimeNum (LPC_TIMERn_Type *TIMx)
000000  4601              MOV      r1,r0
;;;119    {
;;;120    	uint32_t tnum = 0xFFFFFFFF;
000002  f04f30ff          MOV      r0,#0xffffffff
;;;121    
;;;122    	if (TIMx == LPC_TIMER0)
000006  4a0a              LDR      r2,|L16.48|
000008  4291              CMP      r1,r2
00000a  d101              BNE      |L16.16|
;;;123    	{
;;;124    		tnum = 0;
00000c  2000              MOVS     r0,#0
;;;125    	}
;;;126    	else if (TIMx == LPC_TIMER1)
;;;127    	{
;;;128    		tnum = 1;
;;;129    	}
;;;130    	else if (TIMx == LPC_TIMER2)
;;;131    	{
;;;132    		tnum = 2;
;;;133    	}
;;;134    	else if (TIMx == LPC_TIMER3)
;;;135    	{
;;;136    		tnum = 3;
;;;137    	}
;;;138    
;;;139    	return tnum;
;;;140    }
00000e  4770              BX       lr
                  |L16.16|
000010  4a08              LDR      r2,|L16.52|
000012  4291              CMP      r1,r2                 ;126
000014  d101              BNE      |L16.26|
000016  2001              MOVS     r0,#1                 ;128
000018  4770              BX       lr
                  |L16.26|
00001a  4a07              LDR      r2,|L16.56|
00001c  4291              CMP      r1,r2                 ;130
00001e  d101              BNE      |L16.36|
000020  2002              MOVS     r0,#2                 ;132
                  |L16.34|
000022  4770              BX       lr
                  |L16.36|
000024  4a05              LDR      r2,|L16.60|
000026  4291              CMP      r1,r2                 ;134
000028  d1fb              BNE      |L16.34|
00002a  2003              MOVS     r0,#3                 ;136
00002c  4770              BX       lr
;;;141    
                          ENDP

00002e  0000              DCW      0x0000
                  |L16.48|
                          DCD      0x40084000
                  |L16.52|
                          DCD      0x40085000
                  |L16.56|
                          DCD      0x400c3000
                  |L16.60|
                          DCD      0x400c4000

                          AREA ||i.converUSecToVal||, CODE, READONLY, ALIGN=2

                  converUSecToVal PROC
;;;96      **********************************************************************/
;;;97     uint32_t converUSecToVal (uint32_t timernum, uint32_t usec)
000000  b570              PUSH     {r4-r6,lr}
;;;98     {
000002  460c              MOV      r4,r1
;;;99     	uint64_t clkdlycnt;
;;;100    
;;;101    	// Get Pclock of timer
;;;102    	clkdlycnt = (uint64_t) getPClock(timernum);
000004  f7fffffe          BL       getPClock
000008  2500              MOVS     r5,#0
00000a  4602              MOV      r2,r0
00000c  462b              MOV      r3,r5
;;;103    
;;;104    	clkdlycnt = (clkdlycnt * usec) / 1000000;
00000e  fba20104          UMULL    r0,r1,r2,r4
000012  fb031104          MLA      r1,r3,r4,r1
000016  fb021105          MLA      r1,r2,r5,r1
00001a  4a03              LDR      r2,|L17.40|
00001c  2300              MOVS     r3,#0
00001e  f7fffffe          BL       __aeabi_uldivmod
000022  4602              MOV      r2,r0
;;;105    	return (uint32_t) clkdlycnt;
000024  4610              MOV      r0,r2
;;;106    }
000026  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP

                  |L17.40|
                          DCD      0x000f4240

                          AREA ||i.getPClock||, CODE, READONLY, ALIGN=1

                  getPClock PROC
;;;65     extern uint32_t M3Frequency;
;;;66     static uint32_t getPClock (uint32_t timernum)
000000  0001              MOVS     r1,r0
;;;67     {
000002  d008              BEQ      |L18.22|
;;;68     	uint32_t clkdlycnt;
;;;69     	switch (timernum)
000004  2901              CMP      r1,#1
000006  d009              BEQ      |L18.28|
000008  2902              CMP      r1,#2
00000a  d00a              BEQ      |L18.34|
00000c  2903              CMP      r1,#3
00000e  d10b              BNE      |L18.40|
;;;70     	{
;;;71     	case 0:
;;;72     		clkdlycnt = /*CGU_GetPCLK (CGU_PCLKSEL_TIMER0)*/ CGU_GetPCLKFrequency(CGU_PERIPHERAL_TIMER0);
;;;73     		break;
;;;74     
;;;75     	case 1:
;;;76     		clkdlycnt = /*CGU_GetPCLK (CGU_PCLKSEL_TIMER1)*/ CGU_GetPCLKFrequency(CGU_PERIPHERAL_TIMER1);
;;;77     		break;
;;;78     
;;;79     	case 2:
;;;80     		clkdlycnt = /*CGU_GetPCLK (CGU_PCLKSEL_TIMER2)*/ CGU_GetPCLKFrequency(CGU_PERIPHERAL_TIMER2);
;;;81     		break;
;;;82     
;;;83     	case 3:
;;;84     		clkdlycnt = /*CGU_GetPCLK (CGU_PCLKSEL_TIMER3)*/ CGU_GetPCLKFrequency(CGU_PERIPHERAL_TIMER3);
000010  201f              MOVS     r0,#0x1f
000012  f7ffbffe          B.W      CGU_GetPCLKFrequency
                  |L18.22|
000016  201c              MOVS     r0,#0x1c              ;72
000018  f7ffbffe          B.W      CGU_GetPCLKFrequency
                  |L18.28|
00001c  201d              MOVS     r0,#0x1d              ;76
00001e  f7ffbffe          B.W      CGU_GetPCLKFrequency
                  |L18.34|
000022  201e              MOVS     r0,#0x1e              ;80
000024  f7ffbffe          B.W      CGU_GetPCLKFrequency
                  |L18.40|
;;;85     		break;
;;;86     	}
;;;87     	return clkdlycnt;
;;;88     }
000028  4770              BX       lr
;;;89     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\common\\src\\lpc43xx_timer.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc43xx_timer_c_6c20b5c9____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___15_lpc43xx_timer_c_6c20b5c9____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc43xx_timer_c_6c20b5c9____REVSH|
#line 144
|__asm___15_lpc43xx_timer_c_6c20b5c9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
