L 1 "..\..\common\src\chirp.cpp"
N//
N// begin license header
N//
N// This file is part of Pixy CMUcam5 or "Pixy" for short
N//
N// All Pixy source code is provided under the terms of the
N// GNU General Public License v2 (http://www.gnu.org/licenses/gpl-2.0.html).
N// Those wishing to use Pixy source code, software and/or
N// technologies under different licensing terms should contact us at
N// cmucam@cs.cmu.edu. Such licensing terms are available for
N// all portions of the Pixy codebase presented here.
N//
N// end license header
N//
N
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N        namespace std {
N        #define __CLIBNS std::
N        extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 1L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Nextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) const void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
Nextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Nextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
N    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Sextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Nextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) const char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
Nextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Nextern "C++" inline char *strchr(char * __s, int __c)
N    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Sextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Nextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) const char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
Nextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Nextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
N    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Sextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Nextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) const char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
Nextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Nextern "C++" inline char *strrchr(char * __s, int __c)
N    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Sextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Nextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) const char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
Nextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Nextern "C++" inline char *strstr(char * __s1, const char * __s2)
N    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Sextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STRING_NO_EXPORTS
N      using ::std::size_t;
N      using ::std::memcpy;
N      using ::std::memmove;
N      using ::std::strcpy;
N      using ::std::strncpy;
N      using ::std::strcat;
N      using ::std::strncat;
N      using ::std::memcmp;
N      using ::std::strcmp;
N      using ::std::strncmp;
N      using ::std::strcasecmp;
N      using ::std::strncasecmp;
N      using ::std::strcoll;
N      using ::std::strxfrm;
N      using ::std::memchr;
N      using ::std::strchr;
N      using ::std::strcspn;
N      using ::std::strpbrk;
N      using ::std::strrchr;
N      using ::std::strspn;
N      using ::std::strstr;
N      using ::std::strtok;
N#ifndef __STRICT_ANSI__
N      using ::std::strtok_r;
N#endif
N      using ::std::_strtok_r;
N      using ::std::memset;
N      using ::std::strerror;
N      using ::std::strlen;
N      using ::std::strlcpy;
N      using ::std::strlcat;
N      using ::std::_membitcpybl;
N      using ::std::_membitcpybb;
N      using ::std::_membitcpyhl;
N      using ::std::_membitcpyhb;
N      using ::std::_membitcpywl;
N      using ::std::_membitcpywb;
N      using ::std::_membitmovebl;
N      using ::std::_membitmovebb;
N      using ::std::_membitmovehl;
N      using ::std::_membitmovehb;
N      using ::std::_membitmovewl;
N      using ::std::_membitmovewb;
N    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 17 "..\..\common\src\chirp.cpp" 2
N#include <new>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\new" 1
N/*
N * C++ Library file new
N * Copyright 1993-2001 ARM Limited. All rights reserved.
N */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author$
N */
N
N/* Edison Design Group, 1992-2013. */
N/*
Nnew -- Include file for C++ default operator new (see ARM 12.5).
N*/
N
N#ifndef __NEW_STDH
N#define __NEW_STDH
N#ifndef __STDDEF_H
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
N        namespace std {
N        #define __CLIBNS ::std::
N        extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 1L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
S  #if !defined(__STRICT_ANSI__)
S  /* unconditional in non-strict C for consistency of debug info */
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
S  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 201112L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
N    #ifndef __STDDEF_NO_EXPORTS
N      using ::std::size_t;
N      using ::std::ptrdiff_t;
N      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X      #if !0L || (1L && 201103L <= 199711L)
N        using ::std::max_align_t;
N      #endif
N    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 21 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\new" 2
N#endif  /* ifndef __STDDEF_H */
N#ifndef __NEW
N#define __NEW
N#define __ARMCLIB_VERSION 5060044
N
N#ifndef __EXCEPTION_INCLUDED
N#include <exception>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\exception" 1
N/*
N * C++ Library file exception
N * Copyright 2001 ARM Limited. All rights reserved.
N */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author$
N */
N
N#ifndef __EXCEPTION_INCLUDED
N#define __EXCEPTION_INCLUDED
N#define __ARMCLIB_VERSION 5060044
N
N/* Edison Design Group, 1995-2005. */
N/*
Nexception -- Include file for exception handling (see 18.6)
N*/
N
Nnamespace std {
N
N/* This lets users disable the EDG supplied exception classes. */
N#ifndef __NO_EDG_EXCEPTION_CLASSES
N
N  class exception {
N  public:
N    exception() throw();
N    exception(const exception&) throw();
N    exception& operator=(const exception&) throw();
N    virtual ~exception() throw();
N    virtual const char* what() const throw();
N  };
N
N  class bad_exception : public exception {
N  public:
N    bad_exception() throw();
N    bad_exception(const bad_exception&) throw();
N    bad_exception& operator=(const bad_exception&) throw();
N    virtual ~bad_exception() throw();
N    virtual const char* what() const throw();
N  };
N
N#endif /* ifndef __NO_EDG_EXCEPTION_CLASSES */
N
N  typedef void (*terminate_handler)();
N  extern terminate_handler set_terminate(terminate_handler) throw();
N
N  typedef void (*unexpected_handler)();
N  extern unexpected_handler set_unexpected(unexpected_handler) throw();
N
N  void terminate();
N  void unexpected();
N
N  extern bool uncaught_exception() throw();
N
N}  /* namespace std */
N
N#ifdef __EDG_IMPLICIT_USING_STD
S/* Implicitly include a using directive for the STD namespace when this
S   preprocessing flag is TRUE. */
Susing namespace ::std;
N#endif /* ifdef __EDG_IMPLICIT_USING_STD */
N
N#endif /* __EXCEPTION_INCLUDED */
N
L 28 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\new" 2
N#endif /* __EXCEPTION_INCLUDED */
N
N#if defined(__EDG_RUNTIME_USES_NAMESPACES) || __clang__
X#if 1L || __clang__
Nnamespace std {
N#endif /* if defined(__EDG_RUNTIME_USES_NAMESPACES) || __clang__ */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef unsigned long size_t;   /* see <stddef.h> */
N#else
N  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N/* This lets users disable the EDG supplied exception classes. */
N#ifndef __NO_EDG_EXCEPTION_CLASSES
N
N  class bad_alloc : public exception {
N  public:
N    bad_alloc() throw();
N    bad_alloc(const bad_alloc&) throw();
N    bad_alloc& operator=(const bad_alloc&) throw();
N    virtual ~bad_alloc() throw();
N    virtual const char* what() const throw();
N  };
N
N  class bad_array_new_length : public bad_alloc {
N  public:
N    bad_array_new_length() throw();
N    virtual ~bad_array_new_length() throw();
N  };
N
N#endif /* ifndef __NO_EDG_EXCEPTION_CLASSES */
N
N  typedef void (*new_handler)();
N  new_handler set_new_handler(new_handler) throw();
N  struct nothrow_t { };
N  // Declaration of object nothrow to permit the use of the placement new
N  // syntax: new (nothrow) T;
N  extern const nothrow_t nothrow;
N
N#if defined(__EDG_RUNTIME_USES_NAMESPACES) || __clang__
X#if 1L || __clang__
N}  /* namespace std */
N#endif /* __EDG_RUNTIME_USES_NAMESPACES || __clang__ */
N
N#ifdef __EDG_IMPLICIT_USING_STD
S/* Implicitly include a using directive for the STD namespace when this
S   preprocessing flag is TRUE. */
Susing namespace ::std;
N#endif /* ifdef __EDG_IMPLICIT_USING_STD */
N
N/* Normal operator new. */
Nvoid *operator new(std::size_t) throw(std::bad_alloc);
N
N/* Normal operator delete. */
Nvoid operator delete(void*) throw ();
N
N/* Nothrow version of operator new. */
Nvoid *operator new(std::size_t, const std::nothrow_t&) throw();
N
N/* Nothrow version of operator delete. */
Nvoid operator delete(void*, const std::nothrow_t&) throw();
N
N/* Placement new. */
Ninline void *operator new(std::size_t, void* __ptr) throw() { return __ptr; }
N
N/* Placement delete. */
Ninline void operator delete(void*, void*) throw() { /* nothing */ }
N
N
N/* Array new. */
Nvoid *operator new[](std::size_t) throw(std::bad_alloc);
N
N/* Array delete. */
Nvoid operator delete[](void*) throw ();
N
N/* Placement array new. */
Ninline void *operator new[](std::size_t, void* __ptr) throw() { return __ptr; }
N
N/* Placement array delete. */
Ninline void operator delete[](void*, void*) throw() { /* nothing */ }
N
N/* Nothrow version of array new. */
Nvoid *operator new[](std::size_t,
N                     const std::nothrow_t&) throw();
N
N/* Nothrow version of array delete. */
Nvoid operator delete[](void*,
N                       const std::nothrow_t&) throw();
N
N#endif /*__NEW */
N/* End of new */
N
N#endif /*__NEW_STDH */
L 18 "..\..\common\src\chirp.cpp" 2
N#include "chirp.hpp"
L 1 "..\..\common\inc\chirp.hpp" 1
N#ifndef CHIRP_HPP
N#define CHIRP_HPP
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.2.1 */
S
S    /* minimum values of exact-width signed integer types */
S#define INT8_MIN                   -128
S#define INT16_MIN                -32768
S#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
S#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
S
S    /* maximum values of exact-width signed integer types */
S#define INT8_MAX                    127
S#define INT16_MAX                 32767
S#define INT32_MAX            2147483647
S#define INT64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of exact-width unsigned integer types */
S#define UINT8_MAX                   255
S#define UINT16_MAX                65535
S#define UINT32_MAX           4294967295u
S#define UINT64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.2 */
S
S    /* minimum values of minimum-width signed integer types */
S#define INT_LEAST8_MIN                   -128
S#define INT_LEAST16_MIN                -32768
S#define INT_LEAST32_MIN          (~0x7fffffff)
S#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of minimum-width signed integer types */
S#define INT_LEAST8_MAX                    127
S#define INT_LEAST16_MAX                 32767
S#define INT_LEAST32_MAX            2147483647
S#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of minimum-width unsigned integer types */
S#define UINT_LEAST8_MAX                   255
S#define UINT_LEAST16_MAX                65535
S#define UINT_LEAST32_MAX           4294967295u
S#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.3 */
S
S    /* minimum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MIN           (~0x7fffffff)
S#define INT_FAST16_MIN          (~0x7fffffff)
S#define INT_FAST32_MIN          (~0x7fffffff)
S#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
S
S    /* maximum values of fastest minimum-width signed integer types */
S#define INT_FAST8_MAX             2147483647
S#define INT_FAST16_MAX            2147483647
S#define INT_FAST32_MAX            2147483647
S#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
S
S    /* maximum values of fastest minimum-width unsigned integer types */
S#define UINT_FAST8_MAX            4294967295u
S#define UINT_FAST16_MAX           4294967295u
S#define UINT_FAST32_MAX           4294967295u
S#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
S
S    /* 7.18.2.4 */
S
S    /* minimum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MIN INT64_MIN
S#else
S#define INTPTR_MIN INT32_MIN
S#endif
S
S    /* maximum value of pointer-holding signed integer type */
S#if __sizeof_ptr == 8
S#define INTPTR_MAX INT64_MAX
S#else
S#define INTPTR_MAX INT32_MAX
S#endif
S
S    /* maximum value of pointer-holding unsigned integer type */
S#if __sizeof_ptr == 8
S#define UINTPTR_MAX UINT64_MAX
S#else
S#define UINTPTR_MAX UINT32_MAX
S#endif
S
S    /* 7.18.2.5 */
S
S    /* minimum value of greatest-width signed integer type */
S#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
S
S    /* maximum value of greatest-width signed integer type */
S#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
S
S    /* maximum value of greatest-width unsigned integer type */
S#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
S
S    /* 7.18.3 */
S
S    /* limits of ptrdiff_t */
S#if __sizeof_ptr == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
S#else
S#define PTRDIFF_MIN INT32_MIN
S#define PTRDIFF_MAX INT32_MAX
S#endif
S
S    /* limits of sig_atomic_t */
S#define SIG_ATOMIC_MIN (~0x7fffffff)
S#define SIG_ATOMIC_MAX   2147483647
S
S    /* limit of size_t */
S#if __sizeof_ptr == 8
S#define SIZE_MAX UINT64_MAX
S#else
S#define SIZE_MAX UINT32_MAX
S#endif
S
S    /* limits of wchar_t */
S    /* NB we have to undef and redef because they're defined in both
S     * stdint.h and wchar.h */
S#undef WCHAR_MIN
S#undef WCHAR_MAX
S
S#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
S#else
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   65535
S#endif
S
S    /* limits of wint_t */
S#define WINT_MIN (~0x7fffffff)
S#define WINT_MAX 2147483647
S
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !1L || 0L
S
S    /* 7.18.4.1 macros for minimum-width integer constants */
S#define INT8_C(x)   (x)
S#define INT16_C(x)  (x)
S#define INT32_C(x)  (x)
S#define INT64_C(x)  __INT64_C(x)
S
S#define UINT8_C(x)  (x ## u)
S#define UINT16_C(x) (x ## u)
S#define UINT32_C(x) (x ## u)
S#define UINT64_C(x) __UINT64_C(x)
S
S    /* 7.18.4.2 macros for greatest-width integer constants */
S#define INTMAX_C(x)  __ESCAPE__(x ## ll)
S#define UINTMAX_C(x) __ESCAPE__(x ## ull)
S
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDINT_NO_EXPORTS
N      using ::std::int8_t;
N      using ::std::int16_t;
N      using ::std::int32_t;
N      using ::std::int64_t;
N      using ::std::uint8_t;
N      using ::std::uint16_t;
N      using ::std::uint32_t;
N      using ::std::uint64_t;
N      using ::std::int_least8_t;
N      using ::std::int_least16_t;
N      using ::std::int_least32_t;
N      using ::std::int_least64_t;
N      using ::std::uint_least8_t;
N      using ::std::uint_least16_t;
N      using ::std::uint_least32_t;
N      using ::std::uint_least64_t;
N      using ::std::int_fast8_t;
N      using ::std::int_fast16_t;
N      using ::std::int_fast32_t;
N      using ::std::int_fast64_t;
N      using ::std::uint_fast8_t;
N      using ::std::uint_fast16_t;
N      using ::std::uint_fast32_t;
N      using ::std::uint_fast64_t;
N      using ::std::intptr_t;
N      using ::std::uintptr_t;
N      using ::std::intmax_t;
N      using ::std::uintmax_t;
N    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 5 "..\..\common\inc\chirp.hpp" 2
N#include <stdlib.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060044
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS ::std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 1L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
S  #if !defined(__STRICT_ANSI__)
S   /* unconditional in non-strict C for consistency of debug info */
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
S  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
S  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 1L && 1L 
N    /* atexit that takes a ptr to a function with C++ linkage 
N     * but not in GNU mode  
N     */
N    typedef void (* __C_exitfuncptr)();
N    extern "C++"
N    inline int atexit(void (* __func)()) {
N      return atexit((__C_exitfuncptr)__func);
N    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 1L && 1L
N    /* bsearch that takes a ptr to a function with C++ linkage 
N     * but not in GNU mode
N     */
N    typedef int (* __C_compareprocptr)(const void *, const void *);
N    extern "C++"
N    void *bsearch(const void * __key, const void * __base,
N              size_t __nmemb, size_t __size,
N              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N    extern "C++"
N    inline void *bsearch(const void * __key, const void * __base,
N              size_t __nmemb, size_t __size,
N              int (* __compar)(const void *, const void *)) {
N      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
N    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 1L && 1L
N    /* qsort that takes a ptr to a function with C++ linkage 
N     * but not in GNU mode
N     */    
N    extern "C++"
N    void qsort(void * __base, size_t __nmemb, size_t __size,
N               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N    extern "C++"
N    inline void qsort(void * __base, size_t __nmemb, size_t __size,
N                      int (* __compar)(const void *, const void *)) {
N      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
N    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
N   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
X   extern "C++" inline __declspec(__nothrow) __attribute__((const)) long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
N   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
X   extern "C++" inline __declspec(__nothrow) __attribute__((const)) ldiv_t div(long int __numer, long int __denom) {
N       return ldiv(__numer, __denom);
N   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
N   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
X   extern "C++" inline __declspec(__nothrow) __attribute__((const)) long long abs(long long x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
N   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
X   extern "C++" inline __declspec(__nothrow) __attribute__((const)) lldiv_t div(long long __numer, long long __denom) {
N       return lldiv(__numer, __denom);
N   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
N    #ifndef __STDLIB_NO_EXPORTS
N      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X      #if !0L || __USE_C99_STDLIB
N        using ::std::atoll;
N        using ::std::lldiv_t;
N      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
N      using ::std::div_t;
N      using ::std::ldiv_t;
N      using ::std::atof;
N      using ::std::atoi;
N      using ::std::atol;
N      using ::std::strtod;
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
N      using ::std::strtof;
N      using ::std::strtold;
N#endif
N      using ::std::strtol;
N      using ::std::strtoul;
N      using ::std::strtoll;
N      using ::std::strtoull;
N      using ::std::rand;
N      using ::std::srand;
N      using ::std::_rand_state;
N      using ::std::_rand_r;
N      using ::std::_srand_r;
N      using ::std::_ANSI_rand_state;
N      using ::std::_ANSI_rand_r;
N      using ::std::_ANSI_srand_r;
N      using ::std::calloc;
N      using ::std::free;
N      using ::std::malloc;
N      using ::std::realloc;
N#if !defined(__STRICT_ANSI__)
X#if !0L
N      using ::std::posix_memalign;
N#endif
N      using ::std::__heapprt;
N      using ::std::__heapstats;
N      using ::std::__heapvalid;
N      using ::std::abort;
N      using ::std::atexit;
N      using ::std::exit;
N      using ::std::_Exit;
N      using ::std::getenv;
N      using ::std::system;
N      using ::std::bsearch;
N      using ::std::qsort;
N      using ::std::abs;
N      using ::std::div;
N      using ::std::labs;
N      using ::std::ldiv;
N      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X      #if !0L || __USE_C99_STDLIB
N        using ::std::llabs;
N        using ::std::lldiv;
N      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N      using ::std::__sdiv32by16;
N      using ::std::__udiv32by16;
N      using ::std::__sdiv64by32;
N      using ::std::__rt_sdiv32by16;
N      using ::std::__rt_udiv32by16;
N      using ::std::__rt_sdiv64by32;
N#endif
N      using ::std::__fp_status;
N      using ::std::mblen;
N      using ::std::mbtowc;
N      using ::std::wctomb;
N      using ::std::mbstowcs;
N      using ::std::wcstombs;
N      using ::std::__use_realtime_heap;
N      using ::std::__use_realtime_division;
N      using ::std::__use_two_region_memory;
N      using ::std::__use_no_heap;
N      using ::std::__use_no_heap_region;
N      using ::std::__C_library_version_string;
N      using ::std::__C_library_version_number;
N      using ::std::size_t;
N      using ::std::__aeabi_MB_CUR_MAX;
N    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 6 "..\..\common\inc\chirp.hpp" 2
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
N      namespace std {
N          #define __CLIBNS ::std::
N          extern "C" {
N    #else
S      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
N         }  /* extern "C" */
N      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
N    #ifndef __STDARG_NO_EXPORTS
N      using ::std::va_list;
N    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 7 "..\..\common\inc\chirp.hpp" 2
N#include "link.h"
L 1 "..\..\common\inc\link.h" 1
N//
N// begin license header
N//
N// This file is part of Pixy CMUcam5 or "Pixy" for short
N//
N// All Pixy source code is provided under the terms of the
N// GNU General Public License v2 (http://www.gnu.org/licenses/gpl-2.0.html).
N// Those wishing to use Pixy source code, software and/or
N// technologies under different licensing terms should contact us at
N// cmucam@cs.cmu.edu. Such licensing terms are available for
N// all portions of the Pixy codebase presented here.
N//
N// end license header
N//
N#ifndef LINK_H
N#define LINK_H
N
N#include <stdint.h>
N
N// flags
N#define LINK_FLAG_SHARED_MEM                            0x01
N#define	LINK_FLAG_ERROR_CORRECTED                       0x02
N
N// result codes
N#define LINK_RESULT_OK                                  0
N#define LINK_RESULT_ERROR                               -100
N#define LINK_RESULT_ERROR_RECV_TIMEOUT                  -101
N#define LINK_RESULT_ERROR_SEND_TIMEOUT                  -102
N
N// link flag index
N#define LINK_FLAG_INDEX_FLAGS                           0x00
N#define LINK_FLAG_INDEX_SHARED_MEMORY_LOCATION          0x01
N#define LINK_FLAG_INDEX_SHARED_MEMORY_SIZE              0x02
N
N
Nclass Link
N{
Npublic:
N    Link()
N    {
N        m_flags = 0;
N        m_blockSize = 0;
N    }
N    ~Link()
N    {
N    }
N
N    // the timeoutMs is a timeout value in milliseconds.  The timeout timer should expire
N    // when the data channel has been continuously idle for the specified amount of time
N    // not the summation of the idle times.
N    virtual int send(const uint8_t *data, uint32_t len, uint16_t timeoutMs) = 0;
N    virtual int receive(uint8_t *data, uint32_t len, uint16_t timeoutMs) = 0;
N    virtual void setTimer() = 0;
N    virtual uint32_t getTimer() = 0; // returns elapsed time in milliseconds since setTimer() was called
N    virtual uint32_t getFlags(uint8_t index=LINK_FLAG_INDEX_FLAGS)
X    virtual uint32_t getFlags(uint8_t index=0x00)
N    {
N        if (index==LINK_FLAG_INDEX_FLAGS)
X        if (index==0x00)
N            return m_flags;
N        else
N            return 0;
N    }
N    virtual uint32_t blockSize()
N    {
N        return m_blockSize;
N    }
N    virtual int getBuffer(uint8_t **buf, uint32_t *len)
N    {
N        return LINK_RESULT_ERROR;
X        return -100;
N    }
N
Nprotected:
N    uint32_t m_flags;
N    uint32_t m_blockSize;
N};
N
N#endif // LINK_H
L 8 "..\..\common\inc\chirp.hpp" 2
N
N#define ALIGN(v, n)  v = v&((n)-1) ? (v&~((n)-1))+(n) : v
N#define FOURCC(a, b, c, d)  (((uint32_t)a<<0)|((uint32_t)b<<8)|((uint32_t)c<<16)|((uint32_t)d<<24))
N
N#define CRP_RES_OK                      0
N#define CRP_RES_ERROR                   -1
N#define CRP_RES_ERROR_RECV_TIMEOUT      LINK_RESULT_ERROR_RECV_TIMEOUT
N#define CRP_RES_ERROR_SEND_TIMEOUT      LINK_RESULT_ERROR_SEND_TIMEOUT
N#define CRP_RES_ERROR_CRC               -2
N#define CRP_RES_ERROR_PARSE             -3
N#define CRP_RES_ERROR_MAX_NAK           -4
N#define CRP_RES_ERROR_MEMORY            -5
N#define CRP_RES_ERROR_NOT_CONNECTED     -6
N#define CRP_RES_ERROR_INVALID_COMMAND   -7
N
N#define CRP_MAX_NAK                     3
N#define CRP_RETRIES                     3
N#define CRP_HEADER_TIMEOUT    	        1000
N#define CRP_DATA_TIMEOUT                500
N#define CRP_IDLE_TIMEOUT                500
N#define CRP_SEND_TIMEOUT                1000
N#define CRP_MAX_ARGS                    10
N#define CRP_BUFSIZE                     0x80
N#define CRP_BUFPAD                      8
N#define CRP_PROCTABLE_LEN               0x40
N
N#define CRP_START_CODE                  0xaaaa5555
N
N#define CRP_CALL                        0x80
N#define CRP_RESPONSE                    0x40
N#define CRP_INTRINSIC                   0x20
N#define CRP_DATA                        0x10
N#define CRP_XDATA                       0x18 // data not associated with no associated procedure)
N#define CRP_CALL_ENUMERATE              (CRP_CALL | CRP_INTRINSIC | 0x00)
N#define CRP_CALL_INIT                   (CRP_CALL | CRP_INTRINSIC | 0x01)
N#define CRP_CALL_ENUMERATE_INFO         (CRP_CALL | CRP_INTRINSIC | 0x02)
N
N#define CRP_ACK                         0x59
N#define CRP_NACK                        0x95
N#define CRP_MAX_HEADER_LEN              64
N
N#define CRP_ARRAY                       0x80 // bit
N#define CRP_FLT                         0x10 // bit
N#define CRP_NO_COPY                     (0x10 | 0x20)
N#define CRP_HINT                        0x40 // bit
N#define CRP_NULLTERM_ARRAY              (0x20 | CRP_ARRAY) // bits
N#define CRP_INT8                        0x01
N#define CRP_UINT8                       0x01
N#define CRP_INT16                       0x02
N#define CRP_UINT16                      0x02
N#define CRP_INT32                       0x04
N#define CRP_UINT32                      0x04
N#define CRP_FLT32                       (CRP_FLT | 0x04)
N#define CRP_FLT64                       (CRP_FLT | 0x08)
N#define CRP_STRING                      (CRP_NULLTERM_ARRAY | CRP_INT8)
N#define CRP_TYPE_HINT                   0x64 // type hint identifier
N#define CRP_INTS8                       (CRP_INT8 | CRP_ARRAY)
N#define CRP_INTS16                      (CRP_INT16 | CRP_ARRAY)
N#define CRP_INTS32                      (CRP_INT32 | CRP_ARRAY)
N#define CRP_UINTS8                      CRP_INTS8
N#define CRP_UINTS8_NO_COPY              (CRP_INTS8 | CRP_NO_COPY)
N#define CRP_UINTS16_NO_COPY             (CRP_INTS16 | CRP_NO_COPY)
N#define CRP_UINTS32_NO_COPY             (CRP_INTS32 | CRP_NO_COPY)
N#define CRP_UINTS16                     CRP_INTS16
N#define CRP_UINTS32                     CRP_INTS32
N#define CRP_FLTS32                      (CRP_FLT32 | CRP_ARRAY)
N#define CRP_FLTS64                      (CRP_FLT64 | CRP_ARRAY)
N#define CRP_HINT8                       (CRP_INT8 | CRP_HINT)
N#define CRP_HINT16                      (CRP_INT16 | CRP_HINT)
N#define CRP_HINT32                      (CRP_INT32 | CRP_HINT)
N#define CRP_HINTS8                      (CRP_INT8 | CRP_ARRAY | CRP_HINT)
N#define CRP_HINTS16                     (CRP_INT16 | CRP_ARRAY | CRP_HINT)
N#define CRP_HINTS32                     (CRP_INT32 | CRP_ARRAY | CRP_HINT)
N#define CRP_HFLTS32                     (CRP_FLT32 | CRP_ARRAY | CRP_HINT)
N#define CRP_HFLTS64                     (CRP_FLT64 | CRP_ARRAY | CRP_HINT)
N#define CRP_HSTRING                     (CRP_STRING | CRP_HINT)
N// CRP_HTYPE is for arg lists which are uint8_t arrays
N#define CRP_HTYPE(v)                    CRP_TYPE_HINT, (uint8_t)(v>>0&0xff), (uint8_t)(v>>8&0xff), (uint8_t)(v>>16&0xff), (uint8_t)(v>>24&0xff)
N
N// regular call args
N#define INT8(v)                         CRP_INT8, v
N#define UINT8(v)                        CRP_INT8, v
N#define INT16(v)                        CRP_INT16, v
N#define UINT16(v)                       CRP_INT16, v
N#define INT32(v)                        CRP_INT32, v
N#define UINT32(v)                       CRP_INT32, v
N#define FLT32(v)                        CRP_FLT32, v
N#define FLT64(v)                        CRP_FLT64, v
N#define STRING(s)                       CRP_STRING, s
N#define INTS8(len, a)                   CRP_INTS8, len, a
N#define UINTS8(len, a)                  CRP_INTS8, len, a
N#define UINTS8_NO_COPY(len)             CRP_UINTS8_NO_COPY, len
N#define UINTS16_NO_COPY(len)            CRP_UINTS16_NO_COPY, len
N#define UINTS32_NO_COPY(len)            CRP_UINTS32_NO_COPY, len
N#define INTS16(len, a)                  CRP_INTS16, len, a
N#define UINTS16(len, a)                 CRP_INTS16, len, a
N#define INTS32(len, a)                  CRP_INTS32, len, a
N#define UINTS32(len, a)                 CRP_INTS32, len, a
N#define FLTS32(len, a)                  CRP_FLTS32, len, a
N#define FLTS64(len, a)                  CRP_FLTS64, len, a
N
N// hint call args
N#define HINT8(v)                        CRP_HINT8, v
N#define UHINT8(v)                       CRP_HINT8, v
N#define HINT16(v)                       CRP_HINT16, v
N#define UHINT16(v)                      CRP_HINT16, v
N#define HINT32(v)                       CRP_HINT32, v
N#define UHINT32(v)                      CRP_HINT32, v
N#define HFLT32(v)                       CRP_HFLT32, v
N#define HFLT64(v)                       CRP_HFLT64, v
N#define HSTRING(s)                      CRP_HSTRING, s
N#define HINTS8(len, a)                  CRP_HINTS8, len, a
N#define UHINTS8(len, a)                 CRP_HINTS8, len, a
N#define HINTS16(len, a)                 CRP_HINTS16, len, a
N#define UHINTS16(len, a)                CRP_HINTS16, len, a
N#define HINTS32(len, a)                 CRP_HINTS32, len, a
N#define UHINTS32(len, a)                CRP_HINTS32, len, a
N#define HFLTS32(len, a)                 CRP_HFLTS32, len, a
N#define HFLTS64(len, a)                 CRP_HFLTS64, len, a
N#define HTYPE(v)                        CRP_TYPE_HINT, v
N
N#define INT8_IN(v)                      int8_t & v
N#define UINT8_IN(v)                     uint8_t & v
N#define INT16_IN(v)                     int16_t & v
N#define UINT16_IN(v)                    uint16_t & v
N#define INT32_IN(v)                     int32_t & v
N#define UINT32_IN(v)                    uint32_t & v
N#define FLT32_IN(v)                     float & v
N#define FLT64_IN(v)                     double & v
N#define STRING_IN(s)                    const char * s
N#define INTS8_IN(len, a)                uint32_t & len, int8_t * a
N#define UINTS8_IN(len, a)               uint32_t & len, uint8_t * a
N#define INTS16_IN(len, a)               uint32_t & len, int16_t * a
N#define UINTS16_IN(len, a)              uint32_t & len, uint16_t * a
N#define INTS32_IN(len, a)               uint32_t & len, int32_t * a
N#define UINTS32_IN(len, a)              uint32_t & len, uint32_t * a
N#define FLTS32_IN(len, a)               uint32_t & len, float * a
N#define FLTS64_IN(len, a)               uint32_t & len, double * a
N
N#ifndef END
N#define END                             0L
N#endif
N#define END_OUT_ARGS                    END
N#define END_IN_ARGS                     END
N
N// service types
N#define SYNC                            0
N#define ASYNC                           0x01 // bit
N#define RETURN_ARRAY                    0x02 // bit
N#define SYNC_RETURN_ARRAY               (SYNC | RETURN_ARRAY)
N
N#define CRP_RETURN(chirp, ...)          chirp->assemble(0, __VA_ARGS__, END)
N#define CRP_SEND_XDATA(chirp, ...)      chirp->assemble(CRP_XDATA, __VA_ARGS__, END)
N#define callSync(...)                   call(SYNC, __VA_ARGS__, END)
N#define callAsync(...)                  call(ASYNC, __VA_ARGS__, END)
N#define callSyncArray(...)              call(SYNC_RETURN_ARRAY, __VA_ARGS__, END)
N
Nclass Chirp;
N
Ntypedef int16_t ChirpProc; // negative values are invalid
N
Ntypedef uint32_t (*ProcPtr)(Chirp *);
N
Nstruct ProcModule
N{
N    char *procName;
N    ProcPtr procPtr;
N    uint8_t argTypes[CRP_MAX_ARGS];
X    uint8_t argTypes[10];
N    char *procInfo;
N};
N
Nstruct ProcTableExtension
N{
N    uint8_t argTypes[CRP_MAX_ARGS];
X    uint8_t argTypes[10];
N    char *procInfo;
N};
N
Nstruct ProcInfo
N{
N    char *procName;
N    uint8_t *argTypes;
N    char *procInfo;
N};
N
Nstruct ProcTableEntry
N{
N    const char *procName;
N    ProcPtr procPtr;
N    ChirpProc chirpProc;
N    const ProcTableExtension *extension;
N};
N
Nclass Chirp
N{
Npublic:
N    Chirp(bool hinterested=false, bool client=false, Link *link=NULL);
X    Chirp(bool hinterested=false, bool client=false, Link *link=0);
N    virtual ~Chirp();
N
N    virtual int init(bool connect);
N    int setLink(Link *link);
N    ChirpProc getProc(const char *procName, ProcPtr callback=0);
N    int setProc(const char *procName, ProcPtr proc,  ProcTableExtension *extension=NULL);
X    int setProc(const char *procName, ProcPtr proc,  ProcTableExtension *extension=0);
N    int getProcInfo(ChirpProc proc, ProcInfo *info);
N    int registerModule(const ProcModule *module);
N    void setSendTimeout(uint32_t timeout);
N    void setRecvTimeout(uint32_t timeout);
N
N    int call(uint8_t service, ChirpProc proc, ...);
N    int call(uint8_t service, ChirpProc proc, va_list args);
N    static uint8_t getType(const void *arg);
N    int service(bool all=true);
N    int assemble(uint8_t type, ...);
N    bool connected();
N    bool hinformer();
N
N    // utility methods
N    static int serialize(Chirp *chirp, uint8_t *buf, uint32_t bufSize, ...);
N    static int deserialize(uint8_t *buf, uint32_t len, ...);
N    static int vserialize(Chirp *chirp, uint8_t *buf, uint32_t bufSize, va_list *args);
N    static int vdeserialize(uint8_t *buf, uint32_t len, va_list *args);
N    static int deserializeParse(uint8_t *buf, uint32_t len, void *args[]);
N    static int loadArgs(va_list *args, void *recvArgs[]);
N    static int getArgList(uint8_t *buf, uint32_t len, uint8_t *argList);
N    int useBuffer(uint8_t *buf, uint32_t len);
N
N    static uint16_t calcCrc(uint8_t *buf, uint32_t len);
N
Nprotected:
N    int remoteInit(bool connect);
N    int recvChirp(uint8_t *type, ChirpProc *proc, void *args[], bool wait=false); // null pointer terminates
N    virtual int handleChirp(uint8_t type, ChirpProc proc, const void *args[]); // null pointer terminates
N    virtual void handleXdata(const void *data[]) {}
N    virtual int sendChirp(uint8_t type, ChirpProc proc);
N
N    uint8_t *m_buf;
N    uint8_t *m_bufSave;
N    uint32_t m_len;
N    uint32_t m_offset;
N    uint32_t m_bufSize;
N    bool m_errorCorrected;
N    bool m_sharedMem;
N    bool m_hinformer;
N    bool m_hinterested;
N    bool m_client;
N    uint32_t m_headerLen;
N    uint16_t m_headerTimeout;
N    uint16_t m_dataTimeout;
N    uint16_t m_idleTimeout;
N    uint16_t m_sendTimeout;
N
Nprivate:
N    int sendHeader(uint8_t type, ChirpProc proc);
N    int sendFull(uint8_t type, ChirpProc proc);
N    int sendData();
N    int sendAck(bool ack); // false=nack
N    int sendChirpRetry(uint8_t type, ChirpProc proc);
N    int recvHeader(uint8_t *type, ChirpProc *proc, bool wait);
N    int recvFull(uint8_t *type, ChirpProc *proc, bool wait);
N    int recvData();
N    int recvAck(bool *ack, uint16_t timeout); // false=nack
N    int32_t handleEnumerate(char *procName, ChirpProc *callback);
N    int32_t handleInit(uint16_t *blkSize, uint8_t *hintSource);
N    int32_t handleEnumerateInfo(ChirpProc *proc);
N    int vassemble(va_list *args);
N    void restoreBuffer();
N
N    ChirpProc updateTable(const char *procName, ProcPtr procPtr);
N    ChirpProc lookupTable(const char *procName);
N    int realloc(uint32_t min=0);
N    int reallocTable();
N
N    Link *m_link;
N    ProcTableEntry *m_procTable;
N    uint16_t m_procTableSize;
N    uint16_t m_blkSize;
N    uint8_t m_maxNak;
N    uint8_t m_retries;
N    bool m_call;
N    bool m_connected;
N};
N
N#endif // CHIRP_H
L 19 "..\..\common\src\chirp.cpp" 2
N#include "debuglog.h"
L 1 "..\..\common\inc\debuglog.h" 1
N//
N// begin license header
N//
N// This file is part of Pixy CMUcam5 or "Pixy" for short
N//
N// All Pixy source code is provided under the terms of the
N// GNU General Public License v2 (http://www.gnu.org/licenses/gpl-2.0.html).
N// Those wishing to use Pixy source code, software and/or
N// technologies under different licensing terms should contact us at
N// cmucam@cs.cmu.edu. Such licensing terms are available for
N// all portions of the Pixy codebase presented here.
N//
N// end license header
N//
N#ifndef __DEBUG_H__
N#define __DEBUG_H__
N
N#include <stdarg.h>
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
N      namespace std {
N      #define __CLIBNS ::std::
N        extern "C" {
N    #else /* ndef __cplusplus */
S      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 1L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !1L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (1L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !1L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
N    inline int getchar() { return getc(stdin); }
X    inline int getchar() { return getc((& ::std:: __stdin)); }
N#else
S    #define getchar() getc(stdin)
S    extern _ARMABI int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
N    inline int putchar(int __c) { return putc(__c, stdout); }
X    inline int putchar(int __c) { return putc(__c, (& ::std:: __stdout)); }
N#else
S    #define putchar(c) putc(c, stdout)
S    extern _ARMABI int (putchar)(int /*c*/);
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
N        }  /* extern "C" */
N      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 1L && !0L
N    using ::std::size_t;
N    using ::std::fpos_t;
N    using ::std::FILE;
N    using ::std::remove;
N    using ::std::rename;
N    using ::std::tmpfile;
N    using ::std::tmpnam;
N    using ::std::fclose;
N    using ::std::fflush;
N    using ::std::fopen;
N    using ::std::freopen;
N    using ::std::setbuf;
N    using ::std::setvbuf;
N    using ::std::fprintf;
N    using ::std::_fprintf;
N    using ::std::printf;
N    using ::std::_printf;
N    using ::std::sprintf;
N    using ::std::_sprintf;
N    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if !0L || (0L && 199901L <= __STDC_VERSION__) || (1L && 201103L <= 199711L)
N      using ::std::snprintf;
N      using ::std::vsnprintf;
N      using ::std::vfscanf;
N      using ::std::vscanf;
N      using ::std::vsscanf;
N    #endif
N    using ::std::_snprintf;
N    using ::std::_vsnprintf;
N#if !defined(__STRICT_ANSI__)
X#if !0L
N    using ::std::asprintf;
N    using ::std::vasprintf;
N#endif
N    using ::std::__ARM_asprintf;
N    using ::std::__ARM_vasprintf;
N    using ::std::__ARM_vsnprintf;
N    using ::std::__ARM_snprintf;
N    using ::std::__ARM_vsscanf;
N    using ::std::fscanf;
N    using ::std::_fscanf;
N    using ::std::scanf;
N    using ::std::_scanf;
N    using ::std::sscanf;
N    using ::std::_sscanf;
N    using ::std::_vfscanf;
N    using ::std::_vscanf;
N    using ::std::_vsscanf;
N    using ::std::vprintf;
N    using ::std::_vprintf;
N    using ::std::vfprintf;
N    using ::std::_vfprintf;
N    using ::std::vsprintf;
N    using ::std::_vsprintf;
N    using ::std::fgetc;
N    using ::std::fgets;
N    using ::std::fputc;
N    using ::std::fputs;
N    using ::std::getc;
N    using ::std::getchar;
N    using ::std::gets;
N    using ::std::putc;
N    using ::std::putchar;
N    using ::std::puts;
N    using ::std::ungetc;
N    using ::std::fread;
N    using ::std::__fread_bytes_avail;
N    using ::std::fwrite;
N    using ::std::fgetpos;
N    using ::std::fseek;
N    using ::std::fsetpos;
N    using ::std::ftell;
N    using ::std::rewind;
N    using ::std::clearerr;
N    using ::std::feof;
N    using ::std::ferror;
N    using ::std::perror;
N    using ::std::_fisatty;
N    using ::std::__use_no_semihosting_swi;
N    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 20 "..\..\common\inc\debuglog.h" 2
N
Nstatic void log(const char *format, ...)
N{
N#ifdef DEBUG
S  va_list elements;
S
S  // Send debug message to stdout //
S  va_start(elements, format);
S  vprintf(format, elements);
S  fflush(stdout);
S  va_end(elements);
N#endif 
N}
N
N#endif
L 20 "..\..\common\src\chirp.cpp" 2
N
N
N// todo yield, sleep() while waiting for sync response
N// todo
N
N// assume that destination is aligned on the correct boundary and copy the source byte by byte
Nvoid copyAlign(char *dest, const char *src, int size)
N{
N    int i;
N    for (i=0; i<size; i++)
N        dest[i] = src[i];
N}
N
NChirp::Chirp(bool hinterested, bool client, Link *link)
N{
N  log("pixydebug: Chirp::Chirp()\n");
N    m_link = NULL;
X    m_link = 0;
N    m_errorCorrected = true;
N    m_sharedMem = false;
N    m_buf = NULL;
X    m_buf = 0;
N    m_bufSave = NULL;
X    m_bufSave = 0;
N
N    m_maxNak = CRP_MAX_NAK;
X    m_maxNak = 3;
N    m_retries = CRP_RETRIES;
X    m_retries = 3;
N    m_headerTimeout = CRP_HEADER_TIMEOUT;
X    m_headerTimeout = 1000;
N    m_dataTimeout = CRP_DATA_TIMEOUT;
X    m_dataTimeout = 500;
N    m_idleTimeout = CRP_IDLE_TIMEOUT;
X    m_idleTimeout = 500;
N    m_sendTimeout = CRP_SEND_TIMEOUT;
X    m_sendTimeout = 1000;
N    m_call = false;
N    m_connected = false;
N    m_hinformer = false;
N    m_hinterested = hinterested;
N    m_client = client;
N
N    m_procTableSize = CRP_PROCTABLE_LEN;
X    m_procTableSize = 0x40;
N    m_procTable = new (std::nothrow) ProcTableEntry[m_procTableSize];
N    memset(m_procTable, 0, sizeof(ProcTableEntry)*m_procTableSize);
N
N    m_bufSize = CRP_BUFSIZE;
X    m_bufSize = 0x80;
N    m_buf = new (std::nothrow) uint8_t[m_bufSize];
N
N    if (link)
N        setLink(link);
N  log("pixydebug: Chirp::Chirp() returned\n");
N}
N
NChirp::~Chirp()
N{
N  log("pixydebug: Chirp::~Chirp()\n");
N    // if we're a client, disconnect (let server know)
N    if (m_client)
N        remoteInit(false);
N    if (!m_sharedMem)
N    {
N        restoreBuffer();
N        delete[] m_buf;
N    }
N    delete[] m_procTable;
N  log("pixydebug: Chirp::~Chirp() returned\n");
N}
N
Nint Chirp::init(bool connect)
N{
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::setLink(Link *link)
N{
N  int return_value;
N
N  log("pixydebug: Chirp::setLink()\n");
N    m_link = link;
N    m_errorCorrected = m_link->getFlags()&LINK_FLAG_ERROR_CORRECTED;
X    m_errorCorrected = m_link->getFlags()&0x02;
N    m_sharedMem = m_link->getFlags()&LINK_FLAG_SHARED_MEM;
X    m_sharedMem = m_link->getFlags()&0x01;
N    m_blkSize = m_link->blockSize();
N
N    if (m_errorCorrected)
N        m_headerLen = 12; // startcode (uint32_t), type (uint8_t), (pad), proc (uint16_t), len (uint32_t)
N    else
N        m_headerLen = 8;  // type (uint8_t), (pad), proc (uint16_t), len (uint32_t)
N
N    if (m_sharedMem)
N    {
N		delete [] m_buf;
N        m_buf = (uint8_t *)m_link->getFlags(LINK_FLAG_INDEX_SHARED_MEMORY_LOCATION);
X        m_buf = (uint8_t *)m_link->getFlags(0x01);
N        m_bufSize = m_link->getFlags(LINK_FLAG_INDEX_SHARED_MEMORY_SIZE);
X        m_bufSize = m_link->getFlags(0x02);
N    }
N	
N    // link is set up, need to call init
N    if (m_client) {
N      return_value = remoteInit(true);
N      log("pixydebug:  remoteInit() = %d\n", return_value);
N      log("pixydebug: setLink() returned %d\n", return_value);
N      return return_value;
N    }
N
N    log("pixydebug: setLink() returned %d\n", CRP_RES_OK);
X    log("pixydebug: setLink() returned %d\n", 0);
N    return CRP_RES_OK;
X    return 0;
N}
N
N
Nint Chirp::assemble(uint8_t type, ...)
N{
N    int res;
N    va_list args;
N    bool save = m_call;
N    uint32_t saveLen = m_len;
N
N    if (type==CRP_XDATA)
X    if (type==0x18)
N	{
N		if (!m_hinformer)
N			return CRP_RES_ERROR;  // don't send xdata if no hinformer
X			return -1;  
N        m_call = false;
N	}
N
N    va_start(args, type);
X    __va_start(args, type);
N    res = vassemble(&args);
N    va_end(args);
X    __va_end(args);
N
N    if (type==CRP_XDATA || (!m_call && res==CRP_RES_OK)) // if we're not a call, we're extra data, so we need to send
X    if (type==0x18 || (!m_call && res==0)) 
N    {
N        res = sendChirpRetry(CRP_XDATA, 0);
X        res = sendChirpRetry(0x18, 0);
N        m_len = saveLen;
N    }
N
N    m_call = save;
N
N    return res;
N}
N
Nint Chirp::vassemble(va_list *args)
N{
N    int len;
N
N    len = vserialize(this, m_buf, m_bufSize, args);
N    // check for error
N    if (len<0)
N        return len;
N
N    // set length (don't include header)
N    m_len = len - m_headerLen;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nbool Chirp::connected()
N{
N    return m_connected;
N}
N
Nbool Chirp::hinformer()
N{
N    return m_hinformer;
N}
N
Nint Chirp::useBuffer(uint8_t *buf, uint32_t len)
N{
N    int res;
N
N    if (m_bufSave==NULL)
X    if (m_bufSave==0)
N    {
N        m_bufSave = m_buf;
N        m_buf = buf;
N    }
N    else if (buf!=m_buf)
N        return CRP_RES_ERROR_MEMORY;
X        return -5;
N
N    m_len = len-m_headerLen;
N    if (!m_call) // if we're not a call, we're extra data, so we need to send
N    {
N        res = sendChirpRetry(CRP_XDATA, 0);
X        res = sendChirpRetry(0x18, 0);
N        restoreBuffer(); // restore buffer immediately!
N        if (res!=CRP_RES_OK) // convert call into response
X        if (res!=0) 
N            return res;
N    }
N    return CRP_RES_OK;
X    return 0;
N}
N
Nvoid Chirp::restoreBuffer()
N{
N    if (m_bufSave)
N    {
N        m_buf = m_bufSave;
N        m_bufSave = NULL;
X        m_bufSave = 0;
N    }
N}
N
N
Nint Chirp::serialize(Chirp *chirp, uint8_t *buf, uint32_t bufSize, ...)
N{
N    int res;
N    va_list args;
N
N    va_start(args, bufSize);
X    __va_start(args, bufSize);
N    res = vserialize(chirp, buf, bufSize, &args);
N    va_end(args);
X    __va_end(args);
N
N    return res;
N}
N
N#define RESIZE_BUF(size) \
N    if (size > bufSize-CRP_BUFPAD) \
N{ \
N    if (!chirp) \
N    return CRP_RES_ERROR_MEMORY; \
N    else \
N{ \
N    if ((res=chirp->realloc(size))<0) \
N    return res; \
N    buf = chirp->m_buf; \
N    bufSize = chirp->m_bufSize; \
N    } \
N    } \
N
X#define RESIZE_BUF(size)     if (size > bufSize-CRP_BUFPAD) {     if (!chirp)     return CRP_RES_ERROR_MEMORY;     else {     if ((res=chirp->realloc(size))<0)     return res;     buf = chirp->m_buf;     bufSize = chirp->m_bufSize;     }     } 
N
Nint Chirp::vserialize(Chirp *chirp, uint8_t *buf, uint32_t bufSize, va_list *args)
N{
N    int res;
N    uint8_t type, origType;
N    uint32_t i;
N    bool copy = true;
N
N    if (chirp)
N    {
N        if (chirp->m_call) // reserve an extra 4 for responseint
N            i = chirp->m_headerLen+4;
N        else // if it's a chirp call, just reserve the header
N            i = chirp->m_headerLen;
N    }
N    else
N        i = 0;
N
N    bufSize -= i;
N
N    while(1)
N    {
N#if 1
N        type = va_arg(*args, int);
X        type = __va_arg(*args, int);
N#else
S        type = va_arg(*args, uint8_t);
N#endif
N
N        if (type==END)
X        if (type==0L)
N            break;
N
N        buf[i++] = type;
N
N        // treat hints like other types for now
N        // but if gotoe (guy on the other end) isn't interested in hints (m_hinformer=false),
N        // we'll restore index to si and effectively skip data.
N        origType = type;
N        type &= ~CRP_HINT;
X        type &= ~0x40;
N
N        if (type==CRP_INT8)
X        if (type==0x01)
N        {
N#if 1
N            int8_t val = va_arg(*args, int);
X            int8_t val = __va_arg(*args, int);
N#else
S            int8_t val = va_arg(*args, int8_t);
N#endif
N            *(int8_t *)(buf+i) = val;
N            i += 1;
N        }
N        else if (type==CRP_INT16)
X        else if (type==0x02)
N        {
N#if 1
N            int16_t val = va_arg(*args, int);
X            int16_t val = __va_arg(*args, int);
N#else
S            int16_t val = va_arg(*args, int16_t);
N#endif
N            ALIGN(i, 2);
X            i = i&((2)-1) ? (i&~((2)-1))+(2) : i;
N            // rewrite type so getType will work (even though we might add padding between type and data)
N            buf[i-1] = origType;
N            *(int16_t *)(buf+i) = val;
N            i += 2;
N        }
N        else if (type==CRP_INT32 || origType==CRP_TYPE_HINT) // CRP_TYPE_HINT is a special case...
X        else if (type==0x04 || origType==0x64) 
N        {
N            int32_t val = va_arg(*args, int32_t);
X            int32_t val = __va_arg(*args, int32_t);
N            ALIGN(i, 4);
X            i = i&((4)-1) ? (i&~((4)-1))+(4) : i;
N            buf[i-1] = origType;
N            *(int32_t *)(buf+i) = val;
N            i += 4;
N        }
N        else if (type==CRP_FLT32)
X        else if (type==(0x10 | 0x04))
N        {
N#if 1
N            float val = va_arg(*args, double);
X            float val = __va_arg(*args, double);
N#else
S            float val = va_arg(*args, float);
N#endif
N            ALIGN(i, 4);
X            i = i&((4)-1) ? (i&~((4)-1))+(4) : i;
N            buf[i-1] = origType;
N            *(float *)(buf+i) = val;
N            i += 4;
N        }
N        else if (type==CRP_STRING)
X        else if (type==((0x20 | 0x80) | 0x01))
N        {
N            int8_t *s = va_arg(*args, int8_t *);
X            int8_t *s = __va_arg(*args, int8_t *);
N            uint32_t len = strlen((char *)s)+1; // include null
N
N            RESIZE_BUF(len+i);
X            if (len+i > bufSize - 8) { if (!chirp) return -5; else { if ((res=chirp->realloc(len+i))<0) return res; buf = chirp->m_buf; bufSize = chirp->m_bufSize; } };
N
N            memcpy(buf+i, s, len);
N            i += len;
N        }
N        else if (type&CRP_ARRAY)
X        else if (type&0x80)
N        {
N            uint8_t size = type&0x0f;
N            uint32_t len = va_arg(*args, int32_t);
X            uint32_t len = __va_arg(*args, int32_t);
N
N            // deal with no copy case (use our own buffer)
N            if ((type&CRP_NO_COPY)==CRP_NO_COPY)
X            if ((type&(0x10 | 0x20))==(0x10 | 0x20))
N            {
N                // rewrite type so as not to confuse gotoe
N                origType = type &= ~CRP_NO_COPY;
X                origType = type &= ~(0x10 | 0x20);
N                buf[i-1] = origType;
N                copy = false;
N            }
N
N            ALIGN(i, 4);
X            i = i&((4)-1) ? (i&~((4)-1))+(4) : i;
N            buf[i-1] = origType;
N            *(uint32_t *)(buf+i) = len;
N            i += 4;
N            ALIGN(i, size);
X            i = i&((size)-1) ? (i&~((size)-1))+(size) : i;
N
N            if (copy)
N            {
N                len *= size; // scale by size of array elements
N
N                RESIZE_BUF(len+i);
X                if (len+i > bufSize - 8) { if (!chirp) return -5; else { if ((res=chirp->realloc(len+i))<0) return res; buf = chirp->m_buf; bufSize = chirp->m_bufSize; } };
N
N                int8_t *ptr = va_arg(*args, int8_t *);
X                int8_t *ptr = __va_arg(*args, int8_t *);
N                memcpy(buf+i, ptr, len);
N                i += len;
N            }
N        }
N        else
N            return CRP_RES_ERROR_PARSE;
X            return -3;
N
N        RESIZE_BUF(i);
X        if (i > bufSize - 8) { if (!chirp) return -5; else { if ((res=chirp->realloc(i))<0) return res; buf = chirp->m_buf; bufSize = chirp->m_bufSize; } };
N    }
N
N    // return length
N    return i;
N}
N
N
N// this isn't completely necessary, but it makes things a lot easier to use.
N// passing a pointer to a pointer and then having to dereference is just confusing....
N// so for scalars (ints, floats) you don't need to pass in ** pointers, just * pointers so
N// chirp can write the value into the * pointer and hand it back.
N// But for arrays you need ** pointers, so chirp doesn't need to copy the whole array into your buffer---
N// chirp will write the * pointer value into your ** pointer.
Nint Chirp::loadArgs(va_list *args, void *recvArgs[])
N{
N    int i;
N    uint8_t type, size;
N    void **recvArg;
N
N    for (i=0; recvArgs[i]!=NULL && i<CRP_MAX_ARGS; i++)
X    for (i=0; recvArgs[i]!=0 && i<10; i++)
N    {
N        type = getType(recvArgs[i]);
N        recvArg = va_arg(*args, void **);
X        recvArg = __va_arg(*args, void * *);
N        if (recvArg==NULL)
X        if (recvArg==0)
N            return CRP_RES_ERROR_PARSE;
X            return -3;
N
N        if (!(type&CRP_ARRAY)) // if we're a scalar
X        if (!(type&0x80)) 
N        {
N            size = type&0x0f;
N            if (size==1) *(uint8_t *)recvArg = *(uint8_t *)recvArgs[i];
N            else if (size==2) *(uint16_t *)recvArg = *(uint16_t *)recvArgs[i];
N            else if (size==4) *(uint32_t *)recvArg = *(uint32_t *)recvArgs[i];
N            //else if (size==8) *recvArg = *(double *)recvArgs[i];
N            else return CRP_RES_ERROR_PARSE;
X            else return -3;
N        }
N        else // we're an array
N        {
N            if (type==CRP_STRING)
X            if (type==((0x20 | 0x80) | 0x01))
N                *(char **)recvArg = (char *)recvArgs[i];
N            else
N            {
N                *(uint32_t *)recvArg = *(uint32_t *)recvArgs[i++];
N                recvArg = va_arg(*args, void **);
X                recvArg = __va_arg(*args, void * *);
N                if (recvArg==NULL)
X                if (recvArg==0)
N                    return CRP_RES_ERROR_PARSE;
X                    return -3;
N                *(void **)recvArg = recvArgs[i];
N            }
N        }
N    }
N    // check to see if last arg is NULL, if not, we have a parse error
N    // if the arg isn't null, it means the caller is expecting data to be
N    // put there.  If data isn't put there, and the caller dereferences, segfault
N    if (va_arg(*args, void **)!=NULL)
X    if (__va_arg(*args, void * *)!=0)
N        return CRP_RES_ERROR_PARSE;
X        return -3;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::call(uint8_t service, ChirpProc proc, va_list args)
N{
N    int res, i;
N    uint8_t type;
N    va_list arguments;
N
N    va_copy(arguments, args);
X    ((void)((arguments) = (args)));
N
N    // if it's just a regular call (not init or enumerate), we need to be connected
N    if (!(service&CRP_CALL) && !m_connected)
X    if (!(service&0x80) && !m_connected)
N        return CRP_RES_ERROR_NOT_CONNECTED;
X        return -6;
N
N    // parse arguments and assemble in m_buf
N    m_len = 0;
N    // restore buffer in case it was changed
N    restoreBuffer();
N    if ((res=vassemble(&arguments))<0)
N    {
N        va_end(arguments);
X        __va_end(arguments);
N        return res;
N    }
N
N    if (service&CRP_CALL) // special case for enumerate and init (internal calls)
X    if (service&0x80) 
N    {
N        type = service;
N        service = SYNC;
X        service = 0;
N    }
N    else
N        type = CRP_CALL;
X        type = 0x80;
N
N    // send call data
N    if ((res=sendChirpRetry(type, proc))!=CRP_RES_OK) // convert call into response
X    if ((res=sendChirpRetry(type, proc))!=0) 
N    {
N        va_end(arguments);
X        __va_end(arguments);
N        return res;
N    }
N
N
N    // if the service is synchronous, receive response while servicing other calls
N    if (!(service&ASYNC))
X    if (!(service&0x01))
N    {
N        ChirpProc recvProc;
N        void *recvArgs[CRP_MAX_ARGS+1];
X        void *recvArgs[10+1];
N        m_link->setTimer(); // set timer, so we can check to see if we're taking too much time
N
N        while(1)
N        {
N            if ((res=recvChirp(&type, &recvProc, recvArgs, true))==CRP_RES_OK)
X            if ((res=recvChirp(&type, &recvProc, recvArgs, true))==0)
N            {
N                if (type&CRP_RESPONSE)
X                if (type&0x40)
N                    break;
N                else // handle calls as they come in
N                    handleChirp(type, recvProc, (const void **)recvArgs);
N            }
N            else
N            {
N                va_end(arguments);
X                __va_end(arguments);
N                return res;
N            }
N            if (m_link->getTimer()>m_headerTimeout) // we could receive XDATA (for example) and never exit this while loop
N                return CRP_RES_ERROR_RECV_TIMEOUT;
X                return -101;
N        }
N
N        // deal with arguments
N        if (service&RETURN_ARRAY) // copy array of arguments
X        if (service&0x02) 
N        {
N            void **recvArray;
N            while(1)
N            {
N                recvArray = va_arg(arguments, void **);
X                recvArray = __va_arg(arguments, void * *);
N                if (recvArray!=NULL)
X                if (recvArray!=0)
N                    break;
N            }
N            for (i=0; recvArgs[i]; i++)
N                recvArray[i] = recvArgs[i];
N            recvArray[i] = NULL;
X            recvArray[i] = 0;
N        }
N        else if ((res=loadArgs(&arguments, recvArgs))<0)
N        {
N            va_end(arguments);
X            __va_end(arguments);
N            return res;
N        }
N    }
N
N
N    va_end(arguments);
X    __va_end(arguments);
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::call(uint8_t service, ChirpProc proc, ...)
N{
N  int result; 
N    
N  va_list arguments;
N
N  va_start(arguments, proc);
X  __va_start(arguments, proc);
N  result = call(service, proc, arguments);
N  va_end(arguments);
X  __va_end(arguments);
N
N  return result;
N}
N
Nint Chirp::sendChirpRetry(uint8_t type, ChirpProc proc)
N{
N    int i, res=-1;
N
N    if (m_link==NULL || (!m_connected && !(type&CRP_INTRINSIC)))
X    if (m_link==0 || (!m_connected && !(type&0x20)))
N        return CRP_RES_ERROR_NOT_CONNECTED;
X        return -6;
N	
N	if (type==CRP_XDATA && !m_hinformer) // don't send xdata if no hinformer
X	if (type==0x18 && !m_hinformer) 
N		return CRP_RES_ERROR;
X		return -1;
N	
N    // deal with case where there is no actual data (e.g. it's all hint data and gotoe isn't hinterested)
N    // but chirp calls can have no data of course
N    if (m_len==0 && !(type&CRP_CALL))
X    if (m_len==0 && !(type&0x80))
N        return CRP_RES_OK;
X        return 0;
N    for (i=0; i<m_retries; i++)
N    {
N        res = sendChirp(type, proc);
N        if (res==CRP_RES_OK)
X        if (res==0)
N            break;
N    }
N
N    // if sending the chirp fails after retries, we should assume we're no longer connected
N    if (res<0)
N        m_connected = false;
N
N    return res;
N}
N
Nint Chirp::sendChirp(uint8_t type, ChirpProc proc)
N{
N    int res;
N    if (m_errorCorrected)
N        res = sendFull(type, proc);
N    else
N    {
N        // we'll send forever as long as we get naks
N        // we rely on receiver to give up
N        while((res=sendHeader(type, proc))==CRP_RES_ERROR_CRC);
X        while((res=sendHeader(type, proc))== -2);
N        if (res!=CRP_RES_OK)
X        if (res!=0)
N            return res;
N        res = sendData();
N    }
N    if (res!=CRP_RES_OK)
X    if (res!=0)
N        return res;
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::handleChirp(uint8_t type, ChirpProc proc, const void *args[])
N{
N    int res;
N    int32_t responseInt = 0;
N    uint8_t n;
N
N    // default case, we return one integer (responseint)
N    m_len = 4;
N
N    // check for intrinsic calls
N    if (type&CRP_INTRINSIC)
X    if (type&0x20)
N    {
N        m_call = true; // indicate to ourselves that this is a chirp call
N        if (type==CRP_CALL_ENUMERATE)
X        if (type==(0x80 | 0x20 | 0x00))
N            responseInt = handleEnumerate((char *)args[0], (ChirpProc *)args[1]);
N        else if (type==CRP_CALL_INIT)
X        else if (type==(0x80 | 0x20 | 0x01))
N            responseInt = handleInit((uint16_t *)args[0], (uint8_t *)args[1]);
N        else if (type==CRP_CALL_ENUMERATE_INFO)
X        else if (type==(0x80 | 0x20 | 0x02))
N            responseInt = handleEnumerateInfo((ChirpProc *)args[0]);
N        else
N            responseInt = CRP_RES_ERROR;
X            responseInt = -1;
N        m_call = false;
N    }
N    else if (type==CRP_XDATA)
X    else if (type==0x18)
N    {
N        handleXdata(args);
N        return CRP_RES_OK;
X        return 0;
N    }
N    else // normal call
N    {
N        if (proc>=m_procTableSize || proc<0)
N            return CRP_RES_ERROR; // index exceeded
X            return -1; 
N
N        ProcPtr ptr = m_procTable[proc].procPtr;
N        if (ptr==NULL)
X        if (ptr==0)
N            return CRP_RES_ERROR; // some chirps are not meant to be called in both directions
X            return -1; 
N
N        // count args
N        for (n=0; args[n]!=NULL; n++);
X        for (n=0; args[n]!=0; n++);
N
N        m_call = true; // indicate to ourselves that this is a chirp call
N        // this is probably overkill....
N        if (n==0)
N            responseInt = (*ptr)(this);
N        else if (n==1)
N            responseInt = (*(uint32_t(*)(const void*,Chirp*))ptr)(args[0],this);
N        else if (n==2)
N            responseInt = (*(uint32_t(*)(const void*,const void*,Chirp*))ptr)(args[0],args[1],this);
N        else if (n==3)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],this);
N        else if (n==4)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],this);
N        else if (n==5)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],this);
N        else if (n==6)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],args[5],this);
N        else if (n==7)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],args[5],args[6],this);
N        else if (n==8)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],this);
N        else if (n==9)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],this);
N        else if (n==10)
N            responseInt = (*(uint32_t(*)(const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,const void*,Chirp*))ptr)(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],this);
N        else
N            responseInt = CRP_RES_ERROR;
X            responseInt = -1;
N        m_call = false;
N    }
N
N    // if it's a chirp call, we need to send back the result
N    // result is in m_buf
N    if (type&CRP_CALL)
X    if (type&0x80)
N    {
N        // write responseInt
N        *(uint32_t *)(m_buf+m_headerLen) = responseInt;
N        // send response
N        res = sendChirpRetry(CRP_RESPONSE | (type&~CRP_CALL), m_procTable[proc].chirpProc);	// convert call into response
X        res = sendChirpRetry(0x40 | (type&~0x80), m_procTable[proc].chirpProc);	
N        restoreBuffer(); // restore buffer immediately!
N        if (res!=CRP_RES_OK) 
X        if (res!=0) 
N            return res;
N    }
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::reallocTable()
N{
N    ProcTableEntry *newProcTable;
N    int newProcTableSize;
N
N    // allocate new table, zero
N    newProcTableSize = m_procTableSize+CRP_PROCTABLE_LEN;
X    newProcTableSize = m_procTableSize+ 0x40;
N    newProcTable = new (std::nothrow) ProcTableEntry[newProcTableSize];
N    if (newProcTable==NULL)
X    if (newProcTable==0)
N        return CRP_RES_ERROR_MEMORY;
X        return -5;
N    memset(newProcTable, 0, sizeof(ProcTableEntry)*newProcTableSize);
N    // copy to new table
N    memcpy(newProcTable, m_procTable, sizeof(ProcTableEntry)*m_procTableSize);
N    // delete old table
N    delete [] m_procTable;
N    // set to new
N    m_procTable = newProcTable;
N    m_procTableSize = newProcTableSize;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
NChirpProc Chirp::lookupTable(const char *procName)
N{
N    ChirpProc i;
N
N    for(i=0; i<m_procTableSize; i++)
N    {
N        if (m_procTable[i].procName!=NULL && strcmp(m_procTable[i].procName, procName)==0)
X        if (m_procTable[i].procName!=0 && strcmp(m_procTable[i].procName, procName)==0)
N            return i;
N    }
N    return -1;
N}
N
N
NChirpProc Chirp::updateTable(const char *procName, ProcPtr procPtr)
N{
N    // if it exists already, update,
N    // if it doesn't exist, add it
N    if (procName==NULL)
X    if (procName==0)
N        return -1;
N
N    ChirpProc proc = lookupTable(procName);
N    if (proc<0) // next empty entry
N    {
N        for (proc=0; proc<m_procTableSize && m_procTable[proc].procName; proc++);
N        if (proc==m_procTableSize)
N        {
N            reallocTable();
N            return updateTable(procName, procPtr);
N        }
N    }
N
N    // add to table
N    m_procTable[proc].procName = procName;
N    m_procTable[proc].procPtr = procPtr;
N
N    return proc;
N}
N
NChirpProc Chirp::getProc(const char *procName, ProcPtr callback)
N{
N    uint32_t res;
N    ChirpProc cproc = -1;
N
N    if (callback)
N        cproc = updateTable(procName, callback);
N
N    if (call(CRP_CALL_ENUMERATE, 0,
X    if (call((0x80 | 0x20 | 0x00), 0,
N             STRING(procName), // send name
X             ((0x20 | 0x80) | 0x01), procName, 
N             INT16(cproc), // send local index
X             0x02, cproc, 
N             END_OUT_ARGS,
X             0L,
N             &res, // get remote index
N             END_IN_ARGS
X             0L
N             )>=0)
N        return res;
N
N    // a negative ChirpProc is an error
N    return -1;
N}
N
Nint Chirp::remoteInit(bool connect)
N{
N    int res;
N    uint32_t responseInt;
N    uint8_t hinformer;
N
N    res = call(CRP_CALL_INIT, 0,
X    res = call((0x80 | 0x20 | 0x01), 0,
N               UINT16(connect ? m_blkSize : 0), // send block size
X               0x02, connect ? m_blkSize : 0, 
N               UINT8(m_hinterested), // send whether we're interested in hints or not
X               0x01, m_hinterested, 
N               END_OUT_ARGS,
X               0L,
N               &responseInt,
N               &hinformer,       // receive whether we should send hints
N               END_IN_ARGS
X               0L
N               );
N    if (res>=0)
N    {
N        m_connected = connect;
N        m_hinformer = hinformer;
N        return responseInt;
N    }
N    return res;
N}
N
Nint Chirp::getProcInfo(ChirpProc proc, ProcInfo *info)
N{
N    uint32_t responseInt;
N    int res;
N
N    res = call(CRP_CALL_ENUMERATE_INFO, 0,
X    res = call((0x80 | 0x20 | 0x02), 0,
N               UINT16(proc),
X               0x02, proc,
N               END_OUT_ARGS,
X               0L,
N               &responseInt,
N               &info->procName,
N               &info->argTypes,
N               &info->procInfo,
N               END_IN_ARGS
X               0L
N               );
N
N    if (res==CRP_RES_OK)
X    if (res==0)
N        return responseInt;
N    return res;
N}
N
Nint Chirp::setProc(const char *procName, ProcPtr proc, ProcTableExtension *extension)
N{
N    ChirpProc cProc = updateTable(procName, proc);
N    if (cProc<0)
N        return CRP_RES_ERROR;
X        return -1;
N
N    m_procTable[cProc].extension = extension;
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::registerModule(const ProcModule *module)
N{
N    int i;
N
N    for (i=0; module[i].procName; i++)
N        setProc(module[i].procName, module[i].procPtr, (ProcTableExtension *)module[i].argTypes);
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nvoid Chirp::setSendTimeout(uint32_t timeout)
N{
N    m_sendTimeout = timeout;
N}
N
Nvoid Chirp::setRecvTimeout(uint32_t timeout)
N{
N    m_headerTimeout = timeout;
N}
N
Nint32_t Chirp::handleEnumerate(char *procName, ChirpProc *callback)
N{
N    ChirpProc proc;
N    // lookup in table
N    proc = lookupTable(procName);
N    // set remote index in table
N    m_procTable[proc].chirpProc = *callback;
N
N    return proc;
N}
N
Nint32_t Chirp::handleInit(uint16_t *blkSize, uint8_t *hinformer)
N{
N    int32_t responseInt;
N
N    bool connect = *blkSize ? true : false;
N    responseInt = init(connect);
N    m_connected = connect;
N    m_blkSize = *blkSize;  // get block size, write it
N    m_hinformer = *hinformer;
N
N    CRP_RETURN(this, UINT8(m_hinterested), END);
X    this->assemble(0, 0x01, m_hinterested, 0L, 0L);
N
N    return responseInt;
N}
N
Nint32_t Chirp::handleEnumerateInfo(ChirpProc *proc)
N{
N    const ProcTableExtension *extension;
N    uint8_t null = '\0';
N
N    if (*proc>=m_procTableSize || m_procTable[*proc].procName==NULL)
X    if (*proc>=m_procTableSize || m_procTable[*proc].procName==0)
N        extension = NULL;
X        extension = 0;
N    else
N        extension = m_procTable[*proc].extension;
N
N    if (extension)
N    {
N        CRP_RETURN(this, STRING(m_procTable[*proc].procName), STRING(extension->argTypes),
N                   STRING(extension->procInfo), END);
X        this->assemble(0, ((0x20 | 0x80) | 0x01), m_procTable[*proc]. procName, ((0x20 | 0x80) | 0x01), extension->argTypes, ((0x20 | 0x80) | 0x01), extension->procInfo, 0L, 0L);
N        return CRP_RES_OK;
X        return 0;
N    }
N    else // no extension, just send procedure name
N    {
N        CRP_RETURN(this, STRING(m_procTable[*proc].procName), STRING(&null),
N                   STRING(&null), END);
X        this->assemble(0, ((0x20 | 0x80) | 0x01), m_procTable[*proc]. procName, ((0x20 | 0x80) | 0x01), &null, ((0x20 | 0x80) | 0x01), &null, 0L, 0L);
N        return CRP_RES_ERROR;
X        return -1;
N    }
N}
N
Nint Chirp::realloc(uint32_t min)
N{
N    if (m_sharedMem)
N        return CRP_RES_ERROR_MEMORY;
X        return -5;
N
N    if (!min)
N        min = m_bufSize+CRP_BUFSIZE;
X        min = m_bufSize+ 0x80;
N    else
N        min += CRP_BUFSIZE;
X        min += 0x80;
N    uint8_t *newbuf = new (std::nothrow) uint8_t[min];
N    if (newbuf==NULL)
X    if (newbuf==0)
N        return CRP_RES_ERROR_MEMORY;
X        return -5;
N    memcpy(newbuf, m_buf, m_bufSize);
N    delete[] m_buf;
N    m_buf = newbuf;
N    m_bufSize = min;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
N// service deals with calls and callbacks
Nint Chirp::service(bool all)
N{
N    int i;
N    uint8_t type;
N    ChirpProc recvProc;
N    void *args[CRP_MAX_ARGS+1];
X    void *args[10+1];
N	
N    for (i=0; true; i++)
N    {
N        if (recvChirp(&type, &recvProc, args)==CRP_RES_OK)
X        if (recvChirp(&type, &recvProc, args)==0)
N            handleChirp(type, recvProc, (const void **)args);
N        else
N            break;
N        if (!all)
N            break;
N    }
N
N    return i;
N}
N
Nint Chirp::recvChirp(uint8_t *type, ChirpProc *proc, void *args[], bool wait) // null pointer terminates
N{
N    int res;
N    uint32_t i, offset;
N	
N    restoreBuffer();
N
N    // receive
N    if (m_errorCorrected)
N        res = recvFull(type, proc, wait);
N    else
N    {
N        for (i=0; true; i++)
N        {
N            res = recvHeader(type, proc, wait);
N            if (res==CRP_RES_ERROR_CRC)
X            if (res== -2)
N            {
N                if (i<m_maxNak)
N                    continue;
N                else
N                    return CRP_RES_ERROR_MAX_NAK;
X                    return -4;
N            }
N            else if (res==CRP_RES_OK)
X            else if (res==0)
N                break;
N            else
N                return res;
N        }
N        res = recvData();
N    }
N    if (res!=CRP_RES_OK)
X    if (res!=0)
N        return res;
N
N    // get responseInt from response
N    if (*type&CRP_RESPONSE)
X    if (*type&0x40)
N    {
N        // fake responseInt so it gets inserted
N        *(m_buf+m_headerLen-4) = CRP_UINT32; // write type so it parses correctly
X        *(m_buf+m_headerLen-4) = 0x04; 
N        *(m_buf+m_headerLen-1) = CRP_UINT32;
X        *(m_buf+m_headerLen-1) = 0x04;
N        // increment pointer
N        offset = m_headerLen-4;
N        m_len+=4;
N    }
N    else // call has no responseInt
N        offset = m_headerLen;
N
N    return deserializeParse(m_buf+offset, m_len, args);
N}
N
Nint Chirp::deserialize(uint8_t *buf, uint32_t len, ...)
N{
N    int res;
N    va_list args;
N    void *recvArgs[CRP_MAX_ARGS+1];
X    void *recvArgs[10+1];
N
N    if ((res=deserializeParse(buf, len, recvArgs))<0)
N        return res;
N
N    va_start(args, len);
X    __va_start(args, len);
N    res = loadArgs(&args, recvArgs);
N    va_end(args);
X    __va_end(args);
N
N    return res;
N}
N
Nint Chirp::vdeserialize(uint8_t *buf, uint32_t len, va_list *args)
N{
N    int res;
N    void *recvArgs[CRP_MAX_ARGS+1];
X    void *recvArgs[10+1];
N
N    if ((res=deserializeParse(buf, len, recvArgs))<0)
N        return res;
N
N    return loadArgs(args, recvArgs);
N}
N
Nint Chirp::getArgList(uint8_t *buf, uint32_t len, uint8_t *argList)
N{
N    uint8_t dataType, size, a;
N    uint32_t i;
N
N    // parse remaining args
N    for(i=0, a=0; i<len; a++)
N    {
N        if (a==CRP_MAX_ARGS)
X        if (a==10)
N            return CRP_RES_ERROR;
X            return -1;
N
N        dataType = buf[i++];
N        argList[a] = dataType;
N        size = dataType&0x0f;
N        if (!(dataType&CRP_ARRAY)) // if we're a scalar
X        if (!(dataType&0x80)) 
N        {
N            ALIGN(i, size);
X            i = i&((size)-1) ? (i&~((size)-1))+(size) : i;
N            i += dataType&0x0f; // extract size of scalar, add it
N        }
N        else // we're an array
N        {
N            if (dataType==CRP_STRING || dataType==CRP_HSTRING) // string is a special case
X            if (dataType==((0x20 | 0x80) | 0x01) || dataType==(((0x20 | 0x80) | 0x01) | 0x40)) 
N                i += strlen((char *)(buf+i))+1; // +1 include null character
N            else
N            {
N                ALIGN(i, 4);
X                i = i&((4)-1) ? (i&~((4)-1))+(4) : i;
N                uint32_t len = *(uint32_t *)(buf+i);
N                i += 4;
N                ALIGN(i, size);
X                i = i&((size)-1) ? (i&~((size)-1))+(size) : i;
N                i += len*size;
N            }
N        }
N    }
N    argList[a] = '\0'; // terminate list
N    return CRP_RES_OK;
X    return 0;
N}
N
N
Nint Chirp::deserializeParse(uint8_t *buf, uint32_t len, void *args[])
N{
N    uint8_t dataType, size, a;
N    uint32_t i;
N
N    // parse remaining args
N    for(i=0, a=0; i<len; a++)
N    {
N        if (a==CRP_MAX_ARGS)
X        if (a==10)
N            return CRP_RES_ERROR;
X            return -1;
N
N        dataType = buf[i++];
N        size = dataType&0x0f;
N        if (!(dataType&CRP_ARRAY)) // if we're a scalar
X        if (!(dataType&0x80)) 
N        {
N            ALIGN(i, size);
X            i = i&((size)-1) ? (i&~((size)-1))+(size) : i;
N            args[a] = (void *)(buf+i);
N            i += dataType&0x0f; // extract size of scalar, add it
N        }
N        else // we're an array
N        {
N            if (dataType==CRP_STRING || dataType==CRP_HSTRING) // string is a special case
X            if (dataType==((0x20 | 0x80) | 0x01) || dataType==(((0x20 | 0x80) | 0x01) | 0x40)) 
N            {
N                args[a] = (void *)(buf+i);
N                i += strlen((char *)(buf+i))+1; // +1 include null character
N            }
N            else
N            {
N                ALIGN(i, 4);
X                i = i&((4)-1) ? (i&~((4)-1))+(4) : i;
N                uint32_t len = *(uint32_t *)(buf+i);
N                args[a++] = (void *)(buf+i);
N                i += 4;
N                ALIGN(i, size);
X                i = i&((size)-1) ? (i&~((size)-1))+(size) : i;
N                args[a] = (void *)(buf+i);
N                i += len*size;
N            }
N        }
N    }
N    args[a] = NULL; // terminate list
X    args[a] = 0; 
N    return CRP_RES_OK;
X    return 0;
N}
N
Nuint8_t Chirp::getType(const void *arg)
N{
N    return *((uint8_t *)arg - 1);
N}
N
Nuint16_t Chirp::calcCrc(uint8_t *buf, uint32_t len)
N{
N    uint32_t i;
N    uint16_t crc;
N
N    // this isn't a real crc, but it's cheap and prob good enough
N    for (i=0, crc=0; i<len; i++)
N        crc += buf[i];
N    crc += len;
N
N    return crc;
N}
N
N
Nint Chirp::sendFull(uint8_t type, ChirpProc proc)
N{
N    int res;
N
N    *(uint32_t *)m_buf = CRP_START_CODE;
X    *(uint32_t *)m_buf = 0xaaaa5555;
N    *(uint8_t *)(m_buf+4) = type;
N    *(ChirpProc *)(m_buf+6) = proc;
N    *(uint32_t *)(m_buf+8) = m_len;
N    // send header
N    if ((res=m_link->send(m_buf, CRP_MAX_HEADER_LEN, m_sendTimeout))<0)
X    if ((res=m_link->send(m_buf, 64, m_sendTimeout))<0)
N        return res;
N    // if we haven't sent everything yet....
N    if (m_len+m_headerLen>CRP_MAX_HEADER_LEN && !m_sharedMem)
X    if (m_len+m_headerLen>64 && !m_sharedMem)
N    {
N        if ((res=m_link->send(m_buf+CRP_MAX_HEADER_LEN, m_len-(CRP_MAX_HEADER_LEN-m_headerLen), m_sendTimeout))<0)
X        if ((res=m_link->send(m_buf+64, m_len-(64-m_headerLen), m_sendTimeout))<0)
N            return res;
N    }
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::sendHeader(uint8_t type, ChirpProc proc)
N{
N    int res;
N    bool ack;
N    uint32_t chunk, startCode = CRP_START_CODE;
X    uint32_t chunk, startCode = 0xaaaa5555;
N    uint16_t crc;
N
N    if ((res=m_link->send((uint8_t *)&startCode, 4, m_sendTimeout))<0)
N        return res;
N
N    *(uint8_t *)m_buf = type;
N    *(uint16_t *)(m_buf+2) = proc;
N    *(uint32_t *)(m_buf+4) = m_len;
N    if ((res=m_link->send(m_buf, m_headerLen, m_sendTimeout))<0)
N        return res;
N    crc = calcCrc(m_buf, m_headerLen);
N
N    if (m_len>=CRP_MAX_HEADER_LEN)
X    if (m_len>=64)
N        chunk = CRP_MAX_HEADER_LEN;
X        chunk = 64;
N    else
N        chunk = m_len;
N    if (m_link->send(m_buf, chunk, m_sendTimeout)<0)
N        return CRP_RES_ERROR_SEND_TIMEOUT;
X        return -102;
N
N    // send crc
N    crc += calcCrc(m_buf, chunk);
N    if (m_link->send((uint8_t *)&crc, 2, m_sendTimeout)<0)
N        return CRP_RES_ERROR_SEND_TIMEOUT;
X        return -102;
N
N    if ((res=recvAck(&ack, m_headerTimeout))<0)
N        return res;
N
N    if (ack)
N        m_offset = chunk;
N    else
N        return CRP_RES_ERROR_CRC;
X        return -2;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::sendData()
N{
N    uint16_t crc;
N    uint32_t chunk;
N    uint8_t sequence;
N    bool ack;
N    int res;
N
N    for (sequence=0; m_offset<m_len; )
N    {
N        if (m_len-m_offset>=m_blkSize)
N            chunk = m_blkSize;
N        else
N            chunk = m_len-m_offset;
N        // send data
N        if (m_link->send(m_buf+m_offset, chunk, m_sendTimeout)<0)
N            return CRP_RES_ERROR_SEND_TIMEOUT;
X            return -102;
N        // send sequence
N        if (m_link->send((uint8_t *)&sequence, 1, m_sendTimeout)<0)
N            return CRP_RES_ERROR_SEND_TIMEOUT;
X            return -102;
N        // send crc
N        crc = calcCrc(m_buf+m_offset, chunk) + calcCrc((uint8_t *)&sequence, 1);
N        if (m_link->send((uint8_t *)&crc, 2, m_sendTimeout)<0)
N            return CRP_RES_ERROR_SEND_TIMEOUT;
X            return -102;
N
N        if ((res=recvAck(&ack, m_dataTimeout))<0)
N            return res;
N        if (ack)
N        {
N            m_offset += chunk;
N            sequence++;
N        }
N    }
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::sendAck(bool ack) // false=nack
N{
N    uint8_t c;
N
N    if (ack)
N        c = CRP_ACK;
X        c = 0x59;
N    else
N        c = CRP_NACK;
X        c = 0x95;
N
N    if (m_link->send(&c, 1, m_sendTimeout)<0)
N        return CRP_RES_ERROR_SEND_TIMEOUT;
X        return -102;
N
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::recvHeader(uint8_t *type, ChirpProc *proc, bool wait)
N{
N    uint8_t c;
N    uint32_t chunk, startCode = 0;
N    uint16_t crc, rcrc;
N
N    int return_value;
N
N    return_value = m_link->receive(&c, 1, wait?m_headerTimeout:0);
N
N    if (return_value < 0) {
N      goto chirp_recvheader__exit;
N    }
N    if (return_value == 0) {
N      return_value = CRP_RES_ERROR;
X      return_value = -1;
N      goto chirp_recvheader__exit;
N    }
N
N    // find start code
N    while(1)
N    {
N        startCode >>= 8;
N        startCode |= (uint32_t)c<<24;
N        if (startCode==CRP_START_CODE)
X        if (startCode==0xaaaa5555)
N            break;
N
N        return_value = m_link->receive(&c, 1, m_idleTimeout);
N
N        if (return_value < 0) {
N          goto chirp_recvheader__exit;
N        }
N        if (return_value == 0) {
N          return_value = CRP_RES_ERROR;
X          return_value = -1;
N          goto chirp_recvheader__exit;
N        }
N    }
N    // receive rest of header
N    if (m_link->receive(m_buf, m_headerLen, m_idleTimeout) < 0) {
N      return_value = CRP_RES_ERROR_RECV_TIMEOUT;
X      return_value = -101;
N      goto chirp_recvheader__exit;
N    }
N
N    if (return_value < (int) m_headerLen) {
N      return_value = CRP_RES_ERROR; 
X      return_value = -1; 
N      goto chirp_recvheader__exit;
N    }
N
N    *type = *(uint8_t *)m_buf;
N    *proc = *(ChirpProc *)(m_buf+2);
N    m_len = *(uint32_t *)(m_buf+4);
N    crc = calcCrc(m_buf, m_headerLen);
N
N    if (m_len>=CRP_MAX_HEADER_LEN-m_headerLen)
X    if (m_len>=64-m_headerLen)
N        chunk = CRP_MAX_HEADER_LEN-m_headerLen;
X        chunk = 64-m_headerLen;
N    else
N        chunk = m_len;
N
N    return_value = m_link->receive(m_buf, chunk+2, m_idleTimeout);
N
N    if (return_value < 0) { // +2 for crc
N      goto chirp_recvheader__exit;
N    }
N    if (return_value < (int) (chunk + 2)) {
N      return_value = CRP_RES_ERROR;
X      return_value = -1;
N      goto chirp_recvheader__exit;
N    }
N    copyAlign((char *)&rcrc, (char *)(m_buf+chunk), 2);
N    if (rcrc==crc+calcCrc(m_buf, chunk))
N    {
N        m_offset = chunk;
N        sendAck(true);
N    }
N    else
N    {
N        sendAck(false); // send nack
N        return_value = CRP_RES_ERROR_CRC;
X        return_value = -2;
N        goto chirp_recvheader__exit;
N    }
N
N    return_value = CRP_RES_OK;
X    return_value = 0;
N
Nchirp_recvheader__exit:
N
N    return return_value;
N}
N
Nint Chirp::recvFull(uint8_t *type, ChirpProc *proc, bool wait)
N{
N    int res;
N    uint32_t startCode;
N    uint32_t len, recvd;
N
N	if (m_link==NULL)
X	if (m_link==0)
N		return CRP_RES_ERROR_NOT_CONNECTED;
X		return -6;
N
N    // receive header, with startcode check to make sure we're synced
N    while(1)
N    {
N        if ((res=m_link->receive(m_buf, CRP_MAX_HEADER_LEN, wait?m_headerTimeout:0))<0)
X        if ((res=m_link->receive(m_buf, 64, wait?m_headerTimeout:0))<0)
N            return res;
N        // check to see if we received less data than expected
N        if (res<(int)sizeof(uint32_t))
N            continue;
N		recvd = res;
N        startCode = *(uint32_t *)m_buf;
N        if (startCode==CRP_START_CODE)
X        if (startCode==0xaaaa5555)
N            break;
N    }
N    *type = *(uint8_t *)(m_buf+4);
N    *proc = *(ChirpProc *)(m_buf+6);
N    m_len = *(uint32_t *)(m_buf+8);
N
N    if (m_len+m_headerLen>m_bufSize && (res=realloc(m_len+m_headerLen))<0)
N        return res;
N
N    if (m_len+m_headerLen>recvd && !m_sharedMem)
N    {
N        len = m_len+m_headerLen;
N        while(recvd<len)
N        {
N            if ((res=m_link->receive(m_buf+recvd, len-recvd, m_idleTimeout))<0)
N                return res;
N            recvd += res;
N        }
N    }
N
N    return CRP_RES_OK;
X    return 0;
N}
N
N// We assume that the probability that we send a nack and the receiver interprets a nack is 100%
N// We can't assume that the probability that we send an ack and the receiver interprets it is 100%
N// Scenario
N// 1) we receive packet 0, redo is 0, crc is good, we increment offset, send ack. (inc) (inc) rs=0, s=0, inc
N// 2) we receive packet 1, crc is bad, we send nack (!inc) (!inc) rs=1, s=1
N// 3) sender gets nack, so it resends
N// 4) we receive packet 1, redo is 1, crc is good, we don't increment offset, send ack (inc) (inc) rs=1, s=1
N// 5) we receive packet 2, redo is 0, crc is bad, we send nack (!inc) (!inc) rs=2, s=2
N// 6) we receive packet 2, redo is 1, crc is good, we send ack (inc) (inc) rs=2, s=2
N// 7) we receive packet 3, redo is 0, crc is good, we send ack (inc) (inc)
N// different scenario
N// 1) we receive packet 0, redo is 0, crc is good, we increment offset, send ack. (inc) (inc) rs=0, s=0
N// 2) sender thinks it gets a nack, so it resends
N// 3) we receive packet 0 again, but crc is bad, we send nack (!inc) (!inc) rs=1, s=0
N// 4) sender gets nack, so it resends
N// 5) we receive packet 0, redo is 1, crc is good, we don't increment offset, send ack (!inc) (inc) rs=1, s=0
N// (we've essentially thrown out this packet, but that's ok, because we have a good packet 0)
N// 6) we receive packet 1, redo is 0, crc is bad, we send nack (!inc) (!inc) rs=1, s=1
N// 7) we receive packet 1, redo is 1, crc is good, we send ack (inc) (inc) rs=1, s=1
N// 8) we receive packet 2, redo is 0, crc is good, we send ack (inc) (inc) rs=2, s=2
N// a redo flag is not sufficient to communicate which packet we're on because the sender can misinterpret
N// any number of nacks
Nint Chirp::recvData()
N{
N    int res;
N    uint32_t chunk;
N    uint16_t crc;
N    uint8_t sequence, rsequence, naks;
N
N    if (m_len+3+m_headerLen>m_bufSize && (res=realloc(m_len+3+m_headerLen))<0) // +3 to read sequence, crc
N        return res;
N
N    for (rsequence=0, naks=0; m_offset<m_len; )
N    {
N        if (m_len-m_offset>=m_blkSize)
N            chunk = m_blkSize;
N        else
N            chunk = m_len-m_offset;
N        if (m_link->receive(m_buf+m_offset, chunk+3, m_dataTimeout)<0) // +3 to read sequence, crc
N            return CRP_RES_ERROR_RECV_TIMEOUT;
X            return -101;
N        if (res<(int)chunk+3)
N            return CRP_RES_ERROR;
X            return -1;
N        sequence = *(uint8_t *)(m_buf+m_offset+chunk);
N        copyAlign((char *)&crc, (char *)(m_buf+m_offset+chunk+1), 2);
N        if (crc==calcCrc(m_buf+m_offset, chunk+1))
N        {
N            if (rsequence==sequence)
N            {
N                m_offset += chunk;
N                rsequence++;
N            }
N            sendAck(true);
N            naks = 0;
N        }
N        else
N        {
N            sendAck(false);
N            naks++;
N            if (naks<m_maxNak)
N                naks++;
N            else
N                return CRP_RES_ERROR_MAX_NAK;
X                return -4;
N        }
N    }
N    return CRP_RES_OK;
X    return 0;
N}
N
Nint Chirp::recvAck(bool *ack, uint16_t timeout) // false=nack
N{
N    int res;
N    uint8_t c;
N    if ((res=m_link->receive(&c, 1, timeout))<0)
N        return CRP_RES_ERROR_RECV_TIMEOUT;
X        return -101;
N    if (res<1)
N        return CRP_RES_ERROR;
X        return -1;
N
N    if (c==CRP_ACK)
X    if (c==0x59)
N        *ack = true;
N    else
N        *ack = false;
N
N    return CRP_RES_OK;
X    return 0;
N}
