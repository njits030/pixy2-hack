; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\ipc_mbx.o --asm_dir=.\ --list_dir=.\ --depend=.\ipc_mbx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -I..\..\common\inc -I..\common\inc -Iinc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=534 -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\ipc_mbx.crf ..\common\src\ipc_mbx.c]
                          THUMB

                          AREA ||i.IPC_downloadSlaveImage||, CODE, READONLY, ALIGN=2

                  IPC_downloadSlaveImage PROC
;;;249    /* download a processor image to the SLAVE CPU */
;;;250    void IPC_downloadSlaveImage(uint32_t slaveRomStart, const unsigned char slaveImage[], uint32_t imageSize)
000000  b5f0              PUSH     {r4-r7,lr}
;;;251    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
;;;252      	uint32_t i;
;;;253    	volatile uint8_t *pu8SRAM;
;;;254    
;;;255    	IPC_haltSlave();
000008  f7fffffe          BL       IPC_haltSlave
;;;256    
;;;257        //Copy application into Slave ROM 
;;;258    	pu8SRAM = (uint8_t *) slaveRomStart;
00000c  4634              MOV      r4,r6
;;;259    	for (i = 0; i < imageSize; i++)
00000e  2300              MOVS     r3,#0
000010  e002              B        |L1.24|
                  |L1.18|
;;;260    	{
;;;261    		pu8SRAM[i] = slaveImage[i];
000012  5ce8              LDRB     r0,[r5,r3]
000014  54e0              STRB     r0,[r4,r3]
000016  1c5b              ADDS     r3,r3,#1              ;259
                  |L1.24|
000018  42bb              CMP      r3,r7                 ;259
00001a  d3fa              BCC      |L1.18|
;;;262    	 }
;;;263    
;;;264    	// Set Slave shadow pointer to begining of rom (where application is located) 
;;;265    	*(volatile uint32_t *) SLAVE_SHADOW_REG = slaveRomStart;
00001c  4801              LDR      r0,|L1.36|
00001e  6006              STR      r6,[r0,#0]
;;;266    }
000020  bdf0              POP      {r4-r7,pc}
;;;267    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x40043404

                          AREA ||i.IPC_dummyCallback||, CODE, READONLY, ALIGN=1

                  IPC_dummyCallback PROC
;;;72     /* dummy callback function */
;;;73     void IPC_dummyCallback(msg_t message, msgId_t idNum, mbxParam_t parameter) {return;}
000000  4770              BX       lr
;;;74     
                          ENDP


                          AREA ||i.IPC_getMbxParameter||, CODE, READONLY, ALIGN=2

                  IPC_getMbxParameter PROC
;;;145    /* return the parameter */
;;;146    mbxParam_t IPC_getMbxParameter(mbxId_t mbxNum) {
000000  4902              LDR      r1,|L3.12|
;;;147    	
;;;148    	Mbx* lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6849              LDR      r1,[r1,#4]  ; mbxLocalTablePtr
;;;149    	lPtr += mbxNum;
000004  eb011000          ADD      r0,r1,r0,LSL #4
;;;150    	return (lPtr->mbxParam);
000008  6880              LDR      r0,[r0,#8]
;;;151    }
00000a  4770              BX       lr
;;;152    
                          ENDP

                  |L3.12|
                          DCD      ||.data||

                          AREA ||i.IPC_getMsgId||, CODE, READONLY, ALIGN=2

                  IPC_getMsgId PROC
;;;137    /* return the message id */
;;;138    msgId_t IPC_getMsgId(mbxId_t mbxNum) {
000000  4902              LDR      r1,|L4.12|
;;;139    		
;;;140    	Mbx* lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6849              LDR      r1,[r1,#4]  ; mbxLocalTablePtr
;;;141    	lPtr += mbxNum;
000004  eb011000          ADD      r0,r1,r0,LSL #4
;;;142    	return (lPtr->mbxHeader.msgId);
000008  8880              LDRH     r0,[r0,#4]
;;;143    }
00000a  4770              BX       lr
;;;144    
                          ENDP

                  |L4.12|
                          DCD      ||.data||

                          AREA ||i.IPC_getMsgType||, CODE, READONLY, ALIGN=2

                  IPC_getMsgType PROC
;;;129    /* return the message type */
;;;130    msg_t IPC_getMsgType(mbxId_t mbxNum)	{
000000  4902              LDR      r1,|L5.12|
;;;131    		
;;;132    	Mbx* lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6849              LDR      r1,[r1,#4]  ; mbxLocalTablePtr
;;;133    	lPtr += mbxNum;
000004  eb011000          ADD      r0,r1,r0,LSL #4
;;;134    	return (lPtr->mbxHeader.msg);
000008  7880              LDRB     r0,[r0,#2]
;;;135    }
00000a  4770              BX       lr
;;;136    
                          ENDP

                  |L5.12|
                          DCD      ||.data||

                          AREA ||i.IPC_haltSlave||, CODE, READONLY, ALIGN=2

                  IPC_haltSlave PROC
;;;287    /* put the SLAVE processor back in reset */
;;;288    void IPC_haltSlave(void) {
000000  b50c              PUSH     {r2,r3,lr}
;;;289    
;;;290    	volatile uint32_t u32REG, u32Val;
;;;291    	
;;;292    	// Check if M0 is reset by reading status
;;;293    	u32REG = LPC_RGU->RESET_ACTIVE_STATUS1;
000002  480a              LDR      r0,|L6.44|
000004  f8d01154          LDR      r1,[r0,#0x154]
000008  9101              STR      r1,[sp,#4]
00000a  e00a              B        |L6.34|
                  |L6.12|
;;;294    			
;;;295    	// If the M0 has reset not asserted, halt it... 
;;;296    	// in u32REG, status register, 1 = no reset
;;;297    	while ((u32REG & (1u << 24)))
;;;298    	{
;;;299    		u32Val = ( (~u32REG) | (1 << 24));
00000c  9901              LDR      r1,[sp,#4]
00000e  43c9              MVNS     r1,r1
000010  f0417180          ORR      r1,r1,#0x1000000
000014  9100              STR      r1,[sp,#0]
;;;300    		LPC_RGU->RESET_CTRL1 = u32Val;
000016  9900              LDR      r1,[sp,#0]
000018  f8c01104          STR      r1,[r0,#0x104]
;;;301    		u32REG = LPC_RGU->RESET_ACTIVE_STATUS1;			
00001c  f8d01154          LDR      r1,[r0,#0x154]
000020  9101              STR      r1,[sp,#4]
                  |L6.34|
000022  9901              LDR      r1,[sp,#4]            ;297
000024  01c9              LSLS     r1,r1,#7              ;297
000026  d4f1              BMI      |L6.12|
;;;302    	}
;;;303    }
000028  bd0c              POP      {r2,r3,pc}
;;;304    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40053000

                          AREA ||i.IPC_initMasterMbx||, CODE, READONLY, ALIGN=2

                  IPC_initMasterMbx PROC
;;;320    	  
;;;321    void IPC_initMasterMbx(CbackItem cbackTable[], Mbx* masterMbxPtr, Mbx* slaveMbxPtr)
000000  b570              PUSH     {r4-r6,lr}
;;;322    {
;;;323    	int i;
;;;324    	Mbx* lPtr;
;;;325    
;;;326    	// initialize the pointers
;;;327    	mbxLocalTablePtr = masterMbxPtr;
000002  4b12              LDR      r3,|L7.76|
000004  6059              STR      r1,[r3,#4]  ; mbxLocalTablePtr
;;;328    	mbxRemoteTablePtr = slaveMbxPtr;
000006  609a              STR      r2,[r3,#8]  ; mbxRemoteTablePtr
;;;329    	
;;;330    	// clear the mailbox and the flags
;;;331    	for(i=0, lPtr = mbxLocalTablePtr; i<NUM_MASTER_MBX; i++,lPtr++) {
000008  2200              MOVS     r2,#0
00000a  2400              MOVS     r4,#0
;;;332    		lPtr->mbxStatus = READY;
;;;333    		lPtr->mbxHeader.msg = MBX_MSG_DEFAULT;
;;;334    		lPtr->mbxHeader.msgId = MBX_MSGID_DEFAULT;
;;;335    		lPtr->mbxParam = MBX_PARAM_DEFAULT;
;;;336    		mbxFlags[i] = NO_MSG;
00000c  2302              MOVS     r3,#2
00000e  4d0f              LDR      r5,|L7.76|
000010  e006              B        |L7.32|
                  |L7.18|
000012  700c              STRB     r4,[r1,#0]            ;332
000014  708c              STRB     r4,[r1,#2]            ;333
000016  808c              STRH     r4,[r1,#4]            ;334
000018  608c              STR      r4,[r1,#8]            ;335
00001a  54ab              STRB     r3,[r5,r2]
00001c  1c52              ADDS     r2,r2,#1              ;331
00001e  3110              ADDS     r1,r1,#0x10           ;331
                  |L7.32|
000020  2a04              CMP      r2,#4                 ;331
000022  dbf6              BLT      |L7.18|
;;;337       }
;;;338       
;;;339       // plug the actual callbacks
;;;340       _plugCallbacks(&cbackTable[0], NUM_MASTER_MBX);
000024  2104              MOVS     r1,#4
000026  f7fffffe          BL       _plugCallbacks
;;;341    
;;;342    	SLAVE_TXEV_QUIT();
00002a  4809              LDR      r0,|L7.80|
00002c  6004              STR      r4,[r0,#0]
;;;343    
;;;344    	// disable IRQ
;;;345    	NVIC_DisableIRQ((IRQn_Type)SLAVE_IRQn);	
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       NVIC_DisableIRQ
;;;346    
;;;347    	// clear any pending interrupt
;;;348    	NVIC_ClearPendingIRQ((IRQn_Type)SLAVE_IRQn);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;349    
;;;350    	// set the default priority for the mbx interrupts
;;;351    	NVIC_SetPriority((IRQn_Type)SLAVE_IRQn, MASTER_MAILBOX_PRIORITY);
00003a  2100              MOVS     r1,#0
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       NVIC_SetPriority
;;;352    			
;;;353    	// enable the interrupt
;;;354    	NVIC_EnableIRQ((IRQn_Type)SLAVE_IRQn);	
000042  e8bd4070          POP      {r4-r6,lr}
000046  2001              MOVS     r0,#1
000048  f7ffbffe          B.W      NVIC_EnableIRQ
;;;355    }
;;;356    
                          ENDP

                  |L7.76|
                          DCD      ||.data||
                  |L7.80|
                          DCD      0x40043400

                          AREA ||i.IPC_initSlaveMbx||, CODE, READONLY, ALIGN=2

                  IPC_initSlaveMbx PROC
;;;192    /* initialize the slave MBX ipc framework */
;;;193    void IPC_initSlaveMbx(CbackItem cbackTable[], Mbx* masterMbxPtr, Mbx* slaveMbxPtr)
000000  b570              PUSH     {r4-r6,lr}
;;;194    {	
;;;195    	mbxId_t i;			
;;;196    	Mbx* lPtr;
;;;197    
;;;198    	// initialize the pointers
;;;199    	mbxLocalTablePtr = slaveMbxPtr;
000002  4b13              LDR      r3,|L8.80|
000004  605a              STR      r2,[r3,#4]  ; mbxLocalTablePtr
;;;200    	mbxRemoteTablePtr = masterMbxPtr;
000006  6099              STR      r1,[r3,#8]  ; mbxRemoteTablePtr
;;;201    
;;;202    	// clear the mailbox and the flags
;;;203    	for(i=(mbxId_t)0, lPtr = mbxLocalTablePtr; i<NUM_SLAVE_MBX; i++,lPtr++) {
000008  2100              MOVS     r1,#0
00000a  2400              MOVS     r4,#0
;;;204    	
;;;205    		lPtr->mbxStatus = READY;
;;;206    		lPtr->mbxHeader.msg = MBX_MSG_DEFAULT;
;;;207    		lPtr->mbxHeader.msgId = MBX_MSGID_DEFAULT;
;;;208    		lPtr->mbxParam = MBX_PARAM_DEFAULT;
;;;209    		mbxFlags[i] = NO_MSG;
00000c  2302              MOVS     r3,#2
00000e  4d10              LDR      r5,|L8.80|
000010  e007              B        |L8.34|
                  |L8.18|
000012  7014              STRB     r4,[r2,#0]            ;205
000014  7094              STRB     r4,[r2,#2]            ;206
000016  8094              STRH     r4,[r2,#4]            ;207
000018  6094              STR      r4,[r2,#8]            ;208
00001a  546b              STRB     r3,[r5,r1]
00001c  1c49              ADDS     r1,r1,#1              ;203
00001e  b2c9              UXTB     r1,r1                 ;203
000020  3210              ADDS     r2,r2,#0x10           ;203
                  |L8.34|
000022  2904              CMP      r1,#4                 ;203
000024  d3f5              BCC      |L8.18|
;;;210    	}
;;;211    
;;;212        // plug the actual callbacks functions 
;;;213    	_plugCallbacks(&cbackTable[0], NUM_SLAVE_MBX);
000026  2104              MOVS     r1,#4
000028  f7fffffe          BL       _plugCallbacks
;;;214    
;;;215    	NVIC_DisableIRQ((IRQn_Type)MASTER_IRQn);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       NVIC_DisableIRQ
;;;216    
;;;217    	MASTER_TXEV_QUIT();
000032  4808              LDR      r0,|L8.84|
000034  6004              STR      r4,[r0,#0]
;;;218    
;;;219    	// clear the interrupt
;;;220    	NVIC_ClearPendingIRQ((IRQn_Type)MASTER_IRQn);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;221    			
;;;222    	// set the default priority for the interrupts
;;;223    	NVIC_SetPriority((IRQn_Type)MASTER_IRQn, SLAVE_MAILBOX_PRIORITY);
00003c  2100              MOVS     r1,#0
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       NVIC_SetPriority
;;;224    				
;;;225    	// enable the interrupt
;;;226    	NVIC_EnableIRQ((IRQn_Type)MASTER_IRQn);
000044  e8bd4070          POP      {r4-r6,lr}
000048  2001              MOVS     r0,#1
00004a  f7ffbffe          B.W      NVIC_EnableIRQ
;;;227    }
;;;228    	
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      ||.data||
                  |L8.84|
                          DCD      0x40043130

                          AREA ||i.IPC_queryLocalMbx||, CODE, READONLY, ALIGN=2

                  IPC_queryLocalMbx PROC
;;;119    /* return the local mailbox status */
;;;120    mbxStat_t IPC_queryLocalMbx(mbxId_t mbxNum) 	{		
000000  4902              LDR      r1,|L9.12|
;;;121    
;;;122    	Mbx* lPtr;
;;;123    		
;;;124    	lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6849              LDR      r1,[r1,#4]  ; mbxLocalTablePtr
;;;125    	lPtr += mbxNum;
000004  eb011000          ADD      r0,r1,r0,LSL #4
;;;126    	return (lPtr->mbxStatus);
000008  7800              LDRB     r0,[r0,#0]
;;;127    }
00000a  4770              BX       lr
;;;128    
                          ENDP

                  |L9.12|
                          DCD      ||.data||

                          AREA ||i.IPC_queryRemoteMbx||, CODE, READONLY, ALIGN=2

                  IPC_queryRemoteMbx PROC
;;;158    /* return the remote mailbox status */
;;;159    mbxStat_t IPC_queryRemoteMbx(mbxId_t mbxNum) {
000000  4902              LDR      r1,|L10.12|
;;;160    
;;;161    	Mbx* rPtr = (Mbx*)(mbxRemoteTablePtr);	
000002  6889              LDR      r1,[r1,#8]  ; mbxRemoteTablePtr
;;;162    	rPtr += mbxNum;
000004  eb011000          ADD      r0,r1,r0,LSL #4
;;;163    	return (rPtr->mbxStatus);
000008  7800              LDRB     r0,[r0,#0]
;;;164    }
00000a  4770              BX       lr
;;;165    	
                          ENDP

                  |L10.12|
                          DCD      ||.data||

                          AREA ||i.IPC_resetMbxFlag||, CODE, READONLY, ALIGN=2

                  IPC_resetMbxFlag PROC
;;;77      ***********************************************************************/
;;;78     void IPC_resetMbxFlag(mbxId_t mbxNum) {
000000  2100              MOVS     r1,#0
000002  f3818811          MSR      BASEPRI,r1
;;;79     
;;;80     		// on cortex M4/M3 use primask
;;;81     		// on cortex M0 disable interrupts globally
;;;82     		IRQ_LOCK_KEY
;;;83     
;;;84     		_lockInts();
;;;85     		mbxFlags[mbxNum] = NO_MSG;
000006  4b03              LDR      r3,|L11.20|
000008  2202              MOVS     r2,#2
00000a  541a              STRB     r2,[r3,r0]
00000c  f3818811          MSR      BASEPRI,r1
;;;86     		_unlockInts();
;;;87     }
000010  4770              BX       lr
;;;88     
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.IPC_sendMsg||, CODE, READONLY, ALIGN=2

                  IPC_sendMsg PROC
;;;165    	
;;;166    void IPC_sendMsg(mbxId_t mbxNum, msg_t msg, msgId_t msgNum, mbxParam_t param) {
000000  b510              PUSH     {r4,lr}
;;;167    
;;;168    	Mbx* rPtr = (Mbx*)(mbxRemoteTablePtr);	
000002  4c06              LDR      r4,|L12.28|
000004  68a4              LDR      r4,[r4,#8]  ; mbxRemoteTablePtr
;;;169    	rPtr += mbxNum;
000006  eb041000          ADD      r0,r4,r0,LSL #4
;;;170    		
;;;171    	// prepare the information
;;;172    	rPtr->mbxHeader.msg = msg;
00000a  7081              STRB     r1,[r0,#2]
;;;173    	rPtr->mbxHeader.msgId = msgNum;	
00000c  8082              STRH     r2,[r0,#4]
;;;174    	rPtr->mbxParam = param;
00000e  6083              STR      r3,[r0,#8]
;;;175    	rPtr->mbxStatus = PROCESS;
000010  2101              MOVS     r1,#1
000012  7001              STRB     r1,[r0,#0]
;;;176    
;;;177    	// make sure all data transactions complete before next instruction is executed
;;;178    	__DSB();  	
000014  f3bf8f4f          DSB      
;;;179    							
;;;180    	// now trigger the remote processor
;;;181    #ifdef KEIL
;;;182    	__sev();
000018  bf40              SEV      
;;;183    #else
;;;184    	__SEV();
;;;185    #endif
;;;186    }
00001a  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  |L12.28|
                          DCD      ||.data||

                          AREA ||i.IPC_startSlave||, CODE, READONLY, ALIGN=2

                  IPC_startSlave PROC
;;;269    /* take SLAVE processor out of reset */
;;;270    void IPC_startSlave(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;271    {
;;;272    	volatile uint32_t u32REG, u32Val;
;;;273    	
;;;274    	// Release Slave from reset, first read status 
;;;275    	u32REG = LPC_RGU->RESET_ACTIVE_STATUS1;
000002  480a              LDR      r0,|L13.44|
000004  f8d01154          LDR      r1,[r0,#0x154]
000008  9101              STR      r1,[sp,#4]
;;;276    			
;;;277    	// If the M0 is being held in reset, release it... 
;;;278    	// 1 = no reset, 0 = reset
;;;279    	while(!(u32REG & (1u << 24)))
;;;280    	{
;;;281    		u32Val = (~(u32REG) & (~(1 << 24)));
00000a  f06f7380          MVN      r3,#0x1000000
00000e  e009              B        |L13.36|
                  |L13.16|
000010  9a01              LDR      r2,[sp,#4]
000012  ea230102          BIC      r1,r3,r2
000016  9100              STR      r1,[sp,#0]
;;;282    		LPC_RGU->RESET_CTRL1 = u32Val;
000018  9900              LDR      r1,[sp,#0]
00001a  f8c01104          STR      r1,[r0,#0x104]
;;;283    		u32REG = LPC_RGU->RESET_ACTIVE_STATUS1;
00001e  f8d01154          LDR      r1,[r0,#0x154]
000022  9101              STR      r1,[sp,#4]
                  |L13.36|
000024  9901              LDR      r1,[sp,#4]            ;279
000026  01c9              LSLS     r1,r1,#7              ;279
000028  d5f2              BPL      |L13.16|
;;;284    	};
;;;285    }
00002a  bd0c              POP      {r2,r3,pc}
;;;286    
                          ENDP

                  |L13.44|
                          DCD      0x40053000

                          AREA ||i.M0CORE_IRQHandler||, CODE, READONLY, ALIGN=2

                  M0CORE_IRQHandler PROC
;;;358    /* interrupt to master from slave */
;;;359    void M0CORE_IRQHandler() {
000000  b570              PUSH     {r4-r6,lr}
;;;360    
;;;361    	mbxId_t i;
;;;362    		
;;;363    	// acknowledge the interrupt
;;;364    	SLAVE_TXEV_QUIT();
000002  490a              LDR      r1,|L14.44|
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]
;;;365    
;;;366    	for(i=(mbxId_t)0;i<NUM_MASTER_MBX;i++) {
000008  2400              MOVS     r4,#0
;;;367    
;;;368    		if(PROCESS == IPC_queryLocalMbx(i)) {
;;;369    
;;;370    			_mbxProcess(i);
;;;371    
;;;372    			mbxFlags[i] = MSG_PENDING;			
00000a  4e09              LDR      r6,|L14.48|
00000c  2501              MOVS     r5,#1
                  |L14.14|
00000e  4620              MOV      r0,r4                 ;368
000010  f7fffffe          BL       IPC_queryLocalMbx
000014  2801              CMP      r0,#1                 ;368
000016  d103              BNE      |L14.32|
000018  4620              MOV      r0,r4                 ;370
00001a  f7fffffe          BL       _mbxProcess
00001e  5535              STRB     r5,[r6,r4]
                  |L14.32|
000020  1c64              ADDS     r4,r4,#1              ;366
000022  b2e4              UXTB     r4,r4                 ;366
000024  2c04              CMP      r4,#4                 ;366
000026  d3f2              BCC      |L14.14|
;;;373    		}
;;;374    	};
;;;375    }
000028  bd70              POP      {r4-r6,pc}
;;;376    
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      0x40043400
                  |L14.48|
                          DCD      ||.data||

                          AREA ||i.M0_M4CORE_IRQHandler||, CODE, READONLY, ALIGN=2

                  M0_M4CORE_IRQHandler PROC
;;;231    /* interrupt from Master on Slave side */
;;;232    void M0_M4CORE_IRQHandler() {		
000000  b570              PUSH     {r4-r6,lr}
;;;233    
;;;234    	mbxId_t i;
;;;235    		
;;;236    	// quit the interrupt
;;;237    	MASTER_TXEV_QUIT();
000002  490a              LDR      r1,|L15.44|
000004  2000              MOVS     r0,#0
000006  6008              STR      r0,[r1,#0]
;;;238    
;;;239    	for(i=(mbxId_t)0; i<NUM_SLAVE_MBX;i++) {
000008  2400              MOVS     r4,#0
;;;240    	
;;;241    		if(PROCESS == IPC_queryLocalMbx(i)) {
;;;242    			_mbxProcess(i);
;;;243    			mbxFlags[i] = MSG_PENDING;
00000a  4e09              LDR      r6,|L15.48|
00000c  2501              MOVS     r5,#1
                  |L15.14|
00000e  4620              MOV      r0,r4                 ;241
000010  f7fffffe          BL       IPC_queryLocalMbx
000014  2801              CMP      r0,#1                 ;241
000016  d103              BNE      |L15.32|
000018  4620              MOV      r0,r4                 ;242
00001a  f7fffffe          BL       _mbxProcess
00001e  5535              STRB     r5,[r6,r4]
                  |L15.32|
000020  1c64              ADDS     r4,r4,#1              ;239
000022  b2e4              UXTB     r4,r4                 ;239
000024  2c04              CMP      r4,#4                 ;239
000026  d3f2              BCC      |L15.14|
;;;244    		}
;;;245    	};
;;;246    }
000028  bd70              POP      {r4-r6,pc}
;;;247    
                          ENDP

00002a  0000              DCW      0x0000
                  |L15.44|
                          DCD      0x40043130
                  |L15.48|
                          DCD      ||.data||

                          AREA ||i.NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_ClearPendingIRQ PROC
;;;1140    */
;;;1141   static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1142   {
;;;1143     NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01280          STR      r1,[r0,#0x280]
;;;1144   }
000014  4770              BX       lr
;;;1145   
                          ENDP


                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_DisableIRQ PROC
;;;1099    */
;;;1100   static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1101   {
;;;1102     NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01180          STR      r1,[r0,#0x180]
;;;1103   }
000014  4770              BX       lr
;;;1104   
                          ENDP


                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1085    */
;;;1086   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1087   {
;;;1088   /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
;;;1089     NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1090   }
000014  4770              BX       lr
;;;1091   
                          ENDP


                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  NVIC_SetPriority PROC
;;;1170    */
;;;1171   static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0709              LSLS     r1,r1,#28
;;;1172   {
;;;1173     if(IRQn < 0) {
;;;1174       SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
000002  0e09              LSRS     r1,r1,#24
000004  2800              CMP      r0,#0                 ;1173
000006  da06              BGE      |L19.22|
000008  f000000f          AND      r0,r0,#0xf
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8801d14          STRB     r1,[r0,#0xd14]
;;;1175     else {
;;;1176       NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
;;;1177   }
000014  4770              BX       lr
                  |L19.22|
000016  f10020e0          ADD      r0,r0,#0xe000e000     ;1176
00001a  f8801400          STRB     r1,[r0,#0x400]        ;1176
00001e  4770              BX       lr
;;;1178   
                          ENDP


                          AREA ||i._mbxProcess||, CODE, READONLY, ALIGN=2

                  _mbxProcess PROC
;;;89     /* execute a local mailbox callback */
;;;90     static void _mbxProcess(mbxId_t mbxNum)
000000  4904              LDR      r1,|L20.20|
;;;91     {															 
;;;92     	Mbx* lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6849              LDR      r1,[r1,#4]  ; mbxLocalTablePtr
;;;93     	lPtr += mbxNum;
000004  eb011300          ADD      r3,r1,r0,LSL #4
;;;94     
;;;95     	// execute the function callback
;;;96     	(*(lPtr->mbxAction))(lPtr->mbxHeader.msg, lPtr->mbxHeader.msgId, lPtr->mbxParam);
000008  8899              LDRH     r1,[r3,#4]
00000a  7898              LDRB     r0,[r3,#2]
00000c  e9d32302          LDRD     r2,r3,[r3,#8]
000010  4718              BX       r3
;;;97     }
;;;98     
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      ||.data||

                          AREA ||i._plugCallbacks||, CODE, READONLY, ALIGN=2

                  _plugCallbacks PROC
;;;305    
;;;306    static void _plugCallbacks(CbackItem callBackTable[], uint32_t numMbx)
000000  b530              PUSH     {r4,r5,lr}
;;;307    {	 
;;;308    	Mbx* lPtr;
;;;309    	mbxId_t i;
;;;310    
;;;311    	for(i=(mbxId_t)0;i<numMbx;i++) {
000002  2200              MOVS     r2,#0
;;;312    
;;;313     		lPtr = mbxLocalTablePtr;
000004  4b07              LDR      r3,|L21.36|
000006  685b              LDR      r3,[r3,#4]
000008  e009              B        |L21.30|
                  |L21.10|
;;;314    		lPtr += callBackTable[i].mbxNum;
00000a  f8104032          LDRB     r4,[r0,r2,LSL #3]
00000e  eb031404          ADD      r4,r3,r4,LSL #4
;;;315    		
;;;316    		lPtr->mbxAction = (mbxCallback_t) callBackTable[i].func;
000012  eb0005c2          ADD      r5,r0,r2,LSL #3
000016  686d              LDR      r5,[r5,#4]
000018  60e5              STR      r5,[r4,#0xc]
00001a  1c52              ADDS     r2,r2,#1              ;311
00001c  b2d2              UXTB     r2,r2                 ;311
                  |L21.30|
00001e  428a              CMP      r2,r1                 ;311
000020  d3f3              BCC      |L21.10|
;;;317    	};
;;;318    }
000022  bd30              POP      {r4,r5,pc}
;;;319    
                          ENDP

                  |L21.36|
                          DCD      ||.data||

                          AREA ||i._setMbxStatus||, CODE, READONLY, ALIGN=2

                  _setMbxStatus PROC
;;;100    /* change the local mailbox status */
;;;101    void _setMbxStatus(mbxId_t mbxNum, mbxStat_t status)
000000  4a09              LDR      r2,|L22.40|
;;;102    {
;;;103    	// if cortex M4/M3 use primask, else disable interrupts globally
;;;104    	IRQ_LOCK_KEY
;;;105    
;;;106    	Mbx* lPtr = (Mbx*) (mbxLocalTablePtr);
000002  6852              LDR      r2,[r2,#4]  ; mbxLocalTablePtr
;;;107    	lPtr += mbxNum;
000004  eb021200          ADD      r2,r2,r0,LSL #4
000008  2300              MOVS     r3,#0
00000a  f3838811          MSR      BASEPRI,r3
;;;108    
;;;109    	_lockInts();
;;;110    
;;;111    	lPtr->mbxStatus = status;
00000e  7011              STRB     r1,[r2,#0]
;;;112    	if((status == READY) || (status == ERROR_OCCURRED)) mbxFlags[mbxNum] = NO_MSG;
000010  2900              CMP      r1,#0
000012  d001              BEQ      |L22.24|
000014  2903              CMP      r1,#3
000016  d102              BNE      |L22.30|
                  |L22.24|
000018  4a03              LDR      r2,|L22.40|
00001a  2102              MOVS     r1,#2
00001c  5411              STRB     r1,[r2,r0]
                  |L22.30|
;;;113    
;;;114    	__DSB(); /* sync the data */
00001e  f3bf8f4f          DSB      
000022  f3838811          MSR      BASEPRI,r3
;;;115    
;;;116    	_unlockInts();
;;;117    }
000026  4770              BX       lr
;;;118    	
                          ENDP

                  |L22.40|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  mbxFlags
                          DCD      0x00000000
                  mbxLocalTablePtr
                          DCD      0x00000000
                  mbxRemoteTablePtr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\common\\src\\ipc_mbx.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_ipc_mbx_c_e30818db____REV16|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___9_ipc_mbx_c_e30818db____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_ipc_mbx_c_e30818db____REVSH|
#line 144
|__asm___9_ipc_mbx_c_e30818db____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
