; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progpt.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progpt.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\progpt.crf src\progpt.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9ServoLoop8setGainsEii PROC ; ServoLoop::setGains(int, int)
;;;203    
;;;204    void ServoLoop::setGains(int32_t pgain, int32_t dgain)
000000  60c1              STR      r1,[r0,#0xc]
;;;205    {
;;;206    	m_pgain = pgain;
;;;207    	m_dgain = dgain;	
000002  6102              STR      r2,[r0,#0x10]
;;;208    }
000004  4770              BX       lr
;;;209    
                          ENDP

                  _ZN6ProgPt7getValsEv PROC ; ProgPt::getVals()
;;;46     
;;;47     void ProgPt::getVals()
000006  b51c              PUSH     {r2-r4,lr}
;;;48     {
;;;49     	int32_t pgain, dgain; 
;;;50     	
;;;51     	prm_get("Pan P gain", &pgain, END);
000008  2200              MOVS     r2,#0
00000a  a901              ADD      r1,sp,#4
00000c  a0bf              ADR      r0,|L1.780|
00000e  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;52     	prm_get("Pan D gain", &dgain, END);
000012  2200              MOVS     r2,#0
000014  4669              MOV      r1,sp
000016  a0c0              ADR      r0,|L1.792|
000018  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;53     	m_panLoop.setGains(pgain, dgain);
00001c  e9dd2100          LDRD     r2,r1,[sp,#0]
000020  48c0              LDR      r0,|L1.804|
000022  f7fffffe          BL       _ZN9ServoLoop8setGainsEii ; ServoLoop::setGains(int, int)
;;;54     
;;;55     	prm_get("Tilt P gain", &pgain, END);
000026  2200              MOVS     r2,#0
000028  a901              ADD      r1,sp,#4
00002a  a0bf              ADR      r0,|L1.808|
00002c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;56     	prm_get("Tilt D gain", &dgain, END);
000030  2200              MOVS     r2,#0
000032  4669              MOV      r1,sp
000034  a0bf              ADR      r0,|L1.820|
000036  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;57     	m_tiltLoop.setGains(pgain, dgain);
00003a  48ba              LDR      r0,|L1.804|
00003c  e9dd2100          LDRD     r2,r1,[sp,#0]
000040  3014              ADDS     r0,r0,#0x14
000042  f7fffffe          BL       _ZN9ServoLoop8setGainsEii ; ServoLoop::setGains(int, int)
;;;58     }
000046  bd1c              POP      {r2-r4,pc}
;;;59     
                          ENDP

                  _ZN6ProgPt14shadowCallbackEPKcRKj PROC ; ProgPt::shadowCallback(const char*, const unsigned&)
;;;41     
;;;42     void ProgPt::shadowCallback(const char *id, const uint32_t &val)
000048  e7fe              B        _ZN6ProgPt7getValsEv ; ProgPt::getVals()
;;;43     {
;;;44     	getVals();
;;;45     }
;;;46     
                          ENDP

                  _ZN6ProgPtC2Eh                  ; Alternate entry point ; ProgPt::ProgPt__sub_object(unsigned char)
                  _ZN6ProgPtC1Eh PROC ; ProgPt::ProgPt(unsigned char)
;;;59     
;;;60     ProgPt::ProgPt(uint8_t progIndex)
;;;61     { 
;;;62     	prm_add("Pan P gain", PROG_FLAGS(progIndex) | PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_5+4,
;;;63     		"@c Tuning @m -1500 @M 1500 Pan axis proportional gain (default 350)", INT32(350), END);
;;;64     	prm_setShadowCallback("Pan P gain", (ShadowCallback)ProgPt::shadowCallback);
;;;65     	prm_add("Pan D gain", PROG_FLAGS(progIndex) | PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_5+3, 
;;;66     		"@c Tuning @m -1500 @M 1500 Pan axis derivative gain (default 600)", INT32(600), END);
;;;67     	prm_setShadowCallback("Pan D gain", (ShadowCallback)ProgPt::shadowCallback);
;;;68     	prm_add("Tilt P gain", PROG_FLAGS(progIndex) | PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_5+2, 
;;;69     		"@c Tuning @m -1500 @M 1500 Tilt axis proportional gain (default 500)", INT32(500), END);
;;;70     	prm_setShadowCallback("Tilt P gain", (ShadowCallback)ProgPt::shadowCallback);
;;;71     	prm_add("Tilt D gain", PROG_FLAGS(progIndex) | PRM_FLAG_SIGNED | PRM_FLAG_SLIDER, PRM_PRIORITY_5+1, 
;;;72     		"@c Tuning @m -1500 @M 1500 Tilt axis derivative gain (default 700)", INT32(700), END);
;;;73     	prm_setShadowCallback("Tilt D gain", (ShadowCallback)ProgPt::shadowCallback);
;;;74     	
;;;75     	getVals();	
;;;76     	
;;;77     	m_view = 0;
;;;78     	ProgBlobs::staticInit(progIndex);
;;;79     }
;;;80     
00004a  e92d43fe          PUSH     {r1-r9,lr}
00004e  4680              MOV      r8,r0
000050  460f              MOV      r7,r1
000052  48bb              LDR      r0,|L1.832|
000054  f8c80000          STR      r0,[r8,#0]
000058  f44f70af          MOV      r0,#0x15e
00005c  2604              MOVS     r6,#4
00005e  e9cd6000          STRD     r6,r0,[sp,#0]
000062  f1070119          ADD      r1,r7,#0x19
000066  2001              MOVS     r0,#1
000068  4088              LSLS     r0,r0,r1
00006a  f04f417e          MOV      r1,#0xfe000000
00006e  4381              BICS     r1,r1,r0
000070  2500              MOVS     r5,#0
000072  f44174c0          ORR      r4,r1,#0x180
000076  9502              STR      r5,[sp,#8]
000078  4bb2              LDR      r3,|L1.836|
00007a  f241328c          MOV      r2,#0x138c
00007e  4621              MOV      r1,r4
000080  a0a2              ADR      r0,|L1.780|
000082  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
000086  f2af013f          ADR      r1,_ZN6ProgPt14shadowCallbackEPKcRKj + 1 ; ProgPt::shadowCallback(const char*, const unsigned&)
00008a  a0a0              ADR      r0,|L1.780|
00008c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
000090  f44f7016          MOV      r0,#0x258
000094  e9cd6000          STRD     r6,r0,[sp,#0]
000098  4621              MOV      r1,r4
00009a  4bab              LDR      r3,|L1.840|
00009c  f241328b          MOV      r2,#0x138b
0000a0  9502              STR      r5,[sp,#8]
0000a2  a09d              ADR      r0,|L1.792|
0000a4  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0000a8  f2af0163          ADR      r1,_ZN6ProgPt14shadowCallbackEPKcRKj + 1 ; ProgPt::shadowCallback(const char*, const unsigned&)
0000ac  a09a              ADR      r0,|L1.792|
0000ae  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
0000b2  f44f70fa          MOV      r0,#0x1f4
0000b6  e9cd6000          STRD     r6,r0,[sp,#0]
0000ba  4621              MOV      r1,r4
0000bc  4ba3              LDR      r3,|L1.844|
0000be  f241328a          MOV      r2,#0x138a
0000c2  9502              STR      r5,[sp,#8]
0000c4  a098              ADR      r0,|L1.808|
0000c6  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0000ca  f2af0183          ADR      r1,_ZN6ProgPt14shadowCallbackEPKcRKj + 1 ; ProgPt::shadowCallback(const char*, const unsigned&)
0000ce  a096              ADR      r0,|L1.808|
0000d0  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
0000d4  f44f702f          MOV      r0,#0x2bc
0000d8  e9cd6000          STRD     r6,r0,[sp,#0]
0000dc  4621              MOV      r1,r4
0000de  4b9c              LDR      r3,|L1.848|
0000e0  f2413289          MOV      r2,#0x1389
0000e4  9502              STR      r5,[sp,#8]
0000e6  a093              ADR      r0,|L1.820|
0000e8  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0000ec  f2af01a7          ADR      r1,_ZN6ProgPt14shadowCallbackEPKcRKj + 1 ; ProgPt::shadowCallback(const char*, const unsigned&)
0000f0  a090              ADR      r0,|L1.820|
0000f2  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
0000f6  f7fffffe          BL       _ZN6ProgPt7getValsEv ; ProgPt::getVals()
0000fa  4896              LDR      r0,|L1.852|
0000fc  8005              STRH     r5,[r0,#0]
0000fe  4638              MOV      r0,r7
000100  f7fffffe          BL       _ZN9ProgBlobs10staticInitEh ; ProgBlobs::staticInit(unsigned char)
000104  4640              MOV      r0,r8
000106  e8bd83fe          POP      {r1-r9,pc}
                          ENDP

                  _Z12createProgPth PROC ; createProgPt(unsigned char)
;;;33     #ifndef LEGO
;;;34     REGISTER_PROG(ProgPt, PROG_NAME_PANTILT, "perform pan/tilt tracking", PROG_BLOBS_MIN_TYPE, PROG_BLOBS_MAX_TYPE);
00010a  b510              PUSH     {r4,lr}
00010c  4604              MOV      r4,r0
00010e  4992              LDR      r1,|L1.856|
000110  2004              MOVS     r0,#4
000112  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
000116  2800              CMP      r0,#0
000118  d003              BEQ      |L1.290|
00011a  4621              MOV      r1,r4
00011c  e8bd4010          POP      {r4,lr}
000120  e7fe              B        _ZN6ProgPtC1Eh ; ProgPt::ProgPt(unsigned char)
                  |L1.290|
000122  bd10              POP      {r4,pc}
;;;35     #endif
                          ENDP

                  _ZN9ServoLoop5resetEv PROC ; ServoLoop::reset()
;;;197    
;;;198    void ServoLoop::reset()
000124  b508              PUSH     {r3,lr}
;;;199    {
;;;200    	m_pos = RCS_CENTER_POS;
000126  f44f71fa          MOV      r1,#0x1f4
00012a  f8401b08          STR      r1,[r0],#8
;;;201    	rcs_setPos(m_axis, m_pos);
00012e  9100              STR      r1,[sp,#0]
000130  4669              MOV      r1,sp
000132  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
;;;202    }
000136  bd08              POP      {r3,pc}
;;;203    
                          ENDP

                  _ZN9ServoLoopC2Ehjj                  ; Alternate entry point ; ServoLoop::ServoLoop__sub_object(unsigned char, unsigned, unsigned)
                  _ZN9ServoLoopC1Ehjj PROC ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
;;;169    
;;;170    ServoLoop::ServoLoop(uint8_t axis, uint32_t pgain, uint32_t dgain)
;;;171    {
;;;172    	m_axis = axis;
;;;173    	m_pgain = pgain;
;;;174    	m_dgain = dgain;
;;;175    	m_prevError = 0x80000000;
;;;176    	reset();
;;;177    }
;;;178    
000138  b510              PUSH     {r4,lr}
00013a  4604              MOV      r4,r0
00013c  7221              STRB     r1,[r4,#8]
00013e  60e2              STR      r2,[r4,#0xc]
000140  6123              STR      r3,[r4,#0x10]
000142  f04f4000          MOV      r0,#0x80000000
000146  6060              STR      r0,[r4,#4]
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       _ZN9ServoLoop5resetEv ; ServoLoop::reset()
00014e  4620              MOV      r0,r4
000150  bd10              POP      {r4,pc}
                          ENDP

                  _ZN9ServoLoop6updateEi PROC ; ServoLoop::update(int)
;;;179    void ServoLoop::update(int32_t error)
000152  b538              PUSH     {r3-r5,lr}
;;;180    {
000154  4604              MOV      r4,r0
000156  460d              MOV      r5,r1
;;;181    	int32_t vel;
;;;182    
;;;183    	if (m_prevError!=0x80000000)
000158  6860              LDR      r0,[r4,#4]
00015a  f1b04f00          CMP      r0,#0x80000000
00015e  d01b              BEQ      |L1.408|
;;;184    	{	
;;;185    		vel = (error*m_pgain + (error - m_prevError)*m_dgain)/1000;
000160  6921              LDR      r1,[r4,#0x10]
000162  1a28              SUBS     r0,r5,r0
000164  4348              MULS     r0,r1,r0
000166  68e1              LDR      r1,[r4,#0xc]
000168  fb050001          MLA      r0,r5,r1,r0
00016c  f44f717a          MOV      r1,#0x3e8
000170  fb90f0f1          SDIV     r0,r0,r1
;;;186    		m_pos += vel;
000174  6822              LDR      r2,[r4,#0]
000176  4410              ADD      r0,r0,r2
000178  6020              STR      r0,[r4,#0]
;;;187    		if (m_pos>RCS_MAX_POS) 
00017a  4288              CMP      r0,r1
00017c  dd01              BLE      |L1.386|
;;;188    			m_pos = RCS_MAX_POS; 
00017e  6021              STR      r1,[r4,#0]
000180  e003              B        |L1.394|
                  |L1.386|
;;;189    		else if (m_pos<RCS_MIN_POS) 
000182  2800              CMP      r0,#0
000184  da01              BGE      |L1.394|
;;;190    			m_pos = RCS_MIN_POS;
000186  2000              MOVS     r0,#0
000188  6020              STR      r0,[r4,#0]
                  |L1.394|
;;;191    
;;;192    		rcs_setPos(m_axis, m_pos);
00018a  8820              LDRH     r0,[r4,#0]
00018c  9000              STR      r0,[sp,#0]
00018e  4669              MOV      r1,sp
000190  f1040008          ADD      r0,r4,#8
000194  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
                  |L1.408|
;;;193    		//cprintf("%d %d %d\n", m_axis, m_pos, vel);
;;;194    	}
;;;195    	m_prevError = error;
000198  6065              STR      r5,[r4,#4]
;;;196    }
00019a  bd38              POP      {r3-r5,pc}
;;;197    
                          ENDP

                  _ZN6ProgPtD2Ev                  ; Alternate entry point ; ProgPt::~ProgPt__sub_object()
                  _ZN6ProgPtD1Ev PROC ; ProgPt::~ProgPt()
;;;80     
;;;81     ProgPt::~ProgPt()
;;;82     {
;;;83     	ProgBlobs::staticExit();
;;;84     	
;;;85     	rcs_setPos(PAN_AXIS, 500);
;;;86     	rcs_setPos(TILT_AXIS, 500);
;;;87     }
;;;88     
00019c  b57c              PUSH     {r2-r6,lr}
00019e  4604              MOV      r4,r0
0001a0  4867              LDR      r0,|L1.832|
0001a2  6020              STR      r0,[r4,#0]
0001a4  f7fffffe          BL       _ZN9ProgBlobs10staticExitEv ; ProgBlobs::staticExit()
0001a8  2000              MOVS     r0,#0
0001aa  f44f75fa          MOV      r5,#0x1f4
0001ae  e9cd5000          STRD     r5,r0,[sp,#0]
0001b2  4669              MOV      r1,sp
0001b4  a801              ADD      r0,sp,#4
0001b6  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
0001ba  2001              MOVS     r0,#1
0001bc  e9cd5000          STRD     r5,r0,[sp,#0]
0001c0  4669              MOV      r1,sp
0001c2  a801              ADD      r0,sp,#4
0001c4  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
0001c8  4620              MOV      r0,r4
0001ca  bd7c              POP      {r2-r6,pc}
                          ENDP

                  _ZN6ProgPtD0Ev PROC ; ProgPt::~ProgPt__deallocating()
0001cc  b510              PUSH     {r4,lr}               ;0
0001ce  f7fffffe          BL       _ZN6ProgPtD1Ev ; ProgPt::~ProgPt()
0001d2  e8bd4010          POP      {r4,lr}               ;0
0001d6  f7ffbffe          B.W      _ZdlPv ; operator delete (void*)
                          ENDP

                  _ZN6ProgPt7acquireEv PROC ; ProgPt::acquire()
;;;89     void ProgPt::acquire()
0001da  b510              PUSH     {r4,lr}
;;;90     {
;;;91     	BlobA *blob;
;;;92     	
;;;93     	blob = g_blobs->getMaxBlob();
0001dc  485f              LDR      r0,|L1.860|
0001de  2200              MOVS     r2,#0
0001e0  4611              MOV      r1,r2
0001e2  6800              LDR      r0,[r0,#0]  ; g_blobs
0001e4  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
;;;94     	if (blob && blob->m_tracker && blob->m_tracker->m_age>30)
0001e8  2800              CMP      r0,#0
0001ea  d008              BEQ      |L1.510|
0001ec  68c0              LDR      r0,[r0,#0xc]
0001ee  2800              CMP      r0,#0
0001f0  d005              BEQ      |L1.510|
0001f2  7a81              LDRB     r1,[r0,#0xa]
0001f4  291e              CMP      r1,#0x1e
0001f6  d902              BLS      |L1.510|
;;;95     		m_index = blob->m_tracker->m_index;
0001f8  4959              LDR      r1,|L1.864|
0001fa  7840              LDRB     r0,[r0,#1]
0001fc  8048              STRH     r0,[r1,#2]
                  |L1.510|
;;;96     }
0001fe  bd10              POP      {r4,pc}
;;;97     	
                          ENDP

                  _ZN6ProgPt5trackEv PROC ; ProgPt::track()
;;;98     BlobA *ProgPt::track()
000200  b570              PUSH     {r4-r6,lr}
;;;99     {
;;;100    	SimpleList<Tracker<BlobA> > *blobsList;
;;;101    	SimpleListNode<Tracker<BlobA> > *i;	
;;;102    	
;;;103    	// create blobs
;;;104    	g_blobs->blobify();
000202  4c56              LDR      r4,|L1.860|
000204  6820              LDR      r0,[r4,#0]  ; g_blobs
000206  f7fffffe          BL       _ZN5Blobs7blobifyEv ; Blobs::blobify()
;;;105    
;;;106    	blobsList = g_blobs->getBlobs();
00020a  6820              LDR      r0,[r4,#0]  ; g_blobs
00020c  f7fffffe          BL       _ZN5Blobs8getBlobsEv ; Blobs::getBlobs()
000210  4605              MOV      r5,r0
;;;107    
;;;108    	if (m_index==-1)
000212  4c53              LDR      r4,|L1.864|
000214  f9b40002          LDRSH    r0,[r4,#2]  ; _ZN6ProgPt7m_indexE
000218  1c40              ADDS     r0,r0,#1
00021a  d101              BNE      |L1.544|
;;;109    		acquire();
00021c  f7fffffe          BL       _ZN6ProgPt7acquireEv ; ProgPt::acquire()
                  |L1.544|
;;;110    
;;;111    	if (m_index>=0)
000220  f9b41002          LDRSH    r1,[r4,#2]  ; _ZN6ProgPt7m_indexE
000224  2900              CMP      r1,#0
000226  db0b              BLT      |L1.576|
;;;112    	{
;;;113    		for (i=blobsList->m_first; i!=NULL; i=i->m_next)
000228  6828              LDR      r0,[r5,#0]
00022a  e005              B        |L1.568|
                  |L1.556|
;;;114    		{
;;;115    			if (i->m_object.m_index==m_index)
00022c  7842              LDRB     r2,[r0,#1]
00022e  428a              CMP      r2,r1
000230  d101              BNE      |L1.566|
;;;116    				return &i->m_object.m_object;
000232  3014              ADDS     r0,r0,#0x14
;;;117    		}
;;;118    		m_index = -1; // invalidate 
;;;119    	}
;;;120    	return NULL;
;;;121    }
000234  bd70              POP      {r4-r6,pc}
                  |L1.566|
000236  6a40              LDR      r0,[r0,#0x24]         ;113
                  |L1.568|
000238  2800              CMP      r0,#0                 ;113
00023a  d1f7              BNE      |L1.556|
00023c  1e40              SUBS     r0,r0,#1              ;118
00023e  8060              STRH     r0,[r4,#2]            ;118
                  |L1.576|
000240  2000              MOVS     r0,#0                 ;120
000242  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP

                  _ZN6ProgPt4loopEPc PROC ; ProgPt::loop(char*)
;;;123    	
;;;124    int ProgPt::loop(char *status)
000244  b510              PUSH     {r4,lr}
;;;125    {
000246  4608              MOV      r0,r1
;;;126    	int32_t panError, tiltError;
;;;127    	uint16_t x, y;
;;;128    	BlobA *blob;
;;;129    	SimpleList<Tracker<BlobA> > *blobsList;
;;;130    
;;;131    	if (ProgBlobs::handleButton(status))
000248  f7fffffe          BL       _ZN9ProgBlobs12handleButtonEPc ; ProgBlobs::handleButton(char*)
00024c  b108              CBZ      r0,|L1.594|
;;;132    		return 1; // 1 indicates override state
00024e  2001              MOVS     r0,#1
;;;133    
;;;134    	SM_OBJECT->stream = 0; // don't capture raw frames, so we can double framerate
;;;135    
;;;136    	blob = track();
;;;137    	
;;;138    	if (blob)
;;;139    	{
;;;140    		x = blob->m_left + (blob->m_right - blob->m_left)/2;
;;;141    		y = blob->m_top + (blob->m_bottom - blob->m_top)/2;
;;;142    
;;;143    		panError = X_CENTER-x;
;;;144    		tiltError = y-Y_CENTER;
;;;145    
;;;146    		m_panLoop.update(panError);
;;;147    		m_tiltLoop.update(tiltError);
;;;148    	}
;;;149    
;;;150    	// send blobs
;;;151    	blobsList = g_blobs->getBlobs();
;;;152    	cc_sendBlobs(g_chirpUsb, blobsList);
;;;153    
;;;154    	cc_setLED();
;;;155    	
;;;156    	return 0;
;;;157    }
000250  bd10              POP      {r4,pc}
                  |L1.594|
000252  4944              LDR      r1,|L1.868|
000254  2000              MOVS     r0,#0                 ;134
000256  7008              STRB     r0,[r1,#0]            ;134
000258  f7fffffe          BL       _ZN6ProgPt5trackEv ; ProgPt::track()
00025c  b1d0              CBZ      r0,|L1.660|
00025e  8882              LDRH     r2,[r0,#4]            ;140
000260  8841              LDRH     r1,[r0,#2]            ;140
000262  1a52              SUBS     r2,r2,r1              ;140
000264  eb0272d2          ADD      r2,r2,r2,LSR #31      ;140
000268  eb010162          ADD      r1,r1,r2,ASR #1       ;140
00026c  b28a              UXTH     r2,r1                 ;140
00026e  8901              LDRH     r1,[r0,#8]            ;141
000270  88c0              LDRH     r0,[r0,#6]            ;141
000272  1a09              SUBS     r1,r1,r0              ;141
000274  eb0171d1          ADD      r1,r1,r1,LSR #31      ;141
000278  eb000061          ADD      r0,r0,r1,ASR #1       ;141
00027c  b284              UXTH     r4,r0                 ;141
00027e  f1c2019e          RSB      r1,r2,#0x9e           ;143
000282  3c68              SUBS     r4,r4,#0x68           ;144
000284  4827              LDR      r0,|L1.804|
000286  f7fffffe          BL       _ZN9ServoLoop6updateEi ; ServoLoop::update(int)
00028a  4826              LDR      r0,|L1.804|
00028c  4621              MOV      r1,r4                 ;147
00028e  3014              ADDS     r0,r0,#0x14           ;147
000290  f7fffffe          BL       _ZN9ServoLoop6updateEi ; ServoLoop::update(int)
                  |L1.660|
000294  4831              LDR      r0,|L1.860|
000296  6800              LDR      r0,[r0,#0]            ;151  ; g_blobs
000298  f7fffffe          BL       _ZN5Blobs8getBlobsEv ; Blobs::getBlobs()
00029c  4601              MOV      r1,r0                 ;151
00029e  4832              LDR      r0,|L1.872|
0002a0  2201              MOVS     r2,#1                 ;152
0002a2  6800              LDR      r0,[r0,#0]            ;152  ; g_chirpUsb
0002a4  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpP10SimpleListI7TrackerI5BlobAEEh ; cc_sendBlobs(Chirp*, SimpleList<Tracker<BlobA>>*, unsigned char)
0002a8  f7fffffe          BL       _Z9cc_setLEDv ; cc_setLED()
0002ac  2000              MOVS     r0,#0                 ;156
0002ae  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  _ZN6ProgPt9getActionEtPPKcS2_ PROC ; ProgPt::getAction(unsigned short, const char**, const char**)
;;;159    int ProgPt::getAction(uint16_t index, const char **name, const char **scriptlet)
0002b0  4608              MOV      r0,r1
;;;160    {
0002b2  4611              MOV      r1,r2
0002b4  461a              MOV      r2,r3
;;;161    	return ProgBlobs::staticGetAction(index, name, scriptlet);
0002b6  f7ffbffe          B.W      _ZN9ProgBlobs15staticGetActionEtPPKcS2_ ; ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
;;;162    }
;;;163    
                          ENDP

                  _ZN6ProgPt6packetEhPKhhb PROC ; ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;164    int ProgPt::packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
0002ba  4608              MOV      r0,r1
;;;165    {
0002bc  4611              MOV      r1,r2
0002be  461a              MOV      r2,r3
0002c0  9b00              LDR      r3,[sp,#0]
;;;166    	return ProgBlobs::staticPacket(type, data, len, checksum);
0002c2  f7ffbffe          B.W      _ZN9ProgBlobs12staticPacketEhPKhhb ; ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
;;;167    }
;;;168    
                          ENDP

                  __sti___10_progpt_cpp_abf46733 PROC
0002c6  e92d41f0          PUSH     {r4-r8,lr}            ;0
0002ca  2420              MOVS     r4,#0x20              ;0
0002cc  a227              ADR      r2,|L1.876|
0002ce  a32b              ADR      r3,|L1.892|
0002d0  252f              MOVS     r5,#0x2f              ;0
0002d2  f2af11c9          ADR      r1,_Z12createProgPth + 1 ; createProgPt(unsigned char)
0002d6  4f30              LDR      r7,|L1.920|
0002d8  7838              LDRB     r0,[r7,#0]            ;0  ; _ZN13ProgTableUtil16m_progTableIndexE
0002da  1c46              ADDS     r6,r0,#1              ;0
0002dc  703e              STRB     r6,[r7,#0]            ;0
0002de  4e2f              LDR      r6,|L1.924|
0002e0  eb061000          ADD      r0,r6,r0,LSL #4       ;0
0002e4  6002              STR      r2,[r0,#0]            ;0
0002e6  6043              STR      r3,[r0,#4]            ;0
0002e8  7204              STRB     r4,[r0,#8]            ;0
0002ea  7245              STRB     r5,[r0,#9]            ;0
0002ec  60c1              STR      r1,[r0,#0xc]          ;0
0002ee  2300              MOVS     r3,#0                 ;0
0002f0  461a              MOV      r2,r3                 ;0
0002f2  4619              MOV      r1,r3                 ;0
0002f4  480b              LDR      r0,|L1.804|
0002f6  f7fffffe          BL       _ZN9ServoLoopC1Ehjj ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
0002fa  e8bd41f0          POP      {r4-r8,lr}            ;0
0002fe  2300              MOVS     r3,#0                 ;0
000300  4808              LDR      r0,|L1.804|
000302  2101              MOVS     r1,#1                 ;0
000304  461a              MOV      r2,r3                 ;0
000306  3014              ADDS     r0,r0,#0x14           ;0
000308  e7fe              B        _ZN9ServoLoopC1Ehjj ; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
                          ENDP

00030a  0000              DCW      0x0000
                  |L1.780|
00030c  50616e20          DCB      "Pan P gain",0
000310  50206761
000314  696e00  
000317  00                DCB      0
                  |L1.792|
000318  50616e20          DCB      "Pan D gain",0
00031c  44206761
000320  696e00  
000323  00                DCB      0
                  |L1.804|
                          DCD      ||.bss||
                  |L1.808|
000328  54696c74          DCB      "Tilt P gain",0
00032c  20502067
000330  61696e00
                  |L1.820|
000334  54696c74          DCB      "Tilt D gain",0
000338  20442067
00033c  61696e00
                  |L1.832|
                          DCD      _ZTV6ProgPt+0x8 ; vtable for ProgPt
                  |L1.836|
                          DCD      ||.conststring||
                  |L1.840|
                          DCD      ||.conststring||+0x44
                  |L1.844|
                          DCD      ||.conststring||+0x88
                  |L1.848|
                          DCD      ||.conststring||+0xd0
                  |L1.852|
                          DCD      _ZN4Prog6m_viewE ; Prog::m_view
                  |L1.856|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.860|
                          DCD      g_blobs
                  |L1.864|
                          DCD      ||.data||
                  |L1.868|
                          DCD      0x2000fc00
                  |L1.872|
                          DCD      g_chirpUsb
                  |L1.876|
00036c  70616e5f          DCB      "pan_tilt_demo",0
000370  74696c74
000374  5f64656d
000378  6f00    
00037a  00                DCB      0
00037b  00                DCB      0
                  |L1.892|
00037c  70657266          DCB      "perform pan/tilt tracking",0
000380  6f726d20
000384  70616e2f
000388  74696c74
00038c  20747261
000390  636b696e
000394  6700    
000396  00                DCB      0
000397  00                DCB      0
                  |L1.920|
                          DCD      _ZN13ProgTableUtil16m_progTableIndexE ; ProgTableUtil::m_progTableIndex
                  |L1.924|
                          DCD      _ZN13ProgTableUtil11m_progTableE ; ProgTableUtil::m_progTable

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _ZN6ProgPt9m_panLoopE ; ProgPt::m_panLoop
                          %        20
                  _ZN6ProgPt10m_tiltLoopE ; ProgPt::m_tiltLoop
                          %        20

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  40632054          DCB      "@c Tuning @m -1500 @M 1500 Pan axis proportional gain ("
000004  756e696e
000008  6720406d
00000c  202d3135
000010  30302040
000014  4d203135
000018  30302050
00001c  616e2061
000020  78697320
000024  70726f70
000028  6f727469
00002c  6f6e616c
000030  20676169
000034  6e2028  
000037  64656661          DCB      "default 350)",0
00003b  756c7420
00003f  33353029
000043  00      
000044  40632054          DCB      "@c Tuning @m -1500 @M 1500 Pan axis derivative gain (de"
000048  756e696e
00004c  6720406d
000050  202d3135
000054  30302040
000058  4d203135
00005c  30302050
000060  616e2061
000064  78697320
000068  64657269
00006c  76617469
000070  76652067
000074  61696e20
000078  286465  
00007b  6661756c          DCB      "fault 600)",0
00007f  74203630
000083  302900  
000086  00                DCB      0
000087  00                DCB      0
000088  40632054          DCB      "@c Tuning @m -1500 @M 1500 Tilt axis proportional gain "
00008c  756e696e
000090  6720406d
000094  202d3135
000098  30302040
00009c  4d203135
0000a0  30302054
0000a4  696c7420
0000a8  61786973
0000ac  2070726f
0000b0  706f7274
0000b4  696f6e61
0000b8  6c206761
0000bc  696e20  
0000bf  28646566          DCB      "(default 500)",0
0000c3  61756c74
0000c7  20353030
0000cb  2900    
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
0000d0  40632054          DCB      "@c Tuning @m -1500 @M 1500 Tilt axis derivative gain (d"
0000d4  756e696e
0000d8  6720406d
0000dc  202d3135
0000e0  30302040
0000e4  4d203135
0000e8  30302054
0000ec  696c7420
0000f0  61786973
0000f4  20646572
0000f8  69766174
0000fc  69766520
000100  6761696e
000104  202864  
000107  65666175          DCB      "efault 700)",0
00010b  6c742037
00010f  30302900

                          AREA ||.data||, DATA, ALIGN=1

                  g_registerProgPt
000000  0000              DCB      0x00,0x00
                  _ZN6ProgPt7m_indexE ; ProgPt::m_index
000002  ffff              DCW      0xffff

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___10_progpt_cpp_abf46733

                          AREA ||.constdata__ZZN4Prog7getViewEtPPKcEs||, COMGROUP=_ZZN4Prog7getViewEtPPKcEs, DATA, READONLY, ALIGN=0

                  _ZZN4Prog7getViewEtPPKcEs ; Prog::getView(unsigned short, const char**)::string
000000  44656661          DCB      0x44,0x65,0x66,0x61
000004  756c7400          DCB      0x75,0x6c,0x74,0x00

                          AREA ||.constdata__ZTV6ProgPt||, COMGROUP=_ZTV6ProgPt, DATA, READONLY, ALIGN=2

                  _ZTV6ProgPt ; vtable for ProgPt
                          DCD      0x00000000
                          DCD      _ZTI6ProgPt ; typeinfo for ProgPt
                          DCD      _ZN6ProgPtD1Ev ; ProgPt::~ProgPt()
                          DCD      _ZN6ProgPtD0Ev ; ProgPt::~ProgPt__deallocating()
                          DCD      _ZN6ProgPt4loopEPc ; ProgPt::loop(char*)
                          DCD      _ZN4Prog7getViewEtPPKc ; Prog::getView(unsigned short, const char**)
                          DCD      _ZN4Prog7setViewEt ; Prog::setView(unsigned short)
                          DCD      _ZN6ProgPt9getActionEtPPKcS2_ ; ProgPt::getAction(unsigned short, const char**, const char**)
                          DCD      _ZN4Prog13getResolutionEPtS0_h ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
                          DCD      _ZN6ProgPt6packetEhPKhhb ; ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool)

                          AREA ||i._ZN4Prog7getViewEtPPKc||, COMGROUP=_ZN4Prog7getViewEtPPKc, CODE, READONLY, ALIGN=2

                  _ZN4Prog7getViewEtPPKc PROC ; Prog::getView(unsigned short, const char**)
;;;50     	virtual int loop(char *status) = 0; // if status is null, no gui monitor (PixyMon) is present
;;;51     	virtual int getView(uint16_t index, const char **name)
000000  2900              CMP      r1,#0
;;;52     	{
000002  d002              BEQ      |L25.10|
;;;53     		if (index==0)
;;;54     		{
;;;55     			*name = "Default";
;;;56     			return 1;
;;;57     		}
;;;58     		return -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;59     	};
000008  4770              BX       lr
                  |L25.10|
00000a  4802              LDR      r0,|L25.20|
00000c  6010              STR      r0,[r2,#0]            ;55
00000e  2001              MOVS     r0,#1                 ;56
000010  4770              BX       lr
;;;60     	virtual int setView(uint16_t index)
                          ENDP

000012  0000              DCW      0x0000
                  |L25.20|
                          DCD      _ZZN4Prog7getViewEtPPKcEs ; Prog::getView(unsigned short, const char**)::string

                          AREA ||area_number.26||, COMGROUP=_ZN4Prog7getViewEtPPKc, LINKORDER=||i._ZN4Prog7getViewEtPPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog7getViewEtPPKc||
                          DCD      0x00000001

                          AREA ||i._ZN4Prog7setViewEt||, COMGROUP=_ZN4Prog7setViewEt, CODE, READONLY, ALIGN=1

                  _ZN4Prog7setViewEt PROC ; Prog::setView(unsigned short)
;;;59     	};
;;;60     	virtual int setView(uint16_t index)
000000  2900              CMP      r1,#0
;;;61     	{
000002  d002              BEQ      |L32.10|
;;;62     		if (index==0) // default implementation is single-view
;;;63     			return 0;
;;;64     		return -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;65     	}
000008  4770              BX       lr
                  |L32.10|
00000a  2000              MOVS     r0,#0                 ;63
00000c  4770              BX       lr
;;;66     	virtual int getAction(uint16_t index, const char **name, const char **scriptlet)
                          ENDP


                          AREA ||area_number.33||, COMGROUP=_ZN4Prog7setViewEt, LINKORDER=||i._ZN4Prog7setViewEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog7setViewEt||
                          DCD      0x00000001

                          AREA ||i._ZN4Prog13getResolutionEPtS0_h||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, CODE, READONLY, ALIGN=1

                  _ZN4Prog13getResolutionEPtS0_h PROC ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
;;;69     	}
;;;70     	virtual void getResolution(uint16_t *width, uint16_t *height, uint8_t type)
000000  f44f709e          MOV      r0,#0x13c
;;;71     	{
;;;72     		*width = CAM_RES2_WIDTH;
000004  8008              STRH     r0,[r1,#0]
;;;73     		*height = CAM_RES2_HEIGHT;
000006  20d0              MOVS     r0,#0xd0
000008  8010              STRH     r0,[r2,#0]
;;;74     	}
00000a  4770              BX       lr
;;;75     	virtual int packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
                          ENDP


                          AREA ||area_number.40||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, LINKORDER=||i._ZN4Prog13getResolutionEPtS0_h||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog13getResolutionEPtS0_h||
                          DCD      0x00000001

                          AREA ||.constdata__ZTI6ProgPt||, COMGROUP=_ZTI6ProgPt, DATA, READONLY, ALIGN=2

                  _ZTI6ProgPt ; typeinfo for ProgPt
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS6ProgPt ; typeinfo name for ProgPt
                          DCD      _ZTI4Prog ; typeinfo for Prog

                          AREA ||.constdata__ZTI4Prog||, COMGROUP=_ZTI4Prog, DATA, READONLY, ALIGN=2

                  _ZTI4Prog ; typeinfo for Prog
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS4Prog ; typeinfo name for Prog

                          AREA ||.constdata__ZTS6ProgPt||, COMGROUP=_ZTS6ProgPt, DATA, READONLY, ALIGN=0

                  _ZTS6ProgPt ; typeinfo name for ProgPt
000000  3650726f          DCB      0x36,0x50,0x72,0x6f
000004  67507400          DCB      0x67,0x50,0x74,0x00

                          AREA ||.constdata__ZTS4Prog||, COMGROUP=_ZTS4Prog, DATA, READONLY, ALIGN=0

                  _ZTS4Prog ; typeinfo name for Prog
000000  3450726f          DCB      0x34,0x50,0x72,0x6f
000004  6700              DCB      0x67,0x00

;*** Start embedded assembler ***

#line 1 "src\\progpt.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_progpt_cpp_abf46733___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___10_progpt_cpp_abf46733___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_progpt_cpp_abf46733___Z7__REVSHi|
#line 144
|__asm___10_progpt_cpp_abf46733___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
