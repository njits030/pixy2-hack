; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progblobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progblobs.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\progblobs.crf src\progblobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN9ProgBlobs13staticSetViewEt PROC ; ProgBlobs::staticSetView(unsigned short)
;;;485    
;;;486    int ProgBlobs::staticSetView(uint16_t index)
000000  b510              PUSH     {r4,lr}
;;;487    {
;;;488    	uint16_t n = sizeof(m_views)/sizeof(char *);
;;;489    
;;;490    	if (index>=n)
000002  2803              CMP      r0,#3
000004  d302              BCC      |L1.12|
;;;491    		return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;492    	
;;;493    	if (m_view!=VIEW_BLOCKS)
;;;494    	{
;;;495    		SM_OBJECT->stream = 1; // capture raw frames in addition to blocks
;;;496    		delayms(50); // wait for the frame data to come in
;;;497    	}
;;;498    	
;;;499    	return 0;
;;;500    }
00000a  bd10              POP      {r4,pc}
                  |L1.12|
00000c  48fd              LDR      r0,|L1.1028|
00000e  8800              LDRH     r0,[r0,#0]            ;493  ; _ZN4Prog6m_viewE
000010  b128              CBZ      r0,|L1.30|
000012  49fd              LDR      r1,|L1.1032|
000014  2001              MOVS     r0,#1                 ;495
000016  7008              STRB     r0,[r1,#0]            ;495
000018  2032              MOVS     r0,#0x32              ;496
00001a  f7fffffe          BL       delayms
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;499
000020  bd10              POP      {r4,pc}
;;;501    
                          ENDP

                  _ZN9ProgBlobs16resetButtonStateEv PROC ; ProgBlobs::resetButtonState()
;;;182    
;;;183    void ProgBlobs::resetButtonState()
000022  b508              PUSH     {r3,lr}
;;;184    {
;;;185    	m_buttonState = 0;
000024  49f9              LDR      r1,|L1.1036|
000026  2000              MOVS     r0,#0
000028  70c8              STRB     r0,[r1,#3]
;;;186    	m_index = 0;
00002a  7108              STRB     r0,[r1,#4]
;;;187    	m_ledPipe = false;
00002c  7148              STRB     r0,[r1,#5]
;;;188    	led_set(0);
00002e  9000              STR      r0,[sp,#0]
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
;;;189    	led_setMaxCurrent(g_ledBrightness); // restore default brightness
000036  48f6              LDR      r0,|L1.1040|
000038  8800              LDRH     r0,[r0,#0]  ; g_ledBrightness
00003a  9000              STR      r0,[sp,#0]
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;190    }
000042  bd08              POP      {r3,pc}
;;;191    
                          ENDP

                  _ZN9ProgBlobs10staticInitEh PROC ; ProgBlobs::staticInit(unsigned char)
;;;148    
;;;149    void ProgBlobs::staticInit(uint8_t progIndex)
000044  b57c              PUSH     {r2-r6,lr}
;;;150    {
;;;151    	uint8_t c;
;;;152    	
;;;153    	// setup camera mode
;;;154    	cam_setMode(CAM_MODE1);
000046  2001              MOVS     r0,#1
000048  9001              STR      r0,[sp,#4]
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
;;;155    	
;;;156    	// open connected components code 
;;;157    	cc_open();
000050  f7fffffe          BL       _Z7cc_openv ; cc_open()
;;;158    	
;;;159    	// setup qqueue and M0
;;;160    	SM_OBJECT->streamState = 0;
000054  48ec              LDR      r0,|L1.1032|
000056  2400              MOVS     r4,#0
000058  1c40              ADDS     r0,r0,#1
00005a  7004              STRB     r4,[r0,#0]
;;;161    	g_qqueue->flush();
00005c  48ed              LDR      r0,|L1.1044|
00005e  6800              LDR      r0,[r0,#0]  ; g_qqueue
000060  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;162    	exec_runM0(0);
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
;;;163    
;;;164    	renderState = 0;
00006a  4de8              LDR      r5,|L1.1036|
00006c  71ac              STRB     r4,[r5,#6]
                  |L1.110|
;;;165    
;;;166    	// flush serial receive queue
;;;167    	while(ser_getSerial()->receive(&c, 1));
00006e  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000072  6801              LDR      r1,[r0,#0]
000074  2201              MOVS     r2,#1
000076  688b              LDR      r3,[r1,#8]
000078  4669              MOV      r1,sp
00007a  4798              BLX      r3
00007c  2800              CMP      r0,#0
00007e  d1f6              BNE      |L1.110|
;;;168    
;;;169    	m_state = 0; // reset recv state machine
000080  70ac              STRB     r4,[r5,#2]
;;;170    	resetButtonState(); 
000082  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
;;;171    	
;;;172    	// if m_view is invalid, set default view
;;;173    	if (m_view<0)
000086  48df              LDR      r0,|L1.1028|
000088  f9b00000          LDRSH    r0,[r0,#0]  ; _ZN4Prog6m_viewE
00008c  2800              CMP      r0,#0
00008e  da02              BGE      |L1.150|
;;;174    		staticSetView(VIEW_BLOCKS_VIDEO);
000090  2001              MOVS     r0,#1
000092  f7fffffe          BL       _ZN9ProgBlobs13staticSetViewEt ; ProgBlobs::staticSetView(unsigned short)
                  |L1.150|
;;;175    }
000096  bd7c              POP      {r2-r6,pc}
;;;176    
                          ENDP

                  _Z15createProgBlobsh PROC ; createProgBlobs(unsigned char)
;;;30     
;;;31     REGISTER_PROG(ProgBlobs, PROG_NAME_BLOBS, "perform color connected components analysis", PROG_BLOBS_MIN_TYPE, PROG_BLOBS_MAX_TYPE);
000098  b570              PUSH     {r4-r6,lr}
00009a  4605              MOV      r5,r0
00009c  49de              LDR      r1,|L1.1048|
00009e  2004              MOVS     r0,#4
0000a0  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
0000a4  2800              CMP      r0,#0
0000a6  d007              BEQ      |L1.184|
0000a8  4604              MOV      r4,r0
0000aa  48dc              LDR      r0,|L1.1052|
0000ac  4629              MOV      r1,r5
0000ae  6020              STR      r0,[r4,#0]
0000b0  4608              MOV      r0,r1
0000b2  f7fffffe          BL       _ZN9ProgBlobs10staticInitEh ; ProgBlobs::staticInit(unsigned char)
0000b6  4620              MOV      r0,r4
                  |L1.184|
0000b8  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP

                  _ZN9ProgBlobs10staticExitEv PROC ; ProgBlobs::staticExit()
;;;176    
;;;177    void ProgBlobs::staticExit()
0000ba  b510              PUSH     {r4,lr}
;;;178    {
;;;179    	exec_stopM0();
0000bc  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
;;;180    	cc_close();
0000c0  e8bd4010          POP      {r4,lr}
0000c4  f7ffbffe          B.W      _Z8cc_closev ; cc_close()
;;;181    }
;;;182    
                          ENDP

                  _ZN9ProgBlobs10handleRecvEv PROC ; ProgBlobs::handleRecv()
;;;535    // legacy code....
;;;536    void ProgBlobs::handleRecv()
0000c8  e92d41f0          PUSH     {r4-r8,lr}
;;;537    {
0000cc  b086              SUB      sp,sp,#0x18
;;;538    	uint8_t i, a;
;;;539    	static uint16_t w=0xffff;
;;;540    	static uint8_t lastByte;
;;;541    	uint16_t s0, s1;
;;;542    	Iserial *serial = ser_getSerial();
0000ce  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
0000d2  4604              MOV      r4,r0
;;;543    
;;;544    	for (i=0; i<10; i++)
0000d4  2500              MOVS     r5,#0
;;;545    	{
;;;546    		switch(m_state)
0000d6  4ecd              LDR      r6,|L1.1036|
0000d8  f04f0801          MOV      r8,#1
0000dc  2700              MOVS     r7,#0
                  |L1.222|
0000de  78b0              LDRB     r0,[r6,#2]  ; _ZN9ProgBlobs7m_stateE
0000e0  b158              CBZ      r0,|L1.250|
0000e2  2801              CMP      r0,#1
0000e4  d00e              BEQ      |L1.260|
0000e6  2802              CMP      r0,#2
0000e8  d01e              BEQ      |L1.296|
;;;547    		{	
;;;548    		case 0: // reset 
;;;549    			lastByte = 0xff;  // This is not part of any of the sync word most significant bytes
;;;550    			m_state = 1;
;;;551    		 	break;
;;;552    
;;;553    		case 1:	// sync word
;;;554    			if(serial->receive(&a, 1))
;;;555    			{
;;;556    				w = lastByte << 8;
;;;557    				w |= a;
;;;558    				lastByte = a;
;;;559    				m_state = 2;	// compare
;;;560    			}
;;;561    			break;
;;;562    
;;;563    		case 2:	 // receive data byte(s)
;;;564    			if (w==SYNC_SERVO)
;;;565    			{	// read rest of data
;;;566    				if (serial->receiveLen()>=4)
;;;567    				{
;;;568    					serial->receive((uint8_t *)&s0, 2);
;;;569    					serial->receive((uint8_t *)&s1, 2);
;;;570    
;;;571    					//cprintf("servo %d %d\n", s0, s1);
;;;572    					rcs_setPos(0, s0);
;;;573    					rcs_setPos(1, s1);
;;;574    
;;;575    					m_state = 0;
;;;576    				}
;;;577    			}
;;;578    			else if (w==SYNC_CAM_BRIGHTNESS)
;;;579    			{
;;;580    				if(serial->receive(&a, 1))
;;;581    				{
;;;582    					cam_setBrightness(a);
;;;583    					m_state = 0;
;;;584    				}
;;;585    			}
;;;586    			else if (w==SYNC_SET_LED)
;;;587    			{
;;;588    				if (serial->receiveLen()>=3)
;;;589    				{
;;;590    					uint8_t r, g, b;
;;;591    					serial->receive(&r, 1);
;;;592    					serial->receive(&g, 1);
;;;593    					serial->receive(&b, 1);
;;;594    
;;;595    					// set override, user is now in control
;;;596    					cc_setLEDOverride(true);
;;;597    					led_setRGB(r, g, b);
;;;598    					//cprintf("%x %x %x\n", r, g ,b);
;;;599    
;;;600    					m_state = 0;
;;;601    				}
;;;602    			}
;;;603    			else 
;;;604    				m_state = 1; // try another word, but read only a byte
;;;605    			break;
;;;606    
;;;607    		default:
;;;608    			m_state = 0; // try another whole word
0000ea  70b7              STRB     r7,[r6,#2]
                  |L1.236|
0000ec  1c6d              ADDS     r5,r5,#1              ;544
0000ee  b2ed              UXTB     r5,r5                 ;544
0000f0  2d0a              CMP      r5,#0xa               ;544
0000f2  d3f4              BCC      |L1.222|
;;;609    			break;
;;;610    		}
;;;611    	}
;;;612    }
0000f4  b006              ADD      sp,sp,#0x18
0000f6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.250|
0000fa  20ff              MOVS     r0,#0xff              ;549
0000fc  7030              STRB     r0,[r6,#0]            ;549
0000fe  f8868002          STRB     r8,[r6,#2]            ;550
000102  e7f3              B        |L1.236|
                  |L1.260|
000104  6820              LDR      r0,[r4,#0]            ;554
000106  2201              MOVS     r2,#1                 ;554
000108  a905              ADD      r1,sp,#0x14           ;554
00010a  6883              LDR      r3,[r0,#8]            ;554
00010c  4620              MOV      r0,r4                 ;554
00010e  4798              BLX      r3                    ;554
000110  2800              CMP      r0,#0                 ;554
000112  d0eb              BEQ      |L1.236|
000114  7830              LDRB     r0,[r6,#0]            ;556  ; lastByte
000116  0201              LSLS     r1,r0,#8              ;556
000118  f89d0014          LDRB     r0,[sp,#0x14]         ;557
00011c  4301              ORRS     r1,r1,r0              ;557
00011e  8131              STRH     r1,[r6,#8]            ;557
000120  7030              STRB     r0,[r6,#0]            ;558
000122  2002              MOVS     r0,#2                 ;559
000124  70b0              STRB     r0,[r6,#2]            ;559
000126  e7e1              B        |L1.236|
                  |L1.296|
000128  8930              LDRH     r0,[r6,#8]            ;564  ; w
00012a  28ff              CMP      r0,#0xff              ;564
00012c  d006              BEQ      |L1.316|
00012e  28fe              CMP      r0,#0xfe              ;578
000130  d023              BEQ      |L1.378|
000132  28fd              CMP      r0,#0xfd              ;586
000134  d02e              BEQ      |L1.404|
000136  f8868002          STRB     r8,[r6,#2]            ;604
00013a  e7d7              B        |L1.236|
                  |L1.316|
00013c  6820              LDR      r0,[r4,#0]            ;566
00013e  68c1              LDR      r1,[r0,#0xc]          ;566
000140  4620              MOV      r0,r4                 ;566
000142  4788              BLX      r1                    ;566
000144  2804              CMP      r0,#4                 ;566
000146  dbd1              BLT      |L1.236|
000148  6820              LDR      r0,[r4,#0]            ;568
00014a  2202              MOVS     r2,#2                 ;568
00014c  a904              ADD      r1,sp,#0x10           ;568
00014e  6883              LDR      r3,[r0,#8]            ;568
000150  4620              MOV      r0,r4                 ;568
000152  4798              BLX      r3                    ;568
000154  6820              LDR      r0,[r4,#0]            ;569
000156  2202              MOVS     r2,#2                 ;569
000158  a903              ADD      r1,sp,#0xc            ;569
00015a  6883              LDR      r3,[r0,#8]            ;569
00015c  4620              MOV      r0,r4                 ;569
00015e  4798              BLX      r3                    ;569
000160  a904              ADD      r1,sp,#0x10           ;572
000162  a802              ADD      r0,sp,#8              ;572
000164  9702              STR      r7,[sp,#8]            ;572
000166  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00016a  a903              ADD      r1,sp,#0xc            ;573
00016c  a802              ADD      r0,sp,#8              ;573
00016e  f8cd8008          STR      r8,[sp,#8]            ;573
000172  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000176  70b7              STRB     r7,[r6,#2]            ;575
000178  e7b8              B        |L1.236|
                  |L1.378|
00017a  6820              LDR      r0,[r4,#0]            ;580
00017c  2201              MOVS     r2,#1                 ;580
00017e  a905              ADD      r1,sp,#0x14           ;580
000180  6883              LDR      r3,[r0,#8]            ;580
000182  4620              MOV      r0,r4                 ;580
000184  4798              BLX      r3                    ;580
000186  2800              CMP      r0,#0                 ;580
000188  d0b0              BEQ      |L1.236|
00018a  a805              ADD      r0,sp,#0x14           ;582
00018c  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
000190  70b7              STRB     r7,[r6,#2]            ;583
000192  e7ab              B        |L1.236|
                  |L1.404|
000194  6820              LDR      r0,[r4,#0]            ;588
000196  68c1              LDR      r1,[r0,#0xc]          ;588
000198  4620              MOV      r0,r4                 ;588
00019a  4788              BLX      r1                    ;588
00019c  2803              CMP      r0,#3                 ;588
00019e  dba5              BLT      |L1.236|
0001a0  6820              LDR      r0,[r4,#0]            ;591
0001a2  2201              MOVS     r2,#1                 ;591
0001a4  a902              ADD      r1,sp,#8              ;591
0001a6  6883              LDR      r3,[r0,#8]            ;591
0001a8  4620              MOV      r0,r4                 ;591
0001aa  4798              BLX      r3                    ;591
0001ac  6820              LDR      r0,[r4,#0]            ;592
0001ae  2201              MOVS     r2,#1                 ;592
0001b0  a901              ADD      r1,sp,#4              ;592
0001b2  6883              LDR      r3,[r0,#8]            ;592
0001b4  4620              MOV      r0,r4                 ;592
0001b6  4798              BLX      r3                    ;592
0001b8  6820              LDR      r0,[r4,#0]            ;593
0001ba  2201              MOVS     r2,#1                 ;593
0001bc  4669              MOV      r1,sp                 ;593
0001be  6883              LDR      r3,[r0,#8]            ;593
0001c0  4620              MOV      r0,r4                 ;593
0001c2  4798              BLX      r3                    ;593
0001c4  2001              MOVS     r0,#1                 ;596
0001c6  f7fffffe          BL       _Z17cc_setLEDOverrideb ; cc_setLEDOverride(bool)
0001ca  466a              MOV      r2,sp                 ;597
0001cc  a901              ADD      r1,sp,#4              ;597
0001ce  a802              ADD      r0,sp,#8              ;597
0001d0  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
0001d4  70b7              STRB     r7,[r6,#2]            ;600
0001d6  e789              B        |L1.236|
;;;613    
                          ENDP

                  _ZN9ProgBlobs18handleButtonStatusEPc PROC ; ProgBlobs::handleButtonStatus(char*)
;;;270    
;;;271    void ProgBlobs::handleButtonStatus(char *str)
0001d8  2800              CMP      r0,#0
;;;272    {
0001da  d00f              BEQ      |L1.508|
;;;273    	if (str==NULL)
;;;274    		return;
;;;275    	
;;;276    	if (m_buttonState<3)
0001dc  498b              LDR      r1,|L1.1036|
0001de  78ca              LDRB     r2,[r1,#3]  ; _ZN9ProgBlobs13m_buttonStateE
0001e0  2a03              CMP      r2,#3
0001e2  d202              BCS      |L1.490|
;;;277    		sprintf(str, "Waiting for button selection");
0001e4  a18e              ADR      r1,|L1.1056|
0001e6  f7ffbffe          B.W      __2sprintf
                  |L1.490|
;;;278    	else if (m_ledPipe)
0001ea  794a              LDRB     r2,[r1,#5]  ; _ZN9ProgBlobs9m_ledPipeE
0001ec  b11a              CBZ      r2,|L1.502|
;;;279    		sprintf(str, "Signature teaching mode for signature %d, press button again to finish.", m_index);
0001ee  790a              LDRB     r2,[r1,#4]  ; _ZN9ProgBlobs7m_indexE
0001f0  4993              LDR      r1,|L1.1088|
0001f2  f7ffbffe          B.W      __2sprintf
                  |L1.502|
;;;280    	else
;;;281    		sprintf(str, "Setting white balance, press button again to exit.");
0001f6  a193              ADR      r1,|L1.1092|
0001f8  f7ffbffe          B.W      __2sprintf
                  |L1.508|
;;;282    }
0001fc  4770              BX       lr
;;;283    
                          ENDP

                  _ZN9ProgBlobs12setSignatureEv PROC ; ProgBlobs::setSignature()
;;;284    void ProgBlobs::setSignature()
0001fe  b51f              PUSH     {r0-r4,lr}
;;;285    {
;;;286    	int res;
;;;287    
;;;288    	// grow region, create model, save
;;;289    	res = cc_setSigPoint(0, m_index, CAM_RES2_WIDTH/2, CAM_RES2_HEIGHT/2);
000200  2000              MOVS     r0,#0
000202  219e              MOVS     r1,#0x9e
000204  e9cd1002          STRD     r1,r0,[sp,#8]
000208  2168              MOVS     r1,#0x68
00020a  e9cd0100          STRD     r0,r1,[sp,#0]
00020e  497f              LDR      r1,|L1.1036|
000210  ab01              ADD      r3,sp,#4
000212  aa02              ADD      r2,sp,#8
000214  1d09              ADDS     r1,r1,#4
000216  a803              ADD      r0,sp,#0xc
000218  f7fffffe          BL       _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
;;;290    	if (res<0)
00021c  2800              CMP      r0,#0
00021e  db09              BLT      |L1.564|
;;;291    		return;
;;;292    	exec_sendEvent(g_chirpUsb, EVT_PARAM_CHANGE);
000220  4895              LDR      r0,|L1.1144|
000222  2101              MOVS     r1,#1
000224  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000226  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
;;;293    	flashLED(m_index, 4); 
00022a  4878              LDR      r0,|L1.1036|
00022c  2104              MOVS     r1,#4
00022e  7900              LDRB     r0,[r0,#4]  ; _ZN9ProgBlobs7m_indexE
000230  f7fffffe          BL       _Z8flashLEDhh ; flashLED(unsigned char, unsigned char)
                  |L1.564|
;;;294    }
000234  bd1f              POP      {r0-r4,pc}
;;;295    
                          ENDP

                  _ZN9ProgBlobs8scaleLEDEjjjj PROC ; ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
;;;197    // In general with an RGB LED, you can only communicate 2 things--- brightness and hue, so you have 2 dof to play with....   
;;;198    void ProgBlobs::scaleLED(uint32_t r, uint32_t g, uint32_t b, uint32_t n)
000236  b57f              PUSH     {r0-r6,lr}
;;;199    {
000238  b084              SUB      sp,sp,#0x10
00023a  461e              MOV      r6,r3
;;;200    	uint32_t max, min, current, sat; 
;;;201    
;;;202    #if 0  // it seems that green is a little attenuated on this sensor
;;;203    	uint32_t t = (uint32_t)(G_GAIN*g);
;;;204    	if (t>255)
;;;205    		g = 255;
;;;206    	else
;;;207    		g = t;
;;;208    #endif
;;;209    
;;;210       	// find min
;;;211    	min = MIN(r, g);
00023c  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000240  4288              CMP      r0,r1
000242  d201              BCS      |L1.584|
000244  4602              MOV      r2,r0
000246  e000              B        |L1.586|
                  |L1.584|
000248  460a              MOV      r2,r1
                  |L1.586|
;;;212    	min = MIN(min, b);
00024a  9c06              LDR      r4,[sp,#0x18]
00024c  42a2              CMP      r2,r4
00024e  d300              BCC      |L1.594|
000250  4622              MOV      r2,r4
                  |L1.594|
;;;213    
;;;214    	// find max
;;;215    	max = MAX(r, g);
000252  4288              CMP      r0,r1
000254  d901              BLS      |L1.602|
000256  4605              MOV      r5,r0
000258  e000              B        |L1.604|
                  |L1.602|
00025a  460d              MOV      r5,r1
                  |L1.604|
;;;216    	max = MAX(max, b);
;;;217    
;;;218    	// subtract min and form saturation from the distance from origin
;;;219    	sat = sqrt((float)((r-min)*(r-min) + (g-min)*(g-min) + (b-min)*(b-min)));
00025c  1a83              SUBS     r3,r0,r2
00025e  435b              MULS     r3,r3,r3
000260  1a88              SUBS     r0,r1,r2
000262  fb003100          MLA      r1,r0,r0,r3
000266  1aa0              SUBS     r0,r4,r2
000268  fb001000          MLA      r0,r0,r0,r1
00026c  ee000a10          VMOV     s0,r0
000270  eeb80a40          VCVT.F32.U32 s0,s0
000274  f7fffffe          BL       __hardfp_sqrtf
000278  eebc0ac0          VCVT.U32.F32 s0,s0
00027c  ee100a10          VMOV     r0,s0
;;;220    	if (sat>30) // limit saturation to prevent things from getting too bright
000280  281e              CMP      r0,#0x1e
000282  d900              BLS      |L1.646|
;;;221    		sat = 30;
000284  201e              MOVS     r0,#0x1e
                  |L1.646|
;;;222    	if (sat<10) // anything less than 15 is pretty uninteresting, no sense in displaying....
000286  280a              CMP      r0,#0xa
000288  d202              BCS      |L1.656|
;;;223    		current = 0;
00028a  2000              MOVS     r0,#0
00028c  9000              STR      r0,[sp,#0]
00028e  e011              B        |L1.692|
                  |L1.656|
;;;224    	else
;;;225    	{
;;;226    		//sat2 = exp(sat/13.0f);
;;;227    		//current = (uint32_t)(SAT_GAIN*sat2) + (uint32_t)(AREA_GAIN*n) + (uint32_t)(SA_GAIN*n*sat2);
;;;228    		current = (uint32_t)(SA_GAIN*n*sat);
000290  ee006a10          VMOV     s0,r6
000294  eeb80a40          VCVT.F32.U32 s0,s0
000298  eddf0a78          VLDR     s1,|L1.1148|
00029c  ee600a20          VMUL.F32 s1,s0,s1
0002a0  ee000a10          VMOV     s0,r0
0002a4  eeb80a40          VCVT.F32.U32 s0,s0
0002a8  ee200a80          VMUL.F32 s0,s1,s0
0002ac  eebc0ac0          VCVT.U32.F32 s0,s0
0002b0  ed8d0a00          VSTR     s0,[sp,#0]
                  |L1.692|
;;;229    	}
;;;230    	if (current>LED_MAX_CURRENT/5)
0002b4  9900              LDR      r1,[sp,#0]
0002b6  f44f607a          MOV      r0,#0xfa0
0002ba  4281              CMP      r1,r0
0002bc  d900              BLS      |L1.704|
;;;231    		current = LED_MAX_CURRENT/5;
0002be  9000              STR      r0,[sp,#0]
                  |L1.704|
;;;232    	led_setMaxCurrent(current);
0002c0  4668              MOV      r0,sp
0002c2  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;233    
;;;234    #if 0
;;;235    	// find reasonable bias to subtract out
;;;236    	bias = min*75/100;
;;;237    	r -= bias;
;;;238    	g -= bias;
;;;239    	b -= bias;
;;;240    	
;;;241    	// saturate
;;;242    	m = 255.0f/(max-bias);
;;;243    	r = (uint8_t)(m*r);
;;;244    	g = (uint8_t)(m*g);
;;;245    	b = (uint8_t)(m*b);
;;;246    #endif
;;;247    #if 1
;;;248    	// saturate
;;;249    	rgbUnpack(saturate(rgbPack(r, g, b)), &r, &g, &b);
0002c6  a804              ADD      r0,sp,#0x10
0002c8  c807              LDM      r0,{r0-r2}
0002ca  f7fffffe          BL       _Z7rgbPackjjj ; rgbPack(unsigned, unsigned, unsigned)
0002ce  f7fffffe          BL       _Z8saturatej ; saturate(unsigned)
0002d2  ab06              ADD      r3,sp,#0x18
0002d4  aa05              ADD      r2,sp,#0x14
0002d6  a904              ADD      r1,sp,#0x10
0002d8  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;250    #endif
;;;251    	//cprintf("r %d g %d b %d min %d max %d sat %d sat2 %d n %d\n", r, g, b, min, max, sat, sat2, n);
;;;252    	led_setRGB(r, g, b);	 	
0002dc  9804              LDR      r0,[sp,#0x10]
0002de  9003              STR      r0,[sp,#0xc]
0002e0  9805              LDR      r0,[sp,#0x14]
0002e2  9002              STR      r0,[sp,#8]
0002e4  9806              LDR      r0,[sp,#0x18]
0002e6  9001              STR      r0,[sp,#4]
0002e8  aa01              ADD      r2,sp,#4
0002ea  a902              ADD      r1,sp,#8
0002ec  a803              ADD      r0,sp,#0xc
0002ee  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
;;;253    }
0002f2  b008              ADD      sp,sp,#0x20
0002f4  bd70              POP      {r4-r6,pc}
;;;254    	
                          ENDP

                  _ZN9ProgBlobs7ledPipeEv PROC ; ProgBlobs::ledPipe()
;;;255    
;;;256    void ProgBlobs::ledPipe()
0002f6  b510              PUSH     {r4,lr}
;;;257    {
0002f8  b094              SUB      sp,sp,#0x50
0002fa  2400              MOVS     r4,#0
0002fc  9410              STR      r4,[sp,#0x40]
0002fe  2110              MOVS     r1,#0x10
000300  9111              STR      r1,[sp,#0x44]
000302  4a5f              LDR      r2,|L1.1152|
000304  2004              MOVS     r0,#4
000306  f7fffffe          BL       __aeabi_vec_new_nocookie
00030a  9012              STR      r0,[sp,#0x48]
00030c  f88d403e          STRB     r4,[sp,#0x3e]
000310  f88d403d          STRB     r4,[sp,#0x3d]
000314  f88d403c          STRB     r4,[sp,#0x3c]
;;;258    	Points points;
;;;259    	RGBPixel rgb;
;;;260    	uint32_t color, r, g, b, n;
;;;261    	g_blobs->m_clut.growRegion(g_rawFrame, Point16(CAM_RES2_WIDTH/2, CAM_RES2_HEIGHT/2), &points);	
000318  209e              MOVS     r0,#0x9e
00031a  aa13              ADD      r2,sp,#0x4c
00031c  2168              MOVS     r1,#0x68
00031e  f8ad004c          STRH     r0,[sp,#0x4c]
000322  f8ad104e          STRH     r1,[sp,#0x4e]
000326  4858              LDR      r0,|L1.1160|
000328  ab10              ADD      r3,sp,#0x40
00032a  4956              LDR      r1,|L1.1156|
00032c  6800              LDR      r0,[r0,#0]  ; g_blobs
00032e  f7fffffe          BL       _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
;;;262    	cc_sendPoints(points, CL_GROW_INC, CL_GROW_INC, g_chirpUsb);
000332  2003              MOVS     r0,#3
000334  9000              STR      r0,[sp,#0]
000336  4850              LDR      r0,|L1.1144|
000338  2204              MOVS     r2,#4
00033a  4611              MOV      r1,r2
00033c  6803              LDR      r3,[r0,#0]  ; g_chirpUsb
00033e  a810              ADD      r0,sp,#0x40
000340  f7fffffe          BL       _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
;;;263    
;;;264    	IterPixel ip(g_rawFrame, &points);
000344  aa10              ADD      r2,sp,#0x40
000346  494f              LDR      r1,|L1.1156|
000348  a802              ADD      r0,sp,#8
00034a  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
;;;265    	color = ip.averageRgb(&n);
00034e  a90b              ADD      r1,sp,#0x2c
000350  a802              ADD      r0,sp,#8
000352  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
;;;266    
;;;267    	rgbUnpack(color, &r, &g, &b);
000356  ab0c              ADD      r3,sp,#0x30
000358  aa0d              ADD      r2,sp,#0x34
00035a  a90e              ADD      r1,sp,#0x38
00035c  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;268    	scaleLED(r, g, b, n);
000360  e9dd320b          LDRD     r3,r2,[sp,#0x2c]
000364  e9dd100d          LDRD     r1,r0,[sp,#0x34]
000368  f7fffffe          BL       _ZN9ProgBlobs8scaleLEDEjjjj ; ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
00036c  9812              LDR      r0,[sp,#0x48]
00036e  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
;;;269    }
000372  b014              ADD      sp,sp,#0x50
000374  bd10              POP      {r4,pc}
;;;270    
                          ENDP

                  _ZN9ProgBlobs12handleButtonEPc PROC ; ProgBlobs::handleButton(char*)
;;;296    
;;;297    bool ProgBlobs::handleButton(char *status)
000376  e92d47f0          PUSH     {r4-r10,lr}
;;;298    {
00037a  b08a              SUB      sp,sp,#0x28
00037c  4680              MOV      r8,r0
;;;299    	uint32_t bt;
;;;300    	bool res;
;;;301    	
;;;302    	bt = button();
00037e  f7fffffe          BL       button
000382  4604              MOV      r4,r0
;;;303    
;;;304       	if (m_ledPipe) // if ledpipe, grab frame, but don't flush 
000384  4d21              LDR      r5,|L1.1036|
;;;305    	{
;;;306    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb, RENDER_FLAG_BLEND);
000386  2021              MOVS     r0,#0x21
000388  22d0              MOVS     r2,#0xd0
00038a  f895c005          LDRB     r12,[r5,#5]           ;304  ; _ZN9ProgBlobs9m_ledPipeE
00038e  4b3a              LDR      r3,|L1.1144|
000390  2600              MOVS     r6,#0
;;;307    		ledPipe();
;;;308    	}
;;;309    	else if (m_buttonState!=0) // else grab frame and flush
;;;310    		cam_getFrameChirpFlags(CAM_GRAB_M1R2, 0, 0, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, g_chirpUsb);
000392  2701              MOVS     r7,#1
000394  f44f719e          MOV      r1,#0x13c             ;306
000398  f04f0902          MOV      r9,#2                 ;306
00039c  f1bc0f00          CMP      r12,#0                ;304
0003a0  d013              BEQ      |L1.970|
0003a2  e9cd1606          STRD     r1,r6,[sp,#0x18]      ;306
0003a6  e9cd6008          STRD     r6,r0,[sp,#0x20]      ;306
0003aa  9205              STR      r2,[sp,#0x14]         ;306
0003ac  6818              LDR      r0,[r3,#0]            ;306  ; g_chirpUsb
0003ae  a905              ADD      r1,sp,#0x14           ;306
0003b0  e9cd1000          STRD     r1,r0,[sp,#0]         ;306
0003b4  e9cd9602          STRD     r9,r6,[sp,#8]         ;306
0003b8  ab06              ADD      r3,sp,#0x18           ;306
0003ba  aa07              ADD      r2,sp,#0x1c           ;306
0003bc  a908              ADD      r1,sp,#0x20           ;306
0003be  a809              ADD      r0,sp,#0x24           ;306
0003c0  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirphb ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
0003c4  f7fffffe          BL       _ZN9ProgBlobs7ledPipeEv ; ProgBlobs::ledPipe()
0003c8  e015              B        |L1.1014|
                  |L1.970|
0003ca  f895c003          LDRB     r12,[r5,#3]           ;309  ; _ZN9ProgBlobs13m_buttonStateE
0003ce  f1bc0f00          CMP      r12,#0                ;309
0003d2  d010              BEQ      |L1.1014|
0003d4  e9cd1606          STRD     r1,r6,[sp,#0x18]
0003d8  e9cd6008          STRD     r6,r0,[sp,#0x20]
0003dc  9205              STR      r2,[sp,#0x14]
0003de  6818              LDR      r0,[r3,#0]  ; g_chirpUsb
0003e0  a905              ADD      r1,sp,#0x14
0003e2  e9cd1000          STRD     r1,r0,[sp,#0]
0003e6  e9cd7602          STRD     r7,r6,[sp,#8]
0003ea  ab06              ADD      r3,sp,#0x18
0003ec  aa07              ADD      r2,sp,#0x1c
0003ee  a908              ADD      r1,sp,#0x20
0003f0  a809              ADD      r0,sp,#0x24
0003f2  f7fffffe          BL       _Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirphb ; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
                  |L1.1014|
;;;311    
;;;312    	switch(m_buttonState)
0003f6  78e8              LDRB     r0,[r5,#3]  ; _ZN9ProgBlobs13m_buttonStateE
;;;313    	{
;;;314    	case 0:  // wait for button press
;;;315    		if (bt)
;;;316    		{
;;;317    			setTimer(&m_timer);
;;;318    			led_setMaxCurrent(g_ledBrightness); // restore default brightness
;;;319    			m_buttonState = 1;
;;;320    			led_set(0);
;;;321    		}
;;;322    		break;
;;;323    
;;;324    	case 1: // wait for button timeout
;;;325    		if (!bt)
;;;326    			m_buttonState = 0;
;;;327    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
0003f8  f8dfa090          LDR      r10,|L1.1164|
0003fc  2806              CMP      r0,#6                 ;312
0003fe  d274              BCS      |L1.1258|
000400  e046              B        |L1.1168|
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      _ZN4Prog6m_viewE ; Prog::m_view
                  |L1.1032|
                          DCD      0x2000fc00
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      g_ledBrightness
                  |L1.1044|
                          DCD      g_qqueue
                  |L1.1048|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.1052|
                          DCD      _ZTV9ProgBlobs+0x8 ; vtable for ProgBlobs
                  |L1.1056|
000420  57616974          DCB      "Waiting for button selection",0
000424  696e6720
000428  666f7220
00042c  62757474
000430  6f6e2073
000434  656c6563
000438  74696f6e
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
                          DCD      ||.conststring||+0x4a8
                  |L1.1092|
000444  53657474          DCB      "Setting white balance, press button again to exit.",0
000448  696e6720
00044c  77686974
000450  65206261
000454  6c616e63
000458  652c2070
00045c  72657373
000460  20627574
000464  746f6e20
000468  61676169
00046c  6e20746f
000470  20657869
000474  742e00  
000477  00                DCB      0
                  |L1.1144|
                          DCD      g_chirpUsb
                  |L1.1148|
00047c  3c75c28f          DCFS     0x3c75c28f ; 0.014999999664723873
                  |L1.1152|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()
                  |L1.1156|
                          DCD      g_rawFrame
                  |L1.1160|
                          DCD      g_blobs
                  |L1.1164|
                          DCD      0x001312d0
                  |L1.1168|
000490  e8dff000          TBB      [pc,r0]               ;312
000494  03142c54          DCB      0x03,0x14,0x2c,0x54
000498  6486              DCB      0x64,0x86
00049a  2c00              CMP      r4,#0                 ;315
00049c  d00d              BEQ      |L1.1210|
00049e  48c1              LDR      r0,|L1.1956|
0004a0  f7fffffe          BL       setTimer
0004a4  48c0              LDR      r0,|L1.1960|
0004a6  8800              LDRH     r0,[r0,#0]            ;318  ; g_ledBrightness
0004a8  9009              STR      r0,[sp,#0x24]         ;318
0004aa  a809              ADD      r0,sp,#0x24           ;318
0004ac  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
0004b0  70ef              STRB     r7,[r5,#3]            ;319
0004b2  a809              ADD      r0,sp,#0x24           ;320
0004b4  9609              STR      r6,[sp,#0x24]         ;320
0004b6  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
                  |L1.1210|
0004ba  e077              B        |L1.1452|
0004bc  b14c              CBZ      r4,|L1.1234|
0004be  6928              LDR      r0,[r5,#0x10]  ; _ZN9ProgBlobs7m_timerE
0004c0  f7fffffe          BL       getTimer
0004c4  4550              CMP      r0,r10
0004c6  d971              BLS      |L1.1452|
;;;328    		{
;;;329    			if (cam_getAWB())
0004c8  f7fffffe          BL       _Z10cam_getAWBv ; cam_getAWB()
0004cc  b118              CBZ      r0,|L1.1238|
;;;330    				m_index = 1;
0004ce  712f              STRB     r7,[r5,#4]
0004d0  e002              B        |L1.1240|
                  |L1.1234|
0004d2  70ee              STRB     r6,[r5,#3]            ;326
0004d4  e06a              B        |L1.1452|
                  |L1.1238|
;;;331    			else
;;;332    				m_index = 0;
0004d6  712e              STRB     r6,[r5,#4]
                  |L1.1240|
;;;333    			setTimer(&m_timer);
0004d8  48b2              LDR      r0,|L1.1956|
0004da  f7fffffe          BL       setTimer
;;;334    			setLED(m_index);
0004de  7928              LDRB     r0,[r5,#4]  ; _ZN9ProgBlobs7m_indexE
0004e0  f7fffffe          BL       _Z6setLEDh ; setLED(unsigned char)
;;;335    			m_buttonState = 2;
0004e4  f8859003          STRB     r9,[r5,#3]
0004e8  e060              B        |L1.1452|
                  |L1.1258|
0004ea  e05d              B        |L1.1448|
;;;336    		}
;;;337    		break;
;;;338    
;;;339    	case 2: // wait and increment index 
;;;340    		if (!bt)
0004ec  b17c              CBZ      r4,|L1.1294|
;;;341    		{
;;;342    			flashLED(m_index, 3);
;;;343    			setTimer(&m_timer);
;;;344    			if (m_index==0)
;;;345    				cam_setAWB(1);
;;;346    			else
;;;347    				m_ledPipe = true;
;;;348    			m_buttonState = 3;
;;;349    		}
;;;350    		else if (getTimer(m_timer)>BT_INDEX_CYCLE_TIMEOUT)
0004ee  6928              LDR      r0,[r5,#0x10]  ; _ZN9ProgBlobs7m_timerE
0004f0  f7fffffe          BL       getTimer
0004f4  49ad              LDR      r1,|L1.1964|
0004f6  4288              CMP      r0,r1
0004f8  d958              BLS      |L1.1452|
;;;351    		{
;;;352    			setTimer(&m_timer);
0004fa  48aa              LDR      r0,|L1.1956|
0004fc  f7fffffe          BL       setTimer
;;;353    			m_index++;
000500  7928              LDRB     r0,[r5,#4]  ; _ZN9ProgBlobs7m_indexE
000502  1c40              ADDS     r0,r0,#1
000504  b2c0              UXTB     r0,r0
000506  7128              STRB     r0,[r5,#4]
;;;354    			if (m_index==CL_NUM_SIGNATURES+1)
000508  2808              CMP      r0,#8
00050a  d012              BEQ      |L1.1330|
00050c  e012              B        |L1.1332|
                  |L1.1294|
00050e  2103              MOVS     r1,#3                 ;342
000510  7928              LDRB     r0,[r5,#4]            ;342  ; _ZN9ProgBlobs7m_indexE
000512  f7fffffe          BL       _Z8flashLEDhh ; flashLED(unsigned char, unsigned char)
000516  48a3              LDR      r0,|L1.1956|
000518  f7fffffe          BL       setTimer
00051c  7928              LDRB     r0,[r5,#4]            ;344  ; _ZN9ProgBlobs7m_indexE
00051e  b118              CBZ      r0,|L1.1320|
000520  716f              STRB     r7,[r5,#5]            ;347
                  |L1.1314|
000522  2003              MOVS     r0,#3                 ;348
000524  70e8              STRB     r0,[r5,#3]            ;348
000526  e041              B        |L1.1452|
                  |L1.1320|
000528  a809              ADD      r0,sp,#0x24           ;345
00052a  9709              STR      r7,[sp,#0x24]         ;345
00052c  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
000530  e7f7              B        |L1.1314|
                  |L1.1330|
;;;355    				m_index = 0;
000532  712e              STRB     r6,[r5,#4]
                  |L1.1332|
;;;356    
;;;357    			setLED(m_index);
000534  7928              LDRB     r0,[r5,#4]  ; _ZN9ProgBlobs7m_indexE
000536  f7fffffe          BL       _Z6setLEDh ; setLED(unsigned char)
00053a  e037              B        |L1.1452|
;;;358    		}							   
;;;359    		break;
;;;360    
;;;361    	case 3: // wait for button down
;;;362    		if (bt)
00053c  b12c              CBZ      r4,|L1.1354|
;;;363    		{
;;;364    			setTimer(&m_timer);
00053e  4899              LDR      r0,|L1.1956|
000540  f7fffffe          BL       setTimer
;;;365    			m_buttonState = 4;
000544  2004              MOVS     r0,#4
000546  70e8              STRB     r0,[r5,#3]
000548  e030              B        |L1.1452|
                  |L1.1354|
;;;366    		}
;;;367    		else if (getTimer(m_timer)>BT_LIGHTPIPE_TIMEOUT) // abort
00054a  6928              LDR      r0,[r5,#0x10]  ; _ZN9ProgBlobs7m_timerE
00054c  f7fffffe          BL       getTimer
000550  4997              LDR      r1,|L1.1968|
000552  4288              CMP      r0,r1
000554  d92a              BLS      |L1.1452|
;;;368    			resetButtonState();
000556  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
00055a  e027              B        |L1.1452|
;;;369    		break;
;;;370    
;;;371    	case 4: // wait for button up
;;;372    		if (!bt)
00055c  b13c              CBZ      r4,|L1.1390|
;;;373    		{
;;;374    			if (m_index==0)
;;;375    			{
;;;376    				cam_setAWB(0);
;;;377    				flashLED(m_index, 4); 
;;;378    			}
;;;379    			else
;;;380    				setSignature();
;;;381    			resetButtonState(); // done	
;;;382    		}
;;;383    		else if (getTimer(m_timer)>BT_INITIAL_BUTTON_TIMEOUT)
00055e  6928              LDR      r0,[r5,#0x10]  ; _ZN9ProgBlobs7m_timerE
000560  f7fffffe          BL       getTimer
000564  4550              CMP      r0,r10
000566  d921              BLS      |L1.1452|
;;;384    		{
;;;385     			if (m_index==0)
000568  7928              LDRB     r0,[r5,#4]  ; _ZN9ProgBlobs7m_indexE
00056a  b180              CBZ      r0,|L1.1422|
00056c  e013              B        |L1.1430|
                  |L1.1390|
00056e  7928              LDRB     r0,[r5,#4]            ;374  ; _ZN9ProgBlobs7m_indexE
000570  b120              CBZ      r0,|L1.1404|
000572  f7fffffe          BL       _ZN9ProgBlobs12setSignatureEv ; ProgBlobs::setSignature()
                  |L1.1398|
000576  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
00057a  e017              B        |L1.1452|
                  |L1.1404|
00057c  a809              ADD      r0,sp,#0x24           ;376
00057e  9609              STR      r6,[sp,#0x24]         ;376
000580  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
000584  2104              MOVS     r1,#4                 ;377
000586  7928              LDRB     r0,[r5,#4]            ;377  ; _ZN9ProgBlobs7m_indexE
000588  f7fffffe          BL       _Z8flashLEDhh ; flashLED(unsigned char, unsigned char)
00058c  e7f3              B        |L1.1398|
                  |L1.1422|
;;;386    				cam_setAWB(0);
00058e  a809              ADD      r0,sp,#0x24
000590  9609              STR      r6,[sp,#0x24]
000592  f7fffffe          BL       _Z10cam_setAWBRKh ; cam_setAWB(const unsigned char&)
                  |L1.1430|
;;;387    
;;;388    			resetButtonState();
000596  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
;;;389    			m_buttonState = 5;
00059a  2005              MOVS     r0,#5
00059c  70e8              STRB     r0,[r5,#3]
00059e  e005              B        |L1.1452|
;;;390    		}
;;;391    	 	break;
;;;392    
;;;393    	case 5: // wait for button up only
;;;394    		if (!bt)
0005a0  b924              CBNZ     r4,|L1.1452|
;;;395    			resetButtonState();
0005a2  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
0005a6  e001              B        |L1.1452|
                  |L1.1448|
;;;396    		break;
;;;397    
;;;398    	default:
;;;399    		resetButtonState();
0005a8  f7fffffe          BL       _ZN9ProgBlobs16resetButtonStateEv ; ProgBlobs::resetButtonState()
                  |L1.1452|
;;;400    	}	
;;;401    	
;;;402    	res = m_buttonState!=0;
0005ac  78e8              LDRB     r0,[r5,#3]  ; _ZN9ProgBlobs13m_buttonStateE
0005ae  b108              CBZ      r0,|L1.1460|
0005b0  2401              MOVS     r4,#1
0005b2  e000              B        |L1.1462|
                  |L1.1460|
0005b4  2400              MOVS     r4,#0
                  |L1.1462|
;;;403    	
;;;404    	if (res)
0005b6  b114              CBZ      r4,|L1.1470|
;;;405    		handleButtonStatus(status);
0005b8  4640              MOV      r0,r8
0005ba  f7fffffe          BL       _ZN9ProgBlobs18handleButtonStatusEPc ; ProgBlobs::handleButtonStatus(char*)
                  |L1.1470|
;;;406    
;;;407    	return res; 
;;;408    }
0005be  b00a              ADD      sp,sp,#0x28
0005c0  4620              MOV      r0,r4                 ;407
0005c2  e8bd87f0          POP      {r4-r10,pc}
;;;409    
                          ENDP

                  _ZN9ProgBlobs10staticLoopEPc PROC ; ProgBlobs::staticLoop(char*)
;;;410    	
;;;411    int ProgBlobs::staticLoop(char *status)
0005c6  e92d43f8          PUSH     {r3-r9,lr}
;;;412    {
0005ca  4604              MOV      r4,r0
;;;413    	static uint32_t drop = 0;
;;;414    	SimpleList<Tracker<BlobA> > *blobsList;
;;;415    
;;;416    	// handle button-teach 
;;;417    	if (handleButton(status))
0005cc  4620              MOV      r0,r4
0005ce  f7fffffe          BL       _ZN9ProgBlobs12handleButtonEPc ; ProgBlobs::handleButton(char*)
0005d2  b110              CBZ      r0,|L1.1498|
;;;418    		return 1; // 1 indicates override state
0005d4  2001              MOVS     r0,#1
                  |L1.1494|
;;;419    
;;;420    	if (status==NULL) // no gui
;;;421    		SM_OBJECT->stream = 0; // don't capture raw frames, so we can double framerate
;;;422    	else
;;;423    	{		
;;;424    		if (m_view==VIEW_BLOCKS)
;;;425    			SM_OBJECT->stream = 0; // don't capture raw frames, so we can double framerate
;;;426    		else
;;;427    			SM_OBJECT->stream = 1; // capture raw frames in addition to blocks
;;;428    	}
;;;429    	
;;;430    	// create blobs
;;;431    	g_blobs->sendDetectedPixels(m_view==VIEW_BLOCKS_VIDEO_PIXELS && renderState);
;;;432    	if (g_blobs->blobify()<0)
;;;433    	{
;;;434    		DBG("drop %d\n", drop++);
;;;435    		// unhang M0 
;;;436    		SM_OBJECT->streamState = 0;
;;;437    		return 0;
;;;438    	}
;;;439    	// handle received data immediately
;;;440    	if (g_interface!=SER_INTERFACE_LEGO && g_oldProtocol)
;;;441    		handleRecv();
;;;442    
;;;443    	// send blobs
;;;444    	blobsList = g_blobs->getBlobs();
;;;445    	if (SM_OBJECT->stream)
;;;446    	{	
;;;447    		if (renderState) // renderState prevents us from rendering an isolate blobs image (no background image)
;;;448    		{
;;;449    			cc_sendBlobs(g_chirpUsb, blobsList, RENDER_FLAG_BLEND | RENDER_FLAG_FLUSH);
;;;450    			renderState = 0;
;;;451    		}
;;;452    	}
;;;453    	else // no background, render blobs image by itself
;;;454    		//cc_sendBlobs(g_chirpUsb, blobs, numBlobs, ccBlobs, numCCBlobs, RENDER_FLAG_FLUSH);
;;;455    		cc_sendBlobs(g_chirpUsb, blobsList, RENDER_FLAG_FLUSH);
;;;456    				
;;;457    	cc_setLED();
;;;458    			
;;;459    	if (SM_OBJECT->stream)
;;;460    	{
;;;461    		// when we're streaming raw video, we could get in a state where there is stale qqueue data, so we flush
;;;462    		g_qqueue->flush(); 
;;;463    		// wait for state==1
;;;464    		while(SM_OBJECT->streamState==0);
;;;465    		// send frame over USB 
;;;466    		cam_sendFrame(g_chirpUsb, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, RENDER_FLAG_BLEND, FOURCC('B','A','8','1'));
;;;467    		renderState = 1; // indicate that we've rendered backgound image
;;;468    		SM_OBJECT->streamState = 0;
;;;469    	}
;;;470    	
;;;471    	return 0;
;;;472    }
0005d6  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1498|
0005da  4876              LDR      r0,|L1.1972|
0005dc  2701              MOVS     r7,#1                 ;418
0005de  f8df91d8          LDR      r9,|L1.1976|
0005e2  2500              MOVS     r5,#0                 ;421
0005e4  b14c              CBZ      r4,|L1.1530|
0005e6  8801              LDRH     r1,[r0,#0]            ;424  ; _ZN4Prog6m_viewE
0005e8  b151              CBZ      r1,|L1.1536|
0005ea  f8897000          STRB     r7,[r9,#0]            ;427
                  |L1.1518|
0005ee  4e6d              LDR      r6,|L1.1956|
0005f0  8800              LDRH     r0,[r0,#0]            ;431  ; _ZN4Prog6m_viewE
0005f2  3e10              SUBS     r6,r6,#0x10           ;431
0005f4  2802              CMP      r0,#2                 ;431
0005f6  d006              BEQ      |L1.1542|
0005f8  e009              B        |L1.1550|
                  |L1.1530|
0005fa  f8895000          STRB     r5,[r9,#0]            ;421
0005fe  e7f6              B        |L1.1518|
                  |L1.1536|
000600  f8895000          STRB     r5,[r9,#0]            ;425
000604  e7f3              B        |L1.1518|
                  |L1.1542|
000606  79b0              LDRB     r0,[r6,#6]            ;431  ; _ZN9ProgBlobs11renderStateE
000608  b108              CBZ      r0,|L1.1550|
00060a  2101              MOVS     r1,#1                 ;431
00060c  e000              B        |L1.1552|
                  |L1.1550|
00060e  2100              MOVS     r1,#0                 ;431
                  |L1.1552|
000610  f8df81a8          LDR      r8,|L1.1980|
000614  f8d80000          LDR      r0,[r8,#0]            ;431  ; g_blobs
000618  f7fffffe          BL       _ZN5Blobs18sendDetectedPixelsEb ; Blobs::sendDetectedPixels(bool)
00061c  f8d80000          LDR      r0,[r8,#0]            ;432  ; g_blobs
000620  f7fffffe          BL       _ZN5Blobs7blobifyEv ; Blobs::blobify()
000624  4c64              LDR      r4,|L1.1976|
000626  1c64              ADDS     r4,r4,#1              ;436
000628  2800              CMP      r0,#0                 ;432
00062a  da0c              BGE      |L1.1606|
00062c  4864              LDR      r0,|L1.1984|
00062e  7800              LDRB     r0,[r0,#0]            ;434  ; g_debug
000630  b130              CBZ      r0,|L1.1600|
000632  68f2              LDR      r2,[r6,#0xc]          ;434  ; drop
000634  a163              ADR      r1,|L1.1988|
000636  1c50              ADDS     r0,r2,#1              ;434
000638  60f0              STR      r0,[r6,#0xc]          ;434  ; drop
00063a  2000              MOVS     r0,#0                 ;434
00063c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.1600|
000640  7025              STRB     r5,[r4,#0]            ;436
000642  2000              MOVS     r0,#0                 ;437
000644  e7c7              B        |L1.1494|
                  |L1.1606|
000646  4862              LDR      r0,|L1.2000|
000648  7800              LDRB     r0,[r0,#0]            ;440  ; g_interface
00064a  2806              CMP      r0,#6                 ;440
00064c  d004              BEQ      |L1.1624|
00064e  4861              LDR      r0,|L1.2004|
000650  7800              LDRB     r0,[r0,#0]            ;440  ; g_oldProtocol
000652  b108              CBZ      r0,|L1.1624|
000654  f7fffffe          BL       _ZN9ProgBlobs10handleRecvEv ; ProgBlobs::handleRecv()
                  |L1.1624|
000658  f8d80000          LDR      r0,[r8,#0]            ;444  ; g_blobs
00065c  f7fffffe          BL       _ZN5Blobs8getBlobsEv ; Blobs::getBlobs()
000660  4601              MOV      r1,r0                 ;444
000662  f8990000          LDRB     r0,[r9,#0]            ;445
000666  f8df8170          LDR      r8,|L1.2008|
00066a  b140              CBZ      r0,|L1.1662|
00066c  79b0              LDRB     r0,[r6,#6]            ;447  ; _ZN9ProgBlobs11renderStateE
00066e  b158              CBZ      r0,|L1.1672|
000670  2203              MOVS     r2,#3                 ;449
000672  f8d80000          LDR      r0,[r8,#0]            ;449  ; g_chirpUsb
000676  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpP10SimpleListI7TrackerI5BlobAEEh ; cc_sendBlobs(Chirp*, SimpleList<Tracker<BlobA>>*, unsigned char)
00067a  71b5              STRB     r5,[r6,#6]            ;450
00067c  e004              B        |L1.1672|
                  |L1.1662|
00067e  2201              MOVS     r2,#1                 ;455
000680  f8d80000          LDR      r0,[r8,#0]            ;455  ; g_chirpUsb
000684  f7fffffe          BL       _Z12cc_sendBlobsP5ChirpP10SimpleListI7TrackerI5BlobAEEh ; cc_sendBlobs(Chirp*, SimpleList<Tracker<BlobA>>*, unsigned char)
                  |L1.1672|
000688  f7fffffe          BL       _Z9cc_setLEDv ; cc_setLED()
00068c  f8990000          LDRB     r0,[r9,#0]            ;459
000690  b190              CBZ      r0,|L1.1720|
000692  4852              LDR      r0,|L1.2012|
000694  6800              LDR      r0,[r0,#0]            ;462  ; g_qqueue
000696  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
                  |L1.1690|
00069a  7820              LDRB     r0,[r4,#0]            ;464
00069c  2800              CMP      r0,#0                 ;464
00069e  d0fc              BEQ      |L1.1690|
0006a0  484f              LDR      r0,|L1.2016|
0006a2  9000              STR      r0,[sp,#0]            ;466
0006a4  2302              MOVS     r3,#2                 ;466
0006a6  22d0              MOVS     r2,#0xd0              ;466
0006a8  f44f719e          MOV      r1,#0x13c             ;466
0006ac  f8d80000          LDR      r0,[r8,#0]            ;466  ; g_chirpUsb
0006b0  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
0006b4  71b7              STRB     r7,[r6,#6]            ;467
0006b6  7025              STRB     r5,[r4,#0]            ;468
                  |L1.1720|
0006b8  2000              MOVS     r0,#0                 ;471
0006ba  e78c              B        |L1.1494|
;;;473    
                          ENDP

                  _ZN9ProgBlobs13staticGetViewEtPPKc PROC ; ProgBlobs::staticGetView(unsigned short, const char**)
;;;474    int ProgBlobs::staticGetView(uint16_t index, const char **name)
0006bc  2803              CMP      r0,#3
;;;475    {
0006be  d302              BCC      |L1.1734|
;;;476    	uint16_t n = sizeof(m_views)/sizeof(char *);
;;;477    
;;;478    	if (index>=n)
;;;479    		return -1;
0006c0  f04f30ff          MOV      r0,#0xffffffff
;;;480    
;;;481    	*name = m_views[index];
;;;482    
;;;483    	return index==m_view; // return 1 if it's the current view, 0 otherwise		
;;;484    }
0006c4  4770              BX       lr
                  |L1.1734|
0006c6  4a37              LDR      r2,|L1.1956|
0006c8  1d12              ADDS     r2,r2,#4              ;481
0006ca  f8522020          LDR      r2,[r2,r0,LSL #2]     ;481
0006ce  600a              STR      r2,[r1,#0]            ;481
0006d0  4938              LDR      r1,|L1.1972|
0006d2  f9b11000          LDRSH    r1,[r1,#0]            ;483  ; _ZN4Prog6m_viewE
0006d6  4288              CMP      r0,r1                 ;483
0006d8  d101              BNE      |L1.1758|
0006da  2001              MOVS     r0,#1                 ;483
0006dc  4770              BX       lr
                  |L1.1758|
0006de  2000              MOVS     r0,#0                 ;483
0006e0  4770              BX       lr
;;;485    
                          ENDP

                  _ZN9ProgBlobs15staticGetActionEtPPKcS2_ PROC ; ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
;;;501    
;;;502    int ProgBlobs::staticGetAction(uint16_t index, const char **name, const char **scriptlet)
0006e2  b510              PUSH     {r4,lr}
;;;503    {
;;;504    	int n = sizeof(m_actions)/sizeof(ActionScriptlet);
;;;505    
;;;506    	// check exec-based actions first
;;;507    	if (index<n)
0006e4  280f              CMP      r0,#0xf
0006e6  da09              BGE      |L1.1788|
;;;508    	{
;;;509    		*name = m_actions[index].action;
0006e8  4b3e              LDR      r3,|L1.2020|
0006ea  f8534030          LDR      r4,[r3,r0,LSL #3]
0006ee  600c              STR      r4,[r1,#0]
;;;510    		*scriptlet = m_actions[index].scriptlet;
0006f0  eb0300c0          ADD      r0,r3,r0,LSL #3
0006f4  6840              LDR      r0,[r0,#4]
0006f6  6010              STR      r0,[r2,#0]
;;;511    		return 0;
0006f8  2000              MOVS     r0,#0
;;;512    	}
;;;513    	
;;;514    	return -1;
;;;515    }
0006fa  bd10              POP      {r4,pc}
                  |L1.1788|
0006fc  f04f30ff          MOV      r0,#0xffffffff        ;514
000700  bd10              POP      {r4,pc}
;;;516    
                          ENDP

                  _ZN9ProgBlobs13blobsAssembleEhhb PROC ; ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
;;;615    
;;;616    void ProgBlobs::blobsAssemble(uint8_t sigmap, uint8_t n, bool checksum)
000702  b57c              PUSH     {r2-r6,lr}
;;;617    {
000704  4605              MOV      r5,r0
000706  460e              MOV      r6,r1
000708  4614              MOV      r4,r2
;;;618    	uint8_t *txData;
;;;619    	int res;
;;;620    	uint32_t len;
;;;621    	
;;;622    	// bogus request
;;;623    	if (sigmap==0)
00070a  2d00              CMP      r5,#0
00070c  d012              BEQ      |L1.1844|
;;;624    	{
;;;625    		ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;626    		return;
;;;627    	}
;;;628    	
;;;629    	len = ser_getTx(&txData);
00070e  a801              ADD      r0,sp,#4
000710  f7fffffe          BL       _Z9ser_getTxPPh ; ser_getTx(unsigned char**)
;;;630    	
;;;631    	res = g_blobs->getBlobs(sigmap, n, txData, len);
000714  9000              STR      r0,[sp,#0]
000716  4829              LDR      r0,|L1.1980|
000718  4632              MOV      r2,r6
00071a  4629              MOV      r1,r5
00071c  9b01              LDR      r3,[sp,#4]
00071e  6800              LDR      r0,[r0,#0]  ; g_blobs
000720  f7fffffe          BL       _ZN5Blobs8getBlobsEhhPht ; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
;;;632    
;;;633    	if (res<0)
000724  2800              CMP      r0,#0
000726  da0b              BGE      |L1.1856|
;;;634    		ser_sendError(SER_ERROR_BUSY, checksum);
000728  4621              MOV      r1,r4
00072a  f06f0001          MVN      r0,#1
00072e  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
;;;635    	else
;;;636    		ser_setTx(TYPE_RESPONSE_GETBLOBS, res, checksum);
;;;637    }
000732  bd7c              POP      {r2-r6,pc}
                  |L1.1844|
000734  4621              MOV      r1,r4                 ;625
000736  f06f0002          MVN      r0,#2                 ;625
00073a  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
00073e  bd7c              POP      {r2-r6,pc}
                  |L1.1856|
000740  b2c1              UXTB     r1,r0                 ;636
000742  4622              MOV      r2,r4                 ;636
000744  2021              MOVS     r0,#0x21              ;636
000746  f7fffffe          BL       _Z9ser_setTxhhb ; ser_setTx(unsigned char, unsigned char, bool)
00074a  bd7c              POP      {r2-r6,pc}
;;;638    
                          ENDP

                  _ZN9ProgBlobs12staticPacketEhPKhhb PROC ; ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
;;;516    
;;;517    int ProgBlobs::staticPacket(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
00074c  b510              PUSH     {r4,lr}
;;;518    {
00074e  4614              MOV      r4,r2
000750  461a              MOV      r2,r3
;;;519    	if (type==TYPE_REQUEST_GETBLOBS)
000752  2820              CMP      r0,#0x20
000754  d002              BEQ      |L1.1884|
;;;520    	{
;;;521    		if (len==2)
;;;522    			blobsAssemble(data[0], data[1], checksum);
;;;523    		else
;;;524    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;525    			
;;;526    		return 0;
;;;527    	}
;;;528    	
;;;529    	// nothing rings a bell, return error
;;;530    	return -1;
000756  f04f30ff          MOV      r0,#0xffffffff
;;;531    }
00075a  bd10              POP      {r4,pc}
                  |L1.1884|
00075c  2c02              CMP      r4,#2                 ;521
00075e  d006              BEQ      |L1.1902|
000760  4611              MOV      r1,r2                 ;524
000762  f06f0002          MVN      r0,#2                 ;524
000766  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
                  |L1.1898|
00076a  2000              MOVS     r0,#0                 ;526
00076c  bd10              POP      {r4,pc}
                  |L1.1902|
00076e  784b              LDRB     r3,[r1,#1]            ;522
000770  7808              LDRB     r0,[r1,#0]            ;522
000772  4619              MOV      r1,r3                 ;522
000774  f7fffffe          BL       _ZN9ProgBlobs13blobsAssembleEhhb ; ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
000778  e7f7              B        |L1.1898|
;;;532    
                          ENDP

                  __sti___13_progblobs_cpp_e6e3ae25 PROC
00077a  b5f0              PUSH     {r4-r7,lr}            ;0
00077c  2420              MOVS     r4,#0x20              ;0
00077e  a21a              ADR      r2,|L1.2024|
000780  a320              ADR      r3,|L1.2052|
000782  252f              MOVS     r5,#0x2f              ;0
000784  f2af61ef          ADR      r1,_Z15createProgBlobsh + 1 ; createProgBlobs(unsigned char)
000788  4f29              LDR      r7,|L1.2096|
00078a  7838              LDRB     r0,[r7,#0]            ;0  ; _ZN13ProgTableUtil16m_progTableIndexE
00078c  1c46              ADDS     r6,r0,#1              ;0
00078e  703e              STRB     r6,[r7,#0]            ;0
000790  4e28              LDR      r6,|L1.2100|
000792  eb061000          ADD      r0,r6,r0,LSL #4       ;0
000796  6002              STR      r2,[r0,#0]            ;0
000798  6043              STR      r3,[r0,#4]            ;0
00079a  7204              STRB     r4,[r0,#8]            ;0
00079c  7245              STRB     r5,[r0,#9]            ;0
00079e  60c1              STR      r1,[r0,#0xc]          ;0
0007a0  bdf0              POP      {r4-r7,pc}            ;0
                          ENDP

0007a2  0000              DCW      0x0000
                  |L1.1956|
                          DCD      ||.data||+0x10
                  |L1.1960|
                          DCD      g_ledBrightness
                  |L1.1964|
                          DCD      0x000f4240
                  |L1.1968|
                          DCD      0x03938700
                  |L1.1972|
                          DCD      _ZN4Prog6m_viewE ; Prog::m_view
                  |L1.1976|
                          DCD      0x2000fc00
                  |L1.1980|
                          DCD      g_blobs
                  |L1.1984|
                          DCD      g_debug
                  |L1.1988|
0007c4  64726f70          DCB      "drop %d\n",0
0007c8  2025640a
0007cc  00      
0007cd  00                DCB      0
0007ce  00                DCB      0
0007cf  00                DCB      0
                  |L1.2000|
                          DCD      g_interface
                  |L1.2004|
                          DCD      g_oldProtocol
                  |L1.2008|
                          DCD      g_chirpUsb
                  |L1.2012|
                          DCD      g_qqueue
                  |L1.2016|
                          DCD      0x31384142
                  |L1.2020|
                          DCD      ||.constdata||
                  |L1.2024|
0007e8  636f6c6f          DCB      "color_connected_components",0
0007ec  725f636f
0007f0  6e6e6563
0007f4  7465645f
0007f8  636f6d70
0007fc  6f6e656e
000800  747300  
000803  00                DCB      0
                  |L1.2052|
000804  70657266          DCB      "perform color connected components analysis",0
000808  6f726d20
00080c  636f6c6f
000810  7220636f
000814  6e6e6563
000818  74656420
00081c  636f6d70
000820  6f6e656e
000824  74732061
000828  6e616c79
00082c  73697300
                  |L1.2096|
                          DCD      _ZN13ProgTableUtil16m_progTableIndexE ; ProgTableUtil::m_progTableIndex
                  |L1.2100|
                          DCD      _ZN13ProgTableUtil11m_progTableE ; ProgTableUtil::m_progTable

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ZN9ProgBlobs9m_actionsE ; ProgBlobs::m_actions
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x4c
                          DCD      ||.conststring||+0x84
                          DCD      ||.conststring||+0x98
                          DCD      ||.conststring||+0xd0
                          DCD      ||.conststring||+0xe4
                          DCD      ||.conststring||+0x11c
                          DCD      ||.conststring||+0x130
                          DCD      ||.conststring||+0x168
                          DCD      ||.conststring||+0x17c
                          DCD      ||.conststring||+0x1b4
                          DCD      ||.conststring||+0x1c8
                          DCD      ||.conststring||+0x200
                          DCD      ||.conststring||+0x214
                          DCD      ||.conststring||+0x24c
                          DCD      ||.conststring||+0x264
                          DCD      ||.conststring||+0x29c
                          DCD      ||.conststring||+0x2b4
                          DCD      ||.conststring||+0x2ec
                          DCD      ||.conststring||+0x304
                          DCD      ||.conststring||+0x33c
                          DCD      ||.conststring||+0x354
                          DCD      ||.conststring||+0x38c
                          DCD      ||.conststring||+0x3a4
                          DCD      ||.conststring||+0x3dc
                          DCD      ||.conststring||+0x3f4
                          DCD      ||.conststring||+0x42c
                          DCD      ||.conststring||+0x444
                          DCD      ||.conststring||+0x47c
                          DCD      ||.conststring||+0x494

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  426c6f63          DCB      "Blocks",0
000004  6b7300  
000007  00                DCB      0
000008  426c6f63          DCB      "Blocks, video",0
00000c  6b732c20
000010  76696465
000014  6f00    
000016  00                DCB      0
000017  00                DCB      0
000018  426c6f63          DCB      "Blocks, video, detected pixels",0
00001c  6b732c20
000020  76696465
000024  6f2c2064
000028  65746563
00002c  74656420
000030  70697865
000034  6c7300  
000037  00                DCB      0
000038  53657420          DCB      "Set signature 1...",0
00003c  7369676e
000040  61747572
000044  6520312e
000048  2e2e00  
00004b  00                DCB      0
00004c  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 1\nrun"
000050  67657446
000054  72616d65
000058  20307832
00005c  31203020
000060  30203331
000064  36203230
000068  380a6363
00006c  5f736574
000070  53696752
000074  6567696f
000078  6e203020
00007c  310a7275
000080  6e      
000081  0a00              DCB      "\n",0
000083  00                DCB      0
000084  53657420          DCB      "Set signature 2...",0
000088  7369676e
00008c  61747572
000090  6520322e
000094  2e2e00  
000097  00                DCB      0
000098  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 2\nrun"
00009c  67657446
0000a0  72616d65
0000a4  20307832
0000a8  31203020
0000ac  30203331
0000b0  36203230
0000b4  380a6363
0000b8  5f736574
0000bc  53696752
0000c0  6567696f
0000c4  6e203020
0000c8  320a7275
0000cc  6e      
0000cd  0a00              DCB      "\n",0
0000cf  00                DCB      0
0000d0  53657420          DCB      "Set signature 3...",0
0000d4  7369676e
0000d8  61747572
0000dc  6520332e
0000e0  2e2e00  
0000e3  00                DCB      0
0000e4  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 3\nrun"
0000e8  67657446
0000ec  72616d65
0000f0  20307832
0000f4  31203020
0000f8  30203331
0000fc  36203230
000100  380a6363
000104  5f736574
000108  53696752
00010c  6567696f
000110  6e203020
000114  330a7275
000118  6e      
000119  0a00              DCB      "\n",0
00011b  00                DCB      0
00011c  53657420          DCB      "Set signature 4...",0
000120  7369676e
000124  61747572
000128  6520342e
00012c  2e2e00  
00012f  00                DCB      0
000130  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 4\nrun"
000134  67657446
000138  72616d65
00013c  20307832
000140  31203020
000144  30203331
000148  36203230
00014c  380a6363
000150  5f736574
000154  53696752
000158  6567696f
00015c  6e203020
000160  340a7275
000164  6e      
000165  0a00              DCB      "\n",0
000167  00                DCB      0
000168  53657420          DCB      "Set signature 5...",0
00016c  7369676e
000170  61747572
000174  6520352e
000178  2e2e00  
00017b  00                DCB      0
00017c  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 5\nrun"
000180  67657446
000184  72616d65
000188  20307832
00018c  31203020
000190  30203331
000194  36203230
000198  380a6363
00019c  5f736574
0001a0  53696752
0001a4  6567696f
0001a8  6e203020
0001ac  350a7275
0001b0  6e      
0001b1  0a00              DCB      "\n",0
0001b3  00                DCB      0
0001b4  53657420          DCB      "Set signature 6...",0
0001b8  7369676e
0001bc  61747572
0001c0  6520362e
0001c4  2e2e00  
0001c7  00                DCB      0
0001c8  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 6\nrun"
0001cc  67657446
0001d0  72616d65
0001d4  20307832
0001d8  31203020
0001dc  30203331
0001e0  36203230
0001e4  380a6363
0001e8  5f736574
0001ec  53696752
0001f0  6567696f
0001f4  6e203020
0001f8  360a7275
0001fc  6e      
0001fd  0a00              DCB      "\n",0
0001ff  00                DCB      0
000200  53657420          DCB      "Set signature 7...",0
000204  7369676e
000208  61747572
00020c  6520372e
000210  2e2e00  
000213  00                DCB      0
000214  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 0 7\nrun"
000218  67657446
00021c  72616d65
000220  20307832
000224  31203020
000228  30203331
00022c  36203230
000230  380a6363
000234  5f736574
000238  53696752
00023c  6567696f
000240  6e203020
000244  370a7275
000248  6e      
000249  0a00              DCB      "\n",0
00024b  00                DCB      0
00024c  53657420          DCB      "Set CC signature 1...",0
000250  43432073
000254  69676e61
000258  74757265
00025c  20312e2e
000260  2e00    
000262  00                DCB      0
000263  00                DCB      0
000264  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 1\nrun"
000268  67657446
00026c  72616d65
000270  20307832
000274  31203020
000278  30203331
00027c  36203230
000280  380a6363
000284  5f736574
000288  53696752
00028c  6567696f
000290  6e203120
000294  310a7275
000298  6e      
000299  0a00              DCB      "\n",0
00029b  00                DCB      0
00029c  53657420          DCB      "Set CC signature 2...",0
0002a0  43432073
0002a4  69676e61
0002a8  74757265
0002ac  20322e2e
0002b0  2e00    
0002b2  00                DCB      0
0002b3  00                DCB      0
0002b4  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 2\nrun"
0002b8  67657446
0002bc  72616d65
0002c0  20307832
0002c4  31203020
0002c8  30203331
0002cc  36203230
0002d0  380a6363
0002d4  5f736574
0002d8  53696752
0002dc  6567696f
0002e0  6e203120
0002e4  320a7275
0002e8  6e      
0002e9  0a00              DCB      "\n",0
0002eb  00                DCB      0
0002ec  53657420          DCB      "Set CC signature 3...",0
0002f0  43432073
0002f4  69676e61
0002f8  74757265
0002fc  20332e2e
000300  2e00    
000302  00                DCB      0
000303  00                DCB      0
000304  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 3\nrun"
000308  67657446
00030c  72616d65
000310  20307832
000314  31203020
000318  30203331
00031c  36203230
000320  380a6363
000324  5f736574
000328  53696752
00032c  6567696f
000330  6e203120
000334  330a7275
000338  6e      
000339  0a00              DCB      "\n",0
00033b  00                DCB      0
00033c  53657420          DCB      "Set CC signature 4...",0
000340  43432073
000344  69676e61
000348  74757265
00034c  20342e2e
000350  2e00    
000352  00                DCB      0
000353  00                DCB      0
000354  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 4\nrun"
000358  67657446
00035c  72616d65
000360  20307832
000364  31203020
000368  30203331
00036c  36203230
000370  380a6363
000374  5f736574
000378  53696752
00037c  6567696f
000380  6e203120
000384  340a7275
000388  6e      
000389  0a00              DCB      "\n",0
00038b  00                DCB      0
00038c  53657420          DCB      "Set CC signature 5...",0
000390  43432073
000394  69676e61
000398  74757265
00039c  20352e2e
0003a0  2e00    
0003a2  00                DCB      0
0003a3  00                DCB      0
0003a4  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 5\nrun"
0003a8  67657446
0003ac  72616d65
0003b0  20307832
0003b4  31203020
0003b8  30203331
0003bc  36203230
0003c0  380a6363
0003c4  5f736574
0003c8  53696752
0003cc  6567696f
0003d0  6e203120
0003d4  350a7275
0003d8  6e      
0003d9  0a00              DCB      "\n",0
0003db  00                DCB      0
0003dc  53657420          DCB      "Set CC signature 6...",0
0003e0  43432073
0003e4  69676e61
0003e8  74757265
0003ec  20362e2e
0003f0  2e00    
0003f2  00                DCB      0
0003f3  00                DCB      0
0003f4  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 6\nrun"
0003f8  67657446
0003fc  72616d65
000400  20307832
000404  31203020
000408  30203331
00040c  36203230
000410  380a6363
000414  5f736574
000418  53696752
00041c  6567696f
000420  6e203120
000424  360a7275
000428  6e      
000429  0a00              DCB      "\n",0
00042b  00                DCB      0
00042c  53657420          DCB      "Set CC signature 7...",0
000430  43432073
000434  69676e61
000438  74757265
00043c  20372e2e
000440  2e00    
000442  00                DCB      0
000443  00                DCB      0
000444  63616d5f          DCB      "cam_getFrame 0x21 0 0 316 208\ncc_setSigRegion 1 7\nrun"
000448  67657446
00044c  72616d65
000450  20307832
000454  31203020
000458  30203331
00045c  36203230
000460  380a6363
000464  5f736574
000468  53696752
00046c  6567696f
000470  6e203120
000474  370a7275
000478  6e      
000479  0a00              DCB      "\n",0
00047b  00                DCB      0
00047c  436c6561          DCB      "Clear all signatures",0
000480  7220616c
000484  6c207369
000488  676e6174
00048c  75726573
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
000494  63635f63          DCB      "cc_clearAllSig\nrun\n",0
000498  6c656172
00049c  416c6c53
0004a0  69670a72
0004a4  756e0a00
0004a8  5369676e          DCB      "Signature teaching mode for signature %d, press button "
0004ac  61747572
0004b0  65207465
0004b4  61636869
0004b8  6e67206d
0004bc  6f646520
0004c0  666f7220
0004c4  7369676e
0004c8  61747572
0004cc  65202564
0004d0  2c207072
0004d4  65737320
0004d8  62757474
0004dc  6f6e20  
0004df  61676169          DCB      "again to finish.",0
0004e3  6e20746f
0004e7  2066696e
0004eb  6973682e
0004ef  00      

                          AREA ||.data||, DATA, ALIGN=2

                  lastByte
000000  00                DCB      0x00
                  g_registerProgBlobs
000001  00                DCB      0x00
                  _ZN9ProgBlobs7m_stateE ; ProgBlobs::m_state
000002  00                DCB      0x00
                  _ZN9ProgBlobs13m_buttonStateE ; ProgBlobs::m_buttonState
000003  00                DCB      0x00
                  _ZN9ProgBlobs7m_indexE ; ProgBlobs::m_index
000004  00                DCB      0x00
                  _ZN9ProgBlobs9m_ledPipeE ; ProgBlobs::m_ledPipe
000005  00                DCB      0x00
                  _ZN9ProgBlobs11renderStateE ; ProgBlobs::renderState
000006  0000              DCB      0x00,0x00
                  w
000008  ffff              DCW      0xffff
00000a  0000              DCB      0x00,0x00
                  drop
                          DCD      0x00000000
                  _ZN9ProgBlobs7m_timerE ; ProgBlobs::m_timer
                          DCD      0x00000000
                  _ZN9ProgBlobs7m_viewsE ; ProgBlobs::m_views
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x18

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___13_progblobs_cpp_e6e3ae25

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;72     {
;;;73         Point16()
;;;74         {
;;;75             m_x = m_y = 0;
;;;76         }
;;;77     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.22||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001

                          AREA ||.constdata__ZTV9ProgBlobs||, COMGROUP=_ZTV9ProgBlobs, DATA, READONLY, ALIGN=2

                  _ZTV9ProgBlobs ; vtable for ProgBlobs
                          DCD      0x00000000
                          DCD      _ZTI9ProgBlobs ; typeinfo for ProgBlobs
                          DCD      _ZN9ProgBlobsD1Ev ; ProgBlobs::~ProgBlobs()
                          DCD      _ZN9ProgBlobsD0Ev ; ProgBlobs::~ProgBlobs__deallocating()
                          DCD      _ZN9ProgBlobs4loopEPc ; ProgBlobs::loop(char*)
                          DCD      _ZN9ProgBlobs7getViewEtPPKc ; ProgBlobs::getView(unsigned short, const char**)
                          DCD      _ZN9ProgBlobs7setViewEt ; ProgBlobs::setView(unsigned short)
                          DCD      _ZN9ProgBlobs9getActionEtPPKcS2_ ; ProgBlobs::getAction(unsigned short, const char**, const char**)
                          DCD      _ZN4Prog13getResolutionEPtS0_h ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
                          DCD      _ZN9ProgBlobs6packetEhPKhhb ; ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool)

                          AREA ||.constdata__ZTI9ProgBlobs||, COMGROUP=_ZTI9ProgBlobs, DATA, READONLY, ALIGN=2

                  _ZTI9ProgBlobs ; typeinfo for ProgBlobs
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS9ProgBlobs ; typeinfo name for ProgBlobs
                          DCD      _ZTI4Prog ; typeinfo for Prog

                          AREA ||.constdata__ZTI4Prog||, COMGROUP=_ZTI4Prog, DATA, READONLY, ALIGN=2

                  _ZTI4Prog ; typeinfo for Prog
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS4Prog ; typeinfo name for Prog

                          AREA ||.constdata__ZTS9ProgBlobs||, COMGROUP=_ZTS9ProgBlobs, DATA, READONLY, ALIGN=0

                  _ZTS9ProgBlobs ; typeinfo name for ProgBlobs
000000  3950726f          DCB      0x39,0x50,0x72,0x6f
000004  67426c6f          DCB      0x67,0x42,0x6c,0x6f
000008  627300            DCB      0x62,0x73,0x00

                          AREA ||.constdata__ZTS4Prog||, COMGROUP=_ZTS4Prog, DATA, READONLY, ALIGN=0

                  _ZTS4Prog ; typeinfo name for Prog
000000  3450726f          DCB      0x34,0x50,0x72,0x6f
000004  6700              DCB      0x67,0x00

                          AREA ||i._ZN4Prog13getResolutionEPtS0_h||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, CODE, READONLY, ALIGN=1

                  _ZN4Prog13getResolutionEPtS0_h PROC ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
;;;69     	}
;;;70     	virtual void getResolution(uint16_t *width, uint16_t *height, uint8_t type)
000000  f44f709e          MOV      r0,#0x13c
;;;71     	{
;;;72     		*width = CAM_RES2_WIDTH;
000004  8008              STRH     r0,[r1,#0]
;;;73     		*height = CAM_RES2_HEIGHT;
000006  20d0              MOVS     r0,#0xd0
000008  8010              STRH     r0,[r2,#0]
;;;74     	}
00000a  4770              BX       lr
;;;75     	virtual int packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
                          ENDP


                          AREA ||area_number.40||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, LINKORDER=||i._ZN4Prog13getResolutionEPtS0_h||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog13getResolutionEPtS0_h||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobsD1Ev||, COMGROUP=_ZN9ProgBlobsD1Ev, CODE, READONLY, ALIGN=2

                  _ZN9ProgBlobsD2Ev                  ; Alternate entry point ; ProgBlobs::~ProgBlobs__sub_object()
                  _ZN9ProgBlobsD1Ev PROC ; ProgBlobs::~ProgBlobs()
;;;42     	}
;;;43     	virtual ~ProgBlobs()
;;;44     	{
;;;45     		staticExit();
;;;46     	}
;;;47     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4802              LDR      r0,|L46.16|
000006  6020              STR      r0,[r4,#0]
000008  f7fffffe          BL       _ZN9ProgBlobs10staticExitEv ; ProgBlobs::staticExit()
00000c  4620              MOV      r0,r4
00000e  bd10              POP      {r4,pc}
                          ENDP

                  |L46.16|
                          DCD      _ZTV9ProgBlobs+0x8 ; vtable for ProgBlobs

                          AREA ||area_number.47||, COMGROUP=_ZN9ProgBlobsD1Ev, LINKORDER=||i._ZN9ProgBlobsD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobsD1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobsD0Ev||, COMGROUP=_ZN9ProgBlobsD0Ev, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobsD0Ev PROC ; ProgBlobs::~ProgBlobs__deallocating()
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       _ZN9ProgBlobsD1Ev ; ProgBlobs::~ProgBlobs()
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      _ZdlPv ; operator delete (void*)
                          ENDP


                          AREA ||area_number.54||, COMGROUP=_ZN9ProgBlobsD0Ev, LINKORDER=||i._ZN9ProgBlobsD0Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobsD0Ev||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobs4loopEPc||, COMGROUP=_ZN9ProgBlobs4loopEPc, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobs4loopEPc PROC ; ProgBlobs::loop(char*)
;;;47     	
;;;48     	virtual int loop(char *status)
000000  4608              MOV      r0,r1
;;;49     	{
;;;50     		return staticLoop(status);
000002  f7ffbffe          B.W      _ZN9ProgBlobs10staticLoopEPc ; ProgBlobs::staticLoop(char*)
;;;51     	}
;;;52     	virtual int getView(uint16_t index, const char **name)
                          ENDP


                          AREA ||area_number.58||, COMGROUP=_ZN9ProgBlobs4loopEPc, LINKORDER=||i._ZN9ProgBlobs4loopEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobs4loopEPc||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobs7getViewEtPPKc||, COMGROUP=_ZN9ProgBlobs7getViewEtPPKc, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobs7getViewEtPPKc PROC ; ProgBlobs::getView(unsigned short, const char**)
;;;51     	}
;;;52     	virtual int getView(uint16_t index, const char **name)
000000  4608              MOV      r0,r1
;;;53     	{
000002  4611              MOV      r1,r2
;;;54     		return staticGetView(index, name);
000004  f7ffbffe          B.W      _ZN9ProgBlobs13staticGetViewEtPPKc ; ProgBlobs::staticGetView(unsigned short, const char**)
;;;55     	}
;;;56     	virtual int setView(uint16_t index)
                          ENDP


                          AREA ||area_number.65||, COMGROUP=_ZN9ProgBlobs7getViewEtPPKc, LINKORDER=||i._ZN9ProgBlobs7getViewEtPPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobs7getViewEtPPKc||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobs7setViewEt||, COMGROUP=_ZN9ProgBlobs7setViewEt, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobs7setViewEt PROC ; ProgBlobs::setView(unsigned short)
;;;55     	}
;;;56     	virtual int setView(uint16_t index)
000000  4608              MOV      r0,r1
;;;57     	{
;;;58     		return staticSetView(index);
000002  f7ffbffe          B.W      _ZN9ProgBlobs13staticSetViewEt ; ProgBlobs::staticSetView(unsigned short)
;;;59     	}
;;;60     	virtual int getAction(uint16_t index, const char **name, const char **scriptlet)
                          ENDP


                          AREA ||area_number.72||, COMGROUP=_ZN9ProgBlobs7setViewEt, LINKORDER=||i._ZN9ProgBlobs7setViewEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobs7setViewEt||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobs9getActionEtPPKcS2_||, COMGROUP=_ZN9ProgBlobs9getActionEtPPKcS2_, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobs9getActionEtPPKcS2_ PROC ; ProgBlobs::getAction(unsigned short, const char**, const char**)
;;;59     	}
;;;60     	virtual int getAction(uint16_t index, const char **name, const char **scriptlet)
000000  4608              MOV      r0,r1
;;;61     	{
000002  4611              MOV      r1,r2
000004  461a              MOV      r2,r3
;;;62     		return staticGetAction(index, name, scriptlet);
000006  f7ffbffe          B.W      _ZN9ProgBlobs15staticGetActionEtPPKcS2_ ; ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
;;;63     	}
;;;64     	virtual int packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
                          ENDP


                          AREA ||area_number.79||, COMGROUP=_ZN9ProgBlobs9getActionEtPPKcS2_, LINKORDER=||i._ZN9ProgBlobs9getActionEtPPKcS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.79||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobs9getActionEtPPKcS2_||
                          DCD      0x00000001

                          AREA ||i._ZN9ProgBlobs6packetEhPKhhb||, COMGROUP=_ZN9ProgBlobs6packetEhPKhhb, CODE, READONLY, ALIGN=1

                  _ZN9ProgBlobs6packetEhPKhhb PROC ; ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;63     	}
;;;64     	virtual int packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
000000  4608              MOV      r0,r1
;;;65     	{
000002  4611              MOV      r1,r2
000004  461a              MOV      r2,r3
000006  9b00              LDR      r3,[sp,#0]
;;;66     		return staticPacket(type, data, len, checksum);
000008  f7ffbffe          B.W      _ZN9ProgBlobs12staticPacketEhPKhhb ; ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
;;;67     	}
;;;68     
                          ENDP


                          AREA ||area_number.86||, COMGROUP=_ZN9ProgBlobs6packetEhPKhhb, LINKORDER=||i._ZN9ProgBlobs6packetEhPKhhb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9ProgBlobs6packetEhPKhhb||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\progblobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_e6e3ae25___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___13_progblobs_cpp_e6e3ae25___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progblobs_cpp_e6e3ae25___Z7__REVSHi|
#line 144
|__asm___13_progblobs_cpp_e6e3ae25___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
