; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\conncomp.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\conncomp.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\conncomp.crf src\conncomp.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _Z10cc_loadLutv PROC ; cc_loadLut()
;;;107    
;;;108    int cc_loadLut(void)
000000  b530              PUSH     {r4,r5,lr}
;;;109    {
000002  b08b              SUB      sp,sp,#0x2c
;;;110    	int i, res;
;;;111    	uint32_t len;
;;;112    	char id[32];
;;;113    	ColorSignature *psig;
;;;114    
;;;115    	for (i=1; i<=CL_NUM_SIGNATURES; i++)
000004  2401              MOVS     r4,#1
;;;116    	{
;;;117    		sprintf(id, "signature%d", i);
;;;118    		// get signature and add to color lut
;;;119    		res = prm_get(id, &len, &psig, END);
;;;120    		if (res<0)
;;;121    			return res;
;;;122    		g_blobs->m_clut.setSignature(i, *psig);
000006  4dfe              LDR      r5,|L1.1024|
                  |L1.8|
000008  4622              MOV      r2,r4                 ;117
00000a  a1fe              ADR      r1,|L1.1028|
00000c  a802              ADD      r0,sp,#8              ;117
00000e  f7fffffe          BL       __2sprintf
000012  2300              MOVS     r3,#0                 ;119
000014  aa01              ADD      r2,sp,#4              ;119
000016  a90a              ADD      r1,sp,#0x28           ;119
000018  a802              ADD      r0,sp,#8              ;119
00001a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
00001e  2800              CMP      r0,#0                 ;120
000020  db0e              BLT      |L1.64|
000022  b2e1              UXTB     r1,r4
000024  9a01              LDR      r2,[sp,#4]
000026  68a8              LDR      r0,[r5,#8]  ; g_blobs
000028  f7fffffe          BL       _ZN8ColorLUT12setSignatureEhRK14ColorSignature ; ColorLUT::setSignature(unsigned char, const ColorSignature&)
00002c  1c64              ADDS     r4,r4,#1              ;115
00002e  2c07              CMP      r4,#7                 ;115
000030  ddea              BLE      |L1.8|
;;;123    	}
;;;124    
;;;125    	g_blobs->m_clut.generateLUT();
000032  68a8              LDR      r0,[r5,#8]  ; g_blobs
000034  f7fffffe          BL       _ZN8ColorLUT11generateLUTEv ; ColorLUT::generateLUT()
;;;126    	// go ahead and flush since we've changed things
;;;127    	g_qqueue->flush();
000038  6868              LDR      r0,[r5,#4]  ; g_qqueue
00003a  f7fffffe          BL       _ZN6Qqueue5flushEv ; Qqueue::flush()
;;;128    
;;;129    	return 0;
00003e  2000              MOVS     r0,#0
                  |L1.64|
;;;130    }
000040  b00b              ADD      sp,sp,#0x2c
000042  bd30              POP      {r4,r5,pc}
;;;131    
                          ENDP

                  _Z20cc_signatureCallbackPKcRKf PROC ; cc_signatureCallback(const char*, const float&)
;;;132    void cc_signatureCallback(const char *id, const float &val)
000044  b510              PUSH     {r4,lr}
;;;133    {
000046  4603              MOV      r3,r0
;;;134    	if (id[0]=='S') // set Signature range
;;;135    	{
;;;136    		uint8_t signum = id[10]-'0'; // extract signature number
;;;137    		g_blobs->m_clut.setSigRange(signum, val);
000048  4ced              LDR      r4,|L1.1024|
00004a  781a              LDRB     r2,[r3,#0]            ;134
00004c  68a0              LDR      r0,[r4,#8]            ;134
00004e  2a53              CMP      r2,#0x53              ;134
000050  d002              BEQ      |L1.88|
;;;138    	}
;;;139    	else if (id[0]=='M') // set minimum brightness 
000052  2a4d              CMP      r2,#0x4d
000054  d009              BEQ      |L1.106|
000056  e00c              B        |L1.114|
                  |L1.88|
000058  7a9a              LDRB     r2,[r3,#0xa]          ;136
00005a  3a30              SUBS     r2,r2,#0x30           ;136
00005c  b2d2              UXTB     r2,r2                 ;136
00005e  ed910a00          VLDR     s0,[r1,#0]            ;137
000062  4611              MOV      r1,r2                 ;137
000064  f7fffffe          BL       _ZN8ColorLUT11setSigRangeEhf ; ColorLUT::setSigRange(unsigned char, float)
000068  e003              B        |L1.114|
                  |L1.106|
;;;140    		g_blobs->m_clut.setMinBrightness(val);
00006a  ed910a00          VLDR     s0,[r1,#0]
00006e  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
                  |L1.114|
;;;141    
;;;142      if (exec_pauseM0()) // pause M0, but only generate LUT if we're running 
000072  f7fffffe          BL       _Z12exec_pauseM0v ; exec_pauseM0()
000076  2800              CMP      r0,#0
000078  d006              BEQ      |L1.136|
;;;143    	{
;;;144    		// generate lut while M0 is paused
;;;145    		g_blobs->m_clut.generateLUT();			
00007a  68a0              LDR      r0,[r4,#8]  ; g_blobs
00007c  f7fffffe          BL       _ZN8ColorLUT11generateLUTEv ; ColorLUT::generateLUT()
;;;146    		exec_resumeM0();
000080  e8bd4010          POP      {r4,lr}
000084  f7ffbffe          B.W      _Z13exec_resumeM0v ; exec_resumeM0()
                  |L1.136|
;;;147    	}
;;;148    }
000088  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  _Z17cc_shadowCallbackPKcPKv PROC ; cc_shadowCallback(const char*, const void*)
;;;150    void cc_shadowCallback(const char *id, const void *val)
00008a  b5f8              PUSH     {r3-r7,lr}
;;;151    {
00008c  4606              MOV      r6,r0
00008e  460c              MOV      r4,r1
;;;152    	if (strcmp(id, "Max blocks")==0)
000090  a1df              ADR      r1,|L1.1040|
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       strcmp
;;;153    		g_blobs->setMaxBlobs(*(uint16_t *)val);
000098  4dd9              LDR      r5,|L1.1024|
00009a  2800              CMP      r0,#0                 ;152
00009c  d02c              BEQ      |L1.248|
;;;154    	else if (strcmp(id, "Max blocks per signature")==0)
00009e  a1df              ADR      r1,|L1.1052|
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       strcmp
0000a6  2800              CMP      r0,#0
0000a8  d02c              BEQ      |L1.260|
;;;155    		g_blobs->setMaxBlobsPerModel(*(uint16_t *)val);
;;;156    	else if (strcmp(id, "Min block area")==0)
0000aa  a1e3              ADR      r1,|L1.1080|
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       strcmp
0000b2  2800              CMP      r0,#0
0000b4  d02c              BEQ      |L1.272|
;;;157    		g_blobs->setMinArea(*(uint32_t *)val);
;;;158    	else if (strcmp(id, "Max merge dist")==0)
0000b6  a1e4              ADR      r1,|L1.1096|
0000b8  4630              MOV      r0,r6
0000ba  f7fffffe          BL       strcmp
0000be  2800              CMP      r0,#0
0000c0  d02c              BEQ      |L1.284|
;;;159    		g_blobs->setMaxMergeDist(*(uint16_t *)val);
;;;160    	else if (strcmp(id, "Signature teach threshold")==0)
0000c2  a1e5              ADR      r1,|L1.1112|
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       strcmp
0000ca  b368              CBZ      r0,|L1.296|
;;;161    		g_blobs->m_clut.setGrowDist(*(uint32_t *)val);
;;;162    	else if (strcmp(id, "LED brightness")==0)
0000cc  a1e9              ADR      r1,|L1.1140|
0000ce  4630              MOV      r0,r6
0000d0  f7fffffe          BL       strcmp
0000d4  b370              CBZ      r0,|L1.308|
;;;163    	{
;;;164    		g_ledBrightness = *(uint16_t *)val;
;;;165    		led_setMaxCurrent(g_ledBrightness);
;;;166    	}
;;;167    	else if (strcmp(id, "Block filtering")==0)
0000d6  a1eb              ADR      r1,|L1.1156|
0000d8  4630              MOV      r0,r6
0000da  f7fffffe          BL       strcmp
0000de  b380              CBZ      r0,|L1.322|
;;;168    		g_blobs->setBlobFiltering(*(uint8_t *)val);
;;;169    	else if (strcmp(id, "Max tracking velocity")==0)
0000e0  a1ec              ADR      r1,|L1.1172|
0000e2  4630              MOV      r0,r6
0000e4  f7fffffe          BL       strcmp
0000e8  2800              CMP      r0,#0
0000ea  d129              BNE      |L1.320|
;;;170    		g_blobs->setMaxBlobVelocity(*(uint16_t *)val);	
0000ec  8821              LDRH     r1,[r4,#0]
0000ee  68a8              LDR      r0,[r5,#8]  ; g_blobs
0000f0  e8bd40f8          POP      {r3-r7,lr}
0000f4  f7ffbffe          B.W      _ZN5Blobs18setMaxBlobVelocityEt ; Blobs::setMaxBlobVelocity(unsigned short)
                  |L1.248|
0000f8  8821              LDRH     r1,[r4,#0]            ;153
0000fa  68a8              LDR      r0,[r5,#8]            ;153  ; g_blobs
0000fc  e8bd40f8          POP      {r3-r7,lr}            ;153
000100  f7ffbffe          B.W      _ZN5Blobs11setMaxBlobsEt ; Blobs::setMaxBlobs(unsigned short)
                  |L1.260|
000104  8821              LDRH     r1,[r4,#0]            ;155
000106  68a8              LDR      r0,[r5,#8]            ;155  ; g_blobs
000108  e8bd40f8          POP      {r3-r7,lr}            ;155
00010c  f7ffbffe          B.W      _ZN5Blobs19setMaxBlobsPerModelEt ; Blobs::setMaxBlobsPerModel(unsigned short)
                  |L1.272|
000110  6821              LDR      r1,[r4,#0]            ;157
000112  68a8              LDR      r0,[r5,#8]            ;157  ; g_blobs
000114  e8bd40f8          POP      {r3-r7,lr}            ;157
000118  f7ffbffe          B.W      _ZN5Blobs10setMinAreaEj ; Blobs::setMinArea(unsigned)
                  |L1.284|
00011c  8821              LDRH     r1,[r4,#0]            ;159
00011e  68a8              LDR      r0,[r5,#8]            ;159  ; g_blobs
000120  e8bd40f8          POP      {r3-r7,lr}            ;159
000124  f7ffbffe          B.W      _ZN5Blobs15setMaxMergeDistEt ; Blobs::setMaxMergeDist(unsigned short)
                  |L1.296|
000128  6821              LDR      r1,[r4,#0]            ;161
00012a  68a8              LDR      r0,[r5,#8]            ;161  ; g_blobs
00012c  e8bd40f8          POP      {r3-r7,lr}            ;161
000130  f7ffbffe          B.W      _ZN8ColorLUT11setGrowDistEj ; ColorLUT::setGrowDist(unsigned)
                  |L1.308|
000134  8820              LDRH     r0,[r4,#0]            ;164
000136  8068              STRH     r0,[r5,#2]            ;164
000138  9000              STR      r0,[sp,#0]            ;165
00013a  4668              MOV      r0,sp                 ;165
00013c  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
                  |L1.320|
;;;171    }
000140  bdf8              POP      {r3-r7,pc}
                  |L1.322|
000142  e7ff              B        |L1.324|
                  |L1.324|
000144  7821              LDRB     r1,[r4,#0]            ;168
000146  68a8              LDR      r0,[r5,#8]            ;168  ; g_blobs
000148  e8bd40f8          POP      {r3-r7,lr}            ;168
00014c  f7ffbffe          B.W      _ZN5Blobs16setBlobFilteringEh ; Blobs::setBlobFiltering(unsigned char)
;;;172    
                          ENDP

                  _Z13cc_loadParamsv PROC ; cc_loadParams()
;;;173    
;;;174    void cc_loadParams(void)
000150  e92d4ff0          PUSH     {r4-r11,lr}
;;;175    {
000154  ed2d8b02          VPUSH    {d8}
000158  b0bb              SUB      sp,sp,#0xec
;;;176    	int i;
;;;177    	ColorSignature signature;
00015a  a830              ADD      r0,sp,#0xc0
00015c  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;178    	char id[32], desc[100];
;;;179    	float range;
;;;180    
;;;181    	uint8_t progBlobs = exec_getProgIndex(PROG_NAME_BLOBS);
000160  2100              MOVS     r1,#0
000162  a0d2              ADR      r0,|L1.1196|
000164  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
000168  4604              MOV      r4,r0
;;;182    	uint8_t progPt = exec_getProgIndex(PROG_NAME_PANTILT);
00016a  2100              MOVS     r1,#0
00016c  a0d6              ADR      r0,|L1.1224|
00016e  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
;;;183    	uint32_t progFlags = PROG_FLAGS(progBlobs) & PROG_FLAGS(progPt);
000172  3419              ADDS     r4,r4,#0x19
000174  f04f0901          MOV      r9,#1
000178  fa09f104          LSL      r1,r9,r4
00017c  3019              ADDS     r0,r0,#0x19
00017e  fa09f000          LSL      r0,r9,r0
000182  4301              ORRS     r1,r1,r0
000184  f04f477e          MOV      r7,#0xfe000000
000188  438f              BICS     r7,r7,r1
;;;184    	
;;;185    	// set up signatures, and ranges, load later
;;;186    	for (i=1; i<=CL_NUM_SIGNATURES; i++)
00018a  2401              MOVS     r4,#1
00018c  2500              MOVS     r5,#0
00018e  f10d0ac0          ADD      r10,sp,#0xc0          ;177
;;;187    	{
;;;188    		sprintf(id, "signature%d", i);
;;;189    		sprintf(desc, "Color signature %d", i);
;;;190    		// add if it doesn't exist yet
;;;191    		prm_add(id, progFlags | PRM_FLAG_INTERNAL, PRM_PRIORITY_DEFAULT, desc, INTS8(sizeof(ColorSignature), &signature), END);
000192  f04f0b20          MOV      r11,#0x20
;;;192    
;;;193    		sprintf(id, "Signature %d range", i);
;;;194    		sprintf(desc, "@c Tuning @m 0.0 @M 25.0 Sets filtering range of signature %d. (default 3.5)", i);
;;;195    		prm_add(id, progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_5, desc, FLT32(3.5f), END);
000196  ed9f8bd0          VLDR     d8,|L1.1240|
00019a  f4477080          ORR      r0,r7,#0x100
00019e  903a              STR      r0,[sp,#0xe8]         ;191
;;;196    
;;;197    		prm_get(id, &range, END);
;;;198    		g_blobs->m_clut.setSigRange(i, range);
0001a0  4e97              LDR      r6,|L1.1024|
0001a2  f0470001          ORR      r0,r7,#1              ;191
0001a6  f04f0814          MOV      r8,#0x14              ;195
0001aa  9039              STR      r0,[sp,#0xe4]         ;191
                  |L1.428|
0001ac  4622              MOV      r2,r4                 ;188
0001ae  a195              ADR      r1,|L1.1028|
0001b0  a828              ADD      r0,sp,#0xa0           ;188
0001b2  f7fffffe          BL       __2sprintf
0001b6  4622              MOV      r2,r4                 ;189
0001b8  a1c9              ADR      r1,|L1.1248|
0001ba  a80f              ADD      r0,sp,#0x3c           ;189
0001bc  f7fffffe          BL       __2sprintf
0001c0  e9cdba01          STRD     r11,r10,[sp,#4]       ;191
0001c4  2081              MOVS     r0,#0x81              ;191
0001c6  9000              STR      r0,[sp,#0]            ;191
0001c8  ab0f              ADD      r3,sp,#0x3c           ;191
0001ca  2200              MOVS     r2,#0                 ;191
0001cc  9503              STR      r5,[sp,#0xc]          ;191
0001ce  a828              ADD      r0,sp,#0xa0           ;191
0001d0  9939              LDR      r1,[sp,#0xe4]         ;191
0001d2  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0001d6  4622              MOV      r2,r4                 ;193
0001d8  a1c6              ADR      r1,|L1.1268|
0001da  a828              ADD      r0,sp,#0xa0           ;193
0001dc  f7fffffe          BL       __2sprintf
0001e0  4622              MOV      r2,r4                 ;194
0001e2  49c9              LDR      r1,|L1.1288|
0001e4  a80f              ADD      r0,sp,#0x3c           ;194
0001e6  f7fffffe          BL       __2sprintf
0001ea  9504              STR      r5,[sp,#0x10]         ;195
0001ec  ed8d8b02          VSTR     d8,[sp,#8]            ;195
0001f0  ab0f              ADD      r3,sp,#0x3c           ;195
0001f2  f2413288          MOV      r2,#0x1388            ;195
0001f6  f8cd8000          STR      r8,[sp,#0]            ;195
0001fa  a828              ADD      r0,sp,#0xa0           ;195
0001fc  993a              LDR      r1,[sp,#0xe8]         ;195
0001fe  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
000202  2200              MOVS     r2,#0                 ;197
000204  a90e              ADD      r1,sp,#0x38           ;197
000206  a828              ADD      r0,sp,#0xa0           ;197
000208  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
00020c  b2e1              UXTB     r1,r4
00020e  ed9d0a0e          VLDR     s0,[sp,#0x38]
000212  68b0              LDR      r0,[r6,#8]  ; g_blobs
000214  f7fffffe          BL       _ZN8ColorLUT11setSigRangeEhf ; ColorLUT::setSigRange(unsigned char, float)
;;;199    		prm_setShadowCallback(id, (ShadowCallback)cc_signatureCallback);
000218  f2af11d7          ADR      r1,_Z20cc_signatureCallbackPKcRKf + 1 ; cc_signatureCallback(const char*, const float&)
00021c  a828              ADD      r0,sp,#0xa0
00021e  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;200    
;;;201    		sprintf(id, "Signature label %d", i);
000222  4622              MOV      r2,r4
000224  a1b9              ADR      r1,|L1.1292|
000226  a828              ADD      r0,sp,#0xa0
000228  f7fffffe          BL       __2sprintf
;;;202    		sprintf(desc, "@c Signature_Labels Sets the label for objects that match signature %d.", i);
00022c  4622              MOV      r2,r4
00022e  49bc              LDR      r1,|L1.1312|
000230  a80f              ADD      r0,sp,#0x3c
000232  f7fffffe          BL       __2sprintf
;;;203    		prm_add(id, progFlags, PRM_PRIORITY_3, desc, STRING(""), END);
000236  a17f              ADR      r1,|L1.1076|
000238  20a1              MOVS     r0,#0xa1
00023a  e88d0023          STM      sp,{r0,r1,r5}
00023e  ab0f              ADD      r3,sp,#0x3c
000240  f64032b8          MOV      r2,#0xbb8
000244  4639              MOV      r1,r7
000246  a828              ADD      r0,sp,#0xa0
000248  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
00024c  1c64              ADDS     r4,r4,#1              ;186
00024e  2c07              CMP      r4,#7                 ;186
000250  ddac              BLE      |L1.428|
;;;204    	}
;;;205    
;;;206    	// others -----
;;;207    
;;;208    	// setup
;;;209    	prm_add("Min brightness", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_5-1, 
000252  ed9f0bb4          VLDR     d0,|L1.1316|
000256  9504              STR      r5,[sp,#0x10]
000258  ed8d0b02          VSTR     d0,[sp,#8]
00025c  4bb3              LDR      r3,|L1.1324|
00025e  f2413287          MOV      r2,#0x1387
000262  f8cd8000          STR      r8,[sp,#0]
000266  a0b2              ADR      r0,|L1.1328|
000268  993a              LDR      r1,[sp,#0xe8]
00026a  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;210    		"@c Tuning @m 0.0 @M 0.5 Sets the minimum brightness of all signatures. (default 0.2)", FLT32(0.2f), END);
;;;211    	prm_setShadowCallback("Min brightness", (ShadowCallback)cc_signatureCallback);
00026e  f2af212b          ADR      r1,_Z20cc_signatureCallbackPKcRKf + 1 ; cc_signatureCallback(const char*, const float&)
000272  a0af              ADR      r0,|L1.1328|
000274  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;212    	prm_add("Color code mode", progFlags, PRM_PRIORITY_4-3,
000278  f8cd9000          STR      r9,[sp,#0]
00027c  e9cd9501          STRD     r9,r5,[sp,#4]
000280  4baf              LDR      r3,|L1.1344|
000282  f640729d          MOV      r2,#0xf9d
000286  4639              MOV      r1,r7
000288  a0ae              ADR      r0,|L1.1348|
00028a  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;213    		"Sets the color code mode (default enabled) @c Expert @s 0=Disabled @s 1=Enabled @s 2=Color_codes_only @s 3=Mixed", INT8(1), END);
;;;214    	prm_add("Signature teach threshold", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4-2,
00028e  f6406074          MOV      r0,#0xe74
000292  2704              MOVS     r7,#4
000294  e9cd7000          STRD     r7,r0,[sp,#0]
000298  f6407a9e          MOV      r10,#0xf9e
00029c  4bad              LDR      r3,|L1.1364|
00029e  4652              MOV      r2,r10
0002a0  9502              STR      r5,[sp,#8]
0002a2  a06d              ADR      r0,|L1.1112|
0002a4  993a              LDR      r1,[sp,#0xe8]
0002a6  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;215    		"@c Expert @m 0 @M 10000 Determines how inclusive the growing algorithm is when teaching signatures with button-push method (default 3700)", INT32(3700), END);
;;;216    	prm_setShadowCallback("Signature teach threshold", (ShadowCallback)cc_shadowCallback);
0002aa  f2af2121          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
0002ae  a06a              ADR      r0,|L1.1112|
0002b0  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;217    	prm_add("LED brightness", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4-2,
0002b4  f24020ee          MOV      r0,#0x2ee
0002b8  e9cd0501          STRD     r0,r5,[sp,#4]
0002bc  2402              MOVS     r4,#2
0002be  4ba6              LDR      r3,|L1.1368|
0002c0  4652              MOV      r2,r10
0002c2  9400              STR      r4,[sp,#0]
0002c4  a06b              ADR      r0,|L1.1140|
0002c6  993a              LDR      r1,[sp,#0xe8]
0002c8  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;218    		"@c Expert @m 0 @M 20000 Sets the LED brightness -- bear in mind that if the LED is too bright, it can affect teach mode by illuminating the object! (default " STRINGIFY(LED_DEFAULT_MAX_CURRENT) ")", INT16(LED_DEFAULT_MAX_CURRENT), END);
;;;219    	prm_setShadowCallback("LED brightness", (ShadowCallback)cc_shadowCallback);
0002cc  f2af2145          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
0002d0  a068              ADR      r0,|L1.1140|
0002d2  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;220    
;;;221    	prm_add("Max blocks", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+1,
0002d6  f04f0a64          MOV      r10,#0x64
0002da  e9cda501          STRD     r10,r5,[sp,#4]
0002de  f6407ba1          MOV      r11,#0xfa1
0002e2  4b9e              LDR      r3,|L1.1372|
0002e4  465a              MOV      r2,r11
0002e6  9400              STR      r4,[sp,#0]
0002e8  a049              ADR      r0,|L1.1040|
0002ea  993a              LDR      r1,[sp,#0xe8]
0002ec  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;222    		"@c Expert @m 1 @M 100 Sets the maximum total blocks sent per frame. (default 100)", UINT16(100), END);
;;;223    	prm_setShadowCallback("Max blocks", (ShadowCallback)cc_shadowCallback);
0002f0  f2af2169          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
0002f4  a046              ADR      r0,|L1.1040|
0002f6  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;224    	prm_add("Max blocks per signature", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+1, 
0002fa  e9cda501          STRD     r10,r5,[sp,#4]
0002fe  4b98              LDR      r3,|L1.1376|
000300  465a              MOV      r2,r11
000302  9400              STR      r4,[sp,#0]
000304  a045              ADR      r0,|L1.1052|
000306  993a              LDR      r1,[sp,#0xe8]
000308  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;225    		"@c Expert @m 1 @M 100 Sets the maximum blocks for each color signature sent for each frame. (default 100)", UINT16(100), END);
;;;226    	prm_setShadowCallback("Max blocks per signature", (ShadowCallback)cc_shadowCallback);
00030c  f2af2185          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
000310  a042              ADR      r0,|L1.1052|
000312  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;227    	prm_add("Min block area", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+1, 
000316  e9cd7800          STRD     r7,r8,[sp,#0]
00031a  4b92              LDR      r3,|L1.1380|
00031c  465a              MOV      r2,r11
00031e  9502              STR      r5,[sp,#8]
000320  a045              ADR      r0,|L1.1080|
000322  993a              LDR      r1,[sp,#0xe8]
000324  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;228    		"@c Expert @m 4 @M 2500 Sets the minimum required area in pixels for a block.  Blocks with less area won't be sent. (default 20)", UINT32(20), END);
;;;229    	prm_setShadowCallback("Min block area", (ShadowCallback)cc_shadowCallback);
000328  f2af21a1          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
00032c  a042              ADR      r0,|L1.1080|
00032e  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;230    	prm_add("Max merge dist", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+1, 
000332  2007              MOVS     r0,#7
000334  e9cd0501          STRD     r0,r5,[sp,#4]
000338  4b8b              LDR      r3,|L1.1384|
00033a  465a              MOV      r2,r11
00033c  9400              STR      r4,[sp,#0]
00033e  a042              ADR      r0,|L1.1096|
000340  993a              LDR      r1,[sp,#0xe8]
000342  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;231    		"@c Expert @m 0 @M 60 Sets the maximum distance that separated blocks should be merged into one block (default " STRINGIFY(MAX_MERGE_DIST) ")", UINT16(MAX_MERGE_DIST), END);
;;;232    	prm_setShadowCallback("Max merge dist", (ShadowCallback)cc_shadowCallback);
000346  f2af21bd          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
00034a  a03f              ADR      r0,|L1.1096|
00034c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;233    
;;;234    	prm_add("Block filtering", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+2,
000350  2003              MOVS     r0,#3
000352  e9cd9000          STRD     r9,r0,[sp,#0]
000356  f64077a2          MOV      r7,#0xfa2
00035a  4b84              LDR      r3,|L1.1388|
00035c  463a              MOV      r2,r7
00035e  9502              STR      r5,[sp,#8]
000360  a048              ADR      r0,|L1.1156|
000362  993a              LDR      r1,[sp,#0xe8]
000364  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;235    		"@c Expert @m 0 @M 60 Sets the amount of filtering for blocks -- more filtering means less false-positives but slower detection (default " STRINGIFY(BL_BLOB_FILTERING) ")", INT8(BL_BLOB_FILTERING), END);
;;;236    	prm_setShadowCallback("Block filtering", (ShadowCallback)cc_shadowCallback);
000368  f2af21e1          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
00036c  a045              ADR      r0,|L1.1156|
00036e  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;237    	prm_add("Max tracking velocity", progFlags | PRM_FLAG_SLIDER, PRM_PRIORITY_4+2,
000372  2041              MOVS     r0,#0x41
000374  e9cd0501          STRD     r0,r5,[sp,#4]
000378  4b7d              LDR      r3,|L1.1392|
00037a  463a              MOV      r2,r7
00037c  9400              STR      r4,[sp,#0]
00037e  a045              ADR      r0,|L1.1172|
000380  993a              LDR      r1,[sp,#0xe8]
000382  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;238    		"@c Expert @m 10 @M 320 Sets the maximum velocity a block can be tracked in pixels-per-second (default " STRINGIFY(BL_MAX_TRACKING_DIST) ")", INT16(BL_MAX_TRACKING_DIST), END);
;;;239    	prm_setShadowCallback("Max tracking velocity", (ShadowCallback)cc_shadowCallback);
000386  f2af21fd          ADR      r1,_Z17cc_shadowCallbackPKcPKv + 1 ; cc_shadowCallback(const char*, const void*)
00038a  a042              ADR      r0,|L1.1172|
00038c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;240    
;;;241    	// load
;;;242    	uint8_t ccMode, filtering;
;;;243    	uint16_t maxBlobs, maxBlobsPerModel, maxVel, mergeDist;
;;;244    	uint32_t minArea, growDist;
;;;245    	float miny;
;;;246    
;;;247    	prm_get("Max blocks", &maxBlobs, END);
000390  2200              MOVS     r2,#0
000392  a90b              ADD      r1,sp,#0x2c
000394  a01e              ADR      r0,|L1.1040|
000396  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;248    	prm_get("Max blocks per signature", &maxBlobsPerModel, END);
00039a  2200              MOVS     r2,#0
00039c  a90a              ADD      r1,sp,#0x28
00039e  a01f              ADR      r0,|L1.1052|
0003a0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;249    	prm_get("Max merge dist", &mergeDist, END);
0003a4  2200              MOVS     r2,#0
0003a6  a908              ADD      r1,sp,#0x20
0003a8  a027              ADR      r0,|L1.1096|
0003aa  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;250    	prm_get("Min block area", &minArea, END);
0003ae  2200              MOVS     r2,#0
0003b0  a907              ADD      r1,sp,#0x1c
0003b2  a021              ADR      r0,|L1.1080|
0003b4  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;251    	prm_get("Color code mode", &ccMode, END);
0003b8  2200              MOVS     r2,#0
0003ba  a90d              ADD      r1,sp,#0x34
0003bc  a061              ADR      r0,|L1.1348|
0003be  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;252    	prm_get("Min brightness", &miny, END);
0003c2  2200              MOVS     r2,#0
0003c4  a905              ADD      r1,sp,#0x14
0003c6  a05a              ADR      r0,|L1.1328|
0003c8  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;253    	prm_get("Signature teach threshold", &growDist, END);
0003cc  2200              MOVS     r2,#0
0003ce  a906              ADD      r1,sp,#0x18
0003d0  a021              ADR      r0,|L1.1112|
0003d2  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;254    	prm_get("LED brightness", &g_ledBrightness, END);
0003d6  490a              LDR      r1,|L1.1024|
0003d8  2200              MOVS     r2,#0
0003da  1c89              ADDS     r1,r1,#2
0003dc  a025              ADR      r0,|L1.1140|
0003de  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;255    	prm_get("Block filtering", &filtering, END);
0003e2  2200              MOVS     r2,#0
0003e4  a90c              ADD      r1,sp,#0x30
0003e6  a027              ADR      r0,|L1.1156|
0003e8  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;256    	prm_get("Max tracking velocity", &maxVel, END);
0003ec  2200              MOVS     r2,#0
0003ee  a909              ADD      r1,sp,#0x24
0003f0  a028              ADR      r0,|L1.1172|
0003f2  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;257    	
;;;258    	g_blobs->setMaxBlobs(maxBlobs);
0003f6  f8bd102c          LDRH     r1,[sp,#0x2c]
0003fa  68b0              LDR      r0,[r6,#8]  ; g_blobs
0003fc  e0ba              B        |L1.1396|
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
000404  7369676e          DCB      "signature%d",0
000408  61747572
00040c  65256400
                  |L1.1040|
000410  4d617820          DCB      "Max blocks",0
000414  626c6f63
000418  6b7300  
00041b  00                DCB      0
                  |L1.1052|
00041c  4d617820          DCB      "Max blocks per signature"
000420  626c6f63
000424  6b732070
000428  65722073
00042c  69676e61
000430  74757265
                  |L1.1076|
000434  00                DCB      0
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
000438  4d696e20          DCB      "Min block area",0
00043c  626c6f63
000440  6b206172
000444  656100  
000447  00                DCB      0
                  |L1.1096|
000448  4d617820          DCB      "Max merge dist",0
00044c  6d657267
000450  65206469
000454  737400  
000457  00                DCB      0
                  |L1.1112|
000458  5369676e          DCB      "Signature teach threshold",0
00045c  61747572
000460  65207465
000464  61636820
000468  74687265
00046c  73686f6c
000470  6400    
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
000474  4c454420          DCB      "LED brightness",0
000478  62726967
00047c  68746e65
000480  737300  
000483  00                DCB      0
                  |L1.1156|
000484  426c6f63          DCB      "Block filtering",0
000488  6b206669
00048c  6c746572
000490  696e6700
                  |L1.1172|
000494  4d617820          DCB      "Max tracking velocity",0
000498  74726163
00049c  6b696e67
0004a0  2076656c
0004a4  6f636974
0004a8  7900    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L1.1196|
0004ac  636f6c6f          DCB      "color_connected_components",0
0004b0  725f636f
0004b4  6e6e6563
0004b8  7465645f
0004bc  636f6d70
0004c0  6f6e656e
0004c4  747300  
0004c7  00                DCB      0
                  |L1.1224|
0004c8  70616e5f          DCB      "pan_tilt_demo",0
0004cc  74696c74
0004d0  5f64656d
0004d4  6f00    
0004d6  00                DCB      0
0004d7  00                DCB      0
                  |L1.1240|
0004d8  00000000          DCFD     0x400c000000000000 ; 3.5
0004dc  400c0000
                  |L1.1248|
0004e0  436f6c6f          DCB      "Color signature %d",0
0004e4  72207369
0004e8  676e6174
0004ec  75726520
0004f0  256400  
0004f3  00                DCB      0
                  |L1.1268|
0004f4  5369676e          DCB      "Signature %d range",0
0004f8  61747572
0004fc  65202564
000500  2072616e
000504  676500  
000507  00                DCB      0
                  |L1.1288|
                          DCD      ||.conststring||+0x370
                  |L1.1292|
00050c  5369676e          DCB      "Signature label %d",0
000510  61747572
000514  65206c61
000518  62656c20
00051c  256400  
00051f  00                DCB      0
                  |L1.1312|
                          DCD      ||.conststring||+0x3c0
                  |L1.1316|
000524  a0000000          DCFD     0x3fc99999a0000000 ; 0.20000000298023224
000528  3fc99999
                  |L1.1324|
                          DCD      ||.conststring||+0x408
                  |L1.1328|
000530  4d696e20          DCB      "Min brightness",0
000534  62726967
000538  68746e65
00053c  737300  
00053f  00                DCB      0
                  |L1.1344|
                          DCD      ||.conststring||+0x460
                  |L1.1348|
000544  436f6c6f          DCB      "Color code mode",0
000548  7220636f
00054c  6465206d
000550  6f646500
                  |L1.1364|
                          DCD      ||.conststring||+0x4d4
                  |L1.1368|
                          DCD      ||.conststring||+0x560
                  |L1.1372|
                          DCD      ||.conststring||+0x604
                  |L1.1376|
                          DCD      ||.conststring||+0x658
                  |L1.1380|
                          DCD      ||.conststring||+0x6c4
                  |L1.1384|
                          DCD      ||.conststring||+0x744
                  |L1.1388|
                          DCD      ||.conststring||+0x7b8
                  |L1.1392|
                          DCD      ||.conststring||+0x844
                  |L1.1396|
000574  f7fffffe          BL       _ZN5Blobs11setMaxBlobsEt ; Blobs::setMaxBlobs(unsigned short)
;;;259    	g_blobs->setMaxBlobsPerModel(maxBlobsPerModel);
000578  f8bd1028          LDRH     r1,[sp,#0x28]
00057c  68b0              LDR      r0,[r6,#8]  ; g_blobs
00057e  f7fffffe          BL       _ZN5Blobs19setMaxBlobsPerModelEt ; Blobs::setMaxBlobsPerModel(unsigned short)
;;;260    	g_blobs->setMinArea(minArea);
000582  9907              LDR      r1,[sp,#0x1c]
000584  68b0              LDR      r0,[r6,#8]  ; g_blobs
000586  f7fffffe          BL       _ZN5Blobs10setMinAreaEj ; Blobs::setMinArea(unsigned)
;;;261    	g_blobs->setMaxMergeDist(mergeDist);
00058a  f8bd1020          LDRH     r1,[sp,#0x20]
00058e  68b0              LDR      r0,[r6,#8]  ; g_blobs
000590  f7fffffe          BL       _ZN5Blobs15setMaxMergeDistEt ; Blobs::setMaxMergeDist(unsigned short)
;;;262    	g_blobs->setColorCodeMode((ColorCodeMode)ccMode);
000594  f89d1034          LDRB     r1,[sp,#0x34]
000598  68b0              LDR      r0,[r6,#8]  ; g_blobs
00059a  f7fffffe          BL       _ZN5Blobs16setColorCodeModeE13ColorCodeMode ; Blobs::setColorCodeMode(ColorCodeMode)
;;;263    	g_blobs->m_clut.setMinBrightness(miny);
00059e  ed9d0a05          VLDR     s0,[sp,#0x14]
0005a2  68b0              LDR      r0,[r6,#8]  ; g_blobs
0005a4  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
;;;264    	g_blobs->m_clut.setGrowDist(growDist);
0005a8  9906              LDR      r1,[sp,#0x18]
0005aa  68b0              LDR      r0,[r6,#8]  ; g_blobs
0005ac  f7fffffe          BL       _ZN8ColorLUT11setGrowDistEj ; ColorLUT::setGrowDist(unsigned)
;;;265    	led_setMaxCurrent(g_ledBrightness);
0005b0  8870              LDRH     r0,[r6,#2]  ; g_ledBrightness
0005b2  9038              STR      r0,[sp,#0xe0]
0005b4  a838              ADD      r0,sp,#0xe0
0005b6  f7fffffe          BL       _Z17led_setMaxCurrentRKj ; led_setMaxCurrent(const unsigned&)
;;;266    	g_blobs->setBlobFiltering(filtering);
0005ba  f89d1030          LDRB     r1,[sp,#0x30]
0005be  68b0              LDR      r0,[r6,#8]  ; g_blobs
0005c0  f7fffffe          BL       _ZN5Blobs16setBlobFilteringEh ; Blobs::setBlobFiltering(unsigned char)
;;;267    	g_blobs->setMaxBlobVelocity(maxVel);
0005c4  f8bd1024          LDRH     r1,[sp,#0x24]
0005c8  68b0              LDR      r0,[r6,#8]  ; g_blobs
0005ca  f7fffffe          BL       _ZN5Blobs18setMaxBlobVelocityEt ; Blobs::setMaxBlobVelocity(unsigned short)
;;;268    	
;;;269    	cc_loadLut();
0005ce  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
;;;270    }
0005d2  b03b              ADD      sp,sp,#0xec
0005d4  ecbd8b02          VPOP     {d8}
                  |L1.1496|
0005d8  e8bd8ff0          POP      {r4-r11,pc}
;;;271    
                          ENDP

                  _Z7cc_initP5Chirp PROC ; cc_init(Chirp*)
;;;272    int cc_init(Chirp *chirp)
0005dc  b570              PUSH     {r4-r6,lr}
;;;273    {
0005de  4605              MOV      r5,r0
;;;274    	g_qqueue = new Qqueue;
0005e0  2004              MOVS     r0,#4
0005e2  f7fffffe          BL       _Znwj ; operator new(unsigned)
0005e6  b108              CBZ      r0,|L1.1516|
0005e8  f7fffffe          BL       _ZN6QqueueC1Ev ; Qqueue::Qqueue()
                  |L1.1516|
0005ec  4cfe              LDR      r4,|L1.2536|
0005ee  6060              STR      r0,[r4,#4]  ; g_qqueue
;;;275    	g_blobs = new Blobs(g_qqueue, LUT_MEMORY);
0005f0  f44f702d          MOV      r0,#0x2b4
0005f4  f7fffffe          BL       _Znwj ; operator new(unsigned)
0005f8  b118              CBZ      r0,|L1.1538|
0005fa  4afc              LDR      r2,|L1.2540|
0005fc  6861              LDR      r1,[r4,#4]  ; g_qqueue
0005fe  f7fffffe          BL       _ZN5BlobsC1EP6QqueuePh ; Blobs::Blobs(Qqueue*, unsigned char*)
                  |L1.1538|
000602  60a0              STR      r0,[r4,#8]  ; g_blobs
;;;276    
;;;277    	chirp->registerModule(g_module);	
000604  49fa              LDR      r1,|L1.2544|
000606  4628              MOV      r0,r5
000608  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;278    
;;;279    	cc_loadParams(); // setup default vals and load parameters
00060c  f7fffffe          BL       _Z13cc_loadParamsv ; cc_loadParams()
;;;280    
;;;281    	return 0;
000610  2000              MOVS     r0,#0
;;;282    }
000612  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP

                  _Z7cc_openv PROC ; cc_open()
;;;284    int cc_open()
000614  b510              PUSH     {r4,lr}
;;;285    {
;;;286    	g_qqueue->reset();
000616  48f4              LDR      r0,|L1.2536|
000618  6840              LDR      r0,[r0,#4]  ; g_qqueue
00061a  f7fffffe          BL       _ZN6Qqueue5resetEv ; Qqueue::reset()
;;;287    	return 0;
00061e  2000              MOVS     r0,#0
;;;288    }
000620  bd10              POP      {r4,pc}
;;;289    
                          ENDP

                  _Z8cc_closev PROC ; cc_close()
;;;290    int cc_close()
000622  b510              PUSH     {r4,lr}
;;;291    {
;;;292    	g_blobs->reset();
000624  48f0              LDR      r0,|L1.2536|
000626  6880              LDR      r0,[r0,#8]  ; g_blobs
000628  f7fffffe          BL       _ZN5Blobs5resetEv ; Blobs::reset()
;;;293    	return 0;
00062c  2000              MOVS     r0,#0
;;;294    }
00062e  bd10              POP      {r4,pc}
;;;295    
                          ENDP

                  _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_P5Chirp PROC ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
;;;296    // this routine assumes it can grab valid pixels in video memory described by the box
;;;297    int32_t cc_setSigRegion(const uint32_t &type, const uint8_t &signum, const uint16_t &xoffset, const uint16_t &yoffset, const uint16_t &width, const uint16_t &height, Chirp *chirp)
000630  b5f0              PUSH     {r4-r7,lr}
;;;298    {
000632  b095              SUB      sp,sp,#0x54
000634  4606              MOV      r6,r0
000636  e9ddc41a          LDRD     r12,r4,[sp,#0x68]
00063a  9f1c              LDR      r7,[sp,#0x70]
00063c  460d              MOV      r5,r1
;;;299    	char id[32];
;;;300    	ColorSignature *sig;
;;;301    	RectA region(xoffset, yoffset, width, height);
00063e  8810              LDRH     r0,[r2,#0]
000640  8819              LDRH     r1,[r3,#0]
000642  f8bc2000          LDRH     r2,[r12,#0]
000646  8823              LDRH     r3,[r4,#0]
000648  f8ad002c          STRH     r0,[sp,#0x2c]
00064c  f8ad102e          STRH     r1,[sp,#0x2e]
000650  f8ad2030          STRH     r2,[sp,#0x30]
000654  f8ad3032          STRH     r3,[sp,#0x32]
;;;302    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000658  782b              LDRB     r3,[r5,#0]
00065a  1e58              SUBS     r0,r3,#1
00065c  2807              CMP      r0,#7
00065e  d303              BCC      |L1.1640|
;;;303    		return -1;
000660  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1636|
;;;304    
;;;305    	if (g_rawFrame.m_pixels==NULL)
;;;306    	{
;;;307    		cprintf(0, "No raw frame in memory!\n");
;;;308    		return -2;
;;;309    	}
;;;310    
;;;311    	// create lut
;;;312    	g_blobs->m_clut.generateSignature(g_rawFrame, region, signum);
;;;313    	sig = g_blobs->m_clut.getSignature(signum);
;;;314    	sig->m_type = type;
;;;315    
;;;316    	// find average RGB value
;;;317    	IterPixel ip(g_rawFrame, region);
;;;318    	sig->m_rgb = ip.averageRgb();
;;;319    
;;;320    	// save to flash
;;;321    	sprintf(id, "signature%d", signum);
;;;322    	prm_set(id, INTS8(sizeof(ColorSignature), sig), END);
;;;323    	cc_loadLut();
;;;324    
;;;325    	cprintf(0, "Signature set!\n");
;;;326    
;;;327        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;328    	return 0;
;;;329    }
000664  b015              ADD      sp,sp,#0x54
000666  bdf0              POP      {r4-r7,pc}
                  |L1.1640|
000668  48e2              LDR      r0,|L1.2548|
00066a  6800              LDR      r0,[r0,#0]            ;305  ; g_rawFrame
00066c  b380              CBZ      r0,|L1.1744|
00066e  4cde              LDR      r4,|L1.2536|
000670  aa0b              ADD      r2,sp,#0x2c           ;312
000672  49e0              LDR      r1,|L1.2548|
000674  68a0              LDR      r0,[r4,#8]            ;312  ; g_blobs
000676  f7fffffe          BL       _ZN8ColorLUT17generateSignatureERK6Frame8RK5RectAh ; ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
00067a  7829              LDRB     r1,[r5,#0]            ;313
00067c  68a0              LDR      r0,[r4,#8]            ;313  ; g_blobs
00067e  f7fffffe          BL       _ZN8ColorLUT12getSignatureEh ; ColorLUT::getSignature(unsigned char)
000682  4604              MOV      r4,r0                 ;313
000684  6830              LDR      r0,[r6,#0]            ;314
000686  61e0              STR      r0,[r4,#0x1c]         ;314
000688  aa0b              ADD      r2,sp,#0x2c           ;317
00068a  49da              LDR      r1,|L1.2548|
00068c  a802              ADD      r0,sp,#8              ;317
00068e  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
000692  2100              MOVS     r1,#0                 ;318
000694  a802              ADD      r0,sp,#8              ;318
000696  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
00069a  61a0              STR      r0,[r4,#0x18]         ;318
00069c  782a              LDRB     r2,[r5,#0]            ;321
00069e  f2af219c          ADR      r1,|L1.1028|
0006a2  a80d              ADD      r0,sp,#0x34           ;321
0006a4  f7fffffe          BL       __2sprintf
0006a8  2000              MOVS     r0,#0                 ;322
0006aa  9000              STR      r0,[sp,#0]            ;322
0006ac  4623              MOV      r3,r4                 ;322
0006ae  2220              MOVS     r2,#0x20              ;322
0006b0  2181              MOVS     r1,#0x81              ;322
0006b2  a80d              ADD      r0,sp,#0x34           ;322
0006b4  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0006b8  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0006bc  a1ce              ADR      r1,|L1.2552|
0006be  2000              MOVS     r0,#0                 ;325
0006c0  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0006c4  2101              MOVS     r1,#1                 ;327
0006c6  4638              MOV      r0,r7                 ;327
0006c8  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0006cc  2000              MOVS     r0,#0                 ;328
0006ce  e7c9              B        |L1.1636|
                  |L1.1744|
0006d0  e7ff              B        |L1.1746|
                  |L1.1746|
0006d2  a1cd              ADR      r1,|L1.2568|
0006d4  2000              MOVS     r0,#0                 ;307
0006d6  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0006da  f06f0001          MVN      r0,#1                 ;308
0006de  e7c1              B        |L1.1636|
;;;330    
                          ENDP

                  _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph PROC ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
;;;533    
;;;534    void cc_sendPoints(Points &points, uint16_t width, uint16_t height, Chirp *chirp, uint8_t renderFlags)
0006e0  e92d4fff          PUSH     {r0-r11,lr}
;;;535    {
0006e4  b08f              SUB      sp,sp,#0x3c
0006e6  4605              MOV      r5,r0
0006e8  4698              MOV      r8,r3
;;;536    	uint32_t len;
;;;537    	uint8_t *mem = (uint8_t *)SRAM1_LOC;
0006ea  4fce              LDR      r7,|L1.2596|
;;;538    
;;;539    	if (chirp==NULL)
0006ec  f1b80f00          CMP      r8,#0
0006f0  d049              BEQ      |L1.1926|
;;;540    		return;
;;;541    
;;;542    	len = Chirp::serialize(chirp, mem, SRAM1_SIZE,  HTYPE(0), HINT8(0), UINT16(0), UINT16(0), UINT16(0), UINT16(0), UINTS16_NO_COPY(0), END);
0006f2  2000              MOVS     r0,#0
0006f4  f04f09b2          MOV      r9,#0xb2
0006f8  2402              MOVS     r4,#2
0006fa  e9cd090a          STRD     r0,r9,[sp,#0x28]
0006fe  900d              STR      r0,[sp,#0x34]
000700  e9cd0408          STRD     r0,r4,[sp,#0x20]
000704  900c              STR      r0,[sp,#0x30]
000706  e9cd0406          STRD     r0,r4,[sp,#0x18]
00070a  e9cd0404          STRD     r0,r4,[sp,#0x10]
00070e  f04f0a41          MOV      r10,#0x41
000712  e9cd0402          STRD     r0,r4,[sp,#8]
000716  e9cd0a00          STRD     r0,r10,[sp,#0]
00071a  f44f3b90          MOV      r11,#0x12000
00071e  2364              MOVS     r3,#0x64
000720  465a              MOV      r2,r11
000722  4639              MOV      r1,r7
000724  4640              MOV      r0,r8
000726  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
00072a  4606              MOV      r6,r0
00072c  6828              LDR      r0,[r5,#0]
;;;543    
;;;544    	// copy into video memory because we don't have enough memory in the chirp buffer
;;;545    	memcpy(mem+len, points.data(), points.size()*sizeof(Point16));
00072e  0082              LSLS     r2,r0,#2
000730  68a9              LDR      r1,[r5,#8]
000732  19b8              ADDS     r0,r7,r6
000734  f7fffffe          BL       __aeabi_memcpy
000738  6828              LDR      r0,[r5,#0]
;;;546    	Chirp::serialize(chirp, mem, SRAM1_SIZE, HTYPE(FOURCC('B','L','T','1')), HINT8(renderFlags), UINT16(CAM_RES2_WIDTH), UINT16(CAM_RES2_HEIGHT), UINT16(width), UINT16(height), UINTS16_NO_COPY(points.size()*sizeof(Point16)/sizeof(uint16_t))); 
00073a  9911              LDR      r1,[sp,#0x44]
00073c  e9cd190a          STRD     r1,r9,[sp,#0x28]
000740  0080              LSLS     r0,r0,#2
000742  0840              LSRS     r0,r0,#1
000744  900c              STR      r0,[sp,#0x30]
000746  9409              STR      r4,[sp,#0x24]
000748  21d0              MOVS     r1,#0xd0
00074a  9810              LDR      r0,[sp,#0x40]
00074c  e9cd4105          STRD     r4,r1,[sp,#0x14]
000750  e9cd4007          STRD     r4,r0,[sp,#0x1c]
000754  981c              LDR      r0,[sp,#0x70]
000756  f44f719e          MOV      r1,#0x13c
00075a  e9cda001          STRD     r10,r0,[sp,#4]
00075e  e9cd4103          STRD     r4,r1,[sp,#0xc]
000762  48b1              LDR      r0,|L1.2600|
000764  9000              STR      r0,[sp,#0]
000766  2364              MOVS     r3,#0x64
000768  465a              MOV      r2,r11
00076a  4639              MOV      r1,r7
00076c  4640              MOV      r0,r8
00076e  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
000772  6828              LDR      r0,[r5,#0]
;;;547    	chirp->useBuffer((uint8_t *)mem, len+points.size()*sizeof(Point16));
000774  b013              ADD      sp,sp,#0x4c
000776  eb060280          ADD      r2,r6,r0,LSL #2
00077a  4639              MOV      r1,r7
00077c  4640              MOV      r0,r8
00077e  e8bd4ff0          POP      {r4-r11,lr}
000782  f7ffbffe          B.W      _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
                  |L1.1926|
;;;548    }
000786  b013              ADD      sp,sp,#0x4c
000788  e726              B        |L1.1496|
;;;549    
                          ENDP

                  _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp PROC ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
;;;330    
;;;331    int32_t cc_setSigPoint(const uint32_t &type, const uint8_t &signum, const uint16_t &x, const uint16_t &y, Chirp *chirp)
00078a  e92d43f0          PUSH     {r4-r9,lr}
;;;332    {
00078e  b097              SUB      sp,sp,#0x5c
000790  4607              MOV      r7,r0
000792  f8dd8078          LDR      r8,[sp,#0x78]
000796  460c              MOV      r4,r1
000798  4691              MOV      r9,r2
00079a  461d              MOV      r5,r3
00079c  2600              MOVS     r6,#0
00079e  960b              STR      r6,[sp,#0x2c]
0007a0  2110              MOVS     r1,#0x10
0007a2  910c              STR      r1,[sp,#0x30]
0007a4  4aa1              LDR      r2,|L1.2604|
0007a6  2004              MOVS     r0,#4
0007a8  f7fffffe          BL       __aeabi_vec_new_nocookie
0007ac  900d              STR      r0,[sp,#0x34]
;;;333    	char id[32];
;;;334    	ColorSignature *sig;
;;;335    	Points points;
;;;336    
;;;337    	if (signum<1 || signum>CL_NUM_SIGNATURES)
0007ae  7820              LDRB     r0,[r4,#0]
0007b0  1e40              SUBS     r0,r0,#1
0007b2  2807              CMP      r0,#7
0007b4  d306              BCC      |L1.1988|
0007b6  980d              LDR      r0,[sp,#0x34]
0007b8  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
;;;338    		return -1;
0007bc  1e70              SUBS     r0,r6,#1
                  |L1.1982|
;;;339    
;;;340    	if (g_rawFrame.m_pixels==NULL)
;;;341    	{
;;;342    		cprintf(0, "No raw frame in memory!\n");
;;;343    		return -2;
;;;344    	}
;;;345    
;;;346    	// create lut
;;;347    	g_blobs->m_clut.generateSignature(g_rawFrame, Point16(x, y), &points, signum);
;;;348    	sig = g_blobs->m_clut.getSignature(signum);
;;;349    	sig->m_type = type;
;;;350    
;;;351    	// find average RGB value
;;;352    	IterPixel ip(g_rawFrame, &points);
;;;353    	sig->m_rgb = ip.averageRgb();
;;;354    
;;;355    	cc_sendPoints(points, CL_GROW_INC, CL_GROW_INC, chirp);
;;;356    
;;;357    	// save to flash
;;;358    	sprintf(id, "signature%d", signum);
;;;359    	prm_set(id, INTS8(sizeof(ColorSignature), sig), END);
;;;360    	cc_loadLut();
;;;361    
;;;362    	cprintf(0, "Signature set!\n");
;;;363    
;;;364        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;365    	return 0;
;;;366    }
0007be  b017              ADD      sp,sp,#0x5c
                  |L1.1984|
0007c0  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1988|
0007c4  488b              LDR      r0,|L1.2548|
0007c6  6800              LDR      r0,[r0,#0]            ;340  ; g_rawFrame
0007c8  2800              CMP      r0,#0                 ;340
0007ca  d045              BEQ      |L1.2136|
0007cc  f8b91000          LDRH     r1,[r9,#0]            ;347
0007d0  882a              LDRH     r2,[r5,#0]            ;347
0007d2  a816              ADD      r0,sp,#0x58           ;347
0007d4  f8ad1058          STRH     r1,[sp,#0x58]         ;347
0007d8  f8ad205a          STRH     r2,[sp,#0x5a]         ;347
0007dc  4602              MOV      r2,r0                 ;347
0007de  4d82              LDR      r5,|L1.2536|
0007e0  7820              LDRB     r0,[r4,#0]            ;347
0007e2  9000              STR      r0,[sp,#0]            ;347
0007e4  ab0b              ADD      r3,sp,#0x2c           ;347
0007e6  4983              LDR      r1,|L1.2548|
0007e8  68a8              LDR      r0,[r5,#8]            ;347  ; g_blobs
0007ea  f7fffffe          BL       _ZN8ColorLUT17generateSignatureERK6Frame8RK7Point16P12SimpleVectorIS3_Eh ; ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector<Point16>*, unsigned char)
0007ee  7821              LDRB     r1,[r4,#0]            ;348
0007f0  68a8              LDR      r0,[r5,#8]            ;348  ; g_blobs
0007f2  f7fffffe          BL       _ZN8ColorLUT12getSignatureEh ; ColorLUT::getSignature(unsigned char)
0007f6  4605              MOV      r5,r0                 ;348
0007f8  6838              LDR      r0,[r7,#0]            ;349
0007fa  61e8              STR      r0,[r5,#0x1c]         ;349
0007fc  aa0b              ADD      r2,sp,#0x2c           ;352
0007fe  497d              LDR      r1,|L1.2548|
000800  a802              ADD      r0,sp,#8              ;352
000802  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
000806  2100              MOVS     r1,#0                 ;353
000808  a802              ADD      r0,sp,#8              ;353
00080a  f7fffffe          BL       _ZN9IterPixel10averageRgbEPj ; IterPixel::averageRgb(unsigned*)
00080e  61a8              STR      r0,[r5,#0x18]         ;353
000810  2003              MOVS     r0,#3                 ;355
000812  2204              MOVS     r2,#4                 ;355
000814  9000              STR      r0,[sp,#0]            ;355
000816  4643              MOV      r3,r8                 ;355
000818  4611              MOV      r1,r2                 ;355
00081a  a80b              ADD      r0,sp,#0x2c           ;355
00081c  f7fffffe          BL       _Z13cc_sendPointsR12SimpleVectorI7Point16EttP5Chirph ; cc_sendPoints(SimpleVector<Point16>&, unsigned short, unsigned short, Chirp*, unsigned char)
000820  7822              LDRB     r2,[r4,#0]            ;358
000822  f2af4120          ADR      r1,|L1.1028|
000826  a80e              ADD      r0,sp,#0x38           ;358
000828  f7fffffe          BL       __2sprintf
00082c  462b              MOV      r3,r5                 ;359
00082e  2220              MOVS     r2,#0x20              ;359
000830  2181              MOVS     r1,#0x81              ;359
000832  a80e              ADD      r0,sp,#0x38           ;359
000834  9600              STR      r6,[sp,#0]            ;359
000836  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
00083a  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
00083e  a16e              ADR      r1,|L1.2552|
000840  2000              MOVS     r0,#0                 ;362
000842  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
000846  2101              MOVS     r1,#1                 ;364
000848  4640              MOV      r0,r8                 ;364
00084a  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
00084e  980d              LDR      r0,[sp,#0x34]         ;364
000850  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000854  2000              MOVS     r0,#0                 ;365
000856  e7b2              B        |L1.1982|
                  |L1.2136|
000858  a16b              ADR      r1,|L1.2568|
00085a  2000              MOVS     r0,#0                 ;342
00085c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
000860  980d              LDR      r0,[sp,#0x34]         ;342
000862  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
000866  f06f0001          MVN      r0,#1                 ;343
00086a  e7a8              B        |L1.1982|
;;;367    
                          ENDP

                  _Z11cc_clearSigRKhP5Chirp PROC ; cc_clearSig(const unsigned char&, Chirp*)
;;;368    int32_t cc_clearSig(const uint8_t &signum, Chirp *chirp)
00086c  b530              PUSH     {r4,r5,lr}
;;;369    {
00086e  b091              SUB      sp,sp,#0x44
000870  4604              MOV      r4,r0
000872  460d              MOV      r5,r1
;;;370    	char id[32];
;;;371    	ColorSignature sig;
000874  a801              ADD      r0,sp,#4
000876  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;372    	int res;
;;;373    
;;;374     	if (signum<1 || signum>CL_NUM_SIGNATURES)
00087a  7820              LDRB     r0,[r4,#0]
00087c  1e40              SUBS     r0,r0,#1
00087e  2807              CMP      r0,#7
000880  d303              BCC      |L1.2186|
;;;375    		return -1;
000882  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2182|
;;;376    
;;;377    	memset(&sig, 0, sizeof(ColorSignature));
;;;378    
;;;379    	sprintf(id, "signature%d", signum);
;;;380    	res = prm_set(id, INTS8(sizeof(ColorSignature), &sig), END);
;;;381    	cc_loadLut();
;;;382    
;;;383    	// update lut
;;;384     	cc_loadLut();
;;;385    
;;;386        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;387    
;;;388    	return res;
;;;389    }
000886  b011              ADD      sp,sp,#0x44
000888  bd30              POP      {r4,r5,pc}
                  |L1.2186|
00088a  2120              MOVS     r1,#0x20              ;377
00088c  a801              ADD      r0,sp,#4              ;377
00088e  f7fffffe          BL       __aeabi_memclr4
000892  7822              LDRB     r2,[r4,#0]            ;379
000894  f2af4194          ADR      r1,|L1.1028|
000898  a809              ADD      r0,sp,#0x24           ;379
00089a  f7fffffe          BL       __2sprintf
00089e  2000              MOVS     r0,#0                 ;380
0008a0  9000              STR      r0,[sp,#0]            ;380
0008a2  ab01              ADD      r3,sp,#4              ;380
0008a4  2220              MOVS     r2,#0x20              ;380
0008a6  2181              MOVS     r1,#0x81              ;380
0008a8  a809              ADD      r0,sp,#0x24           ;380
0008aa  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
0008ae  4604              MOV      r4,r0                 ;380
0008b0  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0008b4  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
0008b8  2101              MOVS     r1,#1                 ;386
0008ba  4628              MOV      r0,r5                 ;386
0008bc  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0008c0  4620              MOV      r0,r4                 ;388
0008c2  e7e0              B        |L1.2182|
;;;390    
                          ENDP

                  _Z14cc_clearAllSigP5Chirp PROC ; cc_clearAllSig(Chirp*)
;;;391    int32_t cc_clearAllSig(Chirp *chirp)
0008c4  b570              PUSH     {r4-r6,lr}
;;;392    {
0008c6  b092              SUB      sp,sp,#0x48
0008c8  4606              MOV      r6,r0
;;;393    	char id[32];
;;;394    	uint8_t signum;
;;;395    	ColorSignature sig;
0008ca  a802              ADD      r0,sp,#8
0008cc  f7fffffe          BL       _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
;;;396    	int res; 
;;;397    
;;;398    	memset(&sig, 0, sizeof(ColorSignature));
0008d0  2120              MOVS     r1,#0x20
0008d2  a802              ADD      r0,sp,#8
0008d4  f7fffffe          BL       __aeabi_memclr4
;;;399    
;;;400       	for (signum=1; signum<=CL_NUM_SIGNATURES; signum++)
0008d8  2401              MOVS     r4,#1
0008da  2500              MOVS     r5,#0
                  |L1.2268|
;;;401    	{
;;;402    		sprintf(id, "signature%d", signum);
0008dc  4622              MOV      r2,r4
0008de  f2af41dc          ADR      r1,|L1.1028|
0008e2  a80a              ADD      r0,sp,#0x28
0008e4  f7fffffe          BL       __2sprintf
;;;403    		res = prm_set(id, INTS8(sizeof(ColorSignature), &sig), END);
0008e8  ab02              ADD      r3,sp,#8
0008ea  2220              MOVS     r2,#0x20
0008ec  2181              MOVS     r1,#0x81
0008ee  a80a              ADD      r0,sp,#0x28
0008f0  9500              STR      r5,[sp,#0]
0008f2  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
;;;404    		if (res<0)
0008f6  2800              CMP      r0,#0
0008f8  db0a              BLT      |L1.2320|
0008fa  1c64              ADDS     r4,r4,#1              ;400
0008fc  b2e4              UXTB     r4,r4                 ;400
0008fe  2c07              CMP      r4,#7                 ;400
000900  d9ec              BLS      |L1.2268|
;;;405    			return res;			
;;;406    	}
;;;407    
;;;408    	// reload lut
;;;409    	cc_loadLut();
000902  f7fffffe          BL       _Z10cc_loadLutv ; cc_loadLut()
;;;410    
;;;411        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
000906  2101              MOVS     r1,#1
000908  4630              MOV      r0,r6
00090a  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
;;;412    
;;;413    	return 0;
00090e  2000              MOVS     r0,#0
                  |L1.2320|
;;;414    }
000910  b012              ADD      sp,sp,#0x48
000912  bd70              POP      {r4-r6,pc}
;;;415    
                          ENDP

                  _Z11cc_setLabelRKjPKcP5Chirp PROC ; cc_setLabel(const unsigned&, const char*, Chirp*)
;;;416    
;;;417    int32_t cc_setLabel(const uint32_t &signum, const char *label, Chirp *chirp)
000914  b5f0              PUSH     {r4-r7,lr}
;;;418    {
000916  b0ad              SUB      sp,sp,#0xb4
000918  4605              MOV      r5,r0
00091a  460f              MOV      r7,r1
00091c  4616              MOV      r6,r2
;;;419    	uint8_t progBlobs = exec_getProgIndex(PROG_NAME_BLOBS);
00091e  2100              MOVS     r1,#0
000920  f2af4078          ADR      r0,|L1.1196|
000924  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
000928  4604              MOV      r4,r0
;;;420    	uint8_t progPt = exec_getProgIndex(PROG_NAME_PANTILT);
00092a  2100              MOVS     r1,#0
00092c  f2af4068          ADR      r0,|L1.1224|
000930  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
;;;421    	uint32_t progFlags = PROG_FLAGS(progBlobs) & PROG_FLAGS(progPt);
000934  3419              ADDS     r4,r4,#0x19
000936  2101              MOVS     r1,#1
000938  fa01f204          LSL      r2,r1,r4
00093c  3019              ADDS     r0,r0,#0x19
00093e  4081              LSLS     r1,r1,r0
000940  430a              ORRS     r2,r2,r1
000942  f04f447e          MOV      r4,#0xfe000000
000946  4394              BICS     r4,r4,r2
;;;422    	char id[32], desc[100], label2[32];
;;;423    
;;;424    	if (signum<1 || signum>76767) // can't get any greater than 76767
000948  682a              LDR      r2,[r5,#0]
00094a  4939              LDR      r1,|L1.2608|
00094c  1e50              SUBS     r0,r2,#1
00094e  4288              CMP      r0,r1
000950  d303              BCC      |L1.2394|
;;;425    		return -1;
000952  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2390|
;;;426    
;;;427    	sprintf(id, "Signature label %d", signum);
;;;428    	sprintf(desc, "@c Signature_Labels Sets the label for objects that match signature %d.", signum);
;;;429    	strcpy(label2, label); // copy into new memory since chirp uses same memory for receiving and sending messages
;;;430    	if (prm_add(id, progFlags, PRM_PRIORITY_3, desc, STRING(label2), END)<0) // create if it doesn't exist
;;;431    		prm_set(id, STRING(label2), END); // if it's already there, set it...
;;;432    
;;;433        exec_sendEvent(chirp, EVT_PARAM_CHANGE);
;;;434    
;;;435    	
;;;436    	return 0;
;;;437    }
000956  b02d              ADD      sp,sp,#0xb4
000958  bdf0              POP      {r4-r7,pc}
                  |L1.2394|
00095a  f2af4150          ADR      r1,|L1.1292|
00095e  a825              ADD      r0,sp,#0x94           ;427
000960  f7fffffe          BL       __2sprintf
000964  4933              LDR      r1,|L1.2612|
000966  a80c              ADD      r0,sp,#0x30           ;428
000968  682a              LDR      r2,[r5,#0]            ;428
00096a  f7fffffe          BL       __2sprintf
00096e  4639              MOV      r1,r7                 ;429
000970  a804              ADD      r0,sp,#0x10           ;429
000972  f7fffffe          BL       strcpy
000976  a904              ADD      r1,sp,#0x10           ;430
000978  22a1              MOVS     r2,#0xa1              ;430
00097a  e9cd2100          STRD     r2,r1,[sp,#0]         ;430
00097e  2000              MOVS     r0,#0                 ;430
000980  9002              STR      r0,[sp,#8]            ;430
000982  ab0c              ADD      r3,sp,#0x30           ;430
000984  f64032b8          MOV      r2,#0xbb8             ;430
000988  4621              MOV      r1,r4                 ;430
00098a  a825              ADD      r0,sp,#0x94           ;430
00098c  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
000990  2800              CMP      r0,#0                 ;430
000992  da05              BGE      |L1.2464|
000994  2300              MOVS     r3,#0                 ;431
000996  aa04              ADD      r2,sp,#0x10           ;431
000998  21a1              MOVS     r1,#0xa1              ;431
00099a  a825              ADD      r0,sp,#0x94           ;431
00099c  f7fffffe          BL       _Z7prm_setPKcz ; prm_set(const char*, ...)
                  |L1.2464|
0009a0  2101              MOVS     r1,#1                 ;433
0009a2  4630              MOV      r0,r6                 ;433
0009a4  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0009a8  2000              MOVS     r0,#0                 ;436
0009aa  e7d4              B        |L1.2390|
;;;438    
                          ENDP

                  _Z12cc_setMemoryRKjS0_PKh PROC ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
;;;439    
;;;440    int32_t cc_setMemory(const uint32_t &location, const uint32_t &len, const uint8_t *data)
0009ac  b510              PUSH     {r4,lr}
;;;441    {
;;;442    	uint32_t i;
;;;443    	uint8_t *dest = (uint8_t *)location;
0009ae  6803              LDR      r3,[r0,#0]
;;;444    	for (i=0; i<len; i++)
0009b0  2000              MOVS     r0,#0
0009b2  e002              B        |L1.2490|
                  |L1.2484|
;;;445    		dest[i] = data[i];
0009b4  5c14              LDRB     r4,[r2,r0]
0009b6  541c              STRB     r4,[r3,r0]
0009b8  1c40              ADDS     r0,r0,#1              ;444
                  |L1.2490|
0009ba  680c              LDR      r4,[r1,#0]            ;444
0009bc  4284              CMP      r4,r0                 ;444
0009be  d8f9              BHI      |L1.2484|
;;;446    
;;;447    	return len;
0009c0  6808              LDR      r0,[r1,#0]
;;;448    }
0009c2  bd10              POP      {r4,pc}
;;;449    
                          ENDP

                  _Z12cc_sendBlobsP5ChirpP10SimpleListI7TrackerI5BlobAEEh PROC ; cc_sendBlobs(Chirp*, SimpleList<Tracker<BlobA>>*, unsigned char)
;;;450    int cc_sendBlobs(Chirp *chirp, SimpleList<Tracker<BlobA> > *blobs, uint8_t renderFlags)
0009c4  e92d43f0          PUSH     {r4-r9,lr}
;;;451    {
0009c8  b08b              SUB      sp,sp,#0x2c
0009ca  4681              MOV      r9,r0
0009cc  460c              MOV      r4,r1
0009ce  4690              MOV      r8,r2
;;;452    	SimpleListNode<Tracker<BlobA> > *i;
;;;453    	uint16_t j;
;;;454    	BlobA *blob;
;;;455    	
;;;456    	if (!chirp->connected())
0009d0  4648              MOV      r0,r9
0009d2  f7fffffe          BL       _ZN5Chirp9connectedEv ; Chirp::connected()
;;;457    		return -1;
0009d6  f04f35ff          MOV      r5,#0xffffffff
0009da  b120              CBZ      r0,|L1.2534|
;;;458    	
;;;459    	BlobC *a = (BlobC *)malloc(blobs->m_size*sizeof(BlobC));
0009dc  8920              LDRH     r0,[r4,#8]
0009de  ebc000c0          RSB      r0,r0,r0,LSL #3
0009e2  0040              LSLS     r0,r0,#1
0009e4  e028              B        |L1.2616|
                  |L1.2534|
0009e6  e02f              B        |L1.2632|
                  |L1.2536|
                          DCD      ||.data||
                  |L1.2540|
                          DCD      0x10091000
                  |L1.2544|
                          DCD      ||.constdata||
                  |L1.2548|
                          DCD      g_rawFrame
                  |L1.2552|
0009f8  5369676e          DCB      "Signature set!\n",0
0009fc  61747572
000a00  65207365
000a04  74210a00
                  |L1.2568|
000a08  4e6f2072          DCB      "No raw frame in memory!\n",0
000a0c  61772066
000a10  72616d65
000a14  20696e20
000a18  6d656d6f
000a1c  7279210a
000a20  00      
000a21  00                DCB      0
000a22  00                DCB      0
000a23  00                DCB      0
                  |L1.2596|
                          DCD      0x10080000
                  |L1.2600|
                          DCD      0x31544c42
                  |L1.2604|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()
                  |L1.2608|
                          DCD      0x00012bdf
                  |L1.2612|
                          DCD      ||.conststring||+0x3c0
                  |L1.2616|
000a38  f7fffffe          BL       malloc
000a3c  4607              MOV      r7,r0
;;;460    	if (a==NULL)
000a3e  0038              MOVS     r0,r7
000a40  d005              BEQ      |L1.2638|
;;;461    		return -1;
;;;462    	
;;;463    	// go through list, find best candidates
;;;464    	for (i=blobs->m_first, j=0; i!=NULL; i=i->m_next)
000a42  6824              LDR      r4,[r4,#0]
000a44  2500              MOVS     r5,#0
000a46  e01a              B        |L1.2686|
                  |L1.2632|
000a48  4628              MOV      r0,r5                 ;457
                  |L1.2634|
;;;465    	{
;;;466    		blob = i->m_object.get();
;;;467    		if (blob)
;;;468    		{	
;;;469    			Blobs::convertBlob(&a[j], *blob);
;;;470    			a[j].m_index = i->m_object.m_index;
;;;471    			a[j].m_age = i->m_object.m_age;		
;;;472    			j++;
;;;473    		}
;;;474    	}
;;;475    			
;;;476    	CRP_RETURN(chirp, HTYPE(FOURCC('C','C','B','1')), HINT8(renderFlags), HINT16(CAM_RES2_WIDTH), HINT16(CAM_RES2_HEIGHT), UINTS8(j*sizeof(BlobC), a), END);
;;;477    	
;;;478    	free(a);
;;;479    	return 0;
;;;480    }
000a4a  b00b              ADD      sp,sp,#0x2c
000a4c  e6b8              B        |L1.1984|
                  |L1.2638|
000a4e  4628              MOV      r0,r5                 ;461
000a50  e7fb              B        |L1.2634|
                  |L1.2642|
000a52  4621              MOV      r1,r4                 ;466
000a54  7808              LDRB     r0,[r1,#0]            ;466
000a56  2803              CMP      r0,#3                 ;466
000a58  d033              BEQ      |L1.2754|
000a5a  2802              CMP      r0,#2                 ;466
000a5c  d031              BEQ      |L1.2754|
000a5e  3114              ADDS     r1,r1,#0x14           ;466
                  |L1.2656|
000a60  b161              CBZ      r1,|L1.2684|
000a62  ebc500c5          RSB      r0,r5,r5,LSL #3       ;469
000a66  eb070640          ADD      r6,r7,r0,LSL #1       ;469
000a6a  4630              MOV      r0,r6                 ;469
000a6c  f7fffffe          BL       _ZN5Blobs11convertBlobEP5BlobCRK5BlobA ; Blobs::convertBlob(BlobC*, const BlobA&)
000a70  7860              LDRB     r0,[r4,#1]            ;470
000a72  7330              STRB     r0,[r6,#0xc]          ;470
000a74  7aa0              LDRB     r0,[r4,#0xa]          ;471
000a76  7370              STRB     r0,[r6,#0xd]          ;471
000a78  1c6d              ADDS     r5,r5,#1              ;472
000a7a  b2ad              UXTH     r5,r5                 ;472
                  |L1.2684|
000a7c  6a64              LDR      r4,[r4,#0x24]         ;464
                  |L1.2686|
000a7e  2c00              CMP      r4,#0                 ;464
000a80  d1e7              BNE      |L1.2642|
000a82  2000              MOVS     r0,#0                 ;476
000a84  ebc501c5          RSB      r1,r5,r5,LSL #3       ;476
000a88  e9cd7008          STRD     r7,r0,[sp,#0x20]      ;476
000a8c  0049              LSLS     r1,r1,#1              ;476
000a8e  9107              STR      r1,[sp,#0x1c]         ;476
000a90  900a              STR      r0,[sp,#0x28]         ;476
000a92  2042              MOVS     r0,#0x42              ;476
000a94  f44f739e          MOV      r3,#0x13c             ;476
000a98  e9cd3003          STRD     r3,r0,[sp,#0xc]       ;476
000a9c  2181              MOVS     r1,#0x81              ;476
000a9e  22d0              MOVS     r2,#0xd0              ;476
000aa0  e9cd2105          STRD     r2,r1,[sp,#0x14]      ;476
000aa4  2141              MOVS     r1,#0x41              ;476
000aa6  e9cd1800          STRD     r1,r8,[sp,#0]         ;476
000aaa  9002              STR      r0,[sp,#8]            ;476
000aac  4b42              LDR      r3,|L1.3000|
000aae  2264              MOVS     r2,#0x64              ;476
000ab0  2100              MOVS     r1,#0                 ;476
000ab2  4648              MOV      r0,r9                 ;476
000ab4  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
000ab8  4638              MOV      r0,r7                 ;478
000aba  f7fffffe          BL       free
000abe  2000              MOVS     r0,#0                 ;479
000ac0  e7c3              B        |L1.2634|
                  |L1.2754|
000ac2  2100              MOVS     r1,#0
000ac4  e7cc              B        |L1.2656|
;;;481    
                          ENDP

                  _Z13ledBrightnessj PROC ; ledBrightness(unsigned)
;;;482    uint8_t ledBrightness(uint32_t area)
000ac6  b510              PUSH     {r4,lr}
;;;483    {
;;;484    	uint32_t brightness;
;;;485    
;;;486    	brightness = 0x100*area/20000;
000ac8  0200              LSLS     r0,r0,#8
000aca  f6446120          MOV      r1,#0x4e20
000ace  fbb0f0f1          UDIV     r0,r0,r1
;;;487    	if (brightness==0) // can't take log of 0...
000ad2  2800              CMP      r0,#0
000ad4  d014              BEQ      |L1.2816|
;;;488    		return 1;
;;;489    	
;;;490    	// put on log curve
;;;491    	brightness = log((float)brightness)*80+10;
000ad6  ee000a10          VMOV     s0,r0
000ada  eeb80a40          VCVT.F32.U32 s0,s0
000ade  f7fffffe          BL       __hardfp_logf
000ae2  ed9f1a36          VLDR     s2,|L1.3004|
000ae6  eef20a04          VMOV.F32 s1,#10.00000000
000aea  ee400a01          VMLA.F32 s1,s0,s2
000aee  eebc0ae0          VCVT.U32.F32 s0,s1
000af2  ee100a10          VMOV     r0,s0
;;;492    	// saturate
;;;493    	if (brightness>0xff)
000af6  28ff              CMP      r0,#0xff
000af8  d900              BLS      |L1.2812|
;;;494    		brightness = 0xff;
000afa  20ff              MOVS     r0,#0xff
                  |L1.2812|
;;;495    
;;;496    	return brightness;
000afc  b2c0              UXTB     r0,r0
;;;497    }
000afe  bd10              POP      {r4,pc}
                  |L1.2816|
000b00  2001              MOVS     r0,#1                 ;488
000b02  bd10              POP      {r4,pc}
;;;498    
                          ENDP

                  _Z17cc_setLEDOverrideb PROC ; cc_setLEDOverride(bool)
;;;499    void cc_setLEDOverride(bool override)
000b04  492e              LDR      r1,|L1.3008|
;;;500    {
;;;501    	g_ledOverride = override;
000b06  7008              STRB     r0,[r1,#0]
;;;502    }
000b08  4770              BX       lr
;;;503    
                          ENDP

                  _Z9cc_setLEDv PROC ; cc_setLED()
;;;504    void cc_setLED()
000b0a  b530              PUSH     {r4,r5,lr}
;;;505    {
000b0c  b087              SUB      sp,sp,#0x1c
;;;506    	BlobA *blob;
;;;507    	uint32_t area, color, r, g, b;
;;;508    	uint8_t brightness;
;;;509    
;;;510    	// if we're being overridden, exit
;;;511    	if (g_ledOverride)
000b0e  4c2c              LDR      r4,|L1.3008|
000b10  7820              LDRB     r0,[r4,#0]  ; g_ledOverride
000b12  2800              CMP      r0,#0
000b14  d147              BNE      |L1.2982|
;;;512    		return;
;;;513    	
;;;514    	blob = (BlobA *)g_blobs->getMaxBlob();
000b16  2200              MOVS     r2,#0
000b18  4611              MOV      r1,r2
000b1a  68a0              LDR      r0,[r4,#8]  ; g_blobs
000b1c  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
;;;515    	if (blob)
000b20  b3a0              CBZ      r0,|L1.2956|
;;;516    	{
;;;517    		if (blob->m_model<=CL_NUM_SIGNATURES)
000b22  8801              LDRH     r1,[r0,#0]
000b24  2907              CMP      r1,#7
000b26  d808              BHI      |L1.2874|
;;;518    			color = g_blobs->m_clut.m_runtimeSigs[blob->m_model-1].m_rgbSat;
000b28  1e49              SUBS     r1,r1,#1
000b2a  68a2              LDR      r2,[r4,#8]  ; g_blobs
000b2c  eb010181          ADD      r1,r1,r1,LSL #2
000b30  eb020181          ADD      r1,r2,r1,LSL #2
000b34  f8d150f0          LDR      r5,[r1,#0xf0]
000b38  e001              B        |L1.2878|
                  |L1.2874|
;;;519    		else
;;;520    			color = g_colors[0];
000b3a  f06f457f          MVN      r5,#0xff000000
                  |L1.2878|
;;;521    
;;;522    		area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
000b3e  8881              LDRH     r1,[r0,#4]
000b40  8842              LDRH     r2,[r0,#2]
000b42  1a89              SUBS     r1,r1,r2
000b44  8902              LDRH     r2,[r0,#8]
000b46  88c0              LDRH     r0,[r0,#6]
000b48  1a10              SUBS     r0,r2,r0
000b4a  4341              MULS     r1,r0,r1
;;;523    		brightness = ledBrightness(area);
000b4c  4608              MOV      r0,r1
000b4e  f7fffffe          BL       _Z13ledBrightnessj ; ledBrightness(unsigned)
000b52  4604              MOV      r4,r0
;;;524    		rgbUnpack(color, &r, &g, &b);
000b54  ab04              ADD      r3,sp,#0x10
000b56  aa05              ADD      r2,sp,#0x14
000b58  a906              ADD      r1,sp,#0x18
000b5a  4628              MOV      r0,r5
000b5c  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
;;;525    		b = b ? (b*brightness>>8)+1 : 0;
000b60  9804              LDR      r0,[sp,#0x10]
000b62  b118              CBZ      r0,|L1.2924|
000b64  4360              MULS     r0,r4,r0
000b66  0a00              LSRS     r0,r0,#8
000b68  1c40              ADDS     r0,r0,#1
000b6a  e000              B        |L1.2926|
                  |L1.2924|
000b6c  2000              MOVS     r0,#0
                  |L1.2926|
000b6e  9004              STR      r0,[sp,#0x10]
;;;526    		g = g ? (g*brightness>>8)+1 : 0;
000b70  9805              LDR      r0,[sp,#0x14]
000b72  b118              CBZ      r0,|L1.2940|
000b74  4360              MULS     r0,r4,r0
000b76  0a00              LSRS     r0,r0,#8
000b78  1c40              ADDS     r0,r0,#1
000b7a  e000              B        |L1.2942|
                  |L1.2940|
000b7c  2000              MOVS     r0,#0
                  |L1.2942|
000b7e  9005              STR      r0,[sp,#0x14]
;;;527    		r = r ? (r*brightness>>8)+1 : 0;
000b80  9806              LDR      r0,[sp,#0x18]
000b82  b120              CBZ      r0,|L1.2958|
000b84  4360              MULS     r0,r4,r0
000b86  0a00              LSRS     r0,r0,#8
000b88  1c40              ADDS     r0,r0,#1
000b8a  e001              B        |L1.2960|
                  |L1.2956|
000b8c  e00d              B        |L1.2986|
                  |L1.2958|
000b8e  2000              MOVS     r0,#0
                  |L1.2960|
000b90  9006              STR      r0,[sp,#0x18]
;;;528    		led_setRGB(r, g, b);
000b92  9003              STR      r0,[sp,#0xc]
000b94  9805              LDR      r0,[sp,#0x14]
000b96  9002              STR      r0,[sp,#8]
000b98  9804              LDR      r0,[sp,#0x10]
000b9a  9001              STR      r0,[sp,#4]
000b9c  aa01              ADD      r2,sp,#4
000b9e  a902              ADD      r1,sp,#8
000ba0  a803              ADD      r0,sp,#0xc
000ba2  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
                  |L1.2982|
;;;529    	}
;;;530    	else
;;;531    		led_set(0);
;;;532    }
000ba6  b007              ADD      sp,sp,#0x1c
000ba8  bd30              POP      {r4,r5,pc}
                  |L1.2986|
000baa  2000              MOVS     r0,#0                 ;531
000bac  9003              STR      r0,[sp,#0xc]          ;531
000bae  a803              ADD      r0,sp,#0xc            ;531
000bb0  f7fffffe          BL       _Z7led_setRKj ; led_set(const unsigned&)
000bb4  e7f7              B        |L1.2982|
;;;533    
                          ENDP

000bb6  0000              DCW      0x0000
                  |L1.3000|
                          DCD      0x31424343
                  |L1.3004|
000bbc  42a00000          DCFS     0x42a00000 ; 80
                  |L1.3008|
                          DCD      ||.data||

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z15cc_setSigRegionRKjRKhRKtS4_S4_S4_P5Chirp ; cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
000008  04016452          DCB      0x04,0x01,0x64,0x52
00000c  45473100          DCB      0x45,0x47,0x31,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x100
                          DCD      _Z14cc_setSigPointRKjRKhRKtS4_P5Chirp ; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
000020  04016450          DCB      0x04,0x01,0x64,0x50
000024  4e543100          DCB      0x4e,0x54,0x31,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x110
                          DCD      ||.conststring||+0x200
                          DCD      _Z11cc_clearSigRKhP5Chirp ; cc_clearSig(const unsigned char&, Chirp*)
000038  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x20c
                          DCD      ||.conststring||+0x274
                          DCD      _Z14cc_clearAllSigP5Chirp ; cc_clearAllSig(Chirp*)
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x284
                          DCD      ||.conststring||+0x2b8
                          DCD      _Z11cc_setLabelRKjPKcP5Chirp ; cc_setLabel(const unsigned&, const char*, Chirp*)
000068  04a10000          DCB      0x04,0xa1,0x00,0x00
                          DCD      0x00000000
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x2c4
                          DCD      ||.conststring||+0x35c
                          DCD      _Z12cc_setMemoryRKjS0_PKh ; cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
000080  04810000          DCB      0x04,0x81,0x00,0x00
                          DCD      0x00000000
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0x36c
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  g_colors
                          DCD      0x00ffffff
                          DCD      0x00ff0000
                          DCD      0x00ffa000
                          DCD      0x00ffff00
                          DCD      0x0000ff00
                          DCD      0x0000ffff
                          DCD      0x000000ff
                          DCD      0x00ff00ff

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  63635f73          DCB      "cc_setSigRegion",0
000004  65745369
000008  67526567
00000c  696f6e00
000010  53657420          DCB      "Set signature by selecting region in image@p type 0=nor"
000014  7369676e
000018  61747572
00001c  65206279
000020  2073656c
000024  65637469
000028  6e672072
00002c  6567696f
000030  6e20696e
000034  20696d61
000038  67654070
00003c  20747970
000040  6520303d
000044  6e6f72  
000047  6d616c20          DCB      "mal signature, 1=color code signature@p signature numer"
00004b  7369676e
00004f  61747572
000053  652c2031
000057  3d636f6c
00005b  6f722063
00005f  6f646520
000063  7369676e
000067  61747572
00006b  65407020
00006f  7369676e
000073  61747572
000077  65206e75
00007b  6d6572  
00007e  6963616c          DCB      "ical index of signature, can be 1-7@p region user-selec"
000082  20696e64
000086  6578206f
00008a  66207369
00008e  676e6174
000092  7572652c
000096  2063616e
00009a  20626520
00009e  312d3740
0000a2  70207265
0000a6  67696f6e
0000aa  20757365
0000ae  722d7365
0000b2  6c6563  
0000b5  74656420          DCB      "ted region@r 0 to 100 if success where 100=good, 0=poor"
0000b9  72656769
0000bd  6f6e4072
0000c1  20302074
0000c5  6f203130
0000c9  30206966
0000cd  20737563
0000d1  63657373
0000d5  20776865
0000d9  72652031
0000dd  30303d67
0000e1  6f6f642c
0000e5  20303d70
0000e9  6f6f72  
0000ec  2c206e65          DCB      ", negative if error",0
0000f0  67617469
0000f4  76652069
0000f8  66206572
0000fc  726f7200
000100  63635f73          DCB      "cc_setSigPoint",0
000104  65745369
000108  67506f69
00010c  6e7400  
00010f  00                DCB      0
000110  53657420          DCB      "Set signature by selecting point in image@p type 0=norm"
000114  7369676e
000118  61747572
00011c  65206279
000120  2073656c
000124  65637469
000128  6e672070
00012c  6f696e74
000130  20696e20
000134  696d6167
000138  65407020
00013c  74797065
000140  20303d6e
000144  6f726d  
000147  616c2073          DCB      "al signature, 1=color code signature@p signature numeri"
00014b  69676e61
00014f  74757265
000153  2c20313d
000157  636f6c6f
00015b  7220636f
00015f  64652073
000163  69676e61
000167  74757265
00016b  40702073
00016f  69676e61
000173  74757265
000177  206e756d
00017b  657269  
00017e  63616c20          DCB      "cal index of signature, can be 1-7@p point user-selecte"
000182  696e6465
000186  78206f66
00018a  20736967
00018e  6e617475
000192  72652c20
000196  63616e20
00019a  62652031
00019e  2d374070
0001a2  20706f69
0001a6  6e742075
0001aa  7365722d
0001ae  73656c65
0001b2  637465  
0001b5  6420706f          DCB      "d point@r 0 to 100 if success where 100=good, 0=poor, n"
0001b9  696e7440
0001bd  72203020
0001c1  746f2031
0001c5  30302069
0001c9  66207375
0001cd  63636573
0001d1  73207768
0001d5  65726520
0001d9  3130303d
0001dd  676f6f64
0001e1  2c20303d
0001e5  706f6f72
0001e9  2c206e  
0001ec  65676174          DCB      "egative if error",0
0001f0  69766520
0001f4  69662065
0001f8  72726f72
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
000200  63635f63          DCB      "cc_clearSig",0
000204  6c656172
000208  53696700
00020c  436c6561          DCB      "Clear signature@p signature numerical index of signatur"
000210  72207369
000214  676e6174
000218  75726540
00021c  70207369
000220  676e6174
000224  75726520
000228  6e756d65
00022c  72696361
000230  6c20696e
000234  64657820
000238  6f662073
00023c  69676e61
000240  747572  
000243  652c2063          DCB      "e, can be 1-7@r 0 if success, negative if error",0
000247  616e2062
00024b  6520312d
00024f  37407220
000253  30206966
000257  20737563
00025b  63657373
00025f  2c206e65
000263  67617469
000267  76652069
00026b  66206572
00026f  726f7200
000273  00                DCB      0
000274  63635f63          DCB      "cc_clearAllSig",0
000278  6c656172
00027c  416c6c53
000280  696700  
000283  00                DCB      0
000284  436c6561          DCB      "Clear signature@r 0 if success, negative if error",0
000288  72207369
00028c  676e6174
000290  75726540
000294  72203020
000298  69662073
00029c  75636365
0002a0  73732c20
0002a4  6e656761
0002a8  74697665
0002ac  20696620
0002b0  6572726f
0002b4  7200    
0002b6  00                DCB      0
0002b7  00                DCB      0
0002b8  63635f73          DCB      "cc_setLabel",0
0002bc  65744c61
0002c0  62656c00
0002c4  53657420          DCB      "Set label for signature or color code@p signum signatur"
0002c8  6c616265
0002cc  6c20666f
0002d0  72207369
0002d4  676e6174
0002d8  75726520
0002dc  6f722063
0002e0  6f6c6f72
0002e4  20636f64
0002e8  65407020
0002ec  7369676e
0002f0  756d2073
0002f4  69676e61
0002f8  747572  
0002fb  65206e75          DCB      "e number including color-coded numbers@p label string l"
0002ff  6d626572
000303  20696e63
000307  6c756469
00030b  6e672063
00030f  6f6c6f72
000313  2d636f64
000317  6564206e
00031b  756d6265
00031f  72734070
000323  206c6162
000327  656c2073
00032b  7472696e
00032f  67206c  
000332  6162656c          DCB      "abel@r 0 if success, negative if error",0
000336  40722030
00033a  20696620
00033e  73756363
000342  6573732c
000346  206e6567
00034a  61746976
00034e  65206966
000352  20657272
000356  6f7200  
000359  00                DCB      0
00035a  00                DCB      0
00035b  00                DCB      0
00035c  63635f73          DCB      "cc_setMemory",0
000360  65744d65
000364  6d6f7279
000368  00      
000369  00                DCB      0
00036a  00                DCB      0
00036b  00                DCB      0
00036c  00                DCB      0
00036d  00                DCB      0
00036e  00                DCB      0
00036f  00                DCB      0
000370  40632054          DCB      "@c Tuning @m 0.0 @M 25.0 Sets filtering range of signat"
000374  756e696e
000378  6720406d
00037c  20302e30
000380  20404d20
000384  32352e30
000388  20536574
00038c  73206669
000390  6c746572
000394  696e6720
000398  72616e67
00039c  65206f66
0003a0  20736967
0003a4  6e6174  
0003a7  75726520          DCB      "ure %d. (default 3.5)",0
0003ab  25642e20
0003af  28646566
0003b3  61756c74
0003b7  20332e35
0003bb  2900    
0003bd  00                DCB      0
0003be  00                DCB      0
0003bf  00                DCB      0
0003c0  40632053          DCB      "@c Signature_Labels Sets the label for objects that mat"
0003c4  69676e61
0003c8  74757265
0003cc  5f4c6162
0003d0  656c7320
0003d4  53657473
0003d8  20746865
0003dc  206c6162
0003e0  656c2066
0003e4  6f72206f
0003e8  626a6563
0003ec  74732074
0003f0  68617420
0003f4  6d6174  
0003f7  63682073          DCB      "ch signature %d.",0
0003fb  69676e61
0003ff  74757265
000403  2025642e
000407  00      
000408  40632054          DCB      "@c Tuning @m 0.0 @M 0.5 Sets the minimum brightness of "
00040c  756e696e
000410  6720406d
000414  20302e30
000418  20404d20
00041c  302e3520
000420  53657473
000424  20746865
000428  206d696e
00042c  696d756d
000430  20627269
000434  6768746e
000438  65737320
00043c  6f6620  
00043f  616c6c20          DCB      "all signatures. (default 0.2)",0
000443  7369676e
000447  61747572
00044b  65732e20
00044f  28646566
000453  61756c74
000457  20302e32
00045b  2900    
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
000460  53657473          DCB      "Sets the color code mode (default enabled) @c Expert @s"
000464  20746865
000468  20636f6c
00046c  6f722063
000470  6f646520
000474  6d6f6465
000478  20286465
00047c  6661756c
000480  7420656e
000484  61626c65
000488  64292040
00048c  63204578
000490  70657274
000494  204073  
000497  20303d44          DCB      " 0=Disabled @s 1=Enabled @s 2=Color_codes_only @s 3=Mix"
00049b  69736162
00049f  6c656420
0004a3  40732031
0004a7  3d456e61
0004ab  626c6564
0004af  20407320
0004b3  323d436f
0004b7  6c6f725f
0004bb  636f6465
0004bf  735f6f6e
0004c3  6c792040
0004c7  7320333d
0004cb  4d6978  
0004ce  656400            DCB      "ed",0
0004d1  00                DCB      0
0004d2  00                DCB      0
0004d3  00                DCB      0
0004d4  40632045          DCB      "@c Expert @m 0 @M 10000 Determines how inclusive the gr"
0004d8  78706572
0004dc  7420406d
0004e0  20302040
0004e4  4d203130
0004e8  30303020
0004ec  44657465
0004f0  726d696e
0004f4  65732068
0004f8  6f772069
0004fc  6e636c75
000500  73697665
000504  20746865
000508  206772  
00050b  6f77696e          DCB      "owing algorithm is when teaching signatures with button"
00050f  6720616c
000513  676f7269
000517  74686d20
00051b  69732077
00051f  68656e20
000523  74656163
000527  68696e67
00052b  20736967
00052f  6e617475
000533  72657320
000537  77697468
00053b  20627574
00053f  746f6e  
000542  2d707573          DCB      "-push method (default 3700)",0
000546  68206d65
00054a  74686f64
00054e  20286465
000552  6661756c
000556  74203337
00055a  30302900
00055e  00                DCB      0
00055f  00                DCB      0
000560  40632045          DCB      "@c Expert @m 0 @M 20000 Sets the LED brightness -- bear"
000564  78706572
000568  7420406d
00056c  20302040
000570  4d203230
000574  30303020
000578  53657473
00057c  20746865
000580  204c4544
000584  20627269
000588  6768746e
00058c  65737320
000590  2d2d2062
000594  656172  
000597  20696e20          DCB      " in mind that if the LED is too bright, it can affect t"
00059b  6d696e64
00059f  20746861
0005a3  74206966
0005a7  20746865
0005ab  204c4544
0005af  20697320
0005b3  746f6f20
0005b7  62726967
0005bb  68742c20
0005bf  69742063
0005c3  616e2061
0005c7  66666563
0005cb  742074  
0005ce  65616368          DCB      "each mode by illuminating the object! (default 750)",0
0005d2  206d6f64
0005d6  65206279
0005da  20696c6c
0005de  756d696e
0005e2  6174696e
0005e6  67207468
0005ea  65206f62
0005ee  6a656374
0005f2  21202864
0005f6  65666175
0005fa  6c742037
0005fe  35302900
000602  00                DCB      0
000603  00                DCB      0
000604  40632045          DCB      "@c Expert @m 1 @M 100 Sets the maximum total blocks sen"
000608  78706572
00060c  7420406d
000610  20312040
000614  4d203130
000618  30205365
00061c  74732074
000620  6865206d
000624  6178696d
000628  756d2074
00062c  6f74616c
000630  20626c6f
000634  636b7320
000638  73656e  
00063b  74207065          DCB      "t per frame. (default 100)",0
00063f  72206672
000643  616d652e
000647  20286465
00064b  6661756c
00064f  74203130
000653  302900  
000656  00                DCB      0
000657  00                DCB      0
000658  40632045          DCB      "@c Expert @m 1 @M 100 Sets the maximum blocks for each "
00065c  78706572
000660  7420406d
000664  20312040
000668  4d203130
00066c  30205365
000670  74732074
000674  6865206d
000678  6178696d
00067c  756d2062
000680  6c6f636b
000684  7320666f
000688  72206561
00068c  636820  
00068f  636f6c6f          DCB      "color signature sent for each frame. (default 100)",0
000693  72207369
000697  676e6174
00069b  75726520
00069f  73656e74
0006a3  20666f72
0006a7  20656163
0006ab  68206672
0006af  616d652e
0006b3  20286465
0006b7  6661756c
0006bb  74203130
0006bf  302900  
0006c2  00                DCB      0
0006c3  00                DCB      0
0006c4  40632045          DCB      "@c Expert @m 4 @M 2500 Sets the minimum required area i"
0006c8  78706572
0006cc  7420406d
0006d0  20342040
0006d4  4d203235
0006d8  30302053
0006dc  65747320
0006e0  74686520
0006e4  6d696e69
0006e8  6d756d20
0006ec  72657175
0006f0  69726564
0006f4  20617265
0006f8  612069  
0006fb  6e207069          DCB      "n pixels for a block.  Blocks with less area won't be s"
0006ff  78656c73
000703  20666f72
000707  20612062
00070b  6c6f636b
00070f  2e202042
000713  6c6f636b
000717  73207769
00071b  7468206c
00071f  65737320
000723  61726561
000727  20776f6e
00072b  27742062
00072f  652073  
000732  656e742e          DCB      "ent. (default 20)",0
000736  20286465
00073a  6661756c
00073e  74203230
000742  2900    
000744  40632045          DCB      "@c Expert @m 0 @M 60 Sets the maximum distance that sep"
000748  78706572
00074c  7420406d
000750  20302040
000754  4d203630
000758  20536574
00075c  73207468
000760  65206d61
000764  78696d75
000768  6d206469
00076c  7374616e
000770  63652074
000774  68617420
000778  736570  
00077b  61726174          DCB      "arated blocks should be merged into one block (default "
00077f  65642062
000783  6c6f636b
000787  73207368
00078b  6f756c64
00078f  20626520
000793  6d657267
000797  65642069
00079b  6e746f20
00079f  6f6e6520
0007a3  626c6f63
0007a7  6b202864
0007ab  65666175
0007af  6c7420  
0007b2  372900            DCB      "7)",0
0007b5  00                DCB      0
0007b6  00                DCB      0
0007b7  00                DCB      0
0007b8  40632045          DCB      "@c Expert @m 0 @M 60 Sets the amount of filtering for b"
0007bc  78706572
0007c0  7420406d
0007c4  20302040
0007c8  4d203630
0007cc  20536574
0007d0  73207468
0007d4  6520616d
0007d8  6f756e74
0007dc  206f6620
0007e0  66696c74
0007e4  6572696e
0007e8  6720666f
0007ec  722062  
0007ef  6c6f636b          DCB      "locks -- more filtering means less false-positives but "
0007f3  73202d2d
0007f7  206d6f72
0007fb  65206669
0007ff  6c746572
000803  696e6720
000807  6d65616e
00080b  73206c65
00080f  73732066
000813  616c7365
000817  2d706f73
00081b  69746976
00081f  65732062
000823  757420  
000826  736c6f77          DCB      "slower detection (default 3)",0
00082a  65722064
00082e  65746563
000832  74696f6e
000836  20286465
00083a  6661756c
00083e  74203329
000842  00      
000843  00                DCB      0
000844  40632045          DCB      "@c Expert @m 10 @M 320 Sets the maximum velocity a bloc"
000848  78706572
00084c  7420406d
000850  20313020
000854  404d2033
000858  32302053
00085c  65747320
000860  74686520
000864  6d617869
000868  6d756d20
00086c  76656c6f
000870  63697479
000874  20612062
000878  6c6f63  
00087b  6b206361          DCB      "k can be tracked in pixels-per-second (default 65)",0
00087f  6e206265
000883  20747261
000887  636b6564
00088b  20696e20
00088f  70697865
000893  6c732d70
000897  65722d73
00089b  65636f6e
00089f  64202864
0008a3  65666175
0008a7  6c742036
0008ab  352900  

                          AREA ||.data||, DATA, ALIGN=2

                  g_ledOverride
000000  0000              DCB      0x00,0x00
                  g_ledBrightness
000002  0000              DCB      0x00,0x00
                  g_qqueue
                          DCD      0x00000000
                  g_blobs
                          DCD      0x00000000

                          AREA ||i._ZN14ColorSignatureC1Ev||, COMGROUP=_ZN14ColorSignatureC1Ev, CODE, READONLY, ALIGN=1

                  _ZN14ColorSignatureC2Ev                  ; Alternate entry point ; ColorSignature::ColorSignature__sub_object()
                  _ZN14ColorSignatureC1Ev PROC ; ColorSignature::ColorSignature()
;;;54     {
;;;55     	ColorSignature()
;;;56     	{
;;;57     		m_uMin = m_uMax = m_uMean = m_vMin = m_vMax = m_vMean = m_type = 0;
;;;58     	}	
;;;59     
000000  2100              MOVS     r1,#0
000002  61c1              STR      r1,[r0,#0x1c]
000004  6141              STR      r1,[r0,#0x14]
000006  6101              STR      r1,[r0,#0x10]
000008  60c1              STR      r1,[r0,#0xc]
00000a  6081              STR      r1,[r0,#8]
00000c  6041              STR      r1,[r0,#4]
00000e  6001              STR      r1,[r0,#0]
000010  4770              BX       lr
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN14ColorSignatureC1Ev, LINKORDER=||i._ZN14ColorSignatureC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN14ColorSignatureC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;72     {
;;;73         Point16()
;;;74         {
;;;75             m_x = m_y = 0;
;;;76         }
;;;77     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\conncomp.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_qqueue___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___12_conncomp_cpp_g_qqueue___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_conncomp_cpp_g_qqueue___Z7__REVSHi|
#line 144
|__asm___12_conncomp_cpp_g_qqueue___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
