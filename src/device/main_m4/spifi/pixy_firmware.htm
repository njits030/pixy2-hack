<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\spifi\pixy_firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\spifi\pixy_firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Apr 07 14:31:59 2021
<BR><P>
<H3>Maximum Stack Usage =       1680 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ProgBlobs::loop(char*) &rArr; ProgBlobs::staticLoop(char*) &rArr; ProgBlobs::handleButton(char*) &rArr; ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[336]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[83]">spifiDeviceFxError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">spifiDeviceFxError</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">ADC0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4a]">ADC1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[62]">ATIMER_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2f]">BusFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[66]">CAN0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[60]">CAN1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[35]">DAC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[37]">DMA_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[32]">DebugMon_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3a]">ETH_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5f]">EVRT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[38]">EZH_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[39]">FLASH_EEPROM_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5d]">GINT0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5e]">GINT1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[55]">GPIO0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[56]">GPIO1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[57]">GPIO2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[58]">GPIO3_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[59]">GPIO4_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5a]">GPIO5_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5b]">GPIO6_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[5c]">GPIO7_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2d]">HardFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[47]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[48]">I2C1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[51]">I2S0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[52]">I2S1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3c]">LCD_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[36]">M0CORE_IRQHandler</a> from ipc_mbx.o(i.M0CORE_IRQHandler) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[65]">M0s_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[45]">MCPWM_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2e]">MemManage_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[2c]">NMI_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[33]">PendSV_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[67]">QEI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[40]">RIT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[63]">RTC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[12]">Reset_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3f]">SCT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[54]">SGPIO_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[53]">SPIFI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[49]">SPI_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4b]">SSP0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4c]">SSP1_IRQHandler</a> from spi.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[31]">SVC_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[34]">SysTick_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[41]">TIMER0_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[42]">TIMER1_IRQHandler</a> from platform_config.o(i.TIMER1_IRQHandler) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[43]">TIMER2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[44]">TIMER3_IRQHandler</a> from spi2.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4d]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4e]">UART1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[4f]">UART2_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[50]">UART3_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3d]">USB0_IRQHandler</a> from usbhw.o(i.USB0_IRQHandler) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[3e]">USB1_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[7a]">USB_EndPoint0</a> from usbcore.o(i.USB_EndPoint0) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[7b]">USB_EndPoint1</a> from usbuser.o(i.USB_EndPoint1) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[7c]">USB_EndPoint2</a> from usbuser.o(i.USB_EndPoint2) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[79]">USB_Reset_Event</a> from usbuser.o(i.USB_Reset_Event) referenced from usbuser.o(i.USB_UserInit)
 <LI><a href="#[30]">UsageFault_Handler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[61]">VADC_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[64]">WDT_IRQHandler</a> from startup_lpc43xx_m4.o(.text) referenced from startup_lpc43xx_m4.o(VECTORS)
 <LI><a href="#[1b]">cam_getAEC()</a> from camera.o(i._Z10cam_getAECv) referenced from camera.o(.constdata)
 <LI><a href="#[17]">cam_getAWB()</a> from camera.o(i._Z10cam_getAWBv) referenced from camera.o(.constdata)
 <LI><a href="#[1d]">cam_getECV()</a> from camera.o(i._Z10cam_getECVv) referenced from camera.o(.constdata)
 <LI><a href="#[19]">cam_getWBV()</a> from camera.o(i._Z10cam_getWBVv) referenced from camera.o(.constdata)
 <LI><a href="#[1a]">cam_setAEC(const unsigned char&)</a> from camera.o(i._Z10cam_setAECRKh) referenced from camera.o(.constdata)
 <LI><a href="#[16]">cam_setAWB(const unsigned char&)</a> from camera.o(i._Z10cam_setAWBRKh) referenced from camera.o(.constdata)
 <LI><a href="#[1c]">cam_setECV(const unsigned&)</a> from camera.o(i._Z10cam_setECVRKj) referenced from camera.o(.constdata)
 <LI><a href="#[18]">cam_setWBV(const unsigned&)</a> from camera.o(i._Z10cam_setWBVRKj) referenced from camera.o(.constdata)
 <LI><a href="#[ba]">led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)</a> from led.o(i._Z10led_setRGBRKhS0_S0_) referenced from led.o(.constdata)
 <LI><a href="#[be]">prm_format()</a> from param.o(i._Z10prm_formatv) referenced from param.o(.constdata)
 <LI><a href="#[c5]">prm_getAll(const unsigned char&, const unsigned short&, Chirp*)</a> from param.o(i._Z10prm_getAllRKhRKtP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[cb]">pwr_getVin()</a> from power.o(i._Z10pwr_getVinv) referenced from power.o(.constdata)
 <LI><a href="#[c8]">rcs_enable(const unsigned char&, const unsigned char&)</a> from rcservo.o(i._Z10rcs_enableRKhS0_) referenced from rcservo.o(.constdata)
 <LI><a href="#[c7]">rcs_getPos(const unsigned char&)</a> from rcservo.o(i._Z10rcs_getPosRKh) referenced from rcservo.o(.constdata)
 <LI><a href="#[c6]">rcs_setPos(const unsigned char&, const unsigned short&)</a> from rcservo.o(i._Z10rcs_setPosRKhRKt) referenced from rcservo.o(.constdata)
 <LI><a href="#[1fb]">txCallback(unsigned char*, unsigned)</a> from serial.o(.text) referenced 4 times from serial.o(.text)
 <LI><a href="#[15]">cam_getMode()</a> from camera.o(i._Z11cam_getModev) referenced from camera.o(.constdata)
 <LI><a href="#[27]">cam_getReg8(const unsigned short&)</a> from camera.o(i._Z11cam_getReg8RKt) referenced from camera.o(.constdata)
 <LI><a href="#[14]">cam_setMode(const unsigned char&)</a> from camera.o(i._Z11cam_setModeRKh) referenced from camera.o(.constdata)
 <LI><a href="#[24]">cam_setReg8(const unsigned short&, const unsigned char&)</a> from camera.o(i._Z11cam_setReg8RKtRKh) referenced from camera.o(.constdata)
 <LI><a href="#[a2]">cc_clearSig(const unsigned char&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[a4]">cc_setLabel(const unsigned&, const char*, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[b3]">exec_getUID()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[bd]">led_setLamp(const unsigned char&, const unsigned char&)</a> from led.o(i._Z11led_setLampRKhS0_) referenced from led.o(.constdata)
 <LI><a href="#[c4]">prm_getInfo(const char*, Chirp*)</a> from param.o(i._Z11prm_getInfoPKcP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[ca]">rcs_setFreq(const unsigned short&)</a> from rcservo.o(i._Z11rcs_setFreqRKt) referenced from rcservo.o(.constdata)
 <LI><a href="#[28]">cam_getReg16(const unsigned short&)</a> from camera.o(i._Z12cam_getReg16RKt) referenced from camera.o(.constdata)
 <LI><a href="#[29]">cam_getReg32(const unsigned short&)</a> from camera.o(i._Z12cam_getReg32RKt) referenced from camera.o(.constdata)
 <LI><a href="#[25]">cam_setReg16(const unsigned short&, const unsigned short&)</a> from camera.o(i._Z12cam_setReg16RKtS0_) referenced from camera.o(.constdata)
 <LI><a href="#[26]">cam_setReg32(const unsigned short&, const unsigned&)</a> from camera.o(i._Z12cam_setReg32RKtRKj) referenced from camera.o(.constdata)
 <LI><a href="#[a5]">cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[2e1]">compareAngle(const void*, const void*)</a> from line.o(.text) referenced from line.o(.text)
 <LI><a href="#[26f]">createProgPt(unsigned char)</a> from progpt.o(.text) referenced from progpt.o(.text)
 <LI><a href="#[ad]">exec_getProg(const unsigned char&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b4]">exec_getView(const unsigned short&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b7]">exec_printMC()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[a9]">exec_runProg(const unsigned char&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[a6]">exec_running(Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b5]">exec_setView(const unsigned short&)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b0]">exec_version(Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[c3]">prm_getChirp(const char*, Chirp*)</a> from param.o(i._Z12prm_getChirpPKcP5Chirp) referenced from param.o(.constdata)
 <LI><a href="#[bf]">prm_setChirp(const char*, const unsigned&, const unsigned char*)</a> from param.o(i._Z12prm_setChirpPKcRKjPKh) referenced from param.o(.constdata)
 <LI><a href="#[c0]">prm_setDirty()</a> from param.o(i._Z12prm_setDirtyv) referenced from param.o(.constdata)
 <LI><a href="#[6c]">compAreaBlobA(const void*, const void*)</a> from blobs.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[6d]">compAreaBlobC(const void*, const void*)</a> from blobs.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[19b]">compProgNames(const void*, const void*)</a> from exec.o(.text) referenced from exec.o(.text)
 <LI><a href="#[c9]">rcs_setLimits(const unsigned char&, const short&, const short&)</a> from rcservo.o(i._Z13rcs_setLimitsRKhRKsS2_) referenced from rcservo.o(.constdata)
 <LI><a href="#[a3]">cc_clearAllSig(Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[a1]">cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[279]">createProgLine(unsigned char)</a> from progline.o(.text) referenced from progline.o(.text)
 <LI><a href="#[b2]">exec_getAction(const unsigned short&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[22]">cam_testPattern(const unsigned char&)</a> from camera.o(i._Z15cam_testPatternRKh) referenced from camera.o(.constdata)
 <LI><a href="#[a0]">cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</a> from conncomp.o(.text) referenced from conncomp.o(.constdata)
 <LI><a href="#[1d8]">createProgBlobs(unsigned char)</a> from progblobs.o(.text) referenced from progblobs.o(.text)
 <LI><a href="#[1ee]">createProgVideo(unsigned char)</a> from progvideo.o(.text) referenced from progvideo.o(.text)
 <LI><a href="#[ac]">exec_runProgArg(const unsigned char&, const int&, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b6]">exec_toggleLamp()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b8]">ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[2b]">cam_getBlankTime()</a> from camera.o(i._Z16cam_getBlankTimev) referenced from camera.o(.constdata)
 <LI><a href="#[aa]">exec_runProgName(const char*, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[b1]">exec_versionType(Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[c2]">prm_resetShadows()</a> from param.o(i._Z16prm_resetShadowsv) referenced from param.o(.constdata)
 <LI><a href="#[1f]">cam_getBrightness()</a> from camera.o(i._Z17cam_getBrightnessv) referenced 2 times from camera.o(.constdata)
 <LI><a href="#[23]">cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</a> from camera.o(i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp) referenced from camera.o(.constdata)
 <LI><a href="#[1e]">cam_setBrightness(const unsigned char&)</a> from camera.o(i._Z17cam_setBrightnessRKh) referenced from camera.o(.constdata)
 <LI><a href="#[20]">cam_setSaturation(const unsigned char&)</a> from camera.o(i._Z17cam_setSaturationRKh) referenced from camera.o(.constdata)
 <LI><a href="#[16c]">cc_shadowCallback(const char*, const void*)</a> from conncomp.o(.text) referenced 8 times from conncomp.o(.text)
 <LI><a href="#[ae]">exec_getProgIndex(const char*, Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[bc]">led_getMaxCurrent()</a> from led.o(i._Z17led_getMaxCurrentv) referenced from led.o(.constdata)
 <LI><a href="#[bb]">led_setMaxCurrent(const unsigned&)</a> from led.o(i._Z17led_setMaxCurrentRKj) referenced from led.o(.constdata)
 <LI><a href="#[2a]">cam_getFramePeriod()</a> from camera.o(i._Z18cam_getFramePeriodv) referenced from camera.o(.constdata)
 <LI><a href="#[7e]">cam_shadowCallback(const char*, const unsigned char&)</a> from camera.o(i._Z18cam_shadowCallbackPKcRKh) referenced from camera.o(i._Z14cam_loadParamsv)
 <LI><a href="#[c1]">prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)</a> from param.o(i._Z18prm_setShadowChirpPKcRKjPKh) referenced from param.o(.constdata)
 <LI><a href="#[7f]">rcs_shadowCallback(const char*, const unsigned short&)</a> from rcservo.o(i._Z18rcs_shadowCallbackPKcRKt) referenced from rcservo.o(i._Z14rcs_loadParamsv)
 <LI><a href="#[ab]">exec_runProgDefault(Chirp*)</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[283]">line_shadowCallback(const char*, const void*)</a> from line.o(.text) referenced 16 times from line.o(.text)
 <LI><a href="#[167]">cc_signatureCallback(const char*, const float&)</a> from conncomp.o(.text) referenced 2 times from conncomp.o(.text)
 <LI><a href="#[80]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[21]">cam_setFlickerAvoidance(const unsigned char&)</a> from camera.o(i._Z23cam_setFlickerAvoidanceRKh) referenced from camera.o(.constdata)
 <LI><a href="#[2c8]">comp8(const void*, const void*)</a> from line.o(.text) referenced from line.o(.text)
 <LI><a href="#[b9]">led_set(const unsigned&)</a> from led.o(i._Z7led_setRKj) referenced from led.o(.constdata)
 <LI><a href="#[a8]">exec_run()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[af]">exec_list()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[a7]">exec_stop()</a> from exec.o(.text) referenced from exec.o(.constdata)
 <LI><a href="#[72]">SimpleList&lang;Intersection&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI12IntersectionED1Ev) referenced from line.o(.text)
 <LI><a href="#[6f]">SimpleList&lang;Line2&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI5Line2ED1Ev) referenced from line.o(.text)
 <LI><a href="#[71]">SimpleList&lang;Nadir&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI5NadirED1Ev) referenced from line.o(.text)
 <LI><a href="#[70]">SimpleList&lang;Point&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI5PointED1Ev) referenced from line.o(.text)
 <LI><a href="#[74]">SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev) referenced from line.o(.text)
 <LI><a href="#[73]">SimpleList&lang;Tracker&lang;Line2&rang;&rang;::~SimpleList()</a> from line.o(t._ZN10SimpleListI7TrackerI5Line2EED1Ev) referenced from line.o(.text)
 <LI><a href="#[82]">SimpleVector&lang;Shadow&rang;::~SimpleVector()</a> from param.o(t._ZN12SimpleVectorI6ShadowED1Ev) referenced from param.o(i.__sti___9_param_cpp_55d340e8)
 <LI><a href="#[69]">CBlobAssembler::CBlobAssembler()</a> from blob.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[6b]">CBlobAssembler::~CBlobAssembler()</a> from blob.o(.text) referenced from blobs.o(.text)
 <LI><a href="#[6e]">ColorSignature::ColorSignature()</a> from conncomp.o(i._ZN14ColorSignatureC1Ev) referenced from colorlut.o(.text)
 <LI><a href="#[77]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[cf]">I2c::receiveLen()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[cc]">I2c::open()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[cd]">I2c::close()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[d0]">I2c::update()</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[ce]">I2c::receive(unsigned char*, unsigned)</a> from i2c.o(.text) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[d5]">Spi::receiveLen()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[d2]">Spi::open()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[d3]">Spi::close()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[d6]">Spi::update()</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[d4]">Spi::receive(unsigned char*, unsigned)</a> from spi.o(.text) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[f8]">Link::getFlags(unsigned char)</a> from usblink.o(i._ZN4Link8getFlagsEh) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[f3]">Link::blockSize()</a> from usblink.o(i._ZN4Link9blockSizeEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[f3]">Link::blockSize()</a> from usblink.o(i._ZN4Link9blockSizeEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[ec]">Prog::getResolution(unsigned short*, unsigned short*, unsigned char)</a> from progblobs.o(i._ZN4Prog13getResolutionEPtS0_h) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[ec]">Prog::getResolution(unsigned short*, unsigned short*, unsigned char)</a> from progblobs.o(i._ZN4Prog13getResolutionEPtS0_h) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[ec]">Prog::getResolution(unsigned short*, unsigned short*, unsigned char)</a> from progblobs.o(i._ZN4Prog13getResolutionEPtS0_h) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[e9]">Prog::getView(unsigned short, const char**)</a> from progvideo.o(i._ZN4Prog7getViewEtPPKc) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[e9]">Prog::getView(unsigned short, const char**)</a> from progvideo.o(i._ZN4Prog7getViewEtPPKc) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[ea]">Prog::setView(unsigned short)</a> from progvideo.o(i._ZN4Prog7setViewEt) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[ea]">Prog::setView(unsigned short)</a> from progvideo.o(i._ZN4Prog7setViewEt) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[fe]">Prog::getAction(unsigned short, const char**, const char**)</a> from progvideo.o(i._ZN4Prog9getActionEtPPKcS2_) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[fe]">Prog::getAction(unsigned short, const char**, const char**)</a> from progvideo.o(i._ZN4Prog9getActionEtPPKcS2_) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[da]">Spi2::receiveLen()</a> from spi2.o(.text) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[d7]">Spi2::open()</a> from spi2.o(.text) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[d8]">Spi2::close()</a> from spi2.o(.text) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[d9]">Spi2::receive(unsigned char*, unsigned)</a> from spi2.o(.text) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[df]">Uart::receiveLen()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[e1]">Uart::startTransmit()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[dc]">Uart::open()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[dd]">Uart::close()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[e0]">Uart::update()</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[de]">Uart::receive(unsigned char*, unsigned)</a> from uart.o(.text) referenced from uart.o(.constdata__ZTV4Uart)
 <LI><a href="#[6a]">BlobA::BlobA()</a> from blobs.o(i._ZN5BlobAC1Ev) referenced from blobs.o(.text)
 <LI><a href="#[e3]">Chirp::handleChirp(unsigned char, short, const void**)</a> from chirp.o(i._ZN5Chirp11handleChirpEhsPPKv) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[e4]">Chirp::handleXdata(const void**)</a> from chirp.o(i._ZN5Chirp11handleXdataEPPKv) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[e2]">Chirp::init(bool)</a> from chirp.o(i._ZN5Chirp4initEb) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[e5]">Chirp::sendChirp(unsigned char, short)</a> from chirp.o(i._ZN5Chirp9sendChirpEhs) referenced from chirp.o(.constdata__ZTV5Chirp)
 <LI><a href="#[26d]">ProgPt::shadowCallback(const char*, const unsigned&)</a> from progpt.o(.text) referenced 4 times from progpt.o(.text)
 <LI><a href="#[e8]">ProgPt::loop(char*)</a> from progpt.o(.text) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[ed]">ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool)</a> from progpt.o(.text) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[eb]">ProgPt::getAction(unsigned short, const char**, const char**)</a> from progpt.o(.text) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[e7]">ProgPt::~ProgPt__deallocating()</a> from progpt.o(.text) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[e6]">ProgPt::~ProgPt()</a> from progpt.o(.text) referenced from progpt.o(.constdata__ZTV6ProgPt)
 <LI><a href="#[ee]">SMLink::send(const unsigned char*, unsigned, unsigned short)</a> from smlink.o(i._ZN6SMLink4sendEPKhjt) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[ef]">SMLink::receive(unsigned char*, unsigned, unsigned short)</a> from smlink.o(i._ZN6SMLink7receiveEPhjt) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[f2]">SMLink::getFlags(unsigned char)</a> from smlink.o(i._ZN6SMLink8getFlagsEh) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[f1]">SMLink::getTimer()</a> from smlink.o(i._ZN6SMLink8getTimerEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[f0]">SMLink::setTimer()</a> from smlink.o(i._ZN6SMLink8setTimerEv) referenced from smlink.o(.constdata__ZTV6SMLink)
 <LI><a href="#[104]">Iserial::receiveLen()</a> from analogdig.o(i._ZN7Iserial10receiveLenEv) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[d1]">Iserial::startTransmit()</a> from analogdig.o(i._ZN7Iserial13startTransmitEv) referenced from i2c.o(.constdata__ZTV3I2c)
 <LI><a href="#[d1]">Iserial::startTransmit()</a> from analogdig.o(i._ZN7Iserial13startTransmitEv) referenced from spi.o(.constdata__ZTV3Spi)
 <LI><a href="#[d1]">Iserial::startTransmit()</a> from analogdig.o(i._ZN7Iserial13startTransmitEv) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[d1]">Iserial::startTransmit()</a> from analogdig.o(i._ZN7Iserial13startTransmitEv) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[db]">Iserial::update()</a> from spi2.o(i._ZN7Iserial6updateEv) referenced from spi2.o(.constdata__ZTV4Spi2)
 <LI><a href="#[103]">Iserial::receive(unsigned char*, unsigned)</a> from analogdig.o(i._ZN7Iserial7receiveEPhj) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[68]">Point16::Point16()</a> from conncomp.o(i._ZN7Point16C1Ev) referenced 2 times from conncomp.o(.text)
 <LI><a href="#[68]">Point16::Point16()</a> from conncomp.o(i._ZN7Point16C1Ev) referenced from colorlut.o(t._ZN12SimpleVectorI7Point16E9push_backERKS0_)
 <LI><a href="#[f4]">USBLink::send(const unsigned char*, unsigned, unsigned short)</a> from usblink.o(i._ZN7USBLink4sendEPKhjt) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[f5]">USBLink::receive(unsigned char*, unsigned, unsigned short)</a> from usblink.o(i._ZN7USBLink7receiveEPhjt) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[f7]">USBLink::getTimer()</a> from usblink.o(i._ZN7USBLink8getTimerEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[f6]">USBLink::setTimer()</a> from usblink.o(i._ZN7USBLink8setTimerEv) referenced from usblink.o(.constdata__ZTV7USBLink)
 <LI><a href="#[ff]">ProgLine::getResolution(unsigned short*, unsigned short*, unsigned char)</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[fb]">ProgLine::loop(char*)</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[100]">ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[fc]">ProgLine::getView(unsigned short, const char**)</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[fd]">ProgLine::setView(unsigned short)</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[fa]">ProgLine::~ProgLine__deallocating()</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[f9]">ProgLine::~ProgLine()</a> from progline.o(.text) referenced from progline.o(.constdata__ZTV8ProgLine)
 <LI><a href="#[101]">AnalogDig::open()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[102]">AnalogDig::close()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[105]">AnalogDig::update()</a> from analogdig.o(.text) referenced from analogdig.o(.constdata__ZTV9AnalogDig)
 <LI><a href="#[108]">ProgBlobs::loop(char*)</a> from progblobs.o(i._ZN9ProgBlobs4loopEPc) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[10c]">ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool)</a> from progblobs.o(i._ZN9ProgBlobs6packetEhPKhhb) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[109]">ProgBlobs::getView(unsigned short, const char**)</a> from progblobs.o(i._ZN9ProgBlobs7getViewEtPPKc) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[10a]">ProgBlobs::setView(unsigned short)</a> from progblobs.o(i._ZN9ProgBlobs7setViewEt) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[10b]">ProgBlobs::getAction(unsigned short, const char**, const char**)</a> from progblobs.o(i._ZN9ProgBlobs9getActionEtPPKcS2_) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[107]">ProgBlobs::~ProgBlobs__deallocating()</a> from progblobs.o(i._ZN9ProgBlobsD0Ev) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[106]">ProgBlobs::~ProgBlobs()</a> from progblobs.o(i._ZN9ProgBlobsD1Ev) referenced from progblobs.o(.constdata__ZTV9ProgBlobs)
 <LI><a href="#[10f]">ProgVideo::loop(char*)</a> from progvideo.o(.text) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[110]">ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)</a> from progvideo.o(.text) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[10e]">ProgVideo::~ProgVideo__deallocating()</a> from progvideo.o(.text) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[10d]">ProgVideo::~ProgVideo()</a> from progvideo.o(.text) referenced from progvideo.o(.constdata__ZTV9ProgVideo)
 <LI><a href="#[81]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[118]">__main</a> from __main.o(!!!main) referenced from startup_lpc43xx_m4.o(.text)
 <LI><a href="#[116]">__sti___10_camera_cpp_g_sccb</a> from camera.o(i.__sti___10_camera_cpp_g_sccb) referenced from camera.o(.init_array)
 <LI><a href="#[113]">__sti___10_progpt_cpp_abf46733</a> from progpt.o(.text) referenced from progpt.o(.init_array)
 <LI><a href="#[114]">__sti___12_progline_cpp_6df8bedf</a> from progline.o(.text) referenced from progline.o(.init_array)
 <LI><a href="#[111]">__sti___13_progblobs_cpp_e6e3ae25</a> from progblobs.o(.text) referenced from progblobs.o(.init_array)
 <LI><a href="#[112]">__sti___13_progvideo_cpp_827dad01</a> from progvideo.o(.text) referenced from progvideo.o(.init_array)
 <LI><a href="#[115]">__sti___8_line_cpp_5416574d</a> from line.o(.text) referenced from line.o(.init_array)
 <LI><a href="#[117]">__sti___9_param_cpp_55d340e8</a> from param.o(i.__sti___9_param_cpp_55d340e8) referenced from param.o(.init_array)
 <LI><a href="#[78]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[76]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[75]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[8d]">spifiDevice4BInitReadCommand</a> from spifilib_fam_standard_cmd.o(i.spifiDevice4BInitReadCommand) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
 <LI><a href="#[94]">spifiDevice4BInitWriteCommand</a> from spifilib_fam_standard_cmd.o(i.spifiDevice4BInitWriteCommand) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
 <LI><a href="#[85]">spifiDeviceDataClearStatusNone</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataClearStatusNone) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
 <LI><a href="#[84]">spifiDeviceDataClearStatusS25FL032P</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataClearStatusS25FL032P) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
 <LI><a href="#[88]">spifiDeviceDataGetStatusMX25L3235E</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusMX25L3235E) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
 <LI><a href="#[86]">spifiDeviceDataGetStatusS25FL032P</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusS25FL032P) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
 <LI><a href="#[87]">spifiDeviceDataGetStatusS25FL164K</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusS25FL164K) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
 <LI><a href="#[89]">spifiDeviceDataGetStatusW25Q80BV</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusW25Q80BV) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
 <LI><a href="#[8b]">spifiDeviceDataInitDeinit</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataInitDeinit) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
 <LI><a href="#[8a]">spifiDeviceDataInitDeinitS25FL164K</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataInitDeinitS25FL164K) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
 <LI><a href="#[8f]">spifiDeviceDataSetOptsQuadModeBit6</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetOptsQuadModeBit6) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
 <LI><a href="#[8e]">spifiDeviceDataSetOptsQuadModeBit9</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetOptsQuadModeBit9) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
 <LI><a href="#[92]">spifiDeviceDataSetStatusMX25L3235E</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusMX25L3235E) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
 <LI><a href="#[90]">spifiDeviceDataSetStatusS25FL032P</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusS25FL032P) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
 <LI><a href="#[91]">spifiDeviceDataSetStatusS25FL164K</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusS25FL164K) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
 <LI><a href="#[83]">spifiDeviceFxError</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceFxError) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
 <LI><a href="#[8c]">spifiDeviceInitReadCommand</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceInitReadCommand) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
 <LI><a href="#[93]">spifiDeviceInitWriteCommand</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceInitWriteCommand) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
 <LI><a href="#[95]">spifiDeviceInitWriteCommandMacronix</a> from spifilib_fam_standard_cmd.o(i.spifiDeviceInitWriteCommandMacronix) referenced from spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
 <LI><a href="#[9f]">spifiFamFxDeviceSetup</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup) referenced from spifilib_fam_standard_cmd.o(i.spifi_REG_FAMILY_CommonCommandSet)
 <LI><a href="#[97]">spifiFamFxEraseAll</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxEraseAll) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[98]">spifiFamFxEraseBlock</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxEraseBlock) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[99]">spifiFamFxEraseSubBlock</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxEraseSubBlock) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[9d]">spifiFamFxGetDeviceStatus</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxGetDeviceStatus) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[96]">spifiFamFxLockDeviceCmd</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxLockDeviceCmd) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[9a]">spifiFamFxPageProgram</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxPageProgram) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[9b]">spifiFamFxReadDevice</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxReadDevice) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[9c]">spifiFamFxResetDevice</a> from spifilib_fam_standard_cmd.o(i.spifiFamFxResetDevice) referenced from spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
 <LI><a href="#[9e]">spifiPrvDevGetID</a> from spifilib_dev_common.o(i.spifiPrvDevGetID) referenced from spifilib_dev_common.o(i.spifiPrvDevDetect)
 <LI><a href="#[7d]">spifi_REG_FAMILY_CommonCommandSet</a> from spifilib_fam_standard_cmd.o(i.spifi_REG_FAMILY_CommonCommandSet) referenced from flash.o(i._Z10flash_initv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[30e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[121]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[124]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[42c]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[42d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[125]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[128]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12d]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[12f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[130]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[131]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[133]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[42e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[135]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[137]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[139]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[13b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[42f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[14c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[430]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[431]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[432]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[433]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[434]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[435]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[436]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[437]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[438]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[439]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[43a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[146]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[43b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[43c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[43d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[43e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[43f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[440]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[441]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[442]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[443]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[444]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[445]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[446]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[447]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[448]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[449]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[44a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[44b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[11b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2 (via Veneer)
</UL>

<P><STRONG><a name="[44c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[149]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[44d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[14d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; exec_mainLoop() &rArr; exec_periodic() &rArr; exec_loadParams() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[44e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[338]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[150]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[44f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[152]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[156]"></a>AnalogDig::AnalogDig()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, analogdig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
</UL>

<P><STRONG><a name="[450]"></a>AnalogDig::AnalogDig__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, analogdig.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[154]"></a>ad_init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ad_init() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::AnalogDig()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
</UL>

<P><STRONG><a name="[205]"></a>AnalogDig::setDirection(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, analogdig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[101]"></a>AnalogDig::open()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnalogDig::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[102]"></a>AnalogDig::close()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnalogDig::close() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[105]"></a>AnalogDig::update()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, analogdig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AnalogDig::update() &rArr; Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[15a]"></a>reset()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = reset() &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[15b]"></a>setLED(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setLED(unsigned char) &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>

<P><STRONG><a name="[15c]"></a>flashLED(unsigned char, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flashLED(unsigned char, unsigned char) &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::setSignature()
</UL>

<P><STRONG><a name="[15d]"></a>selectProgram(unsigned char, unsigned char*)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = selectProgram(unsigned char, unsigned char*) &rArr; flashLED(unsigned char, unsigned char) &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED(unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
</UL>

<P><STRONG><a name="[161]"></a>cc_loadLut()</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = cc_loadLut() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>

<P><STRONG><a name="[167]"></a>cc_signatureCallback(const char*, const float&)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cc_signatureCallback(const char*, const float&) &rArr; exec_pauseM0() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSigRange(unsigned char, float)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resumeM0()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pauseM0()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>cc_shadowCallback(const char*, const void*)</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cc_shadowCallback(const char*, const void*) &rArr; led_setMaxCurrent(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setGrowDist(unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobsPerModel(unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobVelocity(unsigned short)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setBlobFiltering(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxMergeDist(unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobs(unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMinArea(unsigned)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>cc_loadParams()</STRONG> (Thumb, 1164 bytes, Stack size 280 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = cc_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSigRange(unsigned char, float)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setGrowDist(unsigned)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobsPerModel(unsigned short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobVelocity(unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setColorCodeMode(ColorCodeMode)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setBlobFiltering(unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxMergeDist(unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobs(unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMinArea(unsigned)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[179]"></a>cc_init(Chirp*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = cc_init(Chirp*) &rArr; cc_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::Qqueue()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>cc_open()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cc_open()
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
</UL>

<P><STRONG><a name="[17f]"></a>cc_close()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cc_close() &rArr; Blobs::reset() &rArr; SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticExit()
</UL>

<P><STRONG><a name="[a0]"></a>cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 176 bytes, Stack size 104 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getSignature(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[a1]"></a>cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 226 bytes, Stack size 120 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getSignature(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::setSignature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>cc_clearSig(const unsigned char&, Chirp*)</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = cc_clearSig(const unsigned char&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>cc_clearAllSig(Chirp*)</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = cc_clearAllSig(Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorSignature::ColorSignature()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>cc_setLabel(const unsigned&, const char*, Chirp*)</STRONG> (Thumb, 152 bytes, Stack size 200 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = cc_setLabel(const unsigned&, const char*, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cc_setMemory(const unsigned&, const unsigned&, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conncomp.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::connected()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::convertBlob(BlobC*, const BlobA&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
</UL>

<P><STRONG><a name="[197]"></a>ledBrightness(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledBrightness(unsigned) &rArr; __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
</UL>

<P><STRONG><a name="[1a8]"></a>cc_setLEDOverride(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conncomp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_toggleLamp()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
</UL>

<P><STRONG><a name="[199]"></a>cc_setLED()</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, conncomp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cc_setLED() &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
</UL>

<P><STRONG><a name="[19b]"></a>compProgNames(const void*, const void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>exec_init(Chirp*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = exec_init(Chirp*) &rArr; loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>exec_running(Chirp*)</STRONG> (Thumb, 154 bytes, Stack size 160 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = exec_running(Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFPS()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>exec_stop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>exec_run()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>exec_setProgIndex(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[a9]"></a>exec_runProg(const unsigned char&, Chirp*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_setProgIndex(unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_run()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProgArg(const unsigned char&, const int&, Chirp*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProgDefault(Chirp*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProgName(const char*, Chirp*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>exec_getProgIndex(const char*, Chirp*)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = exec_getProgIndex(const char*, Chirp*) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProgName(const char*, Chirp*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>exec_runProgName(const char*, Chirp*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = exec_runProgName(const char*, Chirp*) &rArr; exec_getProgIndex(const char*, Chirp*) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>exec_runProgDefault(Chirp*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = exec_runProgDefault(Chirp*) &rArr; exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>exec_runProgArg(const unsigned char&, const int&, Chirp*)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exec_runProgArg(const unsigned char&, const int&, Chirp*) &rArr; exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>exec_getProg(const unsigned char&, Chirp*)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = exec_getProg(const unsigned char&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>exec_list()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = exec_list() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>exec_getHardwareVersion(unsigned short*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_version(Chirp*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>exec_version(Chirp*)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = exec_version(Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getHardwareVersion(unsigned short*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>exec_versionType(Chirp*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = exec_versionType(Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>exec_getAction(const unsigned short&, Chirp*)</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = exec_getAction(const unsigned short&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>exec_getUID()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>exec_getView(const unsigned short&, Chirp*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = exec_getView(const unsigned short&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>exec_setView(const unsigned short&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exec_setView(const unsigned short&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>exec_toggleLamp()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = exec_toggleLamp() &rArr; led_toggleLamp() &rArr; led_setLamp(const unsigned char&, const unsigned char&) &rArr; led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggleLamp()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLEDOverride(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>exec_printMC()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = exec_printMC() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exec.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>exec_runM0(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resumeM0()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::ProgVideo(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::ProgLine(unsigned char)
</UL>

<P><STRONG><a name="[1ab]"></a>exec_runningM0()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pauseM0()
</UL>

<P><STRONG><a name="[1ac]"></a>exec_stopM0()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runningM0()
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_pauseM0()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::~ProgVideo()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticExit()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::~ProgLine()
</UL>

<P><STRONG><a name="[1ad]"></a>exec_loadParams()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = exec_loadParams() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[1b2]"></a>exec_periodic()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = exec_periodic() &rArr; exec_loadParams() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_dirty()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[1b5]"></a>exec_select()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = exec_select() &rArr; selectProgram(unsigned char, unsigned char*) &rArr; flashLED(unsigned char, unsigned char) &rArr; led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[38a]"></a>exec_progIndex()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[1b6]"></a>exec_testMemory()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = exec_testMemory() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progSetup(unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progLoop(bool)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progExit()
</UL>

<P><STRONG><a name="[1b9]"></a>exec_progExit()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = exec_progExit() &rArr; exec_testMemory() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[1ba]"></a>exec_progLoop(bool)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = exec_progLoop(bool) &rArr; exec_testMemory() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[187]"></a>exec_sendEvent(Chirp*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = exec_sendEvent(Chirp*, unsigned) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::setSignature()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[1bb]"></a>exec_progSetup(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = exec_progSetup(unsigned char) &rArr; exec_testMemory() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[1bc]"></a>exec_mainLoop()</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = exec_mainLoop() &rArr; exec_periodic() &rArr; exec_loadParams() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::USBLink()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::hinformer()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setReady()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_update()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progSetup(unsigned char)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progLoop(bool)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progExit()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProg(const unsigned char&, Chirp*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_run()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::connected()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLEDOverride(bool)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>exec_changeProg(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exec_changeProg(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1c2]"></a>exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ser_sendError(signed char, bool) &rArr; ser_setTx(unsigned char, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_changeProg(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1c5]"></a>exec_progResolution(unsigned char, bool)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = exec_progResolution(unsigned char, bool) &rArr; ser_setTx(unsigned char, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[16a]"></a>exec_pauseM0()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = exec_pauseM0() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runningM0()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_signatureCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[16b]"></a>exec_resumeM0()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = exec_resumeM0() &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_signatureCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[1c8]"></a>I2c::slaveHandler()</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = I2c::slaveHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_rxCallback()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getByte(unsigned char*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>I2C0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = I2C0_IRQHandler &rArr; I2c::slaveHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[1cc]"></a>I2c::setSlaveAddr(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2c::setSlaveAddr(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetOwnSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1ce]"></a>I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned)) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::clear()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[452]"></a>I2c::I2c__sub_object(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>i2c_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_init(unsigned(*)(unsigned char*, unsigned)) &rArr; I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned)) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
</UL>

<P><STRONG><a name="[1d2]"></a>I2c::startSlave()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::update()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::open()
</UL>

<P><STRONG><a name="[cc]"></a>I2c::open()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2c::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::startSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[cd]"></a>I2c::close()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[ce]"></a>I2c::receive(unsigned char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2c::receive(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[cf]"></a>I2c::receiveLen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[d0]"></a>I2c::update()</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2c::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::startSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTV3I2c)
</UL>
<P><STRONG><a name="[204]"></a>I2c::setFlags(bool, bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[1d3]"></a>ProgBlobs::staticSetView(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgBlobs::staticSetView(unsigned short) &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::setView(unsigned short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
</UL>

<P><STRONG><a name="[1d5]"></a>ProgBlobs::resetButtonState()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProgBlobs::resetButtonState() &rArr; led_setMaxCurrent(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
</UL>

<P><STRONG><a name="[1d6]"></a>ProgBlobs::staticInit(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProgBlobs::staticInit(unsigned char) &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_open()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::resetButtonState()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticSetView(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgBlobs(unsigned char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::ProgPt(unsigned char)
</UL>

<P><STRONG><a name="[1d8]"></a>createProgBlobs(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = createProgBlobs(unsigned char) &rArr; ProgBlobs::staticInit(unsigned char) &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.text)
</UL>
<P><STRONG><a name="[1d9]"></a>ProgBlobs::staticExit()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ProgBlobs::staticExit() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_close()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::~ProgBlobs()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::~ProgPt()
</UL>

<P><STRONG><a name="[1da]"></a>ProgBlobs::handleRecv()</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ProgBlobs::handleRecv() &rArr; cam_setBrightness(const unsigned char&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLEDOverride(bool)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
</UL>

<P><STRONG><a name="[1db]"></a>ProgBlobs::handleButtonStatus(char*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::handleButtonStatus(char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>

<P><STRONG><a name="[1dc]"></a>ProgBlobs::setSignature()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>

<P><STRONG><a name="[1dd]"></a>ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned) &rArr; led_setMaxCurrent(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[1e1]"></a>ProgBlobs::ledPipe()</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::ledPipe() &rArr; __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>

<P><STRONG><a name="[1e3]"></a>ProgBlobs::handleButton(char*)</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::handleButton(char*) &rArr; ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED(unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED(unsigned char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getAWB()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::setSignature()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButtonStatus(char*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::resetButtonState()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
</UL>

<P><STRONG><a name="[1e5]"></a>ProgBlobs::staticLoop(char*)</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::staticLoop(char*) &rArr; ProgBlobs::handleButton(char*) &rArr; ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::flush()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sendDetectedPixels(bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::loop(char*)
</UL>

<P><STRONG><a name="[3dd]"></a>ProgBlobs::staticGetView(unsigned short, const char**)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, progblobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::getView(unsigned short, const char**)
</UL>

<P><STRONG><a name="[275]"></a>ProgBlobs::staticGetAction(unsigned short, const char**, const char**)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::getAction(unsigned short, const char**, const char**)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::getAction(unsigned short, const char**, const char**)
</UL>

<P><STRONG><a name="[1ea]"></a>ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool) &rArr; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1ec]"></a>ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool) &rArr; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1ed]"></a>ProgVideo::ProgVideo(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProgVideo::ProgVideo(unsigned char) &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgVideo(unsigned char)
</UL>

<P><STRONG><a name="[453]"></a>ProgVideo::ProgVideo__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, progvideo.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>createProgVideo(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = createProgVideo(unsigned char) &rArr; ProgVideo::ProgVideo(unsigned char) &rArr; exec_runM0(unsigned char) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::ProgVideo(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>getRGB(unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getRGB(unsigned short, unsigned short, unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interpolate(unsigned char*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[10d]"></a>ProgVideo::~ProgVideo()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ProgVideo::~ProgVideo() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::~ProgVideo__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
</UL>
<P><STRONG><a name="[454]"></a>ProgVideo::~ProgVideo__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, progvideo.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>ProgVideo::~ProgVideo__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProgVideo::~ProgVideo__deallocating() &rArr; ProgVideo::~ProgVideo() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::~ProgVideo()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
</UL>
<P><STRONG><a name="[1f1]"></a>ProgVideo::sendCustom(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProgVideo::sendCustom(unsigned char) &rArr; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::loop(char*)
</UL>

<P><STRONG><a name="[10f]"></a>ProgVideo::loop(char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = ProgVideo::loop(char*) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::sendCustom(unsigned char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
</UL>
<P><STRONG><a name="[110]"></a>ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; getRGB(unsigned short, unsigned short, unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendResult(int, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRGB(unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
</UL>
<P><STRONG><a name="[1d7]"></a>ser_getSerial()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_update()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
</UL>

<P><STRONG><a name="[1f4]"></a>lego_getData(unsigned char*, unsigned)</STRONG> (Thumb, 1220 bytes, Stack size 96 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lego_getData(unsigned char*, unsigned) &rArr; exec_getProg(const unsigned char&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProg(const unsigned char&, Chirp*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_setProgIndex(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short, unsigned short*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setNextTurnAngle(short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_reversePrimary()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_legoLineData(unsigned char*, unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setLamp(const unsigned char&, const unsigned char&)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRGB(unsigned short, unsigned short, unsigned char)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txCallback(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1c7]"></a>ser_setTx(unsigned char, unsigned char, bool)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ser_setTx(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progResolution(unsigned char, bool)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendResult(int, bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[1c6]"></a>ser_getTx(unsigned char**)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progResolution(unsigned char, bool)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendResult(int, bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[1f3]"></a>ser_sendResult(int, bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ser_sendResult(int, bool) &rArr; ser_setTx(unsigned char, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1c3]"></a>ser_sendError(signed char, bool)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ser_sendError(signed char, bool) &rArr; ser_setTx(unsigned char, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[1f9]"></a>ser_packet(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFPS()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progResolution(unsigned char, bool)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runProgName(const char*, Chirp*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLEDOverride(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setLamp(const unsigned char&, const unsigned char&)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendResult(int, bool)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_rxCallback()
</UL>

<P><STRONG><a name="[b8]"></a>ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>txCallback(unsigned char*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = txCallback(unsigned char*, unsigned) &rArr; Blobs::getBlock(unsigned char*, unsigned) &rArr; Blobs::reloadBlobs() &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlock(unsigned char*, unsigned)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[1ca]"></a>ser_getByte(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::startTransmit()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::irqHandler()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
</UL>

<P><STRONG><a name="[1c9]"></a>ser_rxCallback()</STRONG> (Thumb, 388 bytes, Stack size 96 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::irqHandler()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
</UL>

<P><STRONG><a name="[2ff]"></a>ser_newPacket()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
</UL>

<P><STRONG><a name="[1fd]"></a>ser_setInterface(unsigned char)</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ser_setInterface(unsigned char) &rArr; spi2_init() &rArr; Spi2::Spi2() &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::setDirection(bool)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::setAutoSlaveSelect(bool)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::setAutoSlaveSelect(bool)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_deinit()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_deinit()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setFlags(bool, bool)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
</UL>

<P><STRONG><a name="[1ae]"></a>ser_loadParams()</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = ser_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::setBaudrate(unsigned)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
</UL>

<P><STRONG><a name="[207]"></a>ser_init(Chirp*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = ser_init(Chirp*) &rArr; ser_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>ser_update()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ser_update() &rArr; cam_setBrightness(const unsigned char&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getSerial()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[1c0]"></a>ser_setReady()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[455]"></a>ser_getInterface()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>Spi::slaveHandler()</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Spi::slaveHandler() &rArr; TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned short&rang;::write(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>SSP1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SSP1_IRQHandler &rArr; Spi2::slaveHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[201]"></a>Spi::setAutoSlaveSelect(bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[20d]"></a>Spi::Spi(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Spi::Spi(unsigned(*)(unsigned char*, unsigned)) &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::setAutoSlaveSelect(bool)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[456]"></a>Spi::Spi__sub_object(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>spi_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_init(unsigned(*)(unsigned char*, unsigned)) &rArr; Spi::Spi(unsigned(*)(unsigned char*, unsigned)) &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[1fe]"></a>spi_deinit()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_deinit() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[213]"></a>Spi::checkIdle()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi::checkIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>

<P><STRONG><a name="[212]"></a>Spi::sync()</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi::sync() &rArr; Spi::checkIdle()
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::checkIdle()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::update()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::open()
</UL>

<P><STRONG><a name="[d2]"></a>Spi::open()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Spi::open() &rArr; Spi::sync() &rArr; Spi::checkIdle()
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[d3]"></a>Spi::close()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[d4]"></a>Spi::receive(unsigned char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi::receive(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[d5]"></a>Spi::receiveLen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[d6]"></a>Spi::update()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Spi::update() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTV3Spi)
</UL>
<P><STRONG><a name="[214]"></a>Uart::irqHandler()</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Uart::irqHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_rxCallback()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getByte(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UART0_IRQHandler &rArr; Uart::irqHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::irqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[215]"></a>Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned)) &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[457]"></a>Uart::Uart__sub_object(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>uart_init(unsigned(*)(unsigned char*, unsigned))</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uart_init(unsigned(*)(unsigned char*, unsigned)) &rArr; Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned)) &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
</UL>

<P><STRONG><a name="[dc]"></a>Uart::open()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart::open() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[dd]"></a>Uart::close()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart::close() &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[de]"></a>Uart::receive(unsigned char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart::receive(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[df]"></a>Uart::receiveLen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[e0]"></a>Uart::update()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[e1]"></a>Uart::startTransmit()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart::startTransmit()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getByte(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata__ZTV4Uart)
</UL>
<P><STRONG><a name="[206]"></a>Uart::setBaudrate(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Uart::setBaudrate(unsigned) &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
</UL>

<P><STRONG><a name="[21b]"></a>__default_signal_handler</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, main_m4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
</UL>

<P><STRONG><a name="[14e]"></a>main</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, main_m4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = main &rArr; exec_mainLoop() &rArr; exec_periodic() &rArr; exec_loadParams() &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getHardwareVersion(unsigned short*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_init(Chirp*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[221]"></a>CBlob::Reset()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::CBlob()
</UL>

<P><STRONG><a name="[222]"></a>CBlob::CBlob()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CBlob::CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[458]"></a>CBlob::CBlob__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>CBlob::~CBlob()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>

<P><STRONG><a name="[459]"></a>CBlob::~CBlob__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>CBlob::NewRow()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, blob.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
</UL>

<P><STRONG><a name="[225]"></a>CBlob::UpdateBoundingBox(int, int, int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Assimilate(CBlob&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
</UL>

<P><STRONG><a name="[224]"></a>CBlob::Add(const SSegment&)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CBlob::Add(const SSegment&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::UpdateBoundingBox(int, int, int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[226]"></a>CBlob::Assimilate(CBlob&)</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CBlob::Assimilate(CBlob&) &rArr; CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::UpdateBoundingBox(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[69]"></a>CBlobAssembler::CBlobAssembler()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blob.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[45a]"></a>CBlobAssembler::CBlobAssembler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>CBlobAssembler::Reset()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::~CBlobAssembler()
</UL>

<P><STRONG><a name="[229]"></a>CBlobAssembler::EndFrame()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CBlobAssembler::EndFrame()
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::NewRow()
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::~CBlobAssembler()
</UL>

<P><STRONG><a name="[6b]"></a>CBlobAssembler::~CBlobAssembler()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::~CBlobAssembler() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[45b]"></a>CBlobAssembler::~CBlobAssembler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>CBlobAssembler::BlobNewRow(CBlob**)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::NewRow()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::RewindCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AdvanceCurrent()
</UL>

<P><STRONG><a name="[22c]"></a>CBlobAssembler::AdvanceCurrent()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CBlobAssembler::AdvanceCurrent() &rArr; CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[22d]"></a>CBlobAssembler::RewindCurrent()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CBlobAssembler::RewindCurrent() &rArr; CBlobAssembler::BlobNewRow(CBlob**) &rArr; CBlob::~CBlob() &rArr; CBlob::Reset() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>

<P><STRONG><a name="[22e]"></a>CBlobAssembler::Add(const SSegment&)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = CBlobAssembler::Add(const SSegment&) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::RewindCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AdvanceCurrent()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Assimilate(CBlob&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::~CBlob()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::CBlob()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[45c]"></a>CBlobAssembler::ListLength(const CBlob*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blob.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>CBlobAssembler::SplitList(CBlob*, CBlob*&, CBlob*&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, blob.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
</UL>

<P><STRONG><a name="[231]"></a>CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
</UL>

<P><STRONG><a name="[22f]"></a>CBlobAssembler::SortFinished()</STRONG> (Thumb, 110 bytes, Stack size 44 bytes, blob.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CBlobAssembler::SortFinished() &rArr; CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SplitList(CBlob*, CBlob*&, CBlob*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
</UL>

<P><STRONG><a name="[232]"></a>CBlobAssembler::AssertFinishedSorted()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, blob.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[6d]"></a>compAreaBlobC(const void*, const void*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blobs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>compAreaBlobA(const void*, const void*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, blobs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>Blobs::setMaxBlobVelocity(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[174]"></a>Blobs::setBlobFiltering(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[17b]"></a>Blobs::Blobs(Qqueue*, unsigned char*)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = Blobs::Blobs(Qqueue*, unsigned char*) &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setMaxBlobVelocity(unsigned short)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::setBlobFiltering(unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[45d]"></a>Blobs::Blobs__sub_object(Qqueue*, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, blobs.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>Blobs::~Blobs()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, blobs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::~ColorLUT()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[45e]"></a>Blobs::~Blobs__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, blobs.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>Blobs::reset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Blobs::reset() &rArr; SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_close()
</UL>

<P><STRONG><a name="[23b]"></a>Blobs::compareBlobs(const BlobA&, const BlobA&)</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Blobs::compareBlobs(const BlobA&, const BlobA&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking2()
</UL>

<P><STRONG><a name="[23a]"></a>Blobs::handleBlobTracking2()</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Blobs::handleBlobTracking2() &rArr; Blobs::compareBlobs(const BlobA&, const BlobA&)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::compareBlobs(const BlobA&, const BlobA&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
</UL>

<P><STRONG><a name="[23c]"></a>Blobs::handleBlobTracking()</STRONG> (Thumb, 474 bytes, Stack size 88 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Blobs::handleBlobTracking() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::update()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::reset()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlobA::BlobA()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking2()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[256]"></a>Blobs::shift()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Blobs::shift()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[255]"></a>Blobs::compress(BlobA*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Blobs::compress(BlobA*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[240]"></a>Blobs::angle(BlobA*, BlobA*)</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Blobs::angle(BlobA*, BlobA*) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[24a]"></a>Blobs::cleanup2(BlobA**, short*)</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Blobs::cleanup2(BlobA**, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[243]"></a>Blobs::distance(BlobA*, BlobA*, bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
</UL>

<P><STRONG><a name="[242]"></a>Blobs::sort(BlobA**, unsigned short, BlobA*, bool)</STRONG> (Thumb, 122 bytes, Stack size 52 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[249]"></a>Blobs::cleanup(BlobA**, short*)</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Blobs::cleanup(BlobA**, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[248]"></a>Blobs::mergeClumps(unsigned short, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Blobs::mergeClumps(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[246]"></a>Blobs::distance(BlobA*, BlobA*)</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[244]"></a>Blobs::closeby(BlobA*, BlobA*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Blobs::closeby(BlobA*, BlobA*) &rArr; Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
</UL>

<P><STRONG><a name="[247]"></a>Blobs::processCC()</STRONG> (Thumb, 890 bytes, Stack size 104 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Blobs::processCC() &rArr; Blobs::cleanup(BlobA**, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::mergeClumps(unsigned short, unsigned short)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::cleanup(BlobA**, short*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::cleanup2(BlobA**, short*)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[254]"></a>Blobs::combine(BlobA*, unsigned short)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Blobs::combine(BlobA*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[24c]"></a>Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)</STRONG> (Thumb, 484 bytes, Stack size 44 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::combine2(BlobA*, unsigned short)
</UL>

<P><STRONG><a name="[24b]"></a>Blobs::combine2(BlobA*, unsigned short)</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Blobs::combine2(BlobA*, unsigned short) &rArr; Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[24d]"></a>Blobs::endFrame()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Blobs::endFrame() &rArr; CBlobAssembler::SortFinished() &rArr; CBlobAssembler::MergeLists(CBlob*&, CBlob*&, CBlob**&, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::SortFinished()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::EndFrame()
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[24e]"></a>Blobs::sendQvals()</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Blobs::sendQvals() &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::addQval(unsigned)
</UL>

<P><STRONG><a name="[24f]"></a>Blobs::addQval(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Blobs::addQval(unsigned) &rArr; Blobs::sendQvals() &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sendQvals()
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[250]"></a>Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short) &rArr; CBlobAssembler::Add(const SSegment&) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::addQval(unsigned)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[251]"></a>Blobs::runlengthAnalysis()</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Blobs::runlengthAnalysis() &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::dequeue(Qval*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::addQval(unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sendQvals()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::endFrame()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
</UL>

<P><STRONG><a name="[1e7]"></a>Blobs::blobify()</STRONG> (Thumb, 530 bytes, Stack size 56 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = Blobs::blobify() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getType(unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::combine2(BlobA*, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::combine(BlobA*, unsigned short)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::compress(BlobA*, unsigned short)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::shift()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::track()
</UL>

<P><STRONG><a name="[1e6]"></a>Blobs::sendDetectedPixels(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
</UL>

<P><STRONG><a name="[257]"></a>Blobs::reloadBlobs()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Blobs::reloadBlobs() &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::get()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlock(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1fc]"></a>Blobs::getBlock(unsigned char*, unsigned)</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Blobs::getBlock(unsigned char*, unsigned) &rArr; Blobs::reloadBlobs() &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::reloadBlobs()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txCallback(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[158]"></a>Blobs::getMaxBlob(unsigned short, unsigned short*)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::update()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::acquire()
</UL>

<P><STRONG><a name="[194]"></a>Blobs::convertBlob(BlobC*, const BlobA&)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1eb]"></a>Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, blobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::convertBlob(BlobC*, const BlobA&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::get()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[1e8]"></a>Blobs::getBlobs()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::track()
</UL>

<P><STRONG><a name="[16f]"></a>Blobs::setMaxBlobs(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[170]"></a>Blobs::setMaxBlobsPerModel(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[171]"></a>Blobs::setMinArea(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[178]"></a>Blobs::setColorCodeMode(ColorCodeMode)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>

<P><STRONG><a name="[172]"></a>Blobs::setMaxMergeDist(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blobs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[25a]"></a>Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)</STRONG> (Thumb, 142 bytes, Stack size 52 bytes, blobs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::distance(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[25b]"></a>IterPixel::reset(bool)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
</UL>

<P><STRONG><a name="[183]"></a>IterPixel::IterPixel(const Frame8&, const RectA&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame8::Frame8()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
</UL>

<P><STRONG><a name="[45f]"></a>IterPixel::IterPixel__sub_object(const Frame8&, const RectA&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Frame8::Frame8()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[460]"></a>IterPixel::IterPixel__sub_object(const Frame8&, const SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>IterPixel::nextHelper(UVPixel*, RGBPixel*)</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IterPixel::nextHelper(UVPixel*, RGBPixel*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
</UL>

<P><STRONG><a name="[25f]"></a>IterPixel::next(UVPixel*, RGBPixel*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::nextHelper(UVPixel*, RGBPixel*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::averageRgb(unsigned*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
</UL>

<P><STRONG><a name="[184]"></a>IterPixel::averageRgb(unsigned*)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IterPixel::averageRgb(unsigned*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[169]"></a>ColorLUT::setMinBrightness(float)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_signatureCallback(const char*, const float&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[261]"></a>ColorLUT::clearLUT(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ColorLUT::clearLUT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[233]"></a>ColorLUT::ColorLUT(unsigned char*)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ColorLUT::ColorLUT(unsigned char*) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setMinBrightness(float)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::clearLUT(unsigned char)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
</UL>

<P><STRONG><a name="[461]"></a>ColorLUT::ColorLUT__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>ColorLUT::~ColorLUT()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, colorlut.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
</UL>

<P><STRONG><a name="[462]"></a>ColorLUT::~ColorLUT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>ColorLUT::updateSignature(unsigned char)</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateLUT()
</UL>

<P><STRONG><a name="[263]"></a>ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
</UL>

<P><STRONG><a name="[264]"></a>ColorLUT::iterate(IterPixel*, ColorSignature*)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ColorLUT::iterate(IterPixel*, ColorSignature*) &rArr; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char) &rArr; ColorLUT::iterate(IterPixel*, ColorSignature*) &rArr; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*) &rArr; IterPixel::next(UVPixel*, RGBPixel*) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[269]"></a>ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[265]"></a>ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::next(UVPixel*, RGBPixel*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[267]"></a>ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[1e2]"></a>ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectA::RectA()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[18d]"></a>ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*, unsigned char) &rArr; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*) &rArr; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*) &rArr; IterPixel::IterPixel(const Frame8&, const RectA&) &rArr; IterPixel::reset(bool) &rArr; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::iterate(IterPixel*, ColorSignature*)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[182]"></a>ColorLUT::getSignature(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[164]"></a>ColorLUT::setSignature(unsigned char, const ColorSignature&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ColorLUT::setSignature(unsigned char, const ColorSignature&) &rArr; ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
</UL>

<P><STRONG><a name="[165]"></a>ColorLUT::generateLUT()</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, colorlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ColorLUT::generateLUT() &rArr; ColorLUT::updateSignature(unsigned char) &rArr; saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::clearLUT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_signatureCallback(const char*, const float&)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
</UL>

<P><STRONG><a name="[168]"></a>ColorLUT::setSigRange(unsigned char, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_signatureCallback(const char*, const float&)
</UL>

<P><STRONG><a name="[173]"></a>ColorLUT::setGrowDist(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
</UL>

<P><STRONG><a name="[463]"></a>ColorLUT::setCCGain(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, colorlut.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>ColorLUT::getType(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, colorlut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::processCC()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::closeby(BlobA*, BlobA*)
</UL>

<P><STRONG><a name="[17e]"></a>Qqueue::reset()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qqueue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::Qqueue()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_open()
</UL>

<P><STRONG><a name="[17a]"></a>Qqueue::Qqueue()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, qqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Qqueue::Qqueue()
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
</UL>

<P><STRONG><a name="[464]"></a>Qqueue::Qqueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>Qqueue::~Qqueue()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>Qqueue::~Qqueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>Qqueue::dequeue(Qval*)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, qqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Qqueue::dequeue(Qval*)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[467]"></a>Qqueue::readAll(Qval*, unsigned)</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, qqueue.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>Qqueue::flush()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, qqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_resumeM0()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
</UL>

<P><STRONG><a name="[26c]"></a>ServoLoop::setGains(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progpt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::getVals()
</UL>

<P><STRONG><a name="[26b]"></a>ProgPt::getVals()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProgPt::getVals() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::setGains(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::ProgPt(unsigned char)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::shadowCallback(const char*, const unsigned&)
</UL>

<P><STRONG><a name="[26d]"></a>ProgPt::shadowCallback(const char*, const unsigned&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProgPt::shadowCallback(const char*, const unsigned&) &rArr; ProgPt::getVals() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::getVals()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.text)
</UL>
<P><STRONG><a name="[26e]"></a>ProgPt::ProgPt(unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = ProgPt::ProgPt(unsigned char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::getVals()
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgPt(unsigned char)
</UL>

<P><STRONG><a name="[468]"></a>ProgPt::ProgPt__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, progpt.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>createProgPt(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = createProgPt(unsigned char) &rArr; ProgPt::ProgPt(unsigned char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::ProgPt(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.text)
</UL>
<P><STRONG><a name="[270]"></a>ServoLoop::reset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServoLoop::reset() &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[271]"></a>ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ServoLoop::ServoLoop(unsigned char, unsigned, unsigned) &rArr; ServoLoop::reset() &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_progpt_cpp_abf46733
</UL>

<P><STRONG><a name="[469]"></a>ServoLoop::ServoLoop__sub_object(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, progpt.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>ServoLoop::update(int)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ServoLoop::update(int) &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
</UL>

<P><STRONG><a name="[e6]"></a>ProgPt::~ProgPt()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ProgPt::~ProgPt() &rArr; ProgBlobs::staticExit() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticExit()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::~ProgPt__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[46a]"></a>ProgPt::~ProgPt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, progpt.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>ProgPt::~ProgPt__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ProgPt::~ProgPt__deallocating() &rArr; ProgPt::~ProgPt() &rArr; ProgBlobs::staticExit() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::~ProgPt()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[273]"></a>ProgPt::acquire()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProgPt::acquire() &rArr; Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::track()
</UL>

<P><STRONG><a name="[274]"></a>ProgPt::track()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ProgPt::track() &rArr; Blobs::blobify() &rArr; CBlobAssembler::Reset() &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::blobify()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::acquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::loop(char*)
</UL>

<P><STRONG><a name="[e8]"></a>ProgPt::loop(char*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = ProgPt::loop(char*) &rArr; ProgBlobs::handleButton(char*) &rArr; ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::track()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::update(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[eb]"></a>ProgPt::getAction(unsigned short, const char**, const char**)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgPt::getAction(unsigned short, const char**, const char**) &rArr; ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[ed]"></a>ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ProgPt::packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool) &rArr; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[fd]"></a>ProgLine::setView(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progline.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setRenderMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::ProgLine(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[277]"></a>ProgLine::ProgLine(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = ProgLine::ProgLine(unsigned char) &rArr; line_open(signed char) &rArr; line_loadParams(signed char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::setView(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgLine(unsigned char)
</UL>

<P><STRONG><a name="[46b]"></a>ProgLine::ProgLine__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, progline.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>createProgLine(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = createProgLine(unsigned char) &rArr; ProgLine::ProgLine(unsigned char) &rArr; line_open(signed char) &rArr; line_loadParams(signed char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::ProgLine(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>ProgLine::~ProgLine()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ProgLine::~ProgLine() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::~ProgLine__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[46c]"></a>ProgLine::~ProgLine__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, progline.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>ProgLine::~ProgLine__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProgLine::~ProgLine__deallocating() &rArr; ProgLine::~ProgLine() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::~ProgLine()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[fb]"></a>ProgLine::loop(char*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ProgLine::loop(char*) &rArr; line_process() &rArr; line_processMain() &rArr; formIntersections() &rArr; breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_process()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[fc]"></a>ProgLine::getView(unsigned short, const char**)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgLine::getView(unsigned short, const char**)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getRenderMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[27d]"></a>ProgLine::sendLineData(unsigned char, unsigned char, bool)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ProgLine::sendLineData(unsigned char, unsigned char, bool) &rArr; line_getAllFrame(unsigned char, unsigned char*, unsigned short) &rArr; formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setTx(unsigned char, unsigned char, bool)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getTx(unsigned char**)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getPrimaryFrame(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getAllFrame(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[100]"></a>ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgLine::sendLineData(unsigned char, unsigned char, bool) &rArr; line_getAllFrame(unsigned char, unsigned char*, unsigned short) &rArr; formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendError(signed char, bool)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setNextTurnAngle(short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_reversePrimary()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_sendResult(int, bool)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setDefaultTurnAngle(short)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setVector(unsigned char)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_setMode(signed char)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[ff]"></a>ProgLine::getResolution(unsigned short*, unsigned short*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, progline.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[29e]"></a>tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareLines(const Line2&, const Line2&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minAngleLines(const Line2&, const Line2&, const Point&, unsigned)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>

<P><STRONG><a name="[46d]"></a>tanAbs1000(const Point&, const Point&)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, line.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>xdirection(const Point&, const Point&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intersectionTurn()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryPoint(const Line2&)
</UL>

<P><STRONG><a name="[283]"></a>line_shadowCallback(const char*, const void*)</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = line_shadowCallback(const char*, const void*) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>line_loadParams(signed char)</STRONG> (Thumb, 1494 bytes, Stack size 240 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = line_loadParams(signed char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
</UL>

<P><STRONG><a name="[220]"></a>line_init(Chirp*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = line_init(Chirp*) &rArr; Chirp::getProc(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27a]"></a>line_close()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = line_close() &rArr; SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::~Equeue()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::clear()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::clear()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::clear()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::clear()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::~ProgLine()
</UL>

<P><STRONG><a name="[278]"></a>line_open(signed char)</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = line_open(signed char) &rArr; line_loadParams(signed char) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::Equeue()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::clear()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::clear()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::clear()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::clear()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::ProgLine(unsigned char)
</UL>

<P><STRONG><a name="[28f]"></a>line_getEdges()</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, line.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>

<P><STRONG><a name="[290]"></a>line_hLine(unsigned char, unsigned short*, unsigned)</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = line_hLine(unsigned char, unsigned short*, unsigned) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[291]"></a>line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned)</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[292]"></a>line_sendLineGrid(unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = line_sendLineGrid(unsigned char) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[298]"></a>lineSegError(Point*, unsigned char, unsigned char*)</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lineSegError(Point*, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishGridNode(Point*, unsigned char, short, Point&)
</UL>

<P><STRONG><a name="[299]"></a>cleanGrid(Point*, unsigned char)</STRONG> (Thumb, 394 bytes, Stack size 20 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cleanGrid(Point*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishGridNode(Point*, unsigned char, short, Point&)
</UL>

<P><STRONG><a name="[293]"></a>addline(const Point&, const Point&)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = addline(const Point&, const Point&) &rArr; SimpleList&lang;Point&rang;::add(const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::add(const Point&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::add(const Line2&)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::Line2()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishGridNode(Point*, unsigned char, short, Point&)
</UL>

<P><STRONG><a name="[297]"></a>finishGridNode(Point*, unsigned char, short, Point&)</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = finishGridNode(Point*, unsigned char, short, Point&) &rArr; addline(const Point&, const Point&) &rArr; SimpleList&lang;Point&rang;::add(const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addline(const Point&, const Point&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanGrid(Point*, unsigned char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineSegError(Point*, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>

<P><STRONG><a name="[29b]"></a>ydirUp(Point&, unsigned short&, unsigned char&, Point*)</STRONG> (Thumb, 244 bytes, Stack size 28 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ydirUp(Point&, unsigned short&, unsigned char&, Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>

<P><STRONG><a name="[29c]"></a>xdirLeft(Point&, unsigned short&, unsigned char&, Point*)</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xdirLeft(Point&, unsigned short&, unsigned char&, Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>

<P><STRONG><a name="[29d]"></a>xdirRight(Point&, unsigned short&, unsigned char&, Point*)</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xdirRight(Point&, unsigned short&, unsigned char&, Point*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>

<P><STRONG><a name="[29a]"></a>extractLineSegments(const Point&)</STRONG> (Thumb, 464 bytes, Stack size 112 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = extractLineSegments(const Point&) &rArr; finishGridNode(Point*, unsigned char, short, Point&) &rArr; addline(const Point&, const Point&) &rArr; SimpleList&lang;Point&rang;::add(const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdirRight(Point&, unsigned short&, unsigned char&, Point*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdirLeft(Point&, unsigned short&, unsigned char&, Point*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ydirUp(Point&, unsigned short&, unsigned char&, Point*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishGridNode(Point*, unsigned char, short, Point&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addline(const Point&, const Point&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanGrid(Point*, unsigned char)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments()
</UL>

<P><STRONG><a name="[29f]"></a>extractLineSegments()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = extractLineSegments() &rArr; extractLineSegments(const Point&) &rArr; finishGridNode(Point*, unsigned char, short, Point&) &rArr; addline(const Point&, const Point&) &rArr; SimpleList&lang;Point&rang;::add(const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments(const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2a0]"></a>addNadir(const Point&, const Point&)</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = addNadir(const Point&, const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::dist2(const Point&) const
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::avg(const Point&)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNadirs()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search(const Point&, unsigned char)
</UL>

<P><STRONG><a name="[2a3]"></a>search(const Point&, unsigned char)</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = search(const Point&, unsigned char) &rArr; addNadir(const Point&, const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNadirs()
</UL>

<P><STRONG><a name="[2a4]"></a>findNadirs()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = findNadirs() &rArr; search(const Point&, unsigned char) &rArr; addNadir(const Point&, const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::dist2(const Point&) const
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search(const Point&, unsigned char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2a5]"></a>reduceNadirs()</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = reduceNadirs() &rArr; Nadir::merge(const Nadir&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::dist2(const Point&) const
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nadir::merge(const Nadir&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2a7]"></a>addLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, const Point&, SimpleListNode&lang;Line2&rang;*)</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = addLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, const Point&, SimpleListNode&lang;Line2&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2ab]"></a>validLine(SimpleListNode&lang;Line2&rang;*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2aa]"></a>validIntersection(SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2a9]"></a>checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validIntersection(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validLine(SimpleListNode&lang;Line2&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyIntersections()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeShortLinesIntersections()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2ac]"></a>breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::add(const Line2&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::Line2()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intersection::addLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*, unsigned char)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, const Point&, SimpleListNode&lang;Line2&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
</UL>

<P><STRONG><a name="[2af]"></a>removeLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = removeLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*)
</UL>

<P><STRONG><a name="[2ae]"></a>removeLine(SimpleListNode&lang;Line2&rang;*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = removeLine(SimpleListNode&lang;Line2&rang;*) &rArr; SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyIntersections()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeShortLinesIntersections()
</UL>

<P><STRONG><a name="[2b1]"></a>replaceLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Line2&rang;*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = replaceLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Line2&rang;*) &rArr; SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyIntersections()
</UL>

<P><STRONG><a name="[2b2]"></a>formIntersections()</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = formIntersections() &rArr; breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intersection::addLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*, unsigned char)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2b3]"></a>removeShortLinesIntersections()</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = removeShortLinesIntersections() &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::length2() const
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanIntersections()
</UL>

<P><STRONG><a name="[2b5]"></a>equivalentLines(const Line2&, const Line2&)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = equivalentLines(const Line2&, const Line2&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
</UL>

<P><STRONG><a name="[2b6]"></a>minAngleLines(const Line2&, const Line2&, const Point&, unsigned)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = minAngleLines(const Line2&, const Line2&, const Point&, unsigned) &rArr; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
</UL>

<P><STRONG><a name="[2b7]"></a>removeRedundantLinesIntersections()</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = removeRedundantLinesIntersections() &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::length2() const
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minAngleLines(const Line2&, const Line2&, const Point&, unsigned)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equivalentLines(const Line2&, const Line2&)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanIntersections()
</UL>

<P><STRONG><a name="[2b8]"></a>simplifyIntersections()</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = simplifyIntersections() &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::remove(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaceLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanIntersections()
</UL>

<P><STRONG><a name="[2ba]"></a>cleanIntersections()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = cleanIntersections() &rArr; removeShortLinesIntersections() &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyIntersections()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeShortLinesIntersections()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2bb]"></a>removeMinLines(unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = removeMinLines(unsigned short) &rArr; SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::length2() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2bc]"></a>sendLineSegments(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sendLineSegments(unsigned char) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2bd]"></a>sendPoints(const SimpleList&lang;Point&rang;&, unsigned char, const char*)</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sendPoints(const SimpleList&lang;Point&rang;&, unsigned char, const char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2be]"></a>sendNadirs(const SimpleList&lang;Nadir&rang;&, unsigned char, const char*)</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendNadirs(const SimpleList&lang;Nadir&rang;&, unsigned char, const char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2bf]"></a>sendLines(const SimpleList&lang;Line2&rang;&, unsigned char, const char*)</STRONG> (Thumb, 214 bytes, Stack size 104 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sendLines(const SimpleList&lang;Line2&rang;&, unsigned char, const char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2c0]"></a>sendTrackedLines(const SimpleList&lang;Tracker&lang;Line2&rang;&rang;&, unsigned char, const char*)</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sendTrackedLines(const SimpleList&lang;Tracker&lang;Line2&rang;&rang;&, unsigned char, const char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2c2]"></a>sendIntersections(const SimpleList&lang;Intersection&rang;&, unsigned char, const char*)</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sendIntersections(const SimpleList&lang;Intersection&rang;&, unsigned char, const char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2c4]"></a>findTrackedLine(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrimaryVector(unsigned char)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intersectionTurn()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPrimaryFeatures(unsigned char)
</UL>

<P><STRONG><a name="[2c3]"></a>sendPrimaryFeatures(unsigned char)</STRONG> (Thumb, 254 bytes, Stack size 112 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = sendPrimaryFeatures(unsigned char) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTrackedLine(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2c7]"></a>voteCodes(BarCodeCluster*)</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = voteCodes(BarCodeCluster*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clusterCodes()
</UL>

<P><STRONG><a name="[2c6]"></a>dist2_4(const Point16&, const Point16&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clusterCodes()
</UL>

<P><STRONG><a name="[2c5]"></a>clusterCodes()</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clusterCodes() &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dist2_4(const Point16&, const Point16&)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voteCodes(BarCodeCluster*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2ca]"></a>decodeCode(BarCode*, unsigned short)</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decodeCode(BarCode*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCode(BarCode*)
</UL>

<P><STRONG><a name="[2c8]"></a>comp8(const void*, const void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[2c9]"></a>decodeCode(BarCode*)</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = decodeCode(BarCode*) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCode(BarCode*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[2cd]"></a>detectCode(unsigned short*, unsigned short, bool, BarCode*)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detectCode(unsigned short*, unsigned short, bool, BarCode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[2cb]"></a>detectCodes(unsigned char, unsigned short*, unsigned)</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = detectCodes(unsigned char, unsigned short*, unsigned) &rArr; decodeCode(BarCode*) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode::BarCode()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCode(unsigned short*, unsigned short, bool, BarCode*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCode(BarCode*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2ce]"></a>sendCodes(unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sendCodes(unsigned char) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2cf]"></a>sendTrackedCodes(unsigned char)</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sendTrackedCodes(unsigned char) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2d2]"></a>clearGrid(RectB)</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = clearGrid(RectB)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid()
</UL>

<P><STRONG><a name="[2d0]"></a>clearGrid()</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clearGrid() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid(RectB)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2d3]"></a>compareLines(const Line2&, const Line2&)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = compareLines(const Line2&, const Line2&) &rArr; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::dist2(const Point&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking2()
</UL>

<P><STRONG><a name="[2d4]"></a>handleLineTracking2()</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handleLineTracking2() &rArr; compareLines(const Line2&, const Line2&) &rArr; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareLines(const Line2&, const Line2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
</UL>

<P><STRONG><a name="[2d5]"></a>handleLineTracking()</STRONG> (Thumb, 382 bytes, Stack size 96 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = handleLineTracking() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::update()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::reset()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::Line2()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking2()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2d9]"></a>compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking2()
</UL>

<P><STRONG><a name="[2d8]"></a>handleBarCodeTracking2()</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handleBarCodeTracking2() &rArr; compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
</UL>

<P><STRONG><a name="[2da]"></a>handleBarCodeTracking()</STRONG> (Thumb, 530 bytes, Stack size 88 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = handleBarCodeTracking() &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;DecodedBarCode&rang;::update()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;DecodedBarCode&rang;::reset()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodedBarCode::DecodedBarCode()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking2()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2ed]"></a>findLine(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_legoLineData(unsigned char*, unsigned)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
</UL>

<P><STRONG><a name="[2de]"></a>trackedLinesWithPoint(const Point&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, line.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
</UL>

<P><STRONG><a name="[2e6]"></a>compareIntersections(const Intersection&, const FrameIntersection&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2df]"></a>getAngle(const Line2&, const Point&)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getAngle(const Line2&, const Point&) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatIntersection(const Intersection&, FrameIntersection*, bool)
</UL>

<P><STRONG><a name="[2e1]"></a>compareAngle(const void*, const void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[2e0]"></a>formatIntersection(const Intersection&, FrameIntersection*, bool)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAngle(const Line2&, const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getAllFrame(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[2e2]"></a>updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*) &rArr; formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;FrameIntersection&rang;::update()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatIntersection(const Intersection&, FrameIntersection*, bool)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareIntersections(const Intersection&, const FrameIntersection&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
</UL>

<P><STRONG><a name="[2e8]"></a>updatePrimaryPoint(const Line2&)</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = updatePrimaryPoint(const Line2&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::get()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdirection(const Point&, const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrimaryVector(unsigned char)
</UL>

<P><STRONG><a name="[2ea]"></a>intersectionTurn()</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intersectionTurn()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTrackedLine(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdirection(const Point&, const Point&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
</UL>

<P><STRONG><a name="[2eb]"></a>setPrimaryVector(unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setPrimaryVector(unsigned char) &rArr; updatePrimaryPoint(const Line2&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryPoint(const Line2&)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTrackedLine(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
</UL>

<P><STRONG><a name="[2ec]"></a>handleLineState()</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = handleLineState() &rArr; updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*) &rArr; formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::get()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::equals(const Point&) const
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::length2() const
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrimaryVector(unsigned char)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intersectionTurn()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryPoint(const Line2&)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findLine(unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTrackedLine(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2ee]"></a>line_processMain()</STRONG> (Thumb, 1496 bytes, Stack size 256 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = line_processMain() &rArr; formIntersections() &rArr; breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::readLine(unsigned short*, unsigned, bool*, bool*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::flush()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;unsigned&rang;::clear()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;unsigned&rang;::add(const unsigned&)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::clear()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::clear()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::clear()
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::clear()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTrackedCodes(unsigned char)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCodes(unsigned char)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clusterCodes()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPrimaryFeatures(unsigned char)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIntersections(const SimpleList&lang;Intersection&rang;&, unsigned char, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTrackedLines(const SimpleList&lang;Tracker&lang;Line2&rang;&rang;&, unsigned char, const char*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLines(const SimpleList&lang;Line2&rang;&, unsigned char, const char*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNadirs(const SimpleList&lang;Nadir&rang;&, unsigned char, const char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPoints(const SimpleList&lang;Point&rang;&, unsigned char, const char*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLineSegments(unsigned char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMinLines(unsigned short)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanIntersections()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceNadirs()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNadirs()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractLineSegments()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_sendLineGrid(unsigned char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_hLine(unsigned char, unsigned short*, unsigned)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_process()
</UL>

<P><STRONG><a name="[27b]"></a>line_process()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = line_process() &rArr; line_processMain() &rArr; formIntersections() &rArr; breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*) &rArr; cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::loop(char*)
</UL>

<P><STRONG><a name="[276]"></a>line_setRenderMode(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::setView(unsigned short)
</UL>

<P><STRONG><a name="[27c]"></a>line_getRenderMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::getView(unsigned short, const char**)
</UL>

<P><STRONG><a name="[27f]"></a>line_getPrimaryFrame(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = line_getPrimaryFrame(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[27e]"></a>line_getAllFrame(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = line_getAllFrame(unsigned char, unsigned char*, unsigned short) &rArr; formatIntersection(const Intersection&, FrameIntersection*, bool) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatIntersection(const Intersection&, FrameIntersection*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::sendLineData(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[280]"></a>line_setMode(signed char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1f6]"></a>line_setNextTurnAngle(short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[281]"></a>line_setDefaultTurnAngle(short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[282]"></a>line_setVector(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1f7]"></a>line_reversePrimary()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[1f8]"></a>line_legoLineData(unsigned char*, unsigned)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = line_legoLineData(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findLine(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2f5]"></a>Equeue::reset()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, equeue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::Equeue()
</UL>

<P><STRONG><a name="[28b]"></a>Equeue::Equeue()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, equeue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Equeue::Equeue()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equeue::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
</UL>

<P><STRONG><a name="[46e]"></a>Equeue::Equeue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, equeue.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>Equeue::~Equeue()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, equeue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
</UL>

<P><STRONG><a name="[46f]"></a>Equeue::~Equeue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, equeue.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>Equeue::dequeue(unsigned short*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, equeue.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>Equeue::readLine(unsigned short*, unsigned, bool*, bool*)</STRONG> (Thumb, 190 bytes, Stack size 36 bytes, equeue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Equeue::readLine(unsigned short*, unsigned, bool*, bool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2f2]"></a>Equeue::flush()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, equeue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[203]"></a>Spi2::setAutoSlaveSelect(bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[2f6]"></a>Spi2::Spi2()</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Spi2::Spi2() &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::setAutoSlaveSelect(bool)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::clear()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init()
</UL>

<P><STRONG><a name="[471]"></a>Spi2::Spi2__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, spi2.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>spi2_init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi2_init() &rArr; Spi2::Spi2() &rArr; SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[1ff]"></a>spi2_deinit()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi2_deinit() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
</UL>

<P><STRONG><a name="[2f7]"></a>Spi2::timerHandler()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi2::timerHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler &rArr; Spi2::timerHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::timerHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[d7]"></a>Spi2::open()</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Spi2::open() &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveQ&lang;unsigned char&rang;::clear()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[d8]"></a>Spi2::close()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Spi2::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[d9]"></a>Spi2::receive(unsigned char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi2::receive(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[da]"></a>Spi2::receiveLen()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[20c]"></a>Spi2::slaveHandler()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Spi2::slaveHandler() &rArr; ser_rxCallback() &rArr; ser_packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_newPacket()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_rxCallback()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_getByte(unsigned char*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__new_nothrow(unsigned)
</UL>

<P><STRONG><a name="[196]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[303]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[472]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
</UL>

<P><STRONG><a name="[302]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[304]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>

<P><STRONG><a name="[162]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButtonStatus(char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[306]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[126]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[30c]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[19f]"></a>qsort</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_line_cpp_5416574d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_param_cpp_55d340e8
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::AssertFinishedSorted()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
</UL>

<P><STRONG><a name="[473]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[190]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a3]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
</UL>

<P><STRONG><a name="[1a5]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[19d]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getPrimaryFrame(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;FrameIntersection&rang;::update()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
</UL>

<P><STRONG><a name="[313]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[474]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::setSignature(unsigned char, const ColorSignature&)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::update()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::add(const Line2&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[475]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qqueue::reset()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[315]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[314]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::SMLink()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
</UL>

<P><STRONG><a name="[478]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1fa]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[16d]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compProgNames(const void*, const void*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_shadowCallback(const char*, const void*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[47a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
</UL>

<P><STRONG><a name="[300]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[3de]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[310]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[47b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[318]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[140]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[31a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[31d]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[307]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[308]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[309]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[30a]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[30b]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[11e]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[47d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[305]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[75]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[327]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[136]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[138]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[328]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[12e]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[32a]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[132]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[32b]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[12c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[134]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[120]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[312]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[148]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[311]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[80]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[32d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[153]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[47e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[31c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[480]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[323]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[326]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[32f]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[13a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[13c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[31f]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[329]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[32c]"></a>__rt_SIGABRT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_abrt_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[319]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_rtmem_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[32e]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[332]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[482]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[330]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[331]"></a>__rt_raise</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[333]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[14f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3e0]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[3e1]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[334]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[485]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>__raise</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, __raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>

<P><STRONG><a name="[320]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33a]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[339]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[33b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[33c]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[321]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[322]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[33d]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[3f6]"></a>ADC_ChannelCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_ChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[3f9]"></a>ADC_ChannelGetData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_ChannelGetData))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[3f8]"></a>ADC_ChannelGetStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_ChannelGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[33e]"></a>ADC_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc43xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Init &rArr; CGU_GetPCLKFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
</UL>

<P><STRONG><a name="[3a7]"></a>ADC_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc43xx_adc.o(i.ADC_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
</UL>

<P><STRONG><a name="[3f7]"></a>ADC_StartCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_adc.o(i.ADC_StartCmd))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>

<P><STRONG><a name="[340]"></a>CGU_EnableEntity</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, lpc43xx_cgu.o(i.CGU_EnableEntity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CGU_EnableEntity &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[341]"></a>CGU_EntityConnect</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lpc43xx_cgu.o(i.CGU_EntityConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[33f]"></a>CGU_GetPCLKFrequency</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, lpc43xx_cgu.o(i.CGU_GetPCLKFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
</UL>

<P><STRONG><a name="[3fd]"></a>CGU_SetDIV</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetDIV))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[366]"></a>CGU_SetPLL0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetPLL0))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[3fc]"></a>CGU_SetPLL1</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, lpc43xx_cgu.o(i.CGU_SetPLL1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGU_SetPLL1
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[3fb]"></a>CGU_SetXTALOSC</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc43xx_cgu.o(i.CGU_SetXTALOSC))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[3fe]"></a>CGU_UpdateClock</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc43xx_cgu.o(i.CGU_UpdateClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CGU_UpdateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[350]"></a>EPAdr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhw.o(i.EPAdr))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>

<P><STRONG><a name="[1d0]"></a>I2C_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lpc43xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Init &rArr; CGU_EntityConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[1cd]"></a>I2C_SetOwnSlaveAddr</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpc43xx_i2c.o(i.I2C_SetOwnSlaveAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::setSlaveAddr(unsigned char)
</UL>

<P><STRONG><a name="[342]"></a>IPC_downloadSlaveImage</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ipc_mbx.o(i.IPC_downloadSlaveImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPC_downloadSlaveImage &rArr; IPC_haltSlave
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_haltSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[343]"></a>IPC_haltSlave</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ipc_mbx.o(i.IPC_haltSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPC_haltSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_downloadSlaveImage
</UL>

<P><STRONG><a name="[344]"></a>IPC_queryLocalMbx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipc_mbx.o(i.IPC_queryLocalMbx))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0CORE_IRQHandler
</UL>

<P><STRONG><a name="[3b5]"></a>IPC_startSlave</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ipc_mbx.o(i.IPC_startSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPC_startSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[36]"></a>M0CORE_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ipc_mbx.o(i.M0CORE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M0CORE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbxProcess
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_queryLocalMbx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[210]"></a>SSP_ClearIntPending</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[20f]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[20e]"></a>SSP_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lpc43xx_ssp.o(i.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSP_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[211]"></a>SSP_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_ssp.o(i.SSP_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[346]"></a>SystemInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_lpc43xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPC (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[42]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platform_config.o(i.TIMER1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2f8]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.TIM_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::timerHandler()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_ConfigMatch</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, lpc43xx_timer.o(i.TIM_ConfigMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[2fa]"></a>TIM_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lpc43xx_timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[2fe]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.TIM_ResetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::slaveHandler()
</UL>

<P><STRONG><a name="[34a]"></a>UARTPutChar</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>

<P><STRONG><a name="[34c]"></a>UARTPuts</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>

<P><STRONG><a name="[401]"></a>UART_ConfigStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[217]"></a>UART_FIFOConfig</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_FIFOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[216]"></a>UART_Init</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, lpc43xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_setBaudRate
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[219]"></a>UART_IntConfig</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lpc43xx_uart.o(i.UART_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
</UL>

<P><STRONG><a name="[34b]"></a>UART_Send</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, lpc43xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>

<P><STRONG><a name="[34d]"></a>UART_SendByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[218]"></a>UART_TxCmd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lpc43xx_uart.o(i.UART_TxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
</UL>

<P><STRONG><a name="[21a]"></a>UART_setBaudRate</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, lpc43xx_uart.o(i.UART_setBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::setBaudrate(unsigned)
</UL>

<P><STRONG><a name="[3d]"></a>USB0_IRQHandler</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, usbhw.o(i.USB0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB0_IRQHandler &rArr; USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[362]"></a>USB_ClrStallEP</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbhw.o(i.USB_ClrStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[34f]"></a>USB_ConfigEP</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, usbhw.o(i.USB_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[36f]"></a>USB_Configure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[35d]"></a>USB_Configure_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(i.USB_Configure_Event))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[375]"></a>USB_Connect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhw.o(i.USB_Connect))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
</UL>

<P><STRONG><a name="[351]"></a>USB_DataInStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[353]"></a>USB_DataOutStage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbcore.o(i.USB_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[356]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_DirCtrlEP))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[36e]"></a>USB_DisableEP</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbhw.o(i.USB_DisableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[370]"></a>USB_EnableEP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbhw.o(i.USB_EnableEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[7a]"></a>USB_EndPoint0</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, usbcore.o(i.USB_EndPoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_EndPoint0 &rArr; USB_ReqSetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetStatus
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetDescriptor
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[7b]"></a>USB_EndPoint1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(i.USB_EndPoint1))
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[7c]"></a>USB_EndPoint2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbuser.o(i.USB_EndPoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_EndPoint2 &rArr; sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[365]"></a>USB_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usbhw.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_Init &rArr; USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL0
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
</UL>

<P><STRONG><a name="[367]"></a>USB_ProgDTD</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbhw.o(i.USB_ProgDTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>

<P><STRONG><a name="[354]"></a>USB_ReadEP</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, usbhw.o(i.USB_ReadEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
</UL>

<P><STRONG><a name="[35f]"></a>USB_ReadReqEP</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbhw.o(i.USB_ReadReqEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>

<P><STRONG><a name="[368]"></a>USB_ReadSetupPkt</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, usbhw.o(i.USB_ReadSetupPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
</UL>

<P><STRONG><a name="[369]"></a>USB_Recv</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbuser.o(i.USB_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_Recv &rArr; recvChunk &rArr; USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[36a]"></a>USB_RecvReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbuser.o(i.USB_RecvReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_RecvReset &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[35a]"></a>USB_ReqGetDescriptor</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, usbcore.o(i.USB_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[357]"></a>USB_ReqGetStatus</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbcore.o(i.USB_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[358]"></a>USB_ReqSetClrFeature</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usbcore.o(i.USB_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReqSetClrFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTestMode
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[35c]"></a>USB_ReqSetConfiguration</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, usbcore.o(i.USB_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ReqSetConfiguration &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[35e]"></a>USB_ReqSetInterface</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, usbcore.o(i.USB_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_ReqSetInterface &rArr; USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[34e]"></a>USB_Reset</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbhw.o(i.USB_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_IRQHandler
</UL>

<P><STRONG><a name="[371]"></a>USB_ResetCore</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbcore.o(i.USB_ResetCore))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[36b]"></a>USB_ResetEP</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbhw.o(i.USB_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendReset
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvReset
</UL>

<P><STRONG><a name="[79]"></a>USB_Reset_Event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbuser.o(i.USB_Reset_Event))
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(i.USB_UserInit)
</UL>
<P><STRONG><a name="[372]"></a>USB_Send</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbuser.o(i.USB_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_Send &rArr; sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[373]"></a>USB_SendReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbuser.o(i.USB_SendReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SendReset &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[361]"></a>USB_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[35b]"></a>USB_SetStallEP</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[36d]"></a>USB_SetTestMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbhw.o(i.USB_SetTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[355]"></a>USB_SetupStage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbcore.o(i.USB_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetupStage &rArr; USB_ReadSetupPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadSetupPkt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[359]"></a>USB_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbcore.o(i.USB_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[360]"></a>USB_StatusOutStage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbcore.o(i.USB_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[374]"></a>USB_UserInit</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, usbuser.o(i.USB_UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_UserInit &rArr; USB_Init &rArr; USB_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[36c]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(i.USB_WakeUpCfg))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[352]"></a>USB_WriteEP</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbhw.o(i.USB_WriteEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ProgDTD
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendChunk
</UL>

<P><STRONG><a name="[376]"></a>USB_handleState</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbuser.o(i.USB_handleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::receive(unsigned char*, unsigned, unsigned short)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::send(const unsigned char*, unsigned, unsigned short)
</UL>

<P><STRONG><a name="[3b3]"></a>CameraInit()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pixy_init.o(i._Z10CameraInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CameraInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1b]"></a>cam_getAEC()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z10cam_getAECv))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>cam_getAWB()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z10cam_getAWBv))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>cam_getECV()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, camera.o(i._Z10cam_getECVv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cam_getECV() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read32(unsigned short)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>cam_getFPS()</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, camera.o(i._Z10cam_getFPSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cam_getFPS()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFramePeriod()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
</UL>

<P><STRONG><a name="[19]"></a>cam_getWBV()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, camera.o(i._Z10cam_getWBVv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cam_getWBV() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>cam_setAEC(const unsigned char&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, camera.o(i._Z10cam_setAECRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setAEC(const unsigned char&) &rArr; CSccb::Write8(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[16]"></a>cam_setAWB(const unsigned char&)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, camera.o(i._Z10cam_setAWBRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setAWB(const unsigned char&) &rArr; CSccb::Write8(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>cam_setECV(const unsigned&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, camera.o(i._Z10cam_setECVRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cam_setECV(const unsigned&) &rArr; CSccb::Write32(unsigned short, unsigned) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write32(unsigned short, unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>cam_setWBV(const unsigned&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, camera.o(i._Z10cam_setWBVRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setWBV(const unsigned&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[37c]"></a>commonInit()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pixy_init.o(i._Z10commonInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = commonInit() &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init_clk
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UserInit
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[381]"></a>flash_init()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, flash.o(i._Z10flash_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = flash_init() &rArr; spifiInitDevice &rArr; spifiPrvPartDetect &rArr; spifiPrvDevDetect &rArr; spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiRegisterFamily
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevGetInfo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[393]"></a>led_setPWM(unsigned char, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, led.o(i._Z10led_setPWMht))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setLamp(const unsigned char&, const unsigned char&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[ba]"></a>led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i._Z10led_setRGBRKhS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>prm_format()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, param.o(i._Z10prm_formatv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = prm_format() &rArr; flash_erase(unsigned, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>prm_getAll(const unsigned char&, const unsigned short&, Chirp*)</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, param.o(i._Z10prm_getAllRKhRKtP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prm_getAll(const unsigned char&, const unsigned short&, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progIndex()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getArgList(unsigned char*, unsigned, unsigned char*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getId(ParamRecord*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>pwr_getVin()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, power.o(i._Z10pwr_getVinv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwr_getVin() &rArr; adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>rcs_enable(const unsigned char&, const unsigned char&)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rcservo.o(i._Z10rcs_enableRKhS0_))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>rcs_getPos(const unsigned char&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rcservo.o(i._Z10rcs_getPosRKh))
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>rcs_setPos(const unsigned char&, const unsigned short&)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rcservo.o(i._Z10rcs_setPosRKhRKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::~ProgPt()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::update(int)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::reset()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits(const unsigned char&, const short&, const short&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>cam_getMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z11cam_getModev))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>cam_getReg8(const unsigned short&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, camera.o(i._Z11cam_getReg8RKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cam_getReg8(const unsigned short&) &rArr; CSccb::Read8(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read8(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>cam_setMode(const unsigned char&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, camera.o(i._Z11cam_setModeRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cam_setMode(const unsigned char&) &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setSaturation(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::ProgVideo(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticInit(unsigned char)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::ProgLine(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>cam_setReg8(const unsigned short&, const unsigned char&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera.o(i._Z11cam_setReg8RKtRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setReg8(const unsigned short&, const unsigned char&) &rArr; CSccb::Write8(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[389]"></a>flash_erase(unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flash.o(i._Z11flash_erasejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = flash_erase(unsigned, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetSubBlockFromAddr
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[1f0]"></a>interpolate(unsigned char*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, calc.o(i._Z11interpolatePhtttS_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = interpolate(unsigned char*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRGB(unsigned short, unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[bd]"></a>led_setLamp(const unsigned char&, const unsigned char&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, led.o(i._Z11led_setLampRKhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_setLamp(const unsigned char&, const unsigned char&) &rArr; led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggleLamp()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[38f]"></a>prm_getDesc(ParamRecord*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, param.o(i._Z11prm_getDescP11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prm_getDesc(ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[c4]"></a>prm_getInfo(const char*, Chirp*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, param.o(i._Z11prm_getInfoPKcP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prm_getInfo(const char*, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDesc(ParamRecord*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>rcs_setFreq(const unsigned short&)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rcservo.o(i._Z11rcs_setFreqRKt))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[394]"></a>cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, camera.o(i._Z12cam_getFramePhjhtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
</UL>

<P><STRONG><a name="[28]"></a>cam_getReg16(const unsigned short&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, camera.o(i._Z12cam_getReg16RKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cam_getReg16(const unsigned short&) &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>cam_getReg32(const unsigned short&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, camera.o(i._Z12cam_getReg32RKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cam_getReg32(const unsigned short&) &rArr; CSccb::Read32(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read32(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>cam_setReg16(const unsigned short&, const unsigned short&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera.o(i._Z12cam_setReg16RKtS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setReg16(const unsigned short&, const unsigned short&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>cam_setReg32(const unsigned short&, const unsigned&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, camera.o(i._Z12cam_setReg32RKtRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setReg32(const unsigned short&, const unsigned&) &rArr; CSccb::Write32(unsigned short, unsigned) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write32(unsigned short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>prm_getChirp(const char*, Chirp*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, param.o(i._Z12prm_getChirpPKcP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prm_getChirp(const char*, Chirp*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[3ac]"></a>prm_nextFree()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, param.o(i._Z12prm_nextFreev))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
</UL>

<P><STRONG><a name="[bf]"></a>prm_setChirp(const char*, const unsigned&, const unsigned char*)</STRONG> (Thumb, 250 bytes, Stack size 152 bytes, param.o(i._Z12prm_setChirpPKcRKjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>prm_setDirty()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i._Z12prm_setDirtyv))
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[399]"></a>__new_nothrow(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, new_cheapnothrow.o(i._Z13__new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[39a]"></a>cam_getTiming(unsigned short*, unsigned short*, unsigned short*, unsigned short*)</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, camera.o(i._Z13cam_getTimingPtS_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = cam_getTiming(unsigned short*, unsigned short*, unsigned short*, unsigned short*) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
</UL>

<P><STRONG><a name="[1e9]"></a>cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, camera.o(i._Z13cam_sendFrameP5Chirptthj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned) &rArr; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::loop(char*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::sendCustom(unsigned char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[398]"></a>flash_program(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, flash.o(i._Z13flash_programjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiProgram
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[39c]"></a>prm_verifyAll()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, param.o(i._Z13prm_verifyAllv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prm_verifyAll() &rArr; prm_verifyRecord(const ParamRecord*) &rArr; prm_crc(const ParamRecord*) &rArr; prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_verifyRecord(const ParamRecord*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
</UL>

<P><STRONG><a name="[c9]"></a>rcs_setLimits(const unsigned char&, const short&, const short&)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rcservo.o(i._Z13rcs_setLimitsRKhRKsS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rcs_setLimits(const unsigned char&, const short&, const short&) &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(.constdata)
</UL>
<P><STRONG><a name="[39e]"></a>rcs_setLimits()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rcservo.o(i._Z13rcs_setLimitsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rcs_setLimits() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits(const unsigned char&, const short&, const short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_shadowCallback(const char*, const unsigned short&)
</UL>

<P><STRONG><a name="[39f]"></a>cam_applyPatch()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, camera.o(i._Z14cam_applyPatchv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cam_applyPatch() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[1af]"></a>cam_loadParams()</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, camera.o(i._Z14cam_loadParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProgIndex(const char*, Chirp*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFlickerAvoidance(const unsigned char&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFramerate(const unsigned char&)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setWBV(const unsigned&)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setECV(const unsigned&)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
</UL>

<P><STRONG><a name="[1a7]"></a>led_toggleLamp()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(i._Z14led_toggleLampv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_toggleLamp() &rArr; led_setLamp(const unsigned char&, const unsigned char&) &rArr; led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setLamp(const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_toggleLamp()
</UL>

<P><STRONG><a name="[38c]"></a>prm_findShadow(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, param.o(i._Z14prm_findShadowPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prm_findShadow(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[1b0]"></a>rcs_loadParams()</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, rcservo.o(i._Z14rcs_loadParamsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = rcs_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setFreq(const unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
</UL>

<P><STRONG><a name="[3a2]"></a>cam_sendCommand()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, camera.o(i._Z15cam_sendCommandv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFramerate(const unsigned char&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_testPattern(const unsigned char&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[22]"></a>cam_testPattern(const unsigned char&)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, camera.o(i._Z15cam_testPatternRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cam_testPattern(const unsigned char&) &rArr; cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>cam_getBlankTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z16cam_getBlankTimev))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[3a0]"></a>cam_setFramerate(const unsigned char&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, camera.o(i._Z16cam_setFramerateRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cam_setFramerate(const unsigned char&) &rArr; cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>

<P><STRONG><a name="[c2]"></a>prm_resetShadows()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, param.o(i._Z16prm_resetShadowsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = prm_resetShadows() &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[39d]"></a>prm_verifyRecord(const ParamRecord*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, param.o(i._Z16prm_verifyRecordPK11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prm_verifyRecord(const ParamRecord*) &rArr; prm_crc(const ParamRecord*) &rArr; prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_verifyAll()
</UL>

<P><STRONG><a name="[1f]"></a>cam_getBrightness()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, camera.o(i._Z17cam_getBrightnessv))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, camera.o(i._Z17cam_getFrameChirpRKhRKtS2_S2_S2_P5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*) &rArr; cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>cam_setBrightness(const unsigned char&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, camera.o(i._Z17cam_setBrightnessRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cam_setBrightness(const unsigned char&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_update()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleRecv()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[3a3]"></a>cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, camera.o(i._Z17cam_setResolutionRKtS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&) &rArr; cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write32(unsigned short, unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[20]"></a>cam_setSaturation(const unsigned char&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, camera.o(i._Z17cam_setSaturationRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cam_setSaturation(const unsigned char&) &rArr; CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>led_getMaxCurrent()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(i._Z17led_getMaxCurrentv))
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>led_setMaxCurrent(const unsigned&)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, led.o(i._Z17led_setMaxCurrentRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = led_setMaxCurrent(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_shadowCallback(const char*, const void*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::resetButtonState()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[38d]"></a>prm_getDataOffset(const ParamRecord*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, param.o(i._Z17prm_getDataOffsetPK11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[2a]"></a>cam_getFramePeriod()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, camera.o(i._Z18cam_getFramePeriodv))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFPS()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>cam_shadowCallback(const char*, const unsigned char&)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, camera.o(i._Z18cam_shadowCallbackPKcRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cam_shadowCallback(const char*, const unsigned char&) &rArr; cam_setFramerate(const unsigned char&) &rArr; cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFlickerAvoidance(const unsigned char&)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setSaturation(const unsigned char&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFramerate(const unsigned char&)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getWBV()
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getECV()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i._Z14cam_loadParamsv)
</UL>
<P><STRONG><a name="[c1]"></a>prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, param.o(i._Z18prm_setShadowChirpPKcRKjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prm_setShadowChirp(const char*, const unsigned&, const unsigned char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>rcs_shadowCallback(const char*, const unsigned short&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rcservo.o(i._Z18rcs_shadowCallbackPKcRKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rcs_shadowCallback(const char*, const unsigned short&) &rArr; rcs_setLimits() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcservo.o(i._Z14rcs_loadParamsv)
</UL>
<P><STRONG><a name="[177]"></a>prm_setShadowCallback(const char*, void(*)(const char*, const void*))</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, param.o(i._Z21prm_setShadowCallbackPKcPFvS0_PKvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prm_setShadowCallback(const char*, void(*)(const char*, const void*)) &rArr; SimpleVector&lang;Shadow&rang;::push_back(const Shadow&) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::push_back(const Shadow&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::ProgPt(unsigned char)
</UL>

<P><STRONG><a name="[1e4]"></a>cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, camera.o(i._Z22cam_getFrameChirpFlagsRKhRKtS2_S2_S2_P5Chirphb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool) &rArr; cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirp(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[21]"></a>cam_setFlickerAvoidance(const unsigned char&)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, camera.o(i._Z23cam_setFlickerAvoidanceRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cam_setFlickerAvoidance(const unsigned char&) &rArr; CSccb::Write8(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.constdata)
</UL>
<P><STRONG><a name="[3a6]"></a>ADCInit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pixy_init.o(i._Z7ADCInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADCInit() &rArr; ADC_Init &rArr; CGU_GetPCLKFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3b2]"></a>SCTInit()</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, pixy_init.o(i._Z7SCTInitv))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[186]"></a>cprintf(unsigned, const char*, ...)</STRONG> (Thumb, 58 bytes, Stack size 176 bytes, pixy_init.o(i._Z7cprintfjPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = cprintf(unsigned, const char*, ...) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progSetup(unsigned char)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_progExit()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_printMC()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_list()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_format()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::update()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_hLine(unsigned char, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>led_set(const unsigned&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, led.o(i._Z7led_setRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = led_set(const unsigned&) &rArr; led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED(unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::resetButtonState()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[388]"></a>led_set(unsigned char, unsigned char, bool)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, led.o(i._Z7led_sethhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led_set(unsigned char, unsigned char, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setPWM(unsigned char, unsigned short)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
</UL>

<P><STRONG><a name="[176]"></a>prm_add(const char*, unsigned, unsigned, const char*, ...)</STRONG> (Thumb, 226 bytes, Stack size 304 bytes, param.o(i._Z7prm_addPKcjjS0_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_nextFree()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::ProgPt(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[397]"></a>prm_crc(const ParamRecord*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, param.o(i._Z7prm_crcPK11ParamRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prm_crc(const ParamRecord*) &rArr; prm_getDataOffset(const ParamRecord*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_verifyRecord(const ParamRecord*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>

<P><STRONG><a name="[163]"></a>prm_get(const char*, ...)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, param.o(i._Z7prm_getPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_find(const char*, unsigned char*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getDataOffset(const ParamRecord*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_findShadow(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_loadParams()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_select()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadParams()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadLut()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_setInterface(unsigned char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setMode(const unsigned char&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::getVals()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setLimits()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
</UL>

<P><STRONG><a name="[185]"></a>prm_set(const char*, ...)</STRONG> (Thumb, 52 bytes, Stack size 288 bytes, param.o(i._Z7prm_setPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLabel(const unsigned&, const char*, Chirp*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigRegion(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[1df]"></a>rgbPack(unsigned, unsigned, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, calc.o(i._Z7rgbPackjjj))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRGB(unsigned short, unsigned short, unsigned char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[37f]"></a>GPIOInit()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pixy_init.o(i._Z8GPIOInitv))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[21e]"></a>cam_init(unsigned short*)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, camera.o(i._Z8cam_initPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = cam_init(unsigned short*) &rArr; cam_loadParams() &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getTiming(unsigned short*, unsigned short*, unsigned short*, unsigned short*)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b0]"></a>led_init()</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, led.o(i._Z8led_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = led_init() &rArr; Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setPWM(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1b3]"></a>periodic()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pixy_init.o(i._Z8periodicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = periodic() &rArr; Chirp::service(bool) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[21d]"></a>pixyInit(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, pixy_init.o(i._Z8pixyInitjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = pixyInit(unsigned, const unsigned char*, unsigned) &rArr; commonInit() &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::SMLink()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setSendTimeout(unsigned)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setRecvTimeout(unsigned)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_enable(const unsigned char&, const unsigned char&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_startSlave
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_haltSlave
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_downloadSlaveImage
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTInit()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraInit()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[395]"></a>prm_find(const char*, unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, param.o(i._Z8prm_findPKcPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prm_find(const char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
</UL>

<P><STRONG><a name="[3b9]"></a>prm_init(Chirp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, param.o(i._Z8prm_initP5Chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = prm_init(Chirp*) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_verifyAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3ba]"></a>pwr_init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, power.o(i._Z8pwr_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pwr_init() &rArr; Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[21f]"></a>rcs_init()</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, rcservo.o(i._Z8rcs_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = rcs_init() &rArr; rcs_loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_loadParams()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_setPos(const unsigned char&, const unsigned short&)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_enable(const unsigned char&, const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>saturate(unsigned)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, calc.o(i._Z8saturatej))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = saturate(unsigned) &rArr; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgbPack(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRGB(unsigned short, unsigned short, unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::updateSignature(unsigned char)
</UL>

<P><STRONG><a name="[3c5]"></a>copyAlign(char*, const char*, int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, chirp.o(i._Z9copyAlignPcPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copyAlign(char*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>

<P><STRONG><a name="[3b1]"></a>handleAWB()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pixy_init.o(i._Z9handleAWBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handleAWB() &rArr; prm_get(const char*, ...) &rArr; Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
</UL>

<P><STRONG><a name="[1b4]"></a>prm_dirty()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, param.o(i._Z9prm_dirtyv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_periodic()
</UL>

<P><STRONG><a name="[38b]"></a>prm_getId(ParamRecord*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param.o(i._Z9prm_getIdP11ParamRecord))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[19a]"></a>rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, calc.o(i._Z9rgbUnpackjPjS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setLED()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lego_getData(unsigned char*, unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[37e]"></a>timerInit()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pixy_init.o(i._Z9timerInitv))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[2ad]"></a>Intersection::addLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, line.o(i._ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Intersection::addLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Intersection&rang;*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[6e]"></a>ColorSignature::ColorSignature()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conncomp.o(i._ZN14ColorSignatureC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearAllSig(Chirp*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_clearSig(const unsigned char&, Chirp*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_loadParams()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> colorlut.o(.text)
</UL>
<P><STRONG><a name="[487]"></a>ColorSignature::ColorSignature__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, conncomp.o(i._ZN14ColorSignatureC1Ev), UNUSED)

<P><STRONG><a name="[2dc]"></a>DecodedBarCode::DecodedBarCode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(i._ZN14DecodedBarCodeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
</UL>

<P><STRONG><a name="[488]"></a>DecodedBarCode::DecodedBarCode__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN14DecodedBarCodeC1Ev), UNUSED)

<P><STRONG><a name="[f8]"></a>Link::getFlags(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usblink.o(i._ZN4Link8getFlagsEh))
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[f3]"></a>Link::blockSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usblink.o(i._ZN4Link9blockSizeEv))
<BR>[Address Reference Count : 2]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
<LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[ec]"></a>Prog::getResolution(unsigned short*, unsigned short*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, progblobs.o(i._ZN4Prog13getResolutionEPtS0_h))
<BR>[Address Reference Count : 3]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
<LI> progvideo.o(.constdata__ZTV9ProgVideo)
<LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[e9]"></a>Prog::getView(unsigned short, const char**)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, progvideo.o(i._ZN4Prog7getViewEtPPKc))
<BR>[Address Reference Count : 2]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
<LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[ea]"></a>Prog::setView(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, progvideo.o(i._ZN4Prog7setViewEt))
<BR>[Address Reference Count : 2]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
<LI> progpt.o(.constdata__ZTV6ProgPt)
</UL>
<P><STRONG><a name="[fe]"></a>Prog::getAction(unsigned short, const char**, const char**)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progvideo.o(i._ZN4Prog9getActionEtPPKcS2_))
<BR>[Address Reference Count : 2]<UL><LI> progvideo.o(.constdata__ZTV9ProgVideo)
<LI> progline.o(.constdata__ZTV8ProgLine)
</UL>
<P><STRONG><a name="[6a]"></a>BlobA::BlobA()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blobs.o(i._ZN5BlobAC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blobs.o(.text)
</UL>
<P><STRONG><a name="[489]"></a>BlobA::BlobA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, blobs.o(i._ZN5BlobAC1Ev), UNUSED)

<P><STRONG><a name="[3bb]"></a>CSccb::Stop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSccb::Stop() &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[3c0]"></a>CSccb::Drive()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb5DriveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
</UL>

<P><STRONG><a name="[391]"></a>CSccb::Read8(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb5Read8Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CSccb::Read8(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getReg8(const unsigned short&)
</UL>

<P><STRONG><a name="[3bf]"></a>CSccb::Start()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSccb::Start() &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[378]"></a>CSccb::Read16(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb6Read16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_applyPatch()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getReg16(const unsigned short&)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getWBV()
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getECV()
</UL>

<P><STRONG><a name="[377]"></a>CSccb::Read32(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sccb.o(i._ZN5CSccb6Read32Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CSccb::Read32(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getReg32(const unsigned short&)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getECV()
</UL>

<P><STRONG><a name="[379]"></a>CSccb::Write8(unsigned short, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sccb.o(i._ZN5CSccb6Write8Eth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSccb::Write8(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFlickerAvoidance(const unsigned char&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_testPattern(const unsigned char&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setReg8(const unsigned short&, const unsigned char&)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAEC(const unsigned char&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[3be]"></a>CSccb::ReadReg(unsigned short, unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sccb.o(i._ZN5CSccb7ReadRegEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned, unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read32(unsigned short)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read16(unsigned short)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Read8(unsigned short)
</UL>

<P><STRONG><a name="[37a]"></a>CSccb::Write16(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sccb.o(i._ZN5CSccb7Write16Ett))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSccb::Write16(unsigned short, unsigned short) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setBrightness(const unsigned char&)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setSaturation(const unsigned char&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFramerate(const unsigned char&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_applyPatch()
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setReg16(const unsigned short&, const unsigned short&)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setWBV(const unsigned&)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setECV(const unsigned&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[37b]"></a>CSccb::Write32(unsigned short, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sccb.o(i._ZN5CSccb7Write32Etj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSccb::Write32(unsigned short, unsigned) &rArr; CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setReg32(const unsigned short&, const unsigned&)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setECV(const unsigned&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[3bd]"></a>CSccb::TriState()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb8TriStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>

<P><STRONG><a name="[3c2]"></a>CSccb::WriteReg(unsigned, unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, sccb.o(i._ZN5CSccb8WriteRegEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Drive()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned short, unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[3c1]"></a>CSccb::WriteReg(unsigned short, unsigned, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sccb.o(i._ZN5CSccb8WriteRegEtjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSccb::WriteReg(unsigned short, unsigned, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned, unsigned char)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write32(unsigned short, unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[3bc]"></a>CSccb::PortWrite(unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccb9PortWriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::CSccb(unsigned char)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::WriteReg(unsigned, unsigned char)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::ReadReg(unsigned short, unsigned char)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Start()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Stop()
</UL>

<P><STRONG><a name="[3af]"></a>CSccb::CSccb(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccbC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSccb::CSccb(unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::PortWrite(unsigned char, unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::TriState()
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
</UL>

<P><STRONG><a name="[48a]"></a>CSccb::CSccb__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sccb.o(i._ZN5CSccbC1Eh), UNUSED)

<P><STRONG><a name="[38e]"></a>Chirp::getArgList(unsigned char*, unsigned, unsigned char*)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp10getArgListEPhjS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Chirp::getArgList(unsigned char*, unsigned, unsigned char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
</UL>

<P><STRONG><a name="[3c3]"></a>Chirp::handleInit(unsigned short*, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp10handleInitEPtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Chirp::handleInit(unsigned short*, unsigned char*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[3c4]"></a>Chirp::recvHeader(unsigned char*, short*, bool)</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp10recvHeaderEPhPsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chirp::recvHeader(unsigned char*, short*, bool) &rArr; Chirp::sendAck(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendAck(bool)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyAlign(char*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[3c7]"></a>Chirp::remoteInit(bool)</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, chirp.o(i._ZN5Chirp10remoteInitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
</UL>

<P><STRONG><a name="[3c8]"></a>Chirp::sendHeader(unsigned char, short)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp10sendHeaderEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chirp::sendHeader(unsigned char, short) &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[3ab]"></a>Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp10vserializeEPS_PhjPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_set(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
</UL>

<P><STRONG><a name="[e3]"></a>Chirp::handleChirp(unsigned char, short, const void**)</STRONG> (Thumb, 528 bytes, Stack size 56 bytes, chirp.o(i._ZN5Chirp11handleChirpEhsPPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Chirp::handleChirp(unsigned char, short, const void**) &rArr; Chirp::handleEnumerateInfo(short*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerateInfo(short*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerate(char*, short*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleInit(unsigned short*, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[e4]"></a>Chirp::handleXdata(const void**)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp11handleXdataEPPKv))
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[3cf]"></a>Chirp::lookupTable(const char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp11lookupTableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::lookupTable(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerate(char*, short*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>

<P><STRONG><a name="[3d0]"></a>Chirp::updateTable(const char*, unsigned(*)(Chirp*))</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp11updateTableEPKcPFjPS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)
</UL>

<P><STRONG><a name="[3d1]"></a>Chirp::reallocTable()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp12reallocTableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>

<P><STRONG><a name="[3ae]"></a>Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, chirp.o(i._ZN5Chirp12vdeserializeEPhjPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
</UL>

<P><STRONG><a name="[3ce]"></a>Chirp::restoreBuffer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp13restoreBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[17c]"></a>Chirp::registerModule(const ProcModule*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp14registerModuleEPK10ProcModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Chirp::registerModule(const ProcModule*) &rArr; Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_init(Chirp*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcs_init()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_init(Chirp*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_init()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
</UL>

<P><STRONG><a name="[3cd]"></a>Chirp::sendChirpRetry(unsigned char, short)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp14sendChirpRetryEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::useBuffer(unsigned char*, unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[3b8]"></a>Chirp::setRecvTimeout(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp14setRecvTimeoutEj))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3b7]"></a>Chirp::setSendTimeout(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp14setSendTimeoutEj))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[3cb]"></a>Chirp::handleEnumerate(char*, short*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp15handleEnumerateEPcPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chirp::handleEnumerate(char*, short*) &rArr; Chirp::lookupTable(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::lookupTable(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[3a4]"></a>Chirp::deserializeParse(unsigned char*, unsigned, void**)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp16deserializeParseEPhjPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chirp::deserializeParse(unsigned char*, unsigned, void**) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[3cc]"></a>Chirp::handleEnumerateInfo(short*)</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp19handleEnumerateInfoEPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Chirp::handleEnumerateInfo(short*) &rArr; Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleChirp(unsigned char, short, const void**)
</UL>

<P><STRONG><a name="[3d4]"></a>Chirp::call(unsigned char, short, std::__va_list)</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, chirp.o(i._ZN5Chirp4callEhsSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
</UL>

<P><STRONG><a name="[1aa]"></a>Chirp::call(unsigned char, short, ...)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp4callEhsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getProc(const char*, unsigned(*)(Chirp*))
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_loadParams(signed char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_stopM0()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runningM0()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_runM0(unsigned char)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getTiming(unsigned short*, unsigned short*, unsigned short*, unsigned short*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrame(unsigned char*, unsigned, unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_getEdges()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_shadowCallback(const char*, const void*)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::remoteInit(bool)
</UL>

<P><STRONG><a name="[e2]"></a>Chirp::init(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp4initEb))
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[3ad]"></a>Chirp::calcCrc(unsigned char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, chirp.o(i._ZN5Chirp7calcCrcEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chirp::calcCrc(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_crc(const ParamRecord*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>

<P><STRONG><a name="[1a0]"></a>Chirp::getProc(const char*, unsigned(*)(Chirp*))</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, chirp.o(i._ZN5Chirp7getProcEPKcPFjPS_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Chirp::getProc(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, ...)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_init(Chirp*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
</UL>

<P><STRONG><a name="[3d8]"></a>Chirp::getType(const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp7getTypeEPKv))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::loadArgs(std::__va_list*, void**)
</UL>

<P><STRONG><a name="[3ca]"></a>Chirp::realloc(unsigned)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp7reallocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvFull(unsigned char*, short*, bool)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
</UL>

<P><STRONG><a name="[3c9]"></a>Chirp::recvAck(bool*, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7recvAckEPbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
</UL>

<P><STRONG><a name="[3c6]"></a>Chirp::sendAck(bool)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7sendAckEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::sendAck(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>

<P><STRONG><a name="[253]"></a>Chirp::service(bool)</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, chirp.o(i._ZN5Chirp7serviceEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Chirp::service(bool) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodic()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
</UL>

<P><STRONG><a name="[1be]"></a>Chirp::setLink(Link*)</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7setLinkEP4Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Chirp::setLink(Link*) &rArr; Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log(const char*, ...)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::remoteInit(bool)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
</UL>

<P><STRONG><a name="[3d3]"></a>Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp7setProcEPKcPFjPS_EP18ProcTableExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chirp::setProc(const char*, unsigned(*)(Chirp*), ProcTableExtension*) &rArr; Chirp::updateTable(const char*, unsigned(*)(Chirp*)) &rArr; Chirp::reallocTable() &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::updateTable(const char*, unsigned(*)(Chirp*))
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::registerModule(const ProcModule*)
</UL>

<P><STRONG><a name="[195]"></a>Chirp::assemble(unsigned char, ...)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, chirp.o(i._ZN5Chirp8assembleEhz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Chirp::assemble(unsigned char, ...) &rArr; Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vassemble(std::__va_list*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getView(const unsigned short&, Chirp*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getAction(const unsigned short&, Chirp*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_versionType(Chirp*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_version(Chirp*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_getProg(const unsigned char&, Chirp*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cprintf(unsigned, const char*, ...)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_sendEvent(Chirp*, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::sendQvals()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getChirp(const char*, Chirp*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getInfo(const char*, Chirp*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_getAll(const unsigned char&, const unsigned short&, Chirp*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTrackedCodes(unsigned char)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPrimaryFeatures(unsigned char)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIntersections(const SimpleList&lang;Intersection&rang;&, unsigned char, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTrackedLines(const SimpleList&lang;Tracker&lang;Line2&rang;&rang;&, unsigned char, const char*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLines(const SimpleList&lang;Line2&rang;&, unsigned char, const char*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNadirs(const SimpleList&lang;Nadir&rang;&, unsigned char, const char*)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPoints(const SimpleList&lang;Point&rang;&, unsigned char, const char*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleEnumerateInfo(short*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::handleInit(unsigned short*, unsigned char*)
</UL>

<P><STRONG><a name="[3d2]"></a>Chirp::loadArgs(std::__va_list*, void**)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp8loadArgsEPSt9__va_listPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::loadArgs(std::__va_list*, void**)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::getType(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vdeserialize(unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>

<P><STRONG><a name="[3d9]"></a>Chirp::recvData()</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp8recvDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendAck(bool)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyAlign(char*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[3da]"></a>Chirp::recvFull(unsigned char*, short*, bool)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp8recvFullEPhPsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Chirp::recvFull(unsigned char*, short*, bool) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvChirp(unsigned char*, short*, void**, bool)
</UL>

<P><STRONG><a name="[3db]"></a>Chirp::sendData()</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp8sendDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Chirp::sendData() &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::calcCrc(unsigned char*, unsigned)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[3dc]"></a>Chirp::sendFull(unsigned char, short)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp8sendFullEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chirp::sendFull(unsigned char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirp(unsigned char, short)
</UL>

<P><STRONG><a name="[192]"></a>Chirp::connected()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp9connectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendBlobs(Chirp*, SimpleList&lang;Tracker&lang;BlobA&rang;&rang;*, unsigned char)
</UL>

<P><STRONG><a name="[1bf]"></a>Chirp::hinformer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chirp.o(i._ZN5Chirp9hinformerEv))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[3d6]"></a>Chirp::recvChirp(unsigned char*, short*, void**, bool)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, chirp.o(i._ZN5Chirp9recvChirpEPhPsPPvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::deserializeParse(unsigned char*, unsigned, void**)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvFull(unsigned char*, short*, bool)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvData()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::recvHeader(unsigned char*, short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::service(bool)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>

<P><STRONG><a name="[e5]"></a>Chirp::sendChirp(unsigned char, short)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chirp.o(i._ZN5Chirp9sendChirpEhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chirp::sendChirp(unsigned char, short) &rArr; Chirp::sendData() &rArr; Chirp::recvAck(bool*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendFull(unsigned char, short)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendData()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendHeader(unsigned char, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chirp.o(.constdata__ZTV5Chirp)
</UL>
<P><STRONG><a name="[189]"></a>Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, chirp.o(i._ZN5Chirp9serializeEPS_Phjz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Chirp::serialize(Chirp*, unsigned char*, unsigned, ...) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCodes(unsigned char)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLineSegments(unsigned char)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_sendLineGrid(unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>Chirp::useBuffer(unsigned char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chirp.o(i._ZN5Chirp9useBufferEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Chirp::useBuffer(unsigned char*, unsigned) &rArr; Chirp::sendChirpRetry(unsigned char, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::sendChirpRetry(unsigned char, short)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::restoreBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_sendPoints(SimpleVector&lang;Point16&rang;&, unsigned short, unsigned short, Chirp*, unsigned char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getFrameChirpFlags(const unsigned char&, const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&, Chirp*, unsigned char, bool)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCodes(unsigned char)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLineSegments(unsigned char)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_sendLineGrid(unsigned char)
</UL>

<P><STRONG><a name="[3d5]"></a>Chirp::vassemble(std::__va_list*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chirp.o(i._ZN5Chirp9vassembleEPSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Chirp::vassemble(std::__va_list*) &rArr; Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*) &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::assemble(unsigned char, ...)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::call(unsigned char, short, std::__va_list)
</UL>

<P><STRONG><a name="[3b6]"></a>Chirp::Chirp(bool, bool, Link*)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, chirp.o(i._ZN5ChirpC1EbbP4Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Chirp::Chirp(bool, bool, Link*) &rArr; Chirp::setLink(Link*) &rArr; Chirp::remoteInit(bool) &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log(const char*, ...)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[48b]"></a>Chirp::Chirp__sub_object(bool, bool, Link*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, chirp.o(i._ZN5ChirpC1EbbP4Link), UNUSED)

<P><STRONG><a name="[294]"></a>Line2::Line2()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, line.o(i._ZN5Line2C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::add(const Line2&)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addline(const Point&, const Point&)
</UL>

<P><STRONG><a name="[48c]"></a>Line2::Line2__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN5Line2C1Ev), UNUSED)

<P><STRONG><a name="[2a6]"></a>Nadir::merge(const Nadir&)</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, line.o(i._ZN5Nadir5mergeERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Nadir::merge(const Nadir&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceNadirs()
</UL>

<P><STRONG><a name="[2a2]"></a>Point::avg(const Point&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, line.o(i._ZN5Point3avgERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
</UL>

<P><STRONG><a name="[25c]"></a>RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, colorlut.o(i._ZN5RectAC1Etttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::reset(bool)
</UL>

<P><STRONG><a name="[48d]"></a>RectA::RectA__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, colorlut.o(i._ZN5RectAC1Etttt), UNUSED)

<P><STRONG><a name="[25e]"></a>RectA::RectA()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, colorlut.o(i._ZN5RectAC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[48e]"></a>RectA::RectA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN5RectAC1Ev), UNUSED)

<P><STRONG><a name="[25d]"></a>Frame8::Frame8()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, colorlut.o(i._ZN6Frame8C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const RectA&)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IterPixel::IterPixel(const Frame8&, const SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[48f]"></a>Frame8::Frame8__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, colorlut.o(i._ZN6Frame8C1Ev), UNUSED)

<P><STRONG><a name="[ee]"></a>SMLink::send(const unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smlink.o(i._ZN6SMLink4sendEPKhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMLink::send(const unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[ef]"></a>SMLink::receive(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smlink.o(i._ZN6SMLink7receiveEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMLink::receive(unsigned char*, unsigned, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[f2]"></a>SMLink::getFlags(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smlink.o(i._ZN6SMLink8getFlagsEh))
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[f1]"></a>SMLink::getTimer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smlink.o(i._ZN6SMLink8getTimerEv))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[f0]"></a>SMLink::setTimer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smlink.o(i._ZN6SMLink8setTimerEv))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smlink.o(.constdata__ZTV6SMLink)
</UL>
<P><STRONG><a name="[3b4]"></a>SMLink::SMLink()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smlink.o(i._ZN6SMLinkC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMLink::SMLink() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[490]"></a>SMLink::SMLink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, smlink.o(i._ZN6SMLinkC1Ev), UNUSED)

<P><STRONG><a name="[2cc]"></a>BarCode::BarCode()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line.o(i._ZN7BarCodeC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
</UL>

<P><STRONG><a name="[491]"></a>BarCode::BarCode__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, line.o(i._ZN7BarCodeC1Ev), UNUSED)

<P><STRONG><a name="[104]"></a>Iserial::receiveLen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, analogdig.o(i._ZN7Iserial10receiveLenEv))
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[d1]"></a>Iserial::startTransmit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, analogdig.o(i._ZN7Iserial13startTransmitEv))
<BR>[Address Reference Count : 4]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
<LI> i2c.o(.constdata__ZTV3I2c)
<LI> spi.o(.constdata__ZTV3Spi)
<LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[db]"></a>Iserial::update()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi2.o(i._ZN7Iserial6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> spi2.o(.constdata__ZTV4Spi2)
</UL>
<P><STRONG><a name="[103]"></a>Iserial::receive(unsigned char*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, analogdig.o(i._ZN7Iserial7receiveEPhj))
<BR>[Address Reference Count : 1]<UL><LI> analogdig.o(.constdata__ZTV9AnalogDig)
</UL>
<P><STRONG><a name="[68]"></a>Point16::Point16()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conncomp.o(i._ZN7Point16C1Ev))
<BR>[Address Reference Count : 3]<UL><LI> conncomp.o(.text)
<LI> progblobs.o(.text)
<LI> colorlut.o(t._ZN12SimpleVectorI7Point16E9push_backERKS0_)
</UL>
<P><STRONG><a name="[492]"></a>Point16::Point16__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, conncomp.o(i._ZN7Point16C1Ev), UNUSED)

<P><STRONG><a name="[f4]"></a>USBLink::send(const unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usblink.o(i._ZN7USBLink4sendEPKhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = USBLink::send(const unsigned char*, unsigned, unsigned short) &rArr; USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendReset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[f5]"></a>USBLink::receive(unsigned char*, unsigned, unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usblink.o(i._ZN7USBLink7receiveEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = USBLink::receive(unsigned char*, unsigned, unsigned short) &rArr; USB_handleState &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecvReset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Recv
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[f7]"></a>USBLink::getTimer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLink8getTimerEv))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[f6]"></a>USBLink::setTimer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLink8setTimerEv))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usblink.o(.constdata__ZTV7USBLink)
</UL>
<P><STRONG><a name="[1bd]"></a>USBLink::USBLink()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLinkC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
</UL>

<P><STRONG><a name="[493]"></a>USBLink::USBLink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, usblink.o(i._ZN7USBLinkC1Ev), UNUSED)

<P><STRONG><a name="[108]"></a>ProgBlobs::loop(char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progblobs.o(i._ZN9ProgBlobs4loopEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = ProgBlobs::loop(char*) &rArr; ProgBlobs::staticLoop(char*) &rArr; ProgBlobs::handleButton(char*) &rArr; ProgBlobs::setSignature() &rArr; cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*) &rArr; prm_set(const char*, ...) &rArr; prm_setChirp(const char*, const unsigned&, const unsigned char*) &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticLoop(char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[10c]"></a>ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, progblobs.o(i._ZN9ProgBlobs6packetEhPKhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ProgBlobs::packet(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool) &rArr; ProgBlobs::blobsAssemble(unsigned char, unsigned char, bool) &rArr; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticPacket(unsigned char, const unsigned char*, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[109]"></a>ProgBlobs::getView(unsigned short, const char**)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, progblobs.o(i._ZN9ProgBlobs7getViewEtPPKc))
<BR><BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticGetView(unsigned short, const char**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[10a]"></a>ProgBlobs::setView(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progblobs.o(i._ZN9ProgBlobs7setViewEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgBlobs::setView(unsigned short) &rArr; ProgBlobs::staticSetView(unsigned short) &rArr; delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticSetView(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[10b]"></a>ProgBlobs::getAction(unsigned short, const char**, const char**)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, progblobs.o(i._ZN9ProgBlobs9getActionEtPPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProgBlobs::getAction(unsigned short, const char**, const char**) &rArr; ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticGetAction(unsigned short, const char**, const char**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[107]"></a>ProgBlobs::~ProgBlobs__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, progblobs.o(i._ZN9ProgBlobsD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ProgBlobs::~ProgBlobs__deallocating() &rArr; ProgBlobs::~ProgBlobs() &rArr; ProgBlobs::staticExit() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::~ProgBlobs()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[106]"></a>ProgBlobs::~ProgBlobs()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, progblobs.o(i._ZN9ProgBlobsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ProgBlobs::~ProgBlobs() &rArr; ProgBlobs::staticExit() &rArr; exec_stopM0() &rArr; exec_runningM0() &rArr; Chirp::call(unsigned char, short, ...) &rArr; Chirp::call(unsigned char, short, std::__va_list) &rArr; Chirp::recvChirp(unsigned char*, short*, void**, bool) &rArr; Chirp::recvData() &rArr; Chirp::realloc(unsigned) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticExit()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::~ProgBlobs__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.constdata__ZTV9ProgBlobs)
</UL>
<P><STRONG><a name="[494]"></a>ProgBlobs::~ProgBlobs__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, progblobs.o(i._ZN9ProgBlobsD1Ev), UNUSED)

<P><STRONG><a name="[2b4]"></a>Line2::length2() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(i._ZNK5Line27length2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMinLines(unsigned short)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeRedundantLinesIntersections()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeShortLinesIntersections()
</UL>

<P><STRONG><a name="[2a1]"></a>Point::dist2(const Point&) const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(i._ZNK5Point5dist2ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareLines(const Line2&, const Line2&)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceNadirs()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findNadirs()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
</UL>

<P><STRONG><a name="[2a8]"></a>Point::equals(const Point&) const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(i._ZNK5Point6equalsERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAngle(const Line2&, const Point&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackedLinesWithPoint(const Point&)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPrimaryFeatures(unsigned char)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minAngleLines(const Line2&, const Line2&, const Point&, unsigned)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equivalentLines(const Line2&, const Line2&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGraph(int, unsigned char, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, const Point&, SimpleListNode&lang;Line2&rang;*)
</UL>

<P><STRONG><a name="[259]"></a>std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blobs.o(i._ZSt5qsortPvjjPFiPKvS1_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*)) &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::reloadBlobs()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatIntersection(const Intersection&, FrameIntersection*, bool)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCode(BarCode*)
</UL>

<P><STRONG><a name="[81]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_deinit()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_deinit()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::~SimpleVector()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::push_back(const Shadow&)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[1b8]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_deinit()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_deinit()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::~ProgVideo__deallocating()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::~ProgBlobs__deallocating()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgLine::~ProgLine__deallocating()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPt::~ProgPt__deallocating()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::BlobNewRow(CBlob**)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Reset()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Reset()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;unsigned&rang;::clear()
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::clear()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::clear()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::clear()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::remove(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::clear()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clusterCodes()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceNadirs()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1cf]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::Uart(LPC_USARTn_Type*, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::Spi(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_param_cpp_55d340e8
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[235]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_nonew.o(i._ZnajRKSt9nothrow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Shadow&rang;::push_back(const Shadow&)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::realloc(unsigned)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::reallocTable()
</UL>

<P><STRONG><a name="[155]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_mainLoop()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_init(Chirp*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_init()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pixyInit(unsigned, const unsigned char*, unsigned)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_init()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[1b7]"></a>operator new(unsigned, const std::nothrow_t&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new_wrapnothrow.o(i._ZnwjRKSt9nothrow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__new_nothrow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_testMemory()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgVideo(unsigned char)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgBlobs(unsigned char)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgLine(unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createProgPt(unsigned char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlobAssembler::Add(const SSegment&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBlob::Add(const SSegment&)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;unsigned&rang;::add(const unsigned&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::add(const Point&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::add(const Line2&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectCodes(unsigned char, unsigned short*, unsigned)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clusterCodes()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formIntersections()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNadir(const Point&, const Point&)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[3df]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[325]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[3e3]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::Blobs(Qqueue*, unsigned char*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleVector&lang;Point16&rang;::push_back(const Point16&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::ColorLUT(unsigned char*)
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_vec_new_nocookie</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aeabi_vec_new_nocookie.o(i.__aeabi_vec_new_nocookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_nocookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc_setSigPoint(const unsigned&, const unsigned char&, const unsigned short&, const unsigned short&, Chirp*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::ledPipe()
</UL>

<P><STRONG><a name="[3e2]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_nocookie
</UL>

<P><STRONG><a name="[241]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::angle(BlobA*, BlobA*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAngle(const Line2&, const Point&)
</UL>

<P><STRONG><a name="[3aa]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[495]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[198]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setMaxCurrent(const unsigned&)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBrightness(unsigned)
</UL>

<P><STRONG><a name="[496]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[1de]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::scaleLED(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[28c]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
</UL>

<P><STRONG><a name="[3ec]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3f4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[3ed]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3eb]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3ea]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3f5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[3e9]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[3e6]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[3e5]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3e8]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[3e7]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[3e4]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[30d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[390]"></a>adc_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, misc.o(i.adc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_get &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_getVin()
</UL>

<P><STRONG><a name="[15e]"></a>button</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, misc.o(i.button))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = button &rArr; delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
</UL>

<P><STRONG><a name="[3fa]"></a>clockInit</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, platform_config.o(i.clockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clockInit &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EntityConnect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_UpdateClock
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetXTALOSC
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetPLL1
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_SetDIV
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[380]"></a>debug_frmwrk_init_clk</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, debug_frmwrk.o(i.debug_frmwrk_init_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = debug_frmwrk_init_clk &rArr; UART_Init &rArr; UART_setBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[1d4]"></a>delayms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, misc.o(i.delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setAWB(const unsigned char&)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::staticSetView(unsigned short)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setFramerate(const unsigned char&)
</UL>

<P><STRONG><a name="[159]"></a>delayus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, misc.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_loadParams()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLED(unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::update()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_shadowCallback(const char*, const unsigned char&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_applyPatch()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_runCommands(const CamCommand*)
</UL>

<P><STRONG><a name="[3f0]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[402]"></a>fpuInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fpu_init.o(i.fpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[160]"></a>getTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, misc.o(i.getTimer))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::getTimer()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::getTimer()
</UL>

<P><STRONG><a name="[418]"></a>getTimerMs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.getTimerMs))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::update()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::update()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;FrameIntersection&rang;::update()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;DecodedBarCode&rang;::update()
</UL>

<P><STRONG><a name="[1f2]"></a>lpc_printf</STRONG> (Thumb, 34 bytes, Stack size 536 bytes, debug_frmwrk.o(i.lpc_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_resetShadows()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showError
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgVideo::loop(char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_init(Chirp*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setChirp(const char*, const unsigned&, const unsigned char*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_getTiming(unsigned short*, unsigned short*, unsigned short*, unsigned short*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_handleState
</UL>

<P><STRONG><a name="[37d]"></a>platformInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform_config.o(i.platformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = platformInit &rArr; clockInit &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpuInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOInit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit()
</UL>

<P><STRONG><a name="[364]"></a>recvChunk</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbuser.o(i.recvChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = recvChunk &rArr; USB_ReadReqEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadReqEP
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Recv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[157]"></a>scu_pinmux</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc43xx_scu.o(i.scu_pinmux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::close()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogDig::open()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::close()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart::open()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::open()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::open()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_EnableEntity
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOInit
</UL>

<P><STRONG><a name="[363]"></a>sendChunk</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbuser.o(i.sendChunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sendChunk &rArr; USB_WriteEP &rArr; USB_ProgDTD &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint2
</UL>

<P><STRONG><a name="[15f]"></a>setTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, misc.o(i.setTimer))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectProgram(unsigned char, unsigned char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::sync()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBlobs::handleButton(char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::runlengthAnalysis()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleAWB()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLink::setTimer()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMLink::setTimer()
</UL>

<P><STRONG><a name="[2f4]"></a>setTimerMs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.setTimerMs))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_line_cpp_5416574d
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::update()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;BlobA&rang;::reset()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::update()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;Line2&rang;::reset()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;FrameIntersection&rang;::update()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;DecodedBarCode&rang;::update()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tracker&lang;DecodedBarCode&rang;::reset()
</UL>

<P><STRONG><a name="[21c]"></a>showError</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, misc.o(i.showError))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(const unsigned&)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>

<P><STRONG><a name="[386]"></a>spifiDevGetInfo</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, spifilib_dev_common.o(i.spifiDevGetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
</UL>

<P><STRONG><a name="[404]"></a>spifiDevInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spifilib_dev_common.o(i.spifiDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spifiDevInit &rArr; spifiDevSetMemMode
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
</UL>

<P><STRONG><a name="[417]"></a>spifiDevRegister</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spifilib_dev_common.o(i.spifiDevRegister))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_REG_FAMILY_CommonCommandSet
</UL>

<P><STRONG><a name="[387]"></a>spifiDevSetMemMode</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, spifilib_dev_common.o(i.spifiDevSetMemMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spifiDevSetMemMode
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_ResetController
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevInit
</UL>

<P><STRONG><a name="[384]"></a>spifiGetHandleMemSize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spifilib_dev_common.o(i.spifiGetHandleMemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = spifiGetHandleMemSize &rArr; spifiPrvPartDetect &rArr; spifiPrvDevDetect &rArr; spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvPartDetect
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCalculateHandleSize
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
</UL>

<P><STRONG><a name="[392]"></a>spifiGetSubBlockFromAddr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spifilib_dev_common.o(i.spifiGetSubBlockFromAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiGetSubBlockFromAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase(unsigned, unsigned)
</UL>

<P><STRONG><a name="[382]"></a>spifiInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spifilib_dev_common.o(i.spifiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifi_HW_ResetController
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
</UL>

<P><STRONG><a name="[385]"></a>spifiInitDevice</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, spifilib_dev_common.o(i.spifiInitDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = spifiInitDevice &rArr; spifiPrvPartDetect &rArr; spifiPrvDevDetect &rArr; spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevInit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvPartDetect
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvMemset
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCalculateHandleSize
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
</UL>

<P><STRONG><a name="[39b]"></a>spifiProgram</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spifilib_dev_common.o(i.spifiProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[383]"></a>spifiRegisterFamily</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spifilib_dev_common.o(i.spifiRegisterFamily))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiRegisterFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init()
</UL>

<P><STRONG><a name="[7d]"></a>spifi_REG_FAMILY_CommonCommandSet</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifi_REG_FAMILY_CommonCommandSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifi_REG_FAMILY_CommonCommandSet
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(i._Z10flash_initv)
</UL>
<P><STRONG><a name="[403]"></a>vIOInit</STRONG> (Thumb, 618 bytes, Stack size 8 bytes, platform_config.o(i.vIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vIOInit &rArr; scu_pinmux
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scu_pinmux
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[145]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[78]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>SimpleList&lang;Intersection&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI12IntersectionE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Intersection&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::~SimpleList()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2b9]"></a>SimpleList&lang;Intersection&rang;::remove(SimpleListNode&lang;Intersection&rang;*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Intersection&rang;::remove(SimpleListNode&lang;Intersection&rang;*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simplifyIntersections()
</UL>

<P><STRONG><a name="[72]"></a>SimpleList&lang;Intersection&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI12IntersectionED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Intersection&rang;::~SimpleList() &rArr; SimpleList&lang;Intersection&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Intersection&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[497]"></a>SimpleList&lang;Intersection&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI12IntersectionED1Ev), UNUSED)

<P><STRONG><a name="[295]"></a>SimpleList&lang;Line2&rang;::add(const Line2&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5Line2E3addERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SimpleList&lang;Line2&rang;::add(const Line2&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line2::Line2()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakLine(SimpleListNode&lang;Nadir&rang;*, unsigned char, SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addline(const Point&, const Point&)
</UL>

<P><STRONG><a name="[285]"></a>SimpleList&lang;Line2&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5Line2E5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Line2&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::~SimpleList()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2b0]"></a>SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Line2&rang;::remove(SimpleListNode&lang;Line2&rang;*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeMinLines(unsigned short)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaceLine(SimpleListNode&lang;Line2&rang;*, SimpleListNode&lang;Line2&rang;*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLine(SimpleListNode&lang;Line2&rang;*)
</UL>

<P><STRONG><a name="[6f]"></a>SimpleList&lang;Line2&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5Line2ED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Line2&rang;::~SimpleList() &rArr; SimpleList&lang;Line2&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Line2&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[498]"></a>SimpleList&lang;Line2&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5Line2ED1Ev), UNUSED)

<P><STRONG><a name="[287]"></a>SimpleList&lang;Nadir&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5NadirE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Nadir&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::~SimpleList()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[71]"></a>SimpleList&lang;Nadir&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5NadirED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Nadir&rang;::~SimpleList() &rArr; SimpleList&lang;Nadir&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Nadir&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[499]"></a>SimpleList&lang;Nadir&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5NadirED1Ev), UNUSED)

<P><STRONG><a name="[296]"></a>SimpleList&lang;Point&rang;::add(const Point&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5PointE3addERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SimpleList&lang;Point&rang;::add(const Point&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addline(const Point&, const Point&)
</UL>

<P><STRONG><a name="[286]"></a>SimpleList&lang;Point&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI5PointE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Point&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::~SimpleList()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[70]"></a>SimpleList&lang;Point&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5PointED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Point&rang;::~SimpleList() &rArr; SimpleList&lang;Point&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Point&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[49a]"></a>SimpleList&lang;Point&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI5PointED1Ev), UNUSED)

<P><STRONG><a name="[28a]"></a>SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::~SimpleList()
</UL>

<P><STRONG><a name="[74]"></a>SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::~SimpleList() &rArr; SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[49b]"></a>SimpleList&lang;Tracker&lang;DecodedBarCode&rang;&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev), UNUSED)

<P><STRONG><a name="[237]"></a>SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, blobs.o(t._ZN10SimpleListI7TrackerI5BlobAEE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Tracker&lang;BlobA&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::reset()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::~Blobs()
</UL>

<P><STRONG><a name="[289]"></a>SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListI7TrackerI5Line2EE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_close()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;Line2&rang;&rang;::~SimpleList()
</UL>

<P><STRONG><a name="[73]"></a>SimpleList&lang;Tracker&lang;Line2&rang;&rang;::~SimpleList()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI7TrackerI5Line2EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleList&lang;Tracker&lang;Line2&rang;&rang;::~SimpleList() &rArr; SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleList&lang;Tracker&lang;Line2&rang;&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.text)
</UL>
<P><STRONG><a name="[49c]"></a>SimpleList&lang;Tracker&lang;Line2&rang;&rang;::~SimpleList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, line.o(t._ZN10SimpleListI7TrackerI5Line2EED1Ev), UNUSED)

<P><STRONG><a name="[2f1]"></a>SimpleList&lang;unsigned&rang;::add(const unsigned&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListIjE3addERKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SimpleList&lang;unsigned&rang;::add(const unsigned&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[2ef]"></a>SimpleList&lang;unsigned&rang;::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, line.o(t._ZN10SimpleListIjE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleList&lang;unsigned&rang;::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_processMain()
</UL>

<P><STRONG><a name="[3a5]"></a>SimpleVector&lang;Shadow&rang;::push_back(const Shadow&)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, param.o(t._ZN12SimpleVectorI6ShadowE9push_backERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SimpleVector&lang;Shadow&rang;::push_back(const Shadow&) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_setShadowCallback(const char*, void(*)(const char*, const void*))
</UL>

<P><STRONG><a name="[82]"></a>SimpleVector&lang;Shadow&rang;::~SimpleVector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, param.o(t._ZN12SimpleVectorI6ShadowED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleVector&lang;Shadow&rang;::~SimpleVector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(i.__sti___9_param_cpp_55d340e8)
</UL>
<P><STRONG><a name="[49d]"></a>SimpleVector&lang;Shadow&rang;::~SimpleVector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, param.o(t._ZN12SimpleVectorI6ShadowED1Ev), UNUSED)

<P><STRONG><a name="[268]"></a>SimpleVector&lang;Point16&rang;::push_back(const Point16&)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, colorlut.o(t._ZN12SimpleVectorI7Point16E9push_backERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SimpleVector&lang;Point16&rang;::push_back(const Point16&) &rArr; operator new[] (unsigned, const std::nothrow_t&) &rArr; operator new(unsigned, const std::nothrow_t&) &rArr; __new_nothrow(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector&lang;Point16&rang;*)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector&lang;Point16&rang;*)
</UL>

<P><STRONG><a name="[2dd]"></a>Tracker&lang;DecodedBarCode&rang;::reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(t._ZN7TrackerI14DecodedBarCodeE5resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
</UL>

<P><STRONG><a name="[2db]"></a>Tracker&lang;DecodedBarCode&rang;::update()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, line.o(t._ZN7TrackerI14DecodedBarCodeE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tracker&lang;DecodedBarCode&rang;::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleBarCodeTracking()
</UL>

<P><STRONG><a name="[2e7]"></a>Tracker&lang;FrameIntersection&rang;::update()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, line.o(t._ZN7TrackerI17FrameIntersectionE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tracker&lang;FrameIntersection&rang;::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerMs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[258]"></a>Tracker&lang;BlobA&rang;::get()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blobs.o(t._ZN7TrackerI5BlobAE3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getMaxBlob(unsigned short, unsigned short*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::reloadBlobs()
</UL>

<P><STRONG><a name="[23e]"></a>Tracker&lang;BlobA&rang;::reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blobs.o(t._ZN7TrackerI5BlobAE5resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
</UL>

<P><STRONG><a name="[23d]"></a>Tracker&lang;BlobA&rang;::update()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, blobs.o(t._ZN7TrackerI5BlobAE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tracker&lang;BlobA&rang;::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blobs::handleBlobTracking()
</UL>

<P><STRONG><a name="[2c1]"></a>Tracker&lang;Line2&rang;::get()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, line.o(t._ZN7TrackerI5Line2E3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineState()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryPoint(const Line2&)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTrackedLines(const SimpleList&lang;Tracker&lang;Line2&rang;&rang;&, unsigned char, const char*)
</UL>

<P><STRONG><a name="[2d7]"></a>Tracker&lang;Line2&rang;::reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, line.o(t._ZN7TrackerI5Line2E5resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
</UL>

<P><STRONG><a name="[2d6]"></a>Tracker&lang;Line2&rang;::update()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, line.o(t._ZN7TrackerI5Line2E6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Tracker&lang;Line2&rang;::update() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerMs
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLineTracking()
</UL>

<P><STRONG><a name="[1cb]"></a>ReceiveQ&lang;unsigned char&rang;::clear()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(t._ZN8ReceiveQIhE5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::I2c(LPC_I2Cn_Type*, unsigned char, unsigned(*)(unsigned char*, unsigned))
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c::slaveHandler()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::Spi2()
</UL>

<P><STRONG><a name="[20b]"></a>ReceiveQ&lang;unsigned short&rang;::write(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi.o(t._ZN8ReceiveQItE5writeEt))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>

<P><STRONG><a name="[20a]"></a>TransmitQ&lang;unsigned short&rang;::read(unsigned short*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, spi.o(t._ZN9TransmitQItE4readEPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TransmitQ&lang;unsigned short&rang;::read(unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi::slaveHandler()
</UL>

<P><STRONG><a name="[3f3]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[49e]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[49f]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4a0]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4a1]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4a2]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3a9]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::vserialize(Chirp*, unsigned char*, unsigned, std::__va_list*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[419]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[41c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[423]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3a8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[41f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f1]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[420]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid()
</UL>

<P><STRONG><a name="[421]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f2]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4a3]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2d1]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4a4]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2e5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[422]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[426]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_open(signed char)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGrid()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[424]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[41b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[41e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
</UL>

<P><STRONG><a name="[425]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2e4]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePrimaryIntersection(SimpleListNode&lang;Intersection&rang;*)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[427]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3ee]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[429]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_running(Chirp*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[42a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[42b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[13e]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4a5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4a6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[41a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[122]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[118]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[4a7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4a8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4a9]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4aa]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4ab]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)

<P><STRONG><a name="[4ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc43xx_m4.o(RESET)
<LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[2f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[30]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[31]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[32]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[33]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[34]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[46]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4a]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[62]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[66]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[60]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[35]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[37]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5f]"></a>EVRT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[38]"></a>EZH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[39]"></a>FLASH_EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5d]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5e]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[55]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[57]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[58]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[59]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[51]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[52]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[65]"></a>M0s_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[45]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[67]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[40]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[63]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3f]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[54]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[53]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[49]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4b]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[41]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[43]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[4f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[50]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[3e]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[61]"></a>VADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[64]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx_m4.o(VECTORS)
</UL>
<P><STRONG><a name="[336]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc43xx_m4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap (via Veneer)
</UL>

<P><STRONG><a name="[347]"></a>getPC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc43xx_m4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19c]"></a>loadParams()</STRONG> (Thumb, 142 bytes, Stack size 352 bytes, exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = loadParams() &rArr; prm_add(const char*, unsigned, unsigned, const char*, ...) &rArr; flash_program(unsigned, const unsigned char*, unsigned) &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_get(const char*, ...)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prm_add(const char*, unsigned, unsigned, const char*, ...)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_loadParams()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_init(Chirp*)
</UL>

<P><STRONG><a name="[111]"></a>__sti___13_progblobs_cpp_e6e3ae25</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, progblobs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___13_progblobs_cpp_e6e3ae25
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progblobs.o(.init_array)
</UL>
<P><STRONG><a name="[112]"></a>__sti___13_progvideo_cpp_827dad01</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, progvideo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___13_progvideo_cpp_827dad01
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progvideo.o(.init_array)
</UL>
<P><STRONG><a name="[113]"></a>__sti___10_progpt_cpp_abf46733</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, progpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___10_progpt_cpp_abf46733 &rArr; ServoLoop::ServoLoop(unsigned char, unsigned, unsigned) &rArr; ServoLoop::reset() &rArr; rcs_setPos(const unsigned char&, const unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoLoop::ServoLoop(unsigned char, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progpt.o(.init_array)
</UL>
<P><STRONG><a name="[114]"></a>__sti___12_progline_cpp_6df8bedf</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, progline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___12_progline_cpp_6df8bedf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progline.o(.init_array)
</UL>
<P><STRONG><a name="[115]"></a>__sti___8_line_cpp_5416574d</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, line.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_line_cpp_5416574d &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerMs
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line.o(.init_array)
</UL>
<P><STRONG><a name="[2fc]"></a>NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::open()
</UL>

<P><STRONG><a name="[2fd]"></a>NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi2::close()
</UL>

<P><STRONG><a name="[3a1]"></a>cam_runCommands(const CamCommand*)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, camera.o(i._Z15cam_runCommandsPK10CamCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cam_runCommands(const CamCommand*) &rArr; cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&) &rArr; cam_sendCommand() &rArr; CSccb::Read16(unsigned short) &rArr; CSccb::ReadReg(unsigned short, unsigned char) &rArr; CSccb::WriteReg(unsigned, unsigned char) &rArr; CSccb::PortWrite(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write32(unsigned short, unsigned)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write16(unsigned short, unsigned short)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSccb::Write8(unsigned short, unsigned char)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_setResolution(const unsigned short&, const unsigned short&, const unsigned short&, const unsigned short&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_sendCommand()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_applyPatch()
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_init(unsigned short*)
</UL>

<P><STRONG><a name="[116]"></a>__sti___10_camera_cpp_g_sccb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, camera.o(i.__sti___10_camera_cpp_g_sccb))
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.init_array)
</UL>
<P><STRONG><a name="[117]"></a>__sti___9_param_cpp_55d340e8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, param.o(i.__sti___9_param_cpp_55d340e8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___9_param_cpp_55d340e8 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> param.o(.init_array)
</UL>
<P><STRONG><a name="[3d7]"></a>log(const char*, ...)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chirp.o(i._Z3logPKcz))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::setLink(Link*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chirp::Chirp(bool, bool, Link*)
</UL>

<P><STRONG><a name="[348]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.converPtrToTimeNum))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[349]"></a>converUSecToVal</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lpc43xx_timer.o(i.converUSecToVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[400]"></a>getPClock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc43xx_timer.o(i.getPClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getPClock &rArr; CGU_GetPCLKFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGU_GetPCLKFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[3ff]"></a>delayus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, platform_config.o(i.delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockInit
</UL>

<P><STRONG><a name="[345]"></a>_mbxProcess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipc_mbx.o(i._mbxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0CORE_IRQHandler
</UL>

<P><STRONG><a name="[412]"></a>spifiPrvCalculateHandleSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spifilib_dev_common.o(i.spifiPrvCalculateHandleSize))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
</UL>

<P><STRONG><a name="[416]"></a>spifiPrvCheckExtendedMatch</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, spifilib_dev_common.o(i.spifiPrvCheckExtendedMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spifiPrvCheckExtendedMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvFindDeviceMatch
</UL>

<P><STRONG><a name="[414]"></a>spifiPrvDevDetect</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, spifilib_dev_common.o(i.spifiPrvDevDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spifiPrvDevDetect &rArr; spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvFindDeviceMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvPartDetect
</UL>

<P><STRONG><a name="[9e]"></a>spifiPrvDevGetID</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spifilib_dev_common.o(i.spifiPrvDevGetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiPrvDevGetID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_dev_common.o(i.spifiPrvDevDetect)
</UL>
<P><STRONG><a name="[415]"></a>spifiPrvFindDeviceMatch</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, spifilib_dev_common.o(i.spifiPrvFindDeviceMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCheckExtendedMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvDevDetect
</UL>

<P><STRONG><a name="[413]"></a>spifiPrvMemset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spifilib_dev_common.o(i.spifiPrvMemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiPrvMemset
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
</UL>

<P><STRONG><a name="[411]"></a>spifiPrvPartDetect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spifilib_dev_common.o(i.spifiPrvPartDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = spifiPrvPartDetect &rArr; spifiPrvDevDetect &rArr; spifiPrvFindDeviceMatch &rArr; spifiPrvCheckExtendedMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvDevDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInitDevice
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiGetHandleMemSize
</UL>

<P><STRONG><a name="[405]"></a>spifi_HW_ResetController</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spifilib_dev_common.o(i.spifi_HW_ResetController))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiInit
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDevSetMemMode
</UL>

<P><STRONG><a name="[8d]"></a>spifiDevice4BInitReadCommand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDevice4BInitReadCommand))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
</UL>
<P><STRONG><a name="[94]"></a>spifiDevice4BInitWriteCommand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDevice4BInitWriteCommand))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
</UL>
<P><STRONG><a name="[40a]"></a>spifiDeviceAssignFxClearStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[40b]"></a>spifiDeviceAssignFxGetStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[409]"></a>spifiDeviceAssignFxInitDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[40e]"></a>spifiDeviceAssignFxReadCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[40d]"></a>spifiDeviceAssignFxSetOptions</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[40c]"></a>spifiDeviceAssignFxSetStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[40f]"></a>spifiDeviceAssignFxWriteCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxDeviceSetup
</UL>

<P><STRONG><a name="[85]"></a>spifiDeviceDataClearStatusNone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataClearStatusNone))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
</UL>
<P><STRONG><a name="[84]"></a>spifiDeviceDataClearStatusS25FL032P</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataClearStatusS25FL032P))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
</UL>
<P><STRONG><a name="[88]"></a>spifiDeviceDataGetStatusMX25L3235E</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusMX25L3235E))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
</UL>
<P><STRONG><a name="[86]"></a>spifiDeviceDataGetStatusS25FL032P</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusS25FL032P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiDeviceDataGetStatusS25FL032P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
</UL>
<P><STRONG><a name="[87]"></a>spifiDeviceDataGetStatusS25FL164K</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusS25FL164K))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiDeviceDataGetStatusS25FL164K
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
</UL>
<P><STRONG><a name="[89]"></a>spifiDeviceDataGetStatusW25Q80BV</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataGetStatusW25Q80BV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiDeviceDataGetStatusW25Q80BV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
</UL>
<P><STRONG><a name="[8b]"></a>spifiDeviceDataInitDeinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataInitDeinit))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
</UL>
<P><STRONG><a name="[8a]"></a>spifiDeviceDataInitDeinitS25FL164K</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataInitDeinitS25FL164K))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiDeviceDataInitDeinitS25FL164K
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
</UL>
<P><STRONG><a name="[8f]"></a>spifiDeviceDataSetOptsQuadModeBit6</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetOptsQuadModeBit6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDeviceDataSetOptsQuadModeBit6 &rArr; spifiPrvSetQuadModeBitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetQuadModeBitPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
</UL>
<P><STRONG><a name="[8e]"></a>spifiDeviceDataSetOptsQuadModeBit9</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetOptsQuadModeBit9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDeviceDataSetOptsQuadModeBit9 &rArr; spifiPrvSetQuadModeBitPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetQuadModeBitPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
</UL>
<P><STRONG><a name="[92]"></a>spifiDeviceDataSetStatusMX25L3235E</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusMX25L3235E))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDeviceDataSetStatusMX25L3235E &rArr; spifiPrvWaitUnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
</UL>
<P><STRONG><a name="[90]"></a>spifiDeviceDataSetStatusS25FL032P</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusS25FL032P))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDeviceDataSetStatusS25FL032P &rArr; spifiPrvWaitUnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
</UL>
<P><STRONG><a name="[91]"></a>spifiDeviceDataSetStatusS25FL164K</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceDataSetStatusS25FL164K))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiDeviceDataSetStatusS25FL164K &rArr; spifiPrvWaitUnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
</UL>
<P><STRONG><a name="[83]"></a>spifiDeviceFxError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceFxError))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceFxError
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceFxError
</UL>
<BR>[Address Reference Count : 7]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetOptions)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxSetStatus)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxClearStatus)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxGetStatus)
<LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxInitDeInit)
</UL>
<P><STRONG><a name="[8c]"></a>spifiDeviceInitReadCommand</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceInitReadCommand))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxReadCmd)
</UL>
<P><STRONG><a name="[93]"></a>spifiDeviceInitWriteCommand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceInitWriteCommand))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
</UL>
<P><STRONG><a name="[95]"></a>spifiDeviceInitWriteCommandMacronix</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiDeviceInitWriteCommandMacronix))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiDeviceAssignFxWriteCmd)
</UL>
<P><STRONG><a name="[9f]"></a>spifiFamFxDeviceSetup</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiFamFxDeviceSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxWriteCmd
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxSetStatus
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxSetOptions
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxReadCmd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxInitDeInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxGetStatus
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceAssignFxClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifi_REG_FAMILY_CommonCommandSet)
</UL>
<P><STRONG><a name="[97]"></a>spifiFamFxEraseAll</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxEraseAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiFamFxEraseAll &rArr; spifiPrvWaitUnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCheckWriteState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[98]"></a>spifiFamFxEraseBlock</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxEraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spifiFamFxEraseBlock &rArr; spifiFamFxGetDeviceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCheckWriteState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxGetDeviceStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[99]"></a>spifiFamFxEraseSubBlock</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxEraseSubBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spifiFamFxEraseSubBlock &rArr; spifiFamFxGetDeviceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCheckWriteState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxGetDeviceStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[9d]"></a>spifiFamFxGetDeviceStatus</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxGetDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spifiFamFxGetDeviceStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxPageProgram
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseSubBlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[96]"></a>spifiFamFxLockDeviceCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxLockDeviceCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiFamFxLockDeviceCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[9a]"></a>spifiFamFxPageProgram</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxPageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spifiFamFxPageProgram &rArr; spifiFamFxGetDeviceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvWaitUnBusy
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvSetWREN
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiPrvCheckWriteState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxGetDeviceStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[9b]"></a>spifiFamFxReadDevice</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxReadDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spifiFamFxReadDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[9c]"></a>spifiFamFxResetDevice</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiFamFxResetDevice))
<BR>[Address Reference Count : 1]<UL><LI> spifilib_fam_standard_cmd.o(i.spifiFamFxDeviceSetup)
</UL>
<P><STRONG><a name="[410]"></a>spifiPrvCheckWriteState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifiPrvCheckWriteState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiPrvCheckWriteState
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxPageProgram
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseSubBlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseAll
</UL>

<P><STRONG><a name="[406]"></a>spifiPrvSetQuadModeBitPosition</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spifilib_fam_standard_cmd.o(i.spifiPrvSetQuadModeBitPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spifiPrvSetQuadModeBitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetOptsQuadModeBit9
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetOptsQuadModeBit6
</UL>

<P><STRONG><a name="[407]"></a>spifiPrvSetWREN</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spifilib_fam_standard_cmd.o(i.spifiPrvSetWREN))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxPageProgram
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseSubBlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusS25FL164K
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusS25FL032P
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusMX25L3235E
</UL>

<P><STRONG><a name="[408]"></a>spifiPrvWaitUnBusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spifilib_fam_standard_cmd.o(i.spifiPrvWaitUnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spifiPrvWaitUnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxPageProgram
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseSubBlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseBlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiFamFxEraseAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusS25FL164K
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusS25FL032P
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spifiDeviceDataSetStatusMX25L3235E
</UL>

<P><STRONG><a name="[30f]"></a>_partition_sort</STRONG> (Thumb, 478 bytes, Stack size 296 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[428]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[41d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[31e]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[76]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_raise &rArr; __raise &rArr; __default_signal_handler &rArr; showError &rArr; lpc_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
