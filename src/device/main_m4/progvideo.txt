; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\progvideo.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\progvideo.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\progvideo.crf src\progvideo.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9ProgVideoC2Eh                  ; Alternate entry point ; ProgVideo::ProgVideo__sub_object(unsigned char)
                  _ZN9ProgVideoC1Eh PROC ; ProgVideo::ProgVideo(unsigned char)
;;;31     REGISTER_PROG(ProgVideo, PROG_NAME_VIDEO, "continuous stream of raw camera frames", PROG_VIDEO_MIN_TYPE, PROG_VIDEO_MAX_TYPE);
;;;32     ProgVideo::ProgVideo(uint8_t progIndex)
;;;33     {	
;;;34     	if (g_execArg==0)
;;;35     		cam_setMode(CAM_MODE0);
;;;36     	else
;;;37     		cam_setMode(CAM_MODE1);
;;;38     
;;;39     	// run m0 
;;;40     	exec_runM0(1);
;;;41     	SM_OBJECT->currentLine = 0;
;;;42     	SM_OBJECT->stream = 1;
;;;43     }
;;;44     
000000  b5f8              PUSH     {r3-r7,lr}
000002  499d              LDR      r1,|L1.632|
000004  4604              MOV      r4,r0
000006  6001              STR      r1,[r0,#0]
000008  489c              LDR      r0,|L1.636|
00000a  2500              MOVS     r5,#0
00000c  2601              MOVS     r6,#1
00000e  6801              LDR      r1,[r0,#0]  ; g_execArg
000010  2900              CMP      r1,#0
000012  d00c              BEQ      |L1.46|
000014  4668              MOV      r0,sp
000016  9600              STR      r6,[sp,#0]
000018  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
                  |L1.28|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       _Z10exec_runM0h ; exec_runM0(unsigned char)
000022  4897              LDR      r0,|L1.640|
000024  8005              STRH     r5,[r0,#0]
000026  1e80              SUBS     r0,r0,#2
000028  7006              STRB     r6,[r0,#0]
00002a  4620              MOV      r0,r4
00002c  bdf8              POP      {r3-r7,pc}
                  |L1.46|
00002e  4668              MOV      r0,sp
000030  9500              STR      r5,[sp,#0]
000032  f7fffffe          BL       _Z11cam_setModeRKh ; cam_setMode(const unsigned char&)
000036  e7f1              B        |L1.28|
                          ENDP

                  _Z15createProgVideoh PROC ; createProgVideo(unsigned char)
;;;30     
;;;31     REGISTER_PROG(ProgVideo, PROG_NAME_VIDEO, "continuous stream of raw camera frames", PROG_VIDEO_MIN_TYPE, PROG_VIDEO_MAX_TYPE);
000038  b510              PUSH     {r4,lr}
00003a  4604              MOV      r4,r0
00003c  4991              LDR      r1,|L1.644|
00003e  2004              MOVS     r0,#4
000040  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
000044  2800              CMP      r0,#0
000046  d003              BEQ      |L1.80|
000048  4621              MOV      r1,r4
00004a  e8bd4010          POP      {r4,lr}
00004e  e7fe              B        _ZN9ProgVideoC1Eh ; ProgVideo::ProgVideo(unsigned char)
                  |L1.80|
000050  bd10              POP      {r4,pc}
;;;32     ProgVideo::ProgVideo(uint8_t progIndex)
                          ENDP

                  _Z6getRGBtth PROC ; getRGB(unsigned short, unsigned short, unsigned char)
;;;70     
;;;71     uint32_t getRGB(uint16_t x, uint16_t y, uint8_t sat)
000052  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;72     {
000056  b088              SUB      sp,sp,#0x20
;;;73     	uint32_t rgb;
;;;74     	uint8_t r, g, b;
;;;75     	uint16_t i, j, rsum, gsum, bsum, d;
;;;76     	int16_t x0, x1, y0, y1;
;;;77     	uint8_t *p = (uint8_t *)SRAM1_LOC + CAM_PREBUF_LEN;
000058  4a8b              LDR      r2,|L1.648|
00005a  9203              STR      r2,[sp,#0xc]
;;;78     	// average a square of size W
;;;79     	
;;;80     	if (x>=CAM_RES2_WIDTH)
;;;81     		x = CAM_RES2_WIDTH-1;
00005c  f240143b          MOV      r4,#0x13b
000060  f5b07f9e          CMP      r0,#0x13c             ;80
000064  d300              BCC      |L1.104|
000066  4620              MOV      r0,r4
                  |L1.104|
;;;82     	if (y>=CAM_RES2_HEIGHT)
000068  29d0              CMP      r1,#0xd0
00006a  d300              BCC      |L1.110|
;;;83     		y = CAM_RES2_HEIGHT-1;
00006c  21cf              MOVS     r1,#0xcf
                  |L1.110|
;;;84     	
;;;85     	x0 = x-g_rgbSize;
00006e  4a87              LDR      r2,|L1.652|
000070  7812              LDRB     r2,[r2,#0]  ; g_rgbSize
000072  1a85              SUBS     r5,r0,r2
000074  fa0ffa85          SXTH     r10,r5
;;;86     	if (x0<=0)
000078  f1ba0f00          CMP      r10,#0
00007c  dc01              BGT      |L1.130|
;;;87     		x0 = 1;
00007e  f04f0a01          MOV      r10,#1
                  |L1.130|
;;;88     	x1 = x+g_rgbSize;
000082  4410              ADD      r0,r0,r2
000084  fa0ff880          SXTH     r8,r0
;;;89     	if (x1>=CAM_RES2_WIDTH)
000088  f5b87f9e          CMP      r8,#0x13c
00008c  db00              BLT      |L1.144|
;;;90     		x1 = CAM_RES2_WIDTH-1;
00008e  46a0              MOV      r8,r4
                  |L1.144|
;;;91     	
;;;92     	y0 = y-g_rgbSize;
000090  1a88              SUBS     r0,r1,r2
000092  b200              SXTH     r0,r0
000094  9004              STR      r0,[sp,#0x10]
;;;93     	if (y0<=0)
000096  9804              LDR      r0,[sp,#0x10]
000098  2800              CMP      r0,#0
00009a  dc01              BGT      |L1.160|
;;;94     		y0 = 1;
00009c  2001              MOVS     r0,#1
00009e  9004              STR      r0,[sp,#0x10]
                  |L1.160|
;;;95     	y1 = y+g_rgbSize;
0000a0  1888              ADDS     r0,r1,r2
0000a2  fa0ffb80          SXTH     r11,r0
;;;96     	if (y1>=CAM_RES2_HEIGHT)
0000a6  f1bb0fd0          CMP      r11,#0xd0
0000aa  db01              BLT      |L1.176|
;;;97     		y1 = CAM_RES2_HEIGHT-1;
0000ac  f04f0bcf          MOV      r11,#0xcf
                  |L1.176|
;;;98     	
;;;99     	for (i=y0, rsum=gsum=bsum=0; i<=y1; i++)
0000b0  9804              LDR      r0,[sp,#0x10]
0000b2  fa1ff980          UXTH     r9,r0
0000b6  2500              MOVS     r5,#0
0000b8  462f              MOV      r7,r5
0000ba  462e              MOV      r6,r5
0000bc  e023              B        |L1.262|
                  |L1.190|
;;;100    	{
;;;101    		for (j=x0; j<=x1; j++)
0000be  fa1ff48a          UXTH     r4,r10
0000c2  e01a              B        |L1.250|
                  |L1.196|
;;;102    		{
;;;103    			interpolate(p, j, i, CAM_RES2_WIDTH, &r, &g, &b);
0000c4  a906              ADD      r1,sp,#0x18
0000c6  aa07              ADD      r2,sp,#0x1c
0000c8  e9cd2100          STRD     r2,r1,[sp,#0]
0000cc  a805              ADD      r0,sp,#0x14
0000ce  9002              STR      r0,[sp,#8]
0000d0  f44f739e          MOV      r3,#0x13c
0000d4  464a              MOV      r2,r9
0000d6  4621              MOV      r1,r4
0000d8  9803              LDR      r0,[sp,#0xc]
0000da  f7fffffe          BL       _Z11interpolatePhtttS_S_S_ ; interpolate(unsigned char*, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned char*, unsigned char*)
;;;104    			rsum += r;
0000de  f89d001c          LDRB     r0,[sp,#0x1c]
0000e2  4428              ADD      r0,r0,r5
0000e4  b285              UXTH     r5,r0
;;;105    			gsum += g;
0000e6  f89d0018          LDRB     r0,[sp,#0x18]
0000ea  4430              ADD      r0,r0,r6
0000ec  b286              UXTH     r6,r0
;;;106    			bsum += b;
0000ee  f89d0014          LDRB     r0,[sp,#0x14]
0000f2  4438              ADD      r0,r0,r7
0000f4  b287              UXTH     r7,r0
0000f6  1c64              ADDS     r4,r4,#1              ;101
0000f8  b2a4              UXTH     r4,r4                 ;101
                  |L1.250|
0000fa  4544              CMP      r4,r8                 ;101
0000fc  dde2              BLE      |L1.196|
0000fe  f1090901          ADD      r9,r9,#1              ;99
000102  fa1ff989          UXTH     r9,r9                 ;99
                  |L1.262|
000106  45d9              CMP      r9,r11                ;99
000108  ddd9              BLE      |L1.190|
;;;107    		}
;;;108    	}
;;;109    	d = (y1-y0+1)*(x1-x0+1);
00010a  9804              LDR      r0,[sp,#0x10]
00010c  eba8010a          SUB      r1,r8,r10
000110  ebab0000          SUB      r0,r11,r0
000114  1c40              ADDS     r0,r0,#1
000116  1c49              ADDS     r1,r1,#1
000118  4348              MULS     r0,r1,r0
00011a  b280              UXTH     r0,r0
;;;110    	rsum /= d;
00011c  fbb5f1f0          UDIV     r1,r5,r0
;;;111    	gsum /= d;
000120  fbb6f1f0          UDIV     r1,r6,r0
;;;112    	bsum /= d;
000124  fbb7f0f0          UDIV     r0,r7,r0
;;;113    	
;;;114    	rgb = rgbPack(r, g, b); 
000128  f89d2014          LDRB     r2,[sp,#0x14]
00012c  f89d1018          LDRB     r1,[sp,#0x18]
000130  f89d001c          LDRB     r0,[sp,#0x1c]
000134  f7fffffe          BL       _Z7rgbPackjjj ; rgbPack(unsigned, unsigned, unsigned)
;;;115    	if (sat)
000138  990a              LDR      r1,[sp,#0x28]
00013a  2900              CMP      r1,#0
00013c  d001              BEQ      |L1.322|
;;;116    		return saturate(rgb);
00013e  f7fffffe          BL       _Z8saturatej ; saturate(unsigned)
                  |L1.322|
;;;117    	else
;;;118    		return rgb;
;;;119    }
000142  b00b              ADD      sp,sp,#0x2c
000144  e8bd8ff0          POP      {r4-r11,pc}
;;;120    
                          ENDP

                  _ZN9ProgVideoD2Ev                  ; Alternate entry point ; ProgVideo::~ProgVideo__sub_object()
                  _ZN9ProgVideoD1Ev PROC ; ProgVideo::~ProgVideo()
;;;44     
;;;45     ProgVideo::~ProgVideo()
;;;46     {
;;;47     	exec_stopM0();
;;;48     }
;;;49     
000148  b510              PUSH     {r4,lr}
00014a  4604              MOV      r4,r0
00014c  484a              LDR      r0,|L1.632|
00014e  6020              STR      r0,[r4,#0]
000150  f7fffffe          BL       _Z11exec_stopM0v ; exec_stopM0()
000154  4620              MOV      r0,r4
000156  bd10              POP      {r4,pc}
                          ENDP

                  _ZN9ProgVideoD0Ev PROC ; ProgVideo::~ProgVideo__deallocating()
000158  b510              PUSH     {r4,lr}               ;0
00015a  f7fffffe          BL       _ZN9ProgVideoD1Ev ; ProgVideo::~ProgVideo()
00015e  e8bd4010          POP      {r4,lr}               ;0
000162  f7ffbffe          B.W      _ZdlPv ; operator delete (void*)
                          ENDP

                  _ZN9ProgVideo10sendCustomEh PROC ; ProgVideo::sendCustom(unsigned char)
;;;149    
;;;150    void ProgVideo::sendCustom(uint8_t renderFlags)
000166  b538              PUSH     {r3-r5,lr}
;;;151    {
;;;152    	uint32_t fourcc;
;;;153    
;;;154    	// cooked mode
;;;155    	if (g_execArg==1) 
000168  4844              LDR      r0,|L1.636|
;;;156    		cam_sendFrame(g_chirpUsb, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, RENDER_FLAG_FLUSH, FOURCC('C','M','V','2'));
00016a  f44f719e          MOV      r1,#0x13c
00016e  6802              LDR      r2,[r0,#0]  ; g_execArg
000170  4847              LDR      r0,|L1.656|
000172  2a01              CMP      r2,#1                 ;155
000174  6800              LDR      r0,[r0,#0]
000176  d01d              BEQ      |L1.436|
;;;157    	//  experimental mode, for new monmodules, etc.
;;;158    	else if (100<=g_execArg && g_execArg<200) 
000178  f1a20364          SUB      r3,r2,#0x64
00017c  2b64              CMP      r3,#0x64
00017e  d220              BCS      |L1.450|
;;;159    	{
;;;160    		fourcc = FOURCC('E','X',((g_execArg%100)/10 + '0'), ((g_execArg%10) + '0'));
000180  2364              MOVS     r3,#0x64
000182  fb92f4f3          SDIV     r4,r2,r3
000186  fb032414          MLS      r4,r3,r4,r2
00018a  230a              MOVS     r3,#0xa
00018c  fb94f4f3          SDIV     r4,r4,r3
000190  3430              ADDS     r4,r4,#0x30
000192  f6450545          MOV      r5,#0x5845
000196  eb054404          ADD      r4,r5,r4,LSL #16
00019a  fb92f5f3          SDIV     r5,r2,r3
00019e  fb032215          MLS      r2,r3,r5,r2
0001a2  3230              ADDS     r2,r2,#0x30
0001a4  ea446202          ORR      r2,r4,r2,LSL #24
;;;161    		cam_sendFrame(g_chirpUsb, CAM_RES2_WIDTH, CAM_RES2_HEIGHT, RENDER_FLAG_FLUSH, fourcc);
0001a8  9200              STR      r2,[sp,#0]
0001aa  2301              MOVS     r3,#1
0001ac  22d0              MOVS     r2,#0xd0
0001ae  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
;;;162    	}
;;;163    	// undefined, just send plain raw frame (BA81)
;;;164    	else 
;;;165    		cam_sendFrame(g_chirpUsb, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
;;;166    
;;;167    }
0001b2  bd38              POP      {r3-r5,pc}
                  |L1.436|
0001b4  4a37              LDR      r2,|L1.660|
0001b6  9200              STR      r2,[sp,#0]            ;156
0001b8  2301              MOVS     r3,#1                 ;156
0001ba  22d0              MOVS     r2,#0xd0              ;156
0001bc  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
0001c0  bd38              POP      {r3-r5,pc}
                  |L1.450|
0001c2  4a35              LDR      r2,|L1.664|
0001c4  9200              STR      r2,[sp,#0]            ;165
0001c6  2301              MOVS     r3,#1                 ;165
0001c8  22d0              MOVS     r2,#0xd0              ;165
0001ca  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
0001ce  bd38              POP      {r3-r5,pc}
;;;168    
                          ENDP

                  _ZN9ProgVideo4loopEPc PROC ; ProgVideo::loop(char*)
;;;49     
;;;50     int ProgVideo::loop(char *status)
0001d0  b5f8              PUSH     {r3-r7,lr}
;;;51     {
0001d2  4606              MOV      r6,r0
;;;52     	while(SM_OBJECT->currentLine < CAM_RES2_HEIGHT-2)
0001d4  4d2a              LDR      r5,|L1.640|
;;;53     	{
;;;54     		if (SM_OBJECT->stream==0)
0001d6  1eac              SUBS     r4,r5,#2
0001d8  e004              B        |L1.484|
                  |L1.474|
0001da  7821              LDRB     r1,[r4,#0]
0001dc  b911              CBNZ     r1,|L1.484|
;;;55     			printf("not streaming\n");
0001de  a02f              ADR      r0,|L1.668|
0001e0  f7fffffe          BL       lpc_printf
                  |L1.484|
0001e4  8829              LDRH     r1,[r5,#0]            ;52
0001e6  29ce              CMP      r1,#0xce              ;52
0001e8  d3f7              BCC      |L1.474|
;;;56     	}
;;;57     	SM_OBJECT->stream = 0; // pause after frame grab is finished
0001ea  2700              MOVS     r7,#0
0001ec  7027              STRB     r7,[r4,#0]
;;;58     	
;;;59     	// send over USB 
;;;60     	if (g_execArg==0)
0001ee  4823              LDR      r0,|L1.636|
0001f0  6800              LDR      r0,[r0,#0]  ; g_execArg
0001f2  b140              CBZ      r0,|L1.518|
;;;61     		cam_sendFrame(g_chirpUsb, CAM_RES2_WIDTH, CAM_RES2_HEIGHT);
;;;62     	else
;;;63     		sendCustom();
0001f4  2101              MOVS     r1,#1
0001f6  4630              MOV      r0,r6
0001f8  f7fffffe          BL       _ZN9ProgVideo10sendCustomEh ; ProgVideo::sendCustom(unsigned char)
                  |L1.508|
;;;64     	// resume streaming
;;;65     	SM_OBJECT->currentLine = 0;
0001fc  802f              STRH     r7,[r5,#0]
;;;66     	SM_OBJECT->stream = 1; // resume streaming
0001fe  2001              MOVS     r0,#1
000200  7020              STRB     r0,[r4,#0]
;;;67     
;;;68     	return 0;
000202  2000              MOVS     r0,#0
;;;69     }
000204  bdf8              POP      {r3-r7,pc}
                  |L1.518|
000206  4824              LDR      r0,|L1.664|
000208  9000              STR      r0,[sp,#0]            ;61
00020a  4821              LDR      r0,|L1.656|
00020c  2301              MOVS     r3,#1                 ;61
00020e  22d0              MOVS     r2,#0xd0              ;61
000210  f44f719e          MOV      r1,#0x13c             ;61
000214  6800              LDR      r0,[r0,#0]            ;61  ; g_chirpUsb
000216  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
00021a  e7ef              B        |L1.508|
;;;70     
                          ENDP

                  _ZN9ProgVideo6packetEhPKhhb PROC ; ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;120    
;;;121    int ProgVideo::packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
00021c  b510              PUSH     {r4,lr}
;;;122    {
00021e  9c02              LDR      r4,[sp,#8]
;;;123    	if (type==TYPE_REQUEST_GETRGB)
000220  2970              CMP      r1,#0x70
000222  d002              BEQ      |L1.554|
;;;124    	{
;;;125    		uint16_t x, y;
;;;126    		uint32_t rgb;
;;;127    		uint8_t saturate;
;;;128    
;;;129    		if (len!=5)
;;;130    		{
;;;131    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;132    			return 0;
;;;133    		}
;;;134    		
;;;135    		x = *(uint16_t *)(data+0);
;;;136    		y = *(uint16_t *)(data+2);
;;;137    		saturate = *(data+4);
;;;138    
;;;139    		rgb = getRGB(x, y, saturate);
;;;140    		ser_sendResult(rgb, checksum);
;;;141    		
;;;142    		return 0;
;;;143    	}
;;;144    	
;;;145    	// nothing rings a bell, return error
;;;146    	return -1;
000224  f04f30ff          MOV      r0,#0xffffffff
;;;147    }
000228  bd10              POP      {r4,pc}
                  |L1.554|
00022a  2b05              CMP      r3,#5                 ;129
00022c  d006              BEQ      |L1.572|
00022e  4621              MOV      r1,r4                 ;131
000230  f06f0002          MVN      r0,#2                 ;131
000234  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
000238  2000              MOVS     r0,#0                 ;132
00023a  bd10              POP      {r4,pc}
                  |L1.572|
00023c  8810              LDRH     r0,[r2,#0]            ;135
00023e  8851              LDRH     r1,[r2,#2]            ;136
000240  7912              LDRB     r2,[r2,#4]            ;137
000242  f7fffffe          BL       _Z6getRGBtth ; getRGB(unsigned short, unsigned short, unsigned char)
000246  4621              MOV      r1,r4                 ;140
000248  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
00024c  2000              MOVS     r0,#0                 ;142
00024e  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  __sti___13_progvideo_cpp_827dad01 PROC
000250  b5f0              PUSH     {r4-r7,lr}            ;0
000252  2470              MOVS     r4,#0x70              ;0
000254  a215              ADR      r2,|L1.684|
000256  a317              ADR      r3,|L1.692|
000258  257f              MOVS     r5,#0x7f              ;0
00025a  f2af2123          ADR      r1,_Z15createProgVideoh + 1 ; createProgVideo(unsigned char)
00025e  4f1f              LDR      r7,|L1.732|
000260  7838              LDRB     r0,[r7,#0]            ;0  ; _ZN13ProgTableUtil16m_progTableIndexE
000262  1c46              ADDS     r6,r0,#1              ;0
000264  703e              STRB     r6,[r7,#0]            ;0
000266  4e1e              LDR      r6,|L1.736|
000268  eb061000          ADD      r0,r6,r0,LSL #4       ;0
00026c  6002              STR      r2,[r0,#0]            ;0
00026e  6043              STR      r3,[r0,#4]            ;0
000270  7204              STRB     r4,[r0,#8]            ;0
000272  7245              STRB     r5,[r0,#9]            ;0
000274  60c1              STR      r1,[r0,#0xc]          ;0
000276  bdf0              POP      {r4-r7,pc}            ;0
                          ENDP

                  |L1.632|
                          DCD      _ZTV9ProgVideo+0x8 ; vtable for ProgVideo
                  |L1.636|
                          DCD      g_execArg
                  |L1.640|
                          DCD      0x2000fc02
                  |L1.644|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.648|
                          DCD      0x10080040
                  |L1.652|
                          DCD      ||.data||
                  |L1.656|
                          DCD      g_chirpUsb
                  |L1.660|
                          DCD      0x32564d43
                  |L1.664|
                          DCD      0x31384142
                  |L1.668|
00029c  6e6f7420          DCB      "not streaming\n",0
0002a0  73747265
0002a4  616d696e
0002a8  670a00  
0002ab  00                DCB      0
                  |L1.684|
0002ac  76696465          DCB      "video",0
0002b0  6f00    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L1.692|
0002b4  636f6e74          DCB      "continuous stream of raw camera frames",0
0002b8  696e756f
0002bc  75732073
0002c0  74726561
0002c4  6d206f66
0002c8  20726177
0002cc  2063616d
0002d0  65726120
0002d4  6672616d
0002d8  657300  
0002db  00                DCB      0
                  |L1.732|
                          DCD      _ZN13ProgTableUtil16m_progTableIndexE ; ProgTableUtil::m_progTableIndex
                  |L1.736|
                          DCD      _ZN13ProgTableUtil11m_progTableE ; ProgTableUtil::m_progTable

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  g_rgbSize
000000  00                DCB      0x00
                  g_registerProgVideo
000001  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___13_progvideo_cpp_827dad01

                          AREA ||.constdata__ZZN4Prog7getViewEtPPKcEs||, COMGROUP=_ZZN4Prog7getViewEtPPKcEs, DATA, READONLY, ALIGN=0

                  _ZZN4Prog7getViewEtPPKcEs ; Prog::getView(unsigned short, const char**)::string
000000  44656661          DCB      0x44,0x65,0x66,0x61
000004  756c7400          DCB      0x75,0x6c,0x74,0x00

                          AREA ||.constdata__ZTV9ProgVideo||, COMGROUP=_ZTV9ProgVideo, DATA, READONLY, ALIGN=2

                  _ZTV9ProgVideo ; vtable for ProgVideo
                          DCD      0x00000000
                          DCD      _ZTI9ProgVideo ; typeinfo for ProgVideo
                          DCD      _ZN9ProgVideoD1Ev ; ProgVideo::~ProgVideo()
                          DCD      _ZN9ProgVideoD0Ev ; ProgVideo::~ProgVideo__deallocating()
                          DCD      _ZN9ProgVideo4loopEPc ; ProgVideo::loop(char*)
                          DCD      _ZN4Prog7getViewEtPPKc ; Prog::getView(unsigned short, const char**)
                          DCD      _ZN4Prog7setViewEt ; Prog::setView(unsigned short)
                          DCD      _ZN4Prog9getActionEtPPKcS2_ ; Prog::getAction(unsigned short, const char**, const char**)
                          DCD      _ZN4Prog13getResolutionEPtS0_h ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
                          DCD      _ZN9ProgVideo6packetEhPKhhb ; ProgVideo::packet(unsigned char, const unsigned char*, unsigned char, bool)

                          AREA ||i._ZN4Prog7getViewEtPPKc||, COMGROUP=_ZN4Prog7getViewEtPPKc, CODE, READONLY, ALIGN=2

                  _ZN4Prog7getViewEtPPKc PROC ; Prog::getView(unsigned short, const char**)
;;;50     	virtual int loop(char *status) = 0; // if status is null, no gui monitor (PixyMon) is present
;;;51     	virtual int getView(uint16_t index, const char **name)
000000  2900              CMP      r1,#0
;;;52     	{
000002  d002              BEQ      |L23.10|
;;;53     		if (index==0)
;;;54     		{
;;;55     			*name = "Default";
;;;56     			return 1;
;;;57     		}
;;;58     		return -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;59     	};
000008  4770              BX       lr
                  |L23.10|
00000a  4802              LDR      r0,|L23.20|
00000c  6010              STR      r0,[r2,#0]            ;55
00000e  2001              MOVS     r0,#1                 ;56
000010  4770              BX       lr
;;;60     	virtual int setView(uint16_t index)
                          ENDP

000012  0000              DCW      0x0000
                  |L23.20|
                          DCD      _ZZN4Prog7getViewEtPPKcEs ; Prog::getView(unsigned short, const char**)::string

                          AREA ||area_number.24||, COMGROUP=_ZN4Prog7getViewEtPPKc, LINKORDER=||i._ZN4Prog7getViewEtPPKc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog7getViewEtPPKc||
                          DCD      0x00000001

                          AREA ||i._ZN4Prog7setViewEt||, COMGROUP=_ZN4Prog7setViewEt, CODE, READONLY, ALIGN=1

                  _ZN4Prog7setViewEt PROC ; Prog::setView(unsigned short)
;;;59     	};
;;;60     	virtual int setView(uint16_t index)
000000  2900              CMP      r1,#0
;;;61     	{
000002  d002              BEQ      |L30.10|
;;;62     		if (index==0) // default implementation is single-view
;;;63     			return 0;
;;;64     		return -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;65     	}
000008  4770              BX       lr
                  |L30.10|
00000a  2000              MOVS     r0,#0                 ;63
00000c  4770              BX       lr
;;;66     	virtual int getAction(uint16_t index, const char **name, const char **scriptlet)
                          ENDP


                          AREA ||area_number.31||, COMGROUP=_ZN4Prog7setViewEt, LINKORDER=||i._ZN4Prog7setViewEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog7setViewEt||
                          DCD      0x00000001

                          AREA ||i._ZN4Prog9getActionEtPPKcS2_||, COMGROUP=_ZN4Prog9getActionEtPPKcS2_, CODE, READONLY, ALIGN=1

                  _ZN4Prog9getActionEtPPKcS2_ PROC ; Prog::getAction(unsigned short, const char**, const char**)
;;;65     	}
;;;66     	virtual int getAction(uint16_t index, const char **name, const char **scriptlet)
000000  f04f30ff          MOV      r0,#0xffffffff
;;;67     	{
;;;68     		return -1;
;;;69     	}
000004  4770              BX       lr
;;;70     	virtual void getResolution(uint16_t *width, uint16_t *height, uint8_t type)
                          ENDP


                          AREA ||area_number.38||, COMGROUP=_ZN4Prog9getActionEtPPKcS2_, LINKORDER=||i._ZN4Prog9getActionEtPPKcS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog9getActionEtPPKcS2_||
                          DCD      0x00000001

                          AREA ||i._ZN4Prog13getResolutionEPtS0_h||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, CODE, READONLY, ALIGN=1

                  _ZN4Prog13getResolutionEPtS0_h PROC ; Prog::getResolution(unsigned short*, unsigned short*, unsigned char)
;;;69     	}
;;;70     	virtual void getResolution(uint16_t *width, uint16_t *height, uint8_t type)
000000  f44f709e          MOV      r0,#0x13c
;;;71     	{
;;;72     		*width = CAM_RES2_WIDTH;
000004  8008              STRH     r0,[r1,#0]
;;;73     		*height = CAM_RES2_HEIGHT;
000006  20d0              MOVS     r0,#0xd0
000008  8010              STRH     r0,[r2,#0]
;;;74     	}
00000a  4770              BX       lr
;;;75     	virtual int packet(uint8_t type, const uint8_t *data, uint8_t len, bool checksum)
                          ENDP


                          AREA ||area_number.45||, COMGROUP=_ZN4Prog13getResolutionEPtS0_h, LINKORDER=||i._ZN4Prog13getResolutionEPtS0_h||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Prog13getResolutionEPtS0_h||
                          DCD      0x00000001

                          AREA ||.constdata__ZTI9ProgVideo||, COMGROUP=_ZTI9ProgVideo, DATA, READONLY, ALIGN=2

                  _ZTI9ProgVideo ; typeinfo for ProgVideo
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS9ProgVideo ; typeinfo name for ProgVideo
                          DCD      _ZTI4Prog ; typeinfo for Prog

                          AREA ||.constdata__ZTI4Prog||, COMGROUP=_ZTI4Prog, DATA, READONLY, ALIGN=2

                  _ZTI4Prog ; typeinfo for Prog
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS4Prog ; typeinfo name for Prog

                          AREA ||.constdata__ZTS9ProgVideo||, COMGROUP=_ZTS9ProgVideo, DATA, READONLY, ALIGN=0

                  _ZTS9ProgVideo ; typeinfo name for ProgVideo
000000  3950726f          DCB      0x39,0x50,0x72,0x6f
000004  67566964          DCB      0x67,0x56,0x69,0x64
000008  656f00            DCB      0x65,0x6f,0x00

                          AREA ||.constdata__ZTS4Prog||, COMGROUP=_ZTS4Prog, DATA, READONLY, ALIGN=0

                  _ZTS4Prog ; typeinfo name for Prog
000000  3450726f          DCB      0x34,0x50,0x72,0x6f
000004  6700              DCB      0x67,0x00

;*** Start embedded assembler ***

#line 1 "src\\progvideo.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_827dad01___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___13_progvideo_cpp_827dad01___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_progvideo_cpp_827dad01___Z7__REVSHi|
#line 144
|__asm___13_progvideo_cpp_827dad01___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
