; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\serial.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\serial.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\serial.crf src\serial.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z13ser_getSerialv PROC ; ser_getSerial()
;;;790    
;;;791    Iserial *ser_getSerial()
000000  48f8              LDR      r0,|L1.996|
;;;792    {
;;;793    	return g_serial;
000002  69c0              LDR      r0,[r0,#0x1c]  ; g_serial
;;;794    }
000004  4770              BX       lr
                          ENDP

                  _Z12lego_getDataPhj PROC ; lego_getData(unsigned char*, unsigned)
;;;66     
;;;67     uint16_t lego_getData(uint8_t *buf, uint32_t buflen)
000006  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;68     {
00000a  b08d              SUB      sp,sp,#0x34
00000c  4604              MOV      r4,r0
;;;69     	static uint16_t lastReverse = 0xffff;
;;;70     	static uint8_t lastLamp = 0;
;;;71     	uint8_t c, reverse, lamp;
;;;72     	uint16_t d, x, y;
;;;73     	bool sat;
;;;74     	int8_t turn;
;;;75     	int16_t turn16;
;;;76     	uint16_t numBlobs;
;;;77     	uint32_t temp, width, height, r, g, b;
;;;78     	Iserial *serial = ser_getSerial();
00000e  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000012  4606              MOV      r6,r0
;;;79     	bool error = false;
000014  2500              MOVS     r5,#0
;;;80     	static int8_t ccc = -1;
;;;81     	static int8_t line = -1;
;;;82     	static int8_t video = -1;
;;;83     	
;;;84     	if (serial->receive(&c, 1)==0)
000016  6830              LDR      r0,[r6,#0]
000018  2201              MOVS     r2,#1
00001a  a90c              ADD      r1,sp,#0x30
00001c  6883              LDR      r3,[r0,#8]
00001e  4630              MOV      r0,r6
000020  4798              BLX      r3
000022  b1c0              CBZ      r0,|L1.86|
;;;85     		return 0;
;;;86     
;;;87     	if (c>=0x50 && c<=0x59)
000024  f89d0030          LDRB     r0,[sp,#0x30]
;;;88     	{
;;;89     		if (ccc<0)
000028  4fee              LDR      r7,|L1.996|
00002a  f1a00150          SUB      r1,r0,#0x50           ;87
00002e  2909              CMP      r1,#9                 ;87
000030  d817              BHI      |L1.98|
000032  f9970007          LDRSB    r0,[r7,#7]  ; ccc
000036  2800              CMP      r0,#0
000038  da04              BGE      |L1.68|
;;;90     			ccc = exec_getProgIndex("color_connected_components");
00003a  2100              MOVS     r1,#0
00003c  a0ea              ADR      r0,|L1.1000|
00003e  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
000042  71f8              STRB     r0,[r7,#7]
                  |L1.68|
;;;91     		error = exec_setProgIndex(ccc)!=ccc;
000044  79f8              LDRB     r0,[r7,#7]  ; ccc
000046  f7fffffe          BL       _Z17exec_setProgIndexh ; exec_setProgIndex(unsigned char)
00004a  f9971007          LDRSB    r1,[r7,#7]  ; ccc
00004e  4288              CMP      r0,r1
000050  d005              BEQ      |L1.94|
000052  2501              MOVS     r5,#1
000054  e032              B        |L1.188|
                  |L1.86|
000056  2000              MOVS     r0,#0                 ;85
                  |L1.88|
;;;92     	}
;;;93     	else if (c>=0x5a && c<=0x5d)
;;;94     	{
;;;95     		if (line<0)
;;;96     			line = exec_getProgIndex("line_tracking");
;;;97     		error = exec_setProgIndex(line)!=line;
;;;98     	}
;;;99     	else if (c==0x5e)
;;;100    	{
;;;101    		if (video<0)
;;;102    			video = exec_getProgIndex("video");
;;;103    		error = exec_setProgIndex(video)!=video;
;;;104    	}
;;;105    	
;;;106    		
;;;107    #if 1
;;;108    	if (c==0x00)
;;;109    	{
;;;110    		const char *str = "V0.4";
;;;111    		strcpy((char *)buf, str);
;;;112    		return 5;
;;;113    	}
;;;114    	if (c==0x08)
;;;115    	{
;;;116    		const char *str = "Pixy2";
;;;117    		strcpy((char *)buf, str);
;;;118    		return 6;
;;;119    	}
;;;120    	else if (c==0x10)
;;;121    	{
;;;122    		const char *str = "Pixy2";
;;;123    		strcpy((char *)buf, str);
;;;124    		return 6;		
;;;125    	}
;;;126    	else 
;;;127    #endif
;;;128    	if (c==0x50)
;;;129    	{
;;;130    		BlobA *max;
;;;131    #if 0
;;;132    		buf[0] = 1;
;;;133    		buf[1] = 2;
;;;134    		buf[2] = 3;
;;;135    		buf[3] = 4;
;;;136    		buf[4] = 5;
;;;137    		buf[5] = 6;
;;;138    		buf[6] = 7;
;;;139    #else
;;;140    		max = (BlobA *)g_blobs->getMaxBlob();
;;;141    		if (max==0)
;;;142    			memset(buf, 0, 7);
;;;143    		else if (max==(BlobA *)-1 || error)
;;;144    			memset(buf, -1, 7);
;;;145    		else
;;;146    		{
;;;147    			width = max->m_right - max->m_left;
;;;148    			height = max->m_bottom - max->m_top;
;;;149    			*(uint16_t *)buf = max->m_model; // signature
;;;150    			temp = ((max->m_left + width/2)*829)>>10;
;;;151    			buf[2] = temp; // x
;;;152    			temp = ((max->m_top + height/2)*1262)>>10;
;;;153    			buf[3] = temp; // y
;;;154    			temp = (width*829)>>10;
;;;155    			buf[4] = temp; // width
;;;156    			temp = (height*1262)>>10;
;;;157    			buf[5] = temp; // height
;;;158    			if (max->m_model>CL_NUM_SIGNATURES)
;;;159    			{
;;;160    				temp = ((int32_t)max->m_angle*91)>>7;
;;;161    				g_angle = temp;
;;;162    			}
;;;163    		}
;;;164    #endif		
;;;165    		return 6;
;;;166    	}
;;;167    	else if (c==0x60)
;;;168    	{
;;;169    		buf[0] = g_angle;
;;;170    		return 1;
;;;171    	}
;;;172    	else if (c>=0x51 && c<=0x57)
;;;173    	{
;;;174    #if 0
;;;175    		buf[0] = 1;
;;;176    		buf[1] = 2;
;;;177    		buf[2] = 3;
;;;178    		buf[3] = 4;
;;;179    		buf[4] = 5;
;;;180    #else
;;;181    		BlobA *max;
;;;182    		max = g_blobs->getMaxBlob(c-0x50, &numBlobs);
;;;183    		if (max==0)
;;;184    			memset(buf, 0, 5);
;;;185    		else if (max==(BlobA *)-1 || error)
;;;186    			memset(buf, -1, 5);
;;;187    		else
;;;188    		{
;;;189    			width = max->m_right - max->m_left;
;;;190    			height = max->m_bottom - max->m_top;
;;;191    			buf[0] = numBlobs; // number of blocks that match signature
;;;192    			temp = ((max->m_left + width/2)*829)>>10;
;;;193    			buf[1] = temp; // x
;;;194    			temp = ((max->m_top + height/2)*1262)>>10;
;;;195    			buf[2] = temp;	// y
;;;196    			temp = (width*829)>>10;
;;;197    			buf[3] = temp; // width
;;;198    			temp = (height*1262)>>10;
;;;199    			buf[4] = temp; // height
;;;200    		}
;;;201    #endif
;;;202    		return 5;
;;;203    	}
;;;204    	else if (c==0x58)
;;;205    	{
;;;206    		BlobA *max;
;;;207    		if (serial->receive((uint8_t *)&d, 2)<2) // receive cc signature to look for
;;;208    			return 0;
;;;209    #if 0
;;;210    		buf[0] = 1;
;;;211    		buf[1] = 2;
;;;212    		buf[2] = 3;
;;;213    		buf[3] = 4;
;;;214    		buf[4] = 5;
;;;215    		buf[5] = 6;
;;;216    #else
;;;217    		max = (BlobA *)g_blobs->getMaxBlob(d, &numBlobs); 
;;;218    		if (max==0)
;;;219    			memset(buf, 0, 6);
;;;220    		else if (max==(BlobA *)-1 || error)
;;;221    			memset(buf, -1, 6);
;;;222    		else
;;;223    		{
;;;224    			width = max->m_right - max->m_left;
;;;225    			height = max->m_bottom - max->m_top;
;;;226    			buf[0] = numBlobs; // number of cc blocks that match 
;;;227    			temp = ((max->m_left + width/2)*829)>>10;
;;;228    			buf[1] = temp; // x
;;;229    			temp = ((max->m_top + height/2)*1262)>>10;
;;;230    			buf[2] = temp; // y
;;;231    			temp = (width*829)>>10;
;;;232    			buf[3] = temp; // width
;;;233    			temp = (height*1262)>>10;
;;;234    			buf[4] = temp; // height
;;;235    			temp = ((int32_t)max->m_angle*91)>>7;
;;;236    			buf[5] = temp; // angle
;;;237    		}
;;;238    #endif
;;;239    		return 6;
;;;240    	}
;;;241    	else if (c==0x5a)
;;;242    	{
;;;243    		if (serial->receive((uint8_t *)&turn, 1)==1 && 
;;;244    			serial->receive((uint8_t *)&reverse, 1)==1 &&
;;;245    			serial->receive((uint8_t *)&lamp, 1)==1 &&
;;;246    			error==false)
;;;247    		{
;;;248    			turn16 = turn;
;;;249    			turn16 *= 180; // scale accordingly
;;;250    			turn16 /= 127;
;;;251    			line_setNextTurnAngle(turn16);
;;;252    			if (lastReverse!=0xffff && lastReverse!=reverse)
;;;253    				line_reversePrimary();
;;;254    			if (lastLamp!=lamp)
;;;255    			{
;;;256    				if (lamp)
;;;257    					led_setLamp(0xff, 0xff);
;;;258    				else
;;;259    					led_setLamp(0, 0);
;;;260    			}
;;;261    			
;;;262    			lastReverse = reverse;
;;;263    			lastLamp = lamp;
;;;264    			return line_legoLineData(buf, buflen);
;;;265    			}
;;;266    		else 
;;;267    		{
;;;268    			memset(buf, -1, 4);
;;;269    			return 4;
;;;270    		}
;;;271    	}
;;;272    	else if (c==0x5e) // get RGB
;;;273    	{
;;;274    		if (serial->receive(buf, 3)==3 && 
;;;275    			error==false)
;;;276    		{
;;;277    			x = buf[0]*(CAM_RES2_WIDTH-1)/255;
;;;278    			y = buf[1]*(CAM_RES2_HEIGHT-1)/255;
;;;279    			sat = buf[2];
;;;280    			temp = getRGB(x, y, sat);
;;;281    			rgbUnpack(temp, &r, &g, &b);
;;;282    			buf[0] = r;
;;;283    			buf[1] = g;
;;;284    			buf[2] = b;
;;;285    			return 3;
;;;286    		}
;;;287    		else
;;;288    		{
;;;289    			memset(buf, -1, 3);
;;;290    			return 3;
;;;291    		}
;;;292    	}
;;;293    	else if (c==0x62)
;;;294    	{
;;;295    		if (serial->receive((uint8_t *)&lamp, 1)==1 && 
;;;296    			error==false)
;;;297    			{
;;;298    				if (exec_getProg(ccc)==true)
;;;299    					led_setLamp(lamp ? 0xff : 0, 0);
;;;300    				else if (lamp)
;;;301    					led_setLamp(0xff, 0xff);
;;;302    				else
;;;303    					led_setLamp(0, 0);
;;;304    			}
;;;305    		buf[0] = 1;	
;;;306    		return 1;
;;;307    	}
;;;308    	else  
;;;309    	{
;;;310    #if 0
;;;311    		static uint8_t c = 0;
;;;312    
;;;313    		buf[0] = c++;
;;;314    #else
;;;315    		//printf("%x\n", c);														  
;;;316    
;;;317    		if (c==0x42) // this works in port view mode on the ev3's LCD
;;;318    		{
;;;319    			BlobA *max;
;;;320    			max = g_blobs->getMaxBlob();
;;;321    			if (max==0 || max==(BlobA *)-1)
;;;322    				buf[0] = 0;
;;;323    			else
;;;324    			{
;;;325    				width = max->m_right - max->m_left;
;;;326    				temp = ((max->m_left + width/2)*829)>>10;
;;;327    				buf[0] = temp;
;;;328    			}
;;;329    		}
;;;330    		else
;;;331    			buf[0] = 1;	 // need to return nonzero value for other inquiries or LEGO brick will think we're an analog sensor
;;;332    
;;;333    #endif
;;;334    		return 1;
;;;335    	}
;;;336    }
000058  b00f              ADD      sp,sp,#0x3c
00005a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.94|
00005e  2500              MOVS     r5,#0                 ;91
000060  e02c              B        |L1.188|
                  |L1.98|
000062  f1a0015a          SUB      r1,r0,#0x5a           ;93
000066  2903              CMP      r1,#3                 ;93
000068  d813              BHI      |L1.146|
00006a  f9970008          LDRSB    r0,[r7,#8]            ;95  ; line
00006e  2800              CMP      r0,#0                 ;95
000070  da04              BGE      |L1.124|
000072  2100              MOVS     r1,#0                 ;96
000074  a0e3              ADR      r0,|L1.1028|
000076  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
00007a  7238              STRB     r0,[r7,#8]            ;96
                  |L1.124|
00007c  7a38              LDRB     r0,[r7,#8]            ;97  ; line
00007e  f7fffffe          BL       _Z17exec_setProgIndexh ; exec_setProgIndex(unsigned char)
000082  f9971008          LDRSB    r1,[r7,#8]            ;97  ; line
000086  4288              CMP      r0,r1                 ;97
000088  d001              BEQ      |L1.142|
00008a  2501              MOVS     r5,#1                 ;97
00008c  e016              B        |L1.188|
                  |L1.142|
00008e  2500              MOVS     r5,#0                 ;97
000090  e014              B        |L1.188|
                  |L1.146|
000092  285e              CMP      r0,#0x5e              ;99
000094  d112              BNE      |L1.188|
000096  f9970009          LDRSB    r0,[r7,#9]            ;101  ; video
00009a  2800              CMP      r0,#0                 ;101
00009c  da04              BGE      |L1.168|
00009e  2100              MOVS     r1,#0                 ;102
0000a0  a0dc              ADR      r0,|L1.1044|
0000a2  f7fffffe          BL       _Z17exec_getProgIndexPKcP5Chirp ; exec_getProgIndex(const char*, Chirp*)
0000a6  7278              STRB     r0,[r7,#9]            ;102
                  |L1.168|
0000a8  7a78              LDRB     r0,[r7,#9]            ;103  ; video
0000aa  f7fffffe          BL       _Z17exec_setProgIndexh ; exec_setProgIndex(unsigned char)
0000ae  f9971009          LDRSB    r1,[r7,#9]            ;103  ; video
0000b2  4288              CMP      r0,r1                 ;103
0000b4  d001              BEQ      |L1.186|
0000b6  2501              MOVS     r5,#1                 ;103
0000b8  e000              B        |L1.188|
                  |L1.186|
0000ba  2500              MOVS     r5,#0                 ;103
                  |L1.188|
0000bc  f89d0030          LDRB     r0,[sp,#0x30]         ;108
0000c0  b320              CBZ      r0,|L1.268|
0000c2  2808              CMP      r0,#8                 ;114
0000c4  d028              BEQ      |L1.280|
0000c6  2810              CMP      r0,#0x10              ;120
0000c8  d02c              BEQ      |L1.292|
0000ca  f8df9350          LDR      r9,|L1.1052|
0000ce  f04f0800          MOV      r8,#0                 ;128
0000d2  f04f3bff          MOV      r11,#0xffffffff       ;143
0000d6  2850              CMP      r0,#0x50              ;128
0000d8  d02a              BEQ      |L1.304|
0000da  2860              CMP      r0,#0x60              ;167
0000dc  d06b              BEQ      |L1.438|
0000de  f1a00151          SUB      r1,r0,#0x51           ;172
0000e2  2906              CMP      r1,#6                 ;172
0000e4  d870              BHI      |L1.456|
0000e6  3850              SUBS     r0,r0,#0x50           ;182
0000e8  b281              UXTH     r1,r0                 ;182
0000ea  aa07              ADD      r2,sp,#0x1c           ;182
0000ec  f8d90000          LDR      r0,[r9,#0]            ;182  ; g_blobs
0000f0  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
0000f4  2800              CMP      r0,#0                 ;183
0000f6  d062              BEQ      |L1.446|
0000f8  1c41              ADDS     r1,r0,#1              ;185
0000fa  d001              BEQ      |L1.256|
0000fc  2d00              CMP      r5,#0                 ;185
0000fe  d064              BEQ      |L1.458|
                  |L1.256|
000100  465a              MOV      r2,r11                ;186
000102  2105              MOVS     r1,#5                 ;186
000104  4620              MOV      r0,r4                 ;186
000106  f7fffffe          BL       __aeabi_memset
00010a  e07f              B        |L1.524|
                  |L1.268|
00010c  a1c4              ADR      r1,|L1.1056|
00010e  4620              MOV      r0,r4                 ;111
000110  f7fffffe          BL       strcpy
000114  2005              MOVS     r0,#5                 ;112
000116  e79f              B        |L1.88|
                  |L1.280|
000118  a1c3              ADR      r1,|L1.1064|
00011a  4620              MOV      r0,r4                 ;117
00011c  f7fffffe          BL       strcpy
000120  2006              MOVS     r0,#6                 ;118
000122  e799              B        |L1.88|
                  |L1.292|
000124  a1c0              ADR      r1,|L1.1064|
000126  4620              MOV      r0,r4                 ;123
000128  f7fffffe          BL       strcpy
00012c  2006              MOVS     r0,#6                 ;124
00012e  e793              B        |L1.88|
                  |L1.304|
000130  2200              MOVS     r2,#0                 ;140
000132  4611              MOV      r1,r2                 ;140
000134  f8d90000          LDR      r0,[r9,#0]            ;140  ; g_blobs
000138  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
00013c  b140              CBZ      r0,|L1.336|
00013e  1c41              ADDS     r1,r0,#1              ;143
000140  d000              BEQ      |L1.324|
000142  b165              CBZ      r5,|L1.350|
                  |L1.324|
000144  465a              MOV      r2,r11                ;144
000146  2107              MOVS     r1,#7                 ;144
000148  4620              MOV      r0,r4                 ;144
00014a  f7fffffe          BL       __aeabi_memset
00014e  e030              B        |L1.434|
                  |L1.336|
000150  f8c48000          STR      r8,[r4,#0]            ;142
000154  f8a48004          STRH     r8,[r4,#4]            ;142
000158  f8848006          STRB     r8,[r4,#6]            ;142
00015c  e029              B        |L1.434|
                  |L1.350|
00015e  8881              LDRH     r1,[r0,#4]            ;147
000160  8842              LDRH     r2,[r0,#2]            ;147
000162  1a89              SUBS     r1,r1,r2              ;147
000164  8902              LDRH     r2,[r0,#8]            ;148
000166  88c3              LDRH     r3,[r0,#6]            ;148
000168  1ad2              SUBS     r2,r2,r3              ;148
00016a  8803              LDRH     r3,[r0,#0]            ;149
00016c  8023              STRH     r3,[r4,#0]            ;149
00016e  8843              LDRH     r3,[r0,#2]            ;150
000170  f240353d          MOV      r5,#0x33d             ;150
000174  eb030351          ADD      r3,r3,r1,LSR #1       ;150
000178  436b              MULS     r3,r5,r3              ;150
00017a  0a9b              LSRS     r3,r3,#10             ;150
00017c  70a3              STRB     r3,[r4,#2]            ;151
00017e  88c3              LDRH     r3,[r0,#6]            ;152
000180  f24045ee          MOV      r5,#0x4ee             ;152
000184  eb030352          ADD      r3,r3,r2,LSR #1       ;152
000188  436b              MULS     r3,r5,r3              ;152
00018a  0a9b              LSRS     r3,r3,#10             ;152
00018c  70e3              STRB     r3,[r4,#3]            ;153
00018e  f240333d          MOV      r3,#0x33d             ;154
000192  4359              MULS     r1,r3,r1              ;154
000194  0a89              LSRS     r1,r1,#10             ;154
000196  7121              STRB     r1,[r4,#4]            ;155
000198  4629              MOV      r1,r5                 ;156
00019a  434a              MULS     r2,r1,r2              ;156
00019c  0a91              LSRS     r1,r2,#10             ;156
00019e  7161              STRB     r1,[r4,#5]            ;157
0001a0  8801              LDRH     r1,[r0,#0]            ;158
0001a2  2907              CMP      r1,#7                 ;158
0001a4  d905              BLS      |L1.434|
0001a6  8940              LDRH     r0,[r0,#0xa]          ;160
0001a8  215b              MOVS     r1,#0x5b              ;160
0001aa  fb10f001          SMULBB   r0,r0,r1              ;160
0001ae  11c0              ASRS     r0,r0,#7              ;160
0001b0  7078              STRB     r0,[r7,#1]            ;161
                  |L1.434|
0001b2  2006              MOVS     r0,#6                 ;165
0001b4  e750              B        |L1.88|
                  |L1.438|
0001b6  7878              LDRB     r0,[r7,#1]            ;169  ; g_angle
0001b8  7020              STRB     r0,[r4,#0]            ;169
0001ba  2001              MOVS     r0,#1                 ;170
0001bc  e74c              B        |L1.88|
                  |L1.446|
0001be  f8c48000          STR      r8,[r4,#0]            ;184
0001c2  f8848004          STRB     r8,[r4,#4]            ;184
0001c6  e021              B        |L1.524|
                  |L1.456|
0001c8  e022              B        |L1.528|
                  |L1.458|
0001ca  8881              LDRH     r1,[r0,#4]            ;189
0001cc  8842              LDRH     r2,[r0,#2]            ;189
0001ce  1a89              SUBS     r1,r1,r2              ;189
0001d0  8902              LDRH     r2,[r0,#8]            ;190
0001d2  88c3              LDRH     r3,[r0,#6]            ;190
0001d4  1ad2              SUBS     r2,r2,r3              ;190
0001d6  f8bd301c          LDRH     r3,[sp,#0x1c]         ;191
0001da  7023              STRB     r3,[r4,#0]            ;191
0001dc  8843              LDRH     r3,[r0,#2]            ;192
0001de  f240353d          MOV      r5,#0x33d             ;192
0001e2  eb030351          ADD      r3,r3,r1,LSR #1       ;192
0001e6  436b              MULS     r3,r5,r3              ;192
0001e8  0a9b              LSRS     r3,r3,#10             ;192
0001ea  7063              STRB     r3,[r4,#1]            ;193
0001ec  88c0              LDRH     r0,[r0,#6]            ;194
0001ee  f24043ee          MOV      r3,#0x4ee             ;194
0001f2  eb000052          ADD      r0,r0,r2,LSR #1       ;194
0001f6  4358              MULS     r0,r3,r0              ;194
0001f8  0a80              LSRS     r0,r0,#10             ;194
0001fa  70a0              STRB     r0,[r4,#2]            ;195
0001fc  4628              MOV      r0,r5                 ;196
0001fe  4341              MULS     r1,r0,r1              ;196
000200  0a88              LSRS     r0,r1,#10             ;196
000202  70e0              STRB     r0,[r4,#3]            ;197
000204  4618              MOV      r0,r3                 ;198
000206  4342              MULS     r2,r0,r2              ;198
000208  0a90              LSRS     r0,r2,#10             ;198
00020a  7120              STRB     r0,[r4,#4]            ;199
                  |L1.524|
00020c  2005              MOVS     r0,#5                 ;202
00020e  e723              B        |L1.88|
                  |L1.528|
000210  2858              CMP      r0,#0x58              ;204
000212  d00f              BEQ      |L1.564|
000214  f04f0aff          MOV      r10,#0xff             ;257
000218  285a              CMP      r0,#0x5a              ;241
00021a  d055              BEQ      |L1.712|
00021c  285e              CMP      r0,#0x5e              ;272
00021e  d073              BEQ      |L1.776|
000220  f04f0b01          MOV      r11,#1                ;84
000224  2862              CMP      r0,#0x62              ;293
000226  d070              BEQ      |L1.778|
000228  2842              CMP      r0,#0x42              ;317
00022a  d06f              BEQ      |L1.780|
00022c  f884b000          STRB     r11,[r4,#0]           ;331
                  |L1.560|
000230  2001              MOVS     r0,#1                 ;334
000232  e711              B        |L1.88|
                  |L1.564|
000234  6830              LDR      r0,[r6,#0]            ;207
000236  2202              MOVS     r2,#2                 ;207
000238  a909              ADD      r1,sp,#0x24           ;207
00023a  6883              LDR      r3,[r0,#8]            ;207
00023c  4630              MOV      r0,r6                 ;207
00023e  4798              BLX      r3                    ;207
000240  2802              CMP      r0,#2                 ;207
000242  da01              BGE      |L1.584|
000244  2000              MOVS     r0,#0                 ;208
000246  e707              B        |L1.88|
                  |L1.584|
000248  aa07              ADD      r2,sp,#0x1c           ;217
00024a  f8bd1024          LDRH     r1,[sp,#0x24]         ;217
00024e  f8d90000          LDR      r0,[r9,#0]            ;217  ; g_blobs
000252  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
000256  b140              CBZ      r0,|L1.618|
000258  1c41              ADDS     r1,r0,#1              ;220
00025a  d000              BEQ      |L1.606|
00025c  b155              CBZ      r5,|L1.628|
                  |L1.606|
00025e  465a              MOV      r2,r11                ;221
000260  2106              MOVS     r1,#6                 ;221
000262  4620              MOV      r0,r4                 ;221
000264  f7fffffe          BL       __aeabi_memset
000268  e02c              B        |L1.708|
                  |L1.618|
00026a  f8c48000          STR      r8,[r4,#0]            ;219
00026e  f8a48004          STRH     r8,[r4,#4]            ;219
000272  e027              B        |L1.708|
                  |L1.628|
000274  8881              LDRH     r1,[r0,#4]            ;224
000276  8842              LDRH     r2,[r0,#2]            ;224
000278  1a89              SUBS     r1,r1,r2              ;224
00027a  8902              LDRH     r2,[r0,#8]            ;225
00027c  88c3              LDRH     r3,[r0,#6]            ;225
00027e  1ad2              SUBS     r2,r2,r3              ;225
000280  f8bd301c          LDRH     r3,[sp,#0x1c]         ;226
000284  7023              STRB     r3,[r4,#0]            ;226
000286  8843              LDRH     r3,[r0,#2]            ;227
000288  f240353d          MOV      r5,#0x33d             ;227
00028c  eb030351          ADD      r3,r3,r1,LSR #1       ;227
000290  436b              MULS     r3,r5,r3              ;227
000292  0a9b              LSRS     r3,r3,#10             ;227
000294  7063              STRB     r3,[r4,#1]            ;228
000296  88c3              LDRH     r3,[r0,#6]            ;229
000298  f24045ee          MOV      r5,#0x4ee             ;229
00029c  eb030352          ADD      r3,r3,r2,LSR #1       ;229
0002a0  436b              MULS     r3,r5,r3              ;229
0002a2  0a9b              LSRS     r3,r3,#10             ;229
0002a4  70a3              STRB     r3,[r4,#2]            ;230
0002a6  f240333d          MOV      r3,#0x33d             ;231
0002aa  4359              MULS     r1,r3,r1              ;231
0002ac  0a89              LSRS     r1,r1,#10             ;231
0002ae  70e1              STRB     r1,[r4,#3]            ;232
0002b0  4629              MOV      r1,r5                 ;233
0002b2  434a              MULS     r2,r1,r2              ;233
0002b4  0a91              LSRS     r1,r2,#10             ;233
0002b6  7121              STRB     r1,[r4,#4]            ;234
0002b8  8940              LDRH     r0,[r0,#0xa]          ;235
0002ba  215b              MOVS     r1,#0x5b              ;235
0002bc  fb10f001          SMULBB   r0,r0,r1              ;235
0002c0  11c0              ASRS     r0,r0,#7              ;235
0002c2  7160              STRB     r0,[r4,#5]            ;236
                  |L1.708|
0002c4  2006              MOVS     r0,#6                 ;239
0002c6  e6c7              B        |L1.88|
                  |L1.712|
0002c8  6830              LDR      r0,[r6,#0]            ;243
0002ca  2201              MOVS     r2,#1                 ;243
0002cc  a908              ADD      r1,sp,#0x20           ;243
0002ce  6883              LDR      r3,[r0,#8]            ;243
0002d0  4630              MOV      r0,r6                 ;243
0002d2  4798              BLX      r3                    ;243
0002d4  2801              CMP      r0,#1                 ;243
0002d6  d110              BNE      |L1.762|
0002d8  6830              LDR      r0,[r6,#0]            ;244
0002da  2201              MOVS     r2,#1                 ;244
0002dc  a90b              ADD      r1,sp,#0x2c           ;244
0002de  6883              LDR      r3,[r0,#8]            ;244
0002e0  4630              MOV      r0,r6                 ;244
0002e2  4798              BLX      r3                    ;244
0002e4  2801              CMP      r0,#1                 ;244
0002e6  d108              BNE      |L1.762|
0002e8  6830              LDR      r0,[r6,#0]            ;245
0002ea  2201              MOVS     r2,#1                 ;245
0002ec  a90a              ADD      r1,sp,#0x28           ;245
0002ee  6883              LDR      r3,[r0,#8]            ;245
0002f0  4630              MOV      r0,r6                 ;245
0002f2  4798              BLX      r3                    ;245
0002f4  2801              CMP      r0,#1                 ;245
0002f6  d100              BNE      |L1.762|
0002f8  b14d              CBZ      r5,|L1.782|
                  |L1.762|
0002fa  465a              MOV      r2,r11                ;268
0002fc  2104              MOVS     r1,#4                 ;268
0002fe  4620              MOV      r0,r4                 ;268
000300  f7fffffe          BL       __aeabi_memset
000304  2004              MOVS     r0,#4                 ;269
000306  e6a7              B        |L1.88|
                  |L1.776|
000308  e03b              B        |L1.898|
                  |L1.778|
00030a  e091              B        |L1.1072|
                  |L1.780|
00030c  e0c6              B        |L1.1180|
                  |L1.782|
00030e  f99d0020          LDRSB    r0,[sp,#0x20]         ;248
000312  21b4              MOVS     r1,#0xb4              ;249
000314  fb10f001          SMULBB   r0,r0,r1              ;249
000318  b200              SXTH     r0,r0                 ;249
00031a  217f              MOVS     r1,#0x7f              ;250
00031c  fb90f0f1          SDIV     r0,r0,r1              ;250
000320  b200              SXTH     r0,r0                 ;250
000322  f7fffffe          BL       _Z21line_setNextTurnAngles ; line_setNextTurnAngle(short)
000326  89f8              LDRH     r0,[r7,#0xe]          ;252  ; lastReverse
000328  f5a0417f          SUB      r1,r0,#0xff00         ;252
00032c  39ff              SUBS     r1,r1,#0xff           ;252
00032e  d005              BEQ      |L1.828|
000330  f89d102c          LDRB     r1,[sp,#0x2c]         ;252
000334  4288              CMP      r0,r1                 ;252
000336  d001              BEQ      |L1.828|
000338  f7fffffe          BL       _Z19line_reversePrimaryv ; line_reversePrimary()
                  |L1.828|
00033c  79b9              LDRB     r1,[r7,#6]            ;254  ; lastLamp
00033e  f89d0028          LDRB     r0,[sp,#0x28]         ;254
000342  4281              CMP      r1,r0                 ;254
000344  d011              BEQ      |L1.874|
000346  b140              CBZ      r0,|L1.858|
000348  f8cda00c          STR      r10,[sp,#0xc]         ;257
00034c  a902              ADD      r1,sp,#8              ;257
00034e  a803              ADD      r0,sp,#0xc            ;257
000350  f8cda008          STR      r10,[sp,#8]           ;257
000354  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
000358  e007              B        |L1.874|
                  |L1.858|
00035a  f8cd800c          STR      r8,[sp,#0xc]          ;259
00035e  a902              ADD      r1,sp,#8              ;259
000360  a803              ADD      r0,sp,#0xc            ;259
000362  f8cd8008          STR      r8,[sp,#8]            ;259
000366  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
                  |L1.874|
00036a  f89d002c          LDRB     r0,[sp,#0x2c]         ;262
00036e  81f8              STRH     r0,[r7,#0xe]          ;262
000370  f89d0028          LDRB     r0,[sp,#0x28]         ;263
000374  71b8              STRB     r0,[r7,#6]            ;263
000376  4620              MOV      r0,r4                 ;264
000378  990e              LDR      r1,[sp,#0x38]         ;264
00037a  f7fffffe          BL       _Z17line_legoLineDataPhj ; line_legoLineData(unsigned char*, unsigned)
00037e  b280              UXTH     r0,r0                 ;264
000380  e66a              B        |L1.88|
                  |L1.898|
000382  6830              LDR      r0,[r6,#0]            ;274
000384  2203              MOVS     r2,#3                 ;274
000386  4621              MOV      r1,r4                 ;274
000388  6883              LDR      r3,[r0,#8]            ;274
00038a  4630              MOV      r0,r6                 ;274
00038c  4798              BLX      r3                    ;274
00038e  2803              CMP      r0,#3                 ;274
000390  d100              BNE      |L1.916|
000392  b135              CBZ      r5,|L1.930|
                  |L1.916|
000394  465a              MOV      r2,r11                ;289
000396  2103              MOVS     r1,#3                 ;289
000398  4620              MOV      r0,r4                 ;289
00039a  f7fffffe          BL       __aeabi_memset
00039e  2003              MOVS     r0,#3                 ;290
0003a0  e65a              B        |L1.88|
                  |L1.930|
0003a2  7820              LDRB     r0,[r4,#0]            ;277
0003a4  ebc01080          RSB      r0,r0,r0,LSL #6       ;277
0003a8  eb000080          ADD      r0,r0,r0,LSL #2       ;277
0003ac  fbb0f0fa          UDIV     r0,r0,r10             ;277
0003b0  b280              UXTH     r0,r0                 ;277
0003b2  7861              LDRB     r1,[r4,#1]            ;278
0003b4  22cf              MOVS     r2,#0xcf              ;278
0003b6  fb11f102          SMULBB   r1,r1,r2              ;278
0003ba  fbb1f1fa          UDIV     r1,r1,r10             ;278
0003be  78a2              LDRB     r2,[r4,#2]            ;279
0003c0  b102              CBZ      r2,|L1.964|
0003c2  2201              MOVS     r2,#1                 ;279
                  |L1.964|
0003c4  f7fffffe          BL       _Z6getRGBtth ; getRGB(unsigned short, unsigned short, unsigned char)
0003c8  ab04              ADD      r3,sp,#0x10           ;281
0003ca  aa05              ADD      r2,sp,#0x14           ;281
0003cc  a906              ADD      r1,sp,#0x18           ;281
0003ce  f7fffffe          BL       _Z9rgbUnpackjPjS_S_ ; rgbUnpack(unsigned, unsigned*, unsigned*, unsigned*)
0003d2  9806              LDR      r0,[sp,#0x18]         ;282
0003d4  7020              STRB     r0,[r4,#0]            ;282
0003d6  9805              LDR      r0,[sp,#0x14]         ;283
0003d8  7060              STRB     r0,[r4,#1]            ;283
0003da  9804              LDR      r0,[sp,#0x10]         ;284
0003dc  70a0              STRB     r0,[r4,#2]            ;284
0003de  2003              MOVS     r0,#3                 ;285
0003e0  e63a              B        |L1.88|
0003e2  0000              DCW      0x0000
                  |L1.996|
                          DCD      ||.data||
                  |L1.1000|
0003e8  636f6c6f          DCB      "color_connected_components",0
0003ec  725f636f
0003f0  6e6e6563
0003f4  7465645f
0003f8  636f6d70
0003fc  6f6e656e
000400  747300  
000403  00                DCB      0
                  |L1.1028|
000404  6c696e65          DCB      "line_tracking",0
000408  5f747261
00040c  636b696e
000410  6700    
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  76696465          DCB      "video",0
000418  6f00    
00041a  00                DCB      0
00041b  00                DCB      0
                  |L1.1052|
                          DCD      g_blobs
                  |L1.1056|
000420  56302e34          DCB      "V0.4",0
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
000428  50697879          DCB      "Pixy2",0
00042c  3200    
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
000430  6830              LDR      r0,[r6,#0]            ;295
000432  2201              MOVS     r2,#1                 ;295
000434  a90a              ADD      r1,sp,#0x28           ;295
000436  6883              LDR      r3,[r0,#8]            ;295
000438  4630              MOV      r0,r6                 ;295
00043a  4798              BLX      r3                    ;295
00043c  2801              CMP      r0,#1                 ;295
00043e  d129              BNE      |L1.1172|
000440  b9fd              CBNZ     r5,|L1.1154|
000442  79f8              LDRB     r0,[r7,#7]            ;298  ; ccc
000444  9003              STR      r0,[sp,#0xc]          ;298
000446  2100              MOVS     r1,#0                 ;298
000448  a803              ADD      r0,sp,#0xc            ;298
00044a  f7fffffe          BL       _Z12exec_getProgRKhP5Chirp ; exec_getProg(const unsigned char&, Chirp*)
00044e  2801              CMP      r0,#1                 ;298
000450  d00b              BEQ      |L1.1130|
000452  f89d0028          LDRB     r0,[sp,#0x28]         ;300
000456  b1a8              CBZ      r0,|L1.1156|
000458  f8cda008          STR      r10,[sp,#8]           ;301
00045c  a901              ADD      r1,sp,#4              ;301
00045e  a802              ADD      r0,sp,#8              ;301
000460  f8cda004          STR      r10,[sp,#4]           ;301
000464  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
000468  e014              B        |L1.1172|
                  |L1.1130|
00046a  f89d0028          LDRB     r0,[sp,#0x28]         ;299
00046e  b108              CBZ      r0,|L1.1140|
000470  20ff              MOVS     r0,#0xff              ;299
000472  e000              B        |L1.1142|
                  |L1.1140|
000474  2000              MOVS     r0,#0                 ;299
                  |L1.1142|
000476  e9cd8001          STRD     r8,r0,[sp,#4]         ;299
00047a  a901              ADD      r1,sp,#4              ;299
00047c  a802              ADD      r0,sp,#8              ;299
00047e  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
                  |L1.1154|
000482  e007              B        |L1.1172|
                  |L1.1156|
000484  f8cd8008          STR      r8,[sp,#8]            ;303
000488  a901              ADD      r1,sp,#4              ;303
00048a  a802              ADD      r0,sp,#8              ;303
00048c  f8cd8004          STR      r8,[sp,#4]            ;303
000490  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
                  |L1.1172|
000494  f884b000          STRB     r11,[r4,#0]           ;305
000498  2001              MOVS     r0,#1                 ;306
00049a  e5dd              B        |L1.88|
                  |L1.1180|
00049c  2200              MOVS     r2,#0                 ;320
00049e  4611              MOV      r1,r2                 ;320
0004a0  f8d90000          LDR      r0,[r9,#0]            ;320  ; g_blobs
0004a4  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
0004a8  b160              CBZ      r0,|L1.1220|
0004aa  1c41              ADDS     r1,r0,#1              ;321
0004ac  d00a              BEQ      |L1.1220|
0004ae  8881              LDRH     r1,[r0,#4]            ;325
0004b0  8840              LDRH     r0,[r0,#2]            ;325
0004b2  1a09              SUBS     r1,r1,r0              ;325
0004b4  eb000051          ADD      r0,r0,r1,LSR #1       ;326
0004b8  f240313d          MOV      r1,#0x33d             ;326
0004bc  4348              MULS     r0,r1,r0              ;326
0004be  0a80              LSRS     r0,r0,#10             ;326
0004c0  7020              STRB     r0,[r4,#0]            ;327
0004c2  e6b5              B        |L1.560|
                  |L1.1220|
0004c4  f8848000          STRB     r8,[r4,#0]            ;322
0004c8  e6b2              B        |L1.560|
;;;337    
                          ENDP

                  _Z9ser_setTxhhb PROC ; ser_setTx(unsigned char, unsigned char, bool)
;;;599    
;;;600    void ser_setTx(uint8_t type, uint8_t len, bool checksum)
0004ca  b4f0              PUSH     {r4-r7}
;;;601    {
;;;602    	uint8_t i;
;;;603    	uint16_t cs;
;;;604    	
;;;605    	g_txReadIndex = 0;
0004cc  4df8              LDR      r5,|L1.2224|
0004ce  2300              MOVS     r3,#0
0004d0  82ab              STRH     r3,[r5,#0x14]
;;;606    	g_txLen = SER_MIN_PACKET_HEADER + len;
0004d2  1d0e              ADDS     r6,r1,#4
0004d4  82ee              STRH     r6,[r5,#0x16]
;;;607    	if (checksum)
0004d6  2a00              CMP      r2,#0
0004d8  d015              BEQ      |L1.1286|
;;;608    	{	
;;;609    		g_tx = g_txBuf;
0004da  4cf6              LDR      r4,|L1.2228|
0004dc  622c              STR      r4,[r5,#0x20]  ; g_tx
0004de  4627              MOV      r7,r4
;;;610    		*(uint16_t *)g_tx = SER_SYNC_CHECKSUM;
0004e0  f24c12af          MOV      r2,#0xc1af
0004e4  8022              STRH     r2,[r4,#0]
;;;611    		for (i=0, cs=0; i<len; i++)
0004e6  2200              MOVS     r2,#0
0004e8  e007              B        |L1.1274|
                  |L1.1258|
;;;612    			cs += g_txBuf[SER_MAX_PACKET_HEADER + i];
0004ea  eb040c02          ADD      r12,r4,r2
0004ee  f89cc006          LDRB     r12,[r12,#6]
0004f2  4463              ADD      r3,r3,r12
0004f4  b29b              UXTH     r3,r3
0004f6  1c52              ADDS     r2,r2,#1              ;611
0004f8  b2d2              UXTB     r2,r2                 ;611
                  |L1.1274|
0004fa  428a              CMP      r2,r1                 ;611
0004fc  d3f5              BCC      |L1.1258|
;;;613    		*(uint16_t *)(g_tx+4) = cs;
0004fe  80bb              STRH     r3,[r7,#4]
;;;614    		g_txLen += SER_PACKET_HEADER_CS_SIZE;
000500  1cb6              ADDS     r6,r6,#2
000502  82ee              STRH     r6,[r5,#0x16]
000504  e005              B        |L1.1298|
                  |L1.1286|
;;;615    	}
;;;616    	else
;;;617    	{
;;;618    		g_tx = g_txBuf + SER_PACKET_HEADER_CS_SIZE;
000506  4aeb              LDR      r2,|L1.2228|
000508  1c92              ADDS     r2,r2,#2
00050a  622a              STR      r2,[r5,#0x20]  ; g_tx
;;;619    		*(uint16_t *)g_tx = SER_SYNC_NO_CHECKSUM;
00050c  f24c13ae          MOV      r3,#0xc1ae
000510  8013              STRH     r3,[r2,#0]
                  |L1.1298|
;;;620    	}
;;;621    	g_tx[2] = type;
000512  6a2a              LDR      r2,[r5,#0x20]  ; g_tx
000514  7090              STRB     r0,[r2,#2]
;;;622    	g_tx[3] = len;
000516  70d1              STRB     r1,[r2,#3]
;;;623    	g_newPacket = true;
000518  2001              MOVS     r0,#1
00051a  7128              STRB     r0,[r5,#4]
;;;624    	g_serial->startTransmit();
00051c  69e8              LDR      r0,[r5,#0x1c]  ; g_serial
00051e  6801              LDR      r1,[r0,#0]
000520  6949              LDR      r1,[r1,#0x14]
000522  bcf0              POP      {r4-r7}
000524  4708              BX       r1
;;;625    }
;;;626    
                          ENDP

                  _Z9ser_getTxPPh PROC ; ser_getTx(unsigned char**)
;;;593    // the tx buffer and the txCallback reading the tx buffer. 
;;;594    uint8_t ser_getTx(uint8_t **data)
000526  49e3              LDR      r1,|L1.2228|
;;;595    {
;;;596    	*data = g_txBuf+SER_MAX_PACKET_HEADER; // make room for header
000528  1d89              ADDS     r1,r1,#6
00052a  6001              STR      r1,[r0,#0]
;;;597    	return SER_TXBUF_SIZE-SER_MAX_PACKET_HEADER;
00052c  20ff              MOVS     r0,#0xff
;;;598    }
00052e  4770              BX       lr
;;;599    
                          ENDP

                  _Z14ser_sendResultib PROC ; ser_sendResult(int, bool)
;;;337    
;;;338    void ser_sendResult(int32_t val, bool checksum)
000530  b508              PUSH     {r3,lr}
;;;339    {
000532  4603              MOV      r3,r0
000534  460a              MOV      r2,r1
;;;340    	uint8_t *txData;
;;;341    	ser_getTx(&txData);
000536  4668              MOV      r0,sp
000538  f7fffffe          BL       _Z9ser_getTxPPh ; ser_getTx(unsigned char**)
;;;342    	*(int32_t *)txData = val; // write val
00053c  9800              LDR      r0,[sp,#0]
00053e  6003              STR      r3,[r0,#0]
;;;343    			
;;;344    	ser_setTx(SER_TYPE_RESPONSE_RESULT, sizeof(int32_t), checksum);				
000540  2104              MOVS     r1,#4
000542  2001              MOVS     r0,#1
000544  f7fffffe          BL       _Z9ser_setTxhhb ; ser_setTx(unsigned char, unsigned char, bool)
;;;345    }
000548  bd08              POP      {r3,pc}
;;;346    
                          ENDP

                  _Z13ser_sendErrorab PROC ; ser_sendError(signed char, bool)
;;;347    void ser_sendError(int8_t error, bool checksum)
00054a  b508              PUSH     {r3,lr}
;;;348    {
00054c  4603              MOV      r3,r0
00054e  460a              MOV      r2,r1
;;;349    	uint8_t *txData;
;;;350    	ser_getTx(&txData);
000550  4668              MOV      r0,sp
000552  f7fffffe          BL       _Z9ser_getTxPPh ; ser_getTx(unsigned char**)
;;;351    	txData[0] = error;
000556  9800              LDR      r0,[sp,#0]
000558  7003              STRB     r3,[r0,#0]
;;;352    	ser_setTx(SER_TYPE_RESPONSE_ERROR, 1, checksum);	
00055a  2101              MOVS     r1,#1
00055c  2003              MOVS     r0,#3
00055e  f7fffffe          BL       _Z9ser_setTxhhb ; ser_setTx(unsigned char, unsigned char, bool)
;;;353    }
000562  bd08              POP      {r3,pc}
;;;354    
                          ENDP

                  _Z10ser_packethPKhhb PROC ; ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;355    
;;;356    void ser_packet(uint8_t type, const uint8_t *rxData, uint8_t len, bool checksum)
000564  e92d41fc          PUSH     {r2-r8,lr}
;;;357    {
000568  460c              MOV      r4,r1
00056a  461d              MOV      r5,r3
;;;358    	uint8_t *txData;
;;;359    	int res;
;;;360    	
;;;361    	// first check if current program can handle request 
;;;362    	if (type>SER_TYPE_REQUEST_NO_PROG_MAX)
00056c  281f              CMP      r0,#0x1f
00056e  d905              BLS      |L1.1404|
;;;363    		exec_progPacket(type, rxData, len, checksum);
000570  462b              MOV      r3,r5
000572  4621              MOV      r1,r4
000574  f7fffffe          BL       _Z15exec_progPackethPKhhb ; exec_progPacket(unsigned char, const unsigned char*, unsigned char, bool)
                  |L1.1400|
;;;364    	else if (type==SER_TYPE_REQUEST_CHANGE_PROG)
;;;365    	{
;;;366    		res = exec_runProgName((const char *)rxData);
;;;367    		if (res<0)
;;;368    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;369    		else
;;;370    			ser_sendResult(res, checksum);
;;;371    	}
;;;372    	else if (type==SER_TYPE_REQUEST_RESOLUTION)
;;;373    	{
;;;374    		if (len!=1)
;;;375    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);	
;;;376    		else
;;;377    			if (exec_progResolution(rxData[0], checksum)<0)
;;;378    				ser_sendError(SER_ERROR_PROG_CHANGING, checksum);
;;;379    	}
;;;380    	else if (type==SER_TYPE_REQUEST_VERSION) // get version information
;;;381    	{
;;;382    		uint32_t hwVal;
;;;383    		
;;;384    		// this mechanism provides feedback to serial client that we're ready to accept input after "boot-up"
;;;385    		// If g_ready is false, we're not ready...
;;;386    		if (!g_ready)
;;;387    		{
;;;388    			ser_sendError(SER_ERROR_BUSY, checksum);
;;;389    			return;
;;;390    		}
;;;391    				
;;;392    		ser_getTx(&txData);
;;;393    		// hw version, first 2 bytes
;;;394    		hwVal = *(uint32_t *)(0x40045000+0x38);
;;;395    		if (hwVal>>16==0xc1ab)
;;;396    			*(uint16_t *)(txData + 0) = hwVal&0xffff;
;;;397    		else // if value isn't set, assume Pixy version 1.3b 
;;;398    			*(uint16_t *)(txData + 0) = 0x1301;				
;;;399    		// fw version, next 4 bytes
;;;400    		*(uint8_t *)(txData + 2) = FW_MAJOR_VER;
;;;401    		*(uint8_t *)(txData + 3) = FW_MINOR_VER;
;;;402    		*(uint16_t *)(txData + 4) = FW_BUILD_VER;
;;;403    		
;;;404    		// fw type, next 10 bytes
;;;405    		strncpy((char *)txData+6, FW_TYPE, 10);
;;;406    			
;;;407    		ser_setTx(SER_TYPE_RESPONSE_VERSION, 16, checksum);
;;;408    	}
;;;409    	else if (type==SER_TYPE_REQUEST_BRIGHTNESS) // set brightness
;;;410    	{
;;;411    		if (len!=1)
;;;412    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;413    		else
;;;414    		{
;;;415    			// "queue" up the brightness request because it goes out over i2c and takes time
;;;416    			g_brightnessQ.m_valid = true;
;;;417    			g_brightnessQ.m_brightness = rxData[0];
;;;418    			ser_sendResult(0, checksum);
;;;419    		}
;;;420    	}
;;;421    	else if (type==SER_TYPE_REQUEST_SERVO) // set servo positions
;;;422    	{
;;;423    		if (len!=4)
;;;424    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;425    		else
;;;426    		{
;;;427    			rcs_setPos(0, *(uint16_t *)rxData);
;;;428    			rcs_setPos(1, *(uint16_t *)&rxData[2]);
;;;429    			ser_sendResult(0, checksum);
;;;430    		}
;;;431    	}
;;;432    	else if (type==SER_TYPE_REQUEST_LED) // set LED 
;;;433    	{
;;;434    		if (len!=3)
;;;435    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;436    		else
;;;437    		{
;;;438    			// set override, user is now in control
;;;439    			cc_setLEDOverride(true);
;;;440    			led_setRGB(rxData[0], rxData[1], rxData[2]);
;;;441    			ser_sendResult(0, checksum);
;;;442    		}
;;;443    	}
;;;444    	else if (type==SER_TYPE_REQUEST_LAMP) // set lamp
;;;445    	{
;;;446    		if (len!=2)
;;;447    			ser_sendError(SER_ERROR_INVALID_REQUEST, checksum);
;;;448    		else
;;;449    		{
;;;450    			led_setLamp(rxData[0], rxData[1]);
;;;451    			ser_sendResult(0, checksum);				
;;;452    		}				
;;;453    	}
;;;454    	else if (type==SER_TYPE_REQUEST_FPS) // get frames per second
;;;455    	{
;;;456    		float fps = cam_getFPS() + 0.5f;
;;;457    		uint32_t val = (uint32_t)fps; // convert to int, round up or down
;;;458    		ser_sendResult(val, checksum);				
;;;459    	}
;;;460    	else // not able to find handler, return error
;;;461    		ser_sendError(SER_ERROR_TYPE_UNSUPPORTED, checksum);		
;;;462    }
000578  e8bd81fc          POP      {r2-r8,pc}
                  |L1.1404|
00057c  f06f0602          MVN      r6,#2                 ;368
000580  2802              CMP      r0,#2                 ;364
000582  d014              BEQ      |L1.1454|
000584  280c              CMP      r0,#0xc               ;372
000586  d021              BEQ      |L1.1484|
000588  2300              MOVS     r3,#0                 ;380
00058a  280e              CMP      r0,#0xe               ;380
00058c  d031              BEQ      |L1.1522|
00058e  2701              MOVS     r7,#1                 ;357
000590  2810              CMP      r0,#0x10              ;409
000592  d059              BEQ      |L1.1608|
000594  2812              CMP      r0,#0x12              ;421
000596  d068              BEQ      |L1.1642|
000598  2814              CMP      r0,#0x14              ;432
00059a  d07f              BEQ      |L1.1692|
00059c  2816              CMP      r0,#0x16              ;444
00059e  d07b              BEQ      |L1.1688|
0005a0  2818              CMP      r0,#0x18              ;454
0005a2  d07a              BEQ      |L1.1690|
0005a4  4629              MOV      r1,r5                 ;461
0005a6  1f18              SUBS     r0,r3,#4              ;461
0005a8  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0005ac  e7e4              B        |L1.1400|
                  |L1.1454|
0005ae  2100              MOVS     r1,#0                 ;366
0005b0  4620              MOV      r0,r4                 ;366
0005b2  f7fffffe          BL       _Z16exec_runProgNamePKcP5Chirp ; exec_runProgName(const char*, Chirp*)
0005b6  2800              CMP      r0,#0                 ;367
0005b8  da04              BGE      |L1.1476|
0005ba  4629              MOV      r1,r5                 ;368
0005bc  4630              MOV      r0,r6                 ;368
0005be  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0005c2  e7d9              B        |L1.1400|
                  |L1.1476|
0005c4  4629              MOV      r1,r5                 ;370
0005c6  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
0005ca  e7d5              B        |L1.1400|
                  |L1.1484|
0005cc  2a01              CMP      r2,#1                 ;374
0005ce  d004              BEQ      |L1.1498|
0005d0  4629              MOV      r1,r5                 ;375
0005d2  4630              MOV      r0,r6                 ;375
0005d4  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0005d8  e7ce              B        |L1.1400|
                  |L1.1498|
0005da  7820              LDRB     r0,[r4,#0]            ;377
0005dc  4629              MOV      r1,r5                 ;377
0005de  f7fffffe          BL       _Z19exec_progResolutionhb ; exec_progResolution(unsigned char, bool)
0005e2  2800              CMP      r0,#0                 ;377
0005e4  dac8              BGE      |L1.1400|
0005e6  4629              MOV      r1,r5                 ;378
0005e8  f06f0005          MVN      r0,#5                 ;378
0005ec  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0005f0  e7c2              B        |L1.1400|
                  |L1.1522|
0005f2  48af              LDR      r0,|L1.2224|
0005f4  7940              LDRB     r0,[r0,#5]            ;386  ; g_ready
0005f6  b160              CBZ      r0,|L1.1554|
0005f8  a801              ADD      r0,sp,#4              ;392
0005fa  f7fffffe          BL       _Z9ser_getTxPPh ; ser_getTx(unsigned char**)
0005fe  48ae              LDR      r0,|L1.2232|
000600  6b80              LDR      r0,[r0,#0x38]         ;394
000602  f24c11ab          MOV      r1,#0xc1ab            ;395
000606  ebb14f10          CMP      r1,r0,LSR #16         ;395
00060a  d108              BNE      |L1.1566|
00060c  9901              LDR      r1,[sp,#4]            ;396
00060e  8008              STRH     r0,[r1,#0]            ;396
000610  e009              B        |L1.1574|
                  |L1.1554|
000612  4629              MOV      r1,r5                 ;388
000614  f06f0001          MVN      r0,#1                 ;388
000618  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
00061c  e7ac              B        |L1.1400|
                  |L1.1566|
00061e  9901              LDR      r1,[sp,#4]            ;398
000620  f2413001          MOV      r0,#0x1301            ;398
000624  8008              STRH     r0,[r1,#0]            ;398
                  |L1.1574|
000626  9801              LDR      r0,[sp,#4]            ;400
000628  2103              MOVS     r1,#3                 ;400
00062a  7081              STRB     r1,[r0,#2]            ;400
00062c  70c3              STRB     r3,[r0,#3]            ;401
00062e  2110              MOVS     r1,#0x10              ;402
000630  8081              STRH     r1,[r0,#4]            ;402
000632  220a              MOVS     r2,#0xa               ;405
000634  a1a1              ADR      r1,|L1.2236|
000636  1d80              ADDS     r0,r0,#6              ;405
000638  f7fffffe          BL       strncpy
00063c  462a              MOV      r2,r5                 ;407
00063e  2110              MOVS     r1,#0x10              ;407
000640  200f              MOVS     r0,#0xf               ;407
000642  f7fffffe          BL       _Z9ser_setTxhhb ; ser_setTx(unsigned char, unsigned char, bool)
000646  e797              B        |L1.1400|
                  |L1.1608|
000648  2a01              CMP      r2,#1                 ;411
00064a  d004              BEQ      |L1.1622|
00064c  4629              MOV      r1,r5                 ;412
00064e  4630              MOV      r0,r6                 ;412
000650  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
000654  e790              B        |L1.1400|
                  |L1.1622|
000656  4896              LDR      r0,|L1.2224|
000658  3018              ADDS     r0,r0,#0x18           ;416
00065a  7007              STRB     r7,[r0,#0]            ;416
00065c  7821              LDRB     r1,[r4,#0]            ;417
00065e  7041              STRB     r1,[r0,#1]            ;417
000660  4629              MOV      r1,r5                 ;418
000662  2000              MOVS     r0,#0                 ;418
000664  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
000668  e786              B        |L1.1400|
                  |L1.1642|
00066a  2a04              CMP      r2,#4                 ;423
00066c  d004              BEQ      |L1.1656|
00066e  4629              MOV      r1,r5                 ;424
000670  4630              MOV      r0,r6                 ;424
000672  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
000676  e77f              B        |L1.1400|
                  |L1.1656|
000678  4621              MOV      r1,r4                 ;427
00067a  4668              MOV      r0,sp                 ;427
00067c  9300              STR      r3,[sp,#0]            ;427
00067e  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
000682  1ca1              ADDS     r1,r4,#2              ;428
000684  4668              MOV      r0,sp                 ;428
000686  9700              STR      r7,[sp,#0]            ;428
000688  f7fffffe          BL       _Z10rcs_setPosRKhRKt ; rcs_setPos(const unsigned char&, const unsigned short&)
00068c  4629              MOV      r1,r5                 ;429
00068e  2000              MOVS     r0,#0                 ;429
000690  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
000694  e770              B        |L1.1400|
000696  e001              B        |L1.1692|
                  |L1.1688|
000698  e014              B        |L1.1732|
                  |L1.1690|
00069a  e023              B        |L1.1764|
                  |L1.1692|
00069c  2a03              CMP      r2,#3                 ;434
00069e  d004              BEQ      |L1.1706|
0006a0  4629              MOV      r1,r5                 ;435
0006a2  4630              MOV      r0,r6                 ;435
0006a4  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0006a8  e766              B        |L1.1400|
                  |L1.1706|
0006aa  2001              MOVS     r0,#1                 ;439
0006ac  f7fffffe          BL       _Z17cc_setLEDOverrideb ; cc_setLEDOverride(bool)
0006b0  1ca2              ADDS     r2,r4,#2              ;440
0006b2  1c61              ADDS     r1,r4,#1              ;440
0006b4  4620              MOV      r0,r4                 ;440
0006b6  f7fffffe          BL       _Z10led_setRGBRKhS0_S0_ ; led_setRGB(const unsigned char&, const unsigned char&, const unsigned char&)
0006ba  4629              MOV      r1,r5                 ;441
0006bc  2000              MOVS     r0,#0                 ;441
0006be  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
0006c2  e759              B        |L1.1400|
                  |L1.1732|
0006c4  2a02              CMP      r2,#2                 ;446
0006c6  d004              BEQ      |L1.1746|
0006c8  4629              MOV      r1,r5                 ;447
0006ca  4630              MOV      r0,r6                 ;447
0006cc  f7fffffe          BL       _Z13ser_sendErrorab ; ser_sendError(signed char, bool)
0006d0  e752              B        |L1.1400|
                  |L1.1746|
0006d2  1c61              ADDS     r1,r4,#1              ;450
0006d4  4620              MOV      r0,r4                 ;450
0006d6  f7fffffe          BL       _Z11led_setLampRKhS0_ ; led_setLamp(const unsigned char&, const unsigned char&)
0006da  4629              MOV      r1,r5                 ;451
0006dc  2000              MOVS     r0,#0                 ;451
0006de  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
0006e2  e749              B        |L1.1400|
                  |L1.1764|
0006e4  f7fffffe          BL       _Z10cam_getFPSv ; cam_getFPS()
0006e8  eef60a00          VMOV.F32 s1,#0.50000000        ;456
0006ec  ee300a20          VADD.F32 s0,s0,s1              ;456
0006f0  eebc0ac0          VCVT.U32.F32 s0,s0                 ;457
0006f4  ee100a10          VMOV     r0,s0                 ;457
0006f8  4629              MOV      r1,r5                 ;458
0006fa  f7fffffe          BL       _Z14ser_sendResultib ; ser_sendResult(int, bool)
0006fe  e73b              B        |L1.1400|
;;;463    
                          ENDP

                  _Z15ser_packetChirpRKhRKjPS_P5Chirp PROC ; ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)
;;;464    int32_t ser_packetChirp(const uint8_t &type, const uint32_t &len, const uint8_t *request, Chirp *chirp)
000700  b530              PUSH     {r4,r5,lr}
;;;465    {
000702  b085              SUB      sp,sp,#0x14
000704  4615              MOV      r5,r2
000706  461c              MOV      r4,r3
;;;466    	// handle packet without checksum
;;;467    	ser_packet(type, request, len, false);
000708  780a              LDRB     r2,[r1,#0]
00070a  7800              LDRB     r0,[r0,#0]
00070c  2300              MOVS     r3,#0
00070e  4629              MOV      r1,r5
000710  f7fffffe          BL       _Z10ser_packethPKhhb ; ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;468    	// send result data minus the header data, which we'll bring out explicitly (type, length, no sync)
;;;469    	CRP_RETURN(chirp, UINT8(g_tx[2]) /* type */, UINTS8(g_tx[3] /* len */, g_tx+SER_MIN_PACKET_HEADER) /* raw data */, END);
000714  4866              LDR      r0,|L1.2224|
000716  2100              MOVS     r1,#0
000718  6a00              LDR      r0,[r0,#0x20]  ; g_tx
00071a  1d02              ADDS     r2,r0,#4
00071c  78c3              LDRB     r3,[r0,#3]
00071e  e9cd2102          STRD     r2,r1,[sp,#8]
000722  9104              STR      r1,[sp,#0x10]
000724  2181              MOVS     r1,#0x81
000726  9100              STR      r1,[sp,#0]
000728  9301              STR      r3,[sp,#4]
00072a  7883              LDRB     r3,[r0,#2]
00072c  2201              MOVS     r2,#1
00072e  2100              MOVS     r1,#0
000730  4620              MOV      r0,r4
000732  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;470    	
;;;471    	// return 0 regardless.  Actual result is returned in the g_tx data.
;;;472    	return 0;
;;;473    }
000736  b005              ADD      sp,sp,#0x14
000738  2000              MOVS     r0,#0                 ;472
00073a  bd30              POP      {r4,r5,pc}
;;;474    
                          ENDP

                  _Z10txCallbackPhj PROC ; txCallback(unsigned char*, unsigned)
;;;475    // TX data return mechanism for old serial protocol (v1.0-2.0)
;;;476    uint32_t txCallback(uint8_t *data, uint32_t len)
00073c  4a5c              LDR      r2,|L1.2224|
;;;477    {
;;;478    	if (g_interface==SER_INTERFACE_LEGO)
00073e  7812              LDRB     r2,[r2,#0]  ; g_interface
000740  2a06              CMP      r2,#6
000742  d005              BEQ      |L1.1872|
;;;479    		return lego_getData(data, len);
;;;480    	else 
;;;481    		return g_blobs->getBlock(data, len);
000744  460a              MOV      r2,r1
000746  4601              MOV      r1,r0
000748  485e              LDR      r0,|L1.2244|
00074a  6800              LDR      r0,[r0,#0]  ; g_blobs
00074c  f7ffbffe          B.W      _ZN5Blobs8getBlockEPhj ; Blobs::getBlock(unsigned char*, unsigned)
                  |L1.1872|
000750  e7fe              B        _Z12lego_getDataPhj ; lego_getData(unsigned char*, unsigned)
;;;482    }
;;;483    
                          ENDP

                  _Z11ser_getBytePh PROC ; ser_getByte(unsigned char*)
;;;484    // TX data return mechanism for new serial protocol (v3.0--)
;;;485    uint8_t ser_getByte(uint8_t *c)
000752  4a57              LDR      r2,|L1.2224|
;;;486    {
;;;487    	if (g_txReadIndex>=g_txLen)
000754  8a91              LDRH     r1,[r2,#0x14]  ; g_txReadIndex
000756  8ad3              LDRH     r3,[r2,#0x16]  ; g_txLen
000758  4299              CMP      r1,r3
00075a  d301              BCC      |L1.1888|
;;;488    		return 0;
00075c  2000              MOVS     r0,#0
;;;489    	*c = g_tx[g_txReadIndex++];
;;;490    	return 1;
;;;491    }
00075e  4770              BX       lr
                  |L1.1888|
000760  1c4b              ADDS     r3,r1,#1              ;489
000762  8293              STRH     r3,[r2,#0x14]         ;489
000764  6a12              LDR      r2,[r2,#0x20]         ;489  ; g_tx
000766  5c51              LDRB     r1,[r2,r1]            ;489
000768  7001              STRB     r1,[r0,#0]            ;489
00076a  2001              MOVS     r0,#1                 ;490
00076c  4770              BX       lr
;;;492    
                          ENDP

                  _Z14ser_rxCallbackv PROC ; ser_rxCallback()
;;;493    void ser_rxCallback()
00076e  e92d41f0          PUSH     {r4-r8,lr}
;;;494    {
000772  b092              SUB      sp,sp,#0x48
;;;495    	// parse, figure out if the message was intended for us, otherwise pass to currently running program
;;;496    	uint8_t i, a, oldState, buf[SPI2_RECEIVEBUF_SIZE];
;;;497    	uint16_t csCalc;
;;;498    	static uint16_t w, csStream;
;;;499    	static uint8_t lastByte, type, len;
;;;500    	
;;;501    	while(1)
;;;502    	{
;;;503    		oldState = g_state;
;;;504    		switch(g_state)
;;;505    		{	
;;;506    		case 0: // reset 
;;;507    			lastByte = 0xff;  // This is not part of any of the sync word most significant bytes
;;;508    			g_state = 1;
000774  2701              MOVS     r7,#1
;;;509    		 	break;
;;;510    
;;;511    		case 1:	// sync word
;;;512    			if (g_serial->receive(&a, 1))
;;;513    			{
;;;514    				w = a << 8;
;;;515    				w |= lastByte;
;;;516    				lastByte = a;
;;;517    				g_state = 2;	// compare
;;;518    			}
;;;519    			break;
;;;520    			
;;;521    		case 2:	 // receive data byte(s)
;;;522    			if (w==SER_SYNC_NO_CHECKSUM)
;;;523    			{	// read rest of data
;;;524    				if (g_serial->receiveLen()>=2)
;;;525    				{
;;;526    					g_serial->receive(&type, 1);
;;;527    					g_serial->receive(&len, 1);
;;;528    					
;;;529    					g_state = 3;
;;;530    				}
;;;531    			}
;;;532    			else if (w==SER_SYNC_CHECKSUM)
;;;533    			{
;;;534    				if (g_serial->receiveLen()>=4)
;;;535    				{
;;;536    					g_serial->receive(&type, 1);
;;;537    					g_serial->receive(&len, 1);
;;;538    					g_serial->receive((uint8_t *)&csStream, 2);
;;;539    					
;;;540    					g_state = 4;
;;;541    				}
;;;542    			}
;;;543    			else
;;;544    				g_state = 1;
;;;545    			break;
;;;546    
;;;547    		case 3:
;;;548    			if (len<=SPI2_RECEIVEBUF_SIZE)
;;;549    			{
;;;550    				if (g_serial->receiveLen()>=len)
;;;551    				{
;;;552    					g_serial->receive(buf, len);
;;;553    					g_state = 5;
000776  f04f0805          MOV      r8,#5
00077a  2600              MOVS     r6,#0
00077c  4c4c              LDR      r4,|L1.2224|
00077e  e0a7              B        |L1.2256|
                  |L1.1920|
000780  20ff              MOVS     r0,#0xff              ;507
000782  72a0              STRB     r0,[r4,#0xa]          ;507
000784  70e7              STRB     r7,[r4,#3]            ;508
000786  e0a0              B        |L1.2250|
                  |L1.1928|
000788  69e0              LDR      r0,[r4,#0x1c]         ;512  ; g_serial
00078a  2201              MOVS     r2,#1                 ;512
00078c  6801              LDR      r1,[r0,#0]            ;512
00078e  688b              LDR      r3,[r1,#8]            ;512
000790  a911              ADD      r1,sp,#0x44           ;512
000792  4798              BLX      r3                    ;512
000794  2800              CMP      r0,#0                 ;512
000796  d008              BEQ      |L1.1962|
000798  f89d0044          LDRB     r0,[sp,#0x44]         ;514
00079c  0201              LSLS     r1,r0,#8              ;514
00079e  7aa2              LDRB     r2,[r4,#0xa]          ;515  ; lastByte
0007a0  4311              ORRS     r1,r1,r2              ;515
0007a2  8221              STRH     r1,[r4,#0x10]         ;515
0007a4  72a0              STRB     r0,[r4,#0xa]          ;516
0007a6  2002              MOVS     r0,#2                 ;517
0007a8  70e0              STRB     r0,[r4,#3]            ;517
                  |L1.1962|
0007aa  e08e              B        |L1.2250|
                  |L1.1964|
0007ac  8a20              LDRH     r0,[r4,#0x10]         ;522  ; w
0007ae  f5a04141          SUB      r1,r0,#0xc100         ;522
0007b2  39ae              SUBS     r1,r1,#0xae           ;522
0007b4  d005              BEQ      |L1.1986|
0007b6  f5a04141          SUB      r1,r0,#0xc100         ;532
0007ba  39af              SUBS     r1,r1,#0xaf           ;532
0007bc  d018              BEQ      |L1.2032|
0007be  70e7              STRB     r7,[r4,#3]            ;544
0007c0  e083              B        |L1.2250|
                  |L1.1986|
0007c2  69e0              LDR      r0,[r4,#0x1c]         ;524  ; g_serial
0007c4  6801              LDR      r1,[r0,#0]            ;524
0007c6  68c9              LDR      r1,[r1,#0xc]          ;524
0007c8  4788              BLX      r1                    ;524
0007ca  2802              CMP      r0,#2                 ;524
0007cc  db7d              BLT      |L1.2250|
0007ce  69e0              LDR      r0,[r4,#0x1c]         ;526  ; g_serial
0007d0  2201              MOVS     r2,#1                 ;526
0007d2  6801              LDR      r1,[r0,#0]            ;526
0007d4  688b              LDR      r3,[r1,#8]            ;526
0007d6  4936              LDR      r1,|L1.2224|
0007d8  310b              ADDS     r1,r1,#0xb            ;526
0007da  4798              BLX      r3                    ;526
0007dc  69e0              LDR      r0,[r4,#0x1c]         ;527  ; g_serial
0007de  2201              MOVS     r2,#1                 ;527
0007e0  6801              LDR      r1,[r0,#0]            ;527
0007e2  688b              LDR      r3,[r1,#8]            ;527
0007e4  4932              LDR      r1,|L1.2224|
0007e6  310c              ADDS     r1,r1,#0xc            ;527
0007e8  4798              BLX      r3                    ;527
0007ea  2003              MOVS     r0,#3                 ;529
0007ec  70e0              STRB     r0,[r4,#3]            ;529
0007ee  e06c              B        |L1.2250|
                  |L1.2032|
0007f0  69e0              LDR      r0,[r4,#0x1c]         ;534  ; g_serial
0007f2  6801              LDR      r1,[r0,#0]            ;534
0007f4  68c9              LDR      r1,[r1,#0xc]          ;534
0007f6  4788              BLX      r1                    ;534
0007f8  2804              CMP      r0,#4                 ;534
0007fa  db66              BLT      |L1.2250|
0007fc  69e0              LDR      r0,[r4,#0x1c]         ;536  ; g_serial
0007fe  2201              MOVS     r2,#1                 ;536
000800  6801              LDR      r1,[r0,#0]            ;536
000802  688b              LDR      r3,[r1,#8]            ;536
000804  492a              LDR      r1,|L1.2224|
000806  310b              ADDS     r1,r1,#0xb            ;536
000808  4798              BLX      r3                    ;536
00080a  69e0              LDR      r0,[r4,#0x1c]         ;537  ; g_serial
00080c  2201              MOVS     r2,#1                 ;537
00080e  6801              LDR      r1,[r0,#0]            ;537
000810  688b              LDR      r3,[r1,#8]            ;537
000812  4927              LDR      r1,|L1.2224|
000814  310c              ADDS     r1,r1,#0xc            ;537
000816  4798              BLX      r3                    ;537
000818  69e0              LDR      r0,[r4,#0x1c]         ;538  ; g_serial
00081a  2202              MOVS     r2,#2                 ;538
00081c  6801              LDR      r1,[r0,#0]            ;538
00081e  688b              LDR      r3,[r1,#8]            ;538
000820  4923              LDR      r1,|L1.2224|
000822  3112              ADDS     r1,r1,#0x12           ;538
000824  4798              BLX      r3                    ;538
000826  2004              MOVS     r0,#4                 ;540
000828  70e0              STRB     r0,[r4,#3]            ;540
00082a  e04e              B        |L1.2250|
                  |L1.2092|
00082c  7b20              LDRB     r0,[r4,#0xc]          ;548  ; len
00082e  2840              CMP      r0,#0x40              ;548
000830  d80e              BHI      |L1.2128|
000832  69e0              LDR      r0,[r4,#0x1c]         ;550  ; g_serial
000834  6801              LDR      r1,[r0,#0]            ;550
000836  68c9              LDR      r1,[r1,#0xc]          ;550
000838  4788              BLX      r1                    ;550
00083a  7b22              LDRB     r2,[r4,#0xc]          ;550  ; len
00083c  4290              CMP      r0,r2                 ;550
00083e  db44              BLT      |L1.2250|
000840  69e0              LDR      r0,[r4,#0x1c]         ;552  ; g_serial
000842  6801              LDR      r1,[r0,#0]            ;552
000844  688b              LDR      r3,[r1,#8]            ;552
000846  a901              ADD      r1,sp,#4              ;552
000848  4798              BLX      r3                    ;552
00084a  f8848003          STRB     r8,[r4,#3]
00084e  e03c              B        |L1.2250|
                  |L1.2128|
;;;554    				}
;;;555    			}
;;;556    			else
;;;557    				g_state = 0;
000850  70e6              STRB     r6,[r4,#3]
000852  e03a              B        |L1.2250|
                  |L1.2132|
;;;558    			break;
;;;559    			
;;;560    		case 4:
;;;561    			if (len<=SPI2_RECEIVEBUF_SIZE)
000854  7b20              LDRB     r0,[r4,#0xc]  ; len
000856  2840              CMP      r0,#0x40
000858  d820              BHI      |L1.2204|
;;;562    			{
;;;563    				if (g_serial->receiveLen()>=len)
00085a  69e0              LDR      r0,[r4,#0x1c]  ; g_serial
00085c  6801              LDR      r1,[r0,#0]
00085e  68c9              LDR      r1,[r1,#0xc]
000860  4788              BLX      r1
000862  7b22              LDRB     r2,[r4,#0xc]  ; len
000864  4290              CMP      r0,r2
000866  db30              BLT      |L1.2250|
;;;564    				{
;;;565    					g_serial->receive(buf, len);
000868  69e0              LDR      r0,[r4,#0x1c]  ; g_serial
00086a  6801              LDR      r1,[r0,#0]
00086c  688b              LDR      r3,[r1,#8]
00086e  a901              ADD      r1,sp,#4
000870  4798              BLX      r3
;;;566    					for (i=0, csCalc=0; i<len; i++)
000872  2000              MOVS     r0,#0
000874  2100              MOVS     r1,#0
000876  aa01              ADD      r2,sp,#4              ;496
000878  7b23              LDRB     r3,[r4,#0xc]          ;548
00087a  e005              B        |L1.2184|
                  |L1.2172|
;;;567    						csCalc += buf[i];
00087c  f812c000          LDRB     r12,[r2,r0]
000880  4461              ADD      r1,r1,r12
000882  b289              UXTH     r1,r1
000884  1c40              ADDS     r0,r0,#1              ;566
000886  b2c0              UXTB     r0,r0                 ;566
                  |L1.2184|
000888  4298              CMP      r0,r3                 ;566
00088a  d3f7              BCC      |L1.2172|
;;;568    					if (csCalc==csStream)
00088c  8a60              LDRH     r0,[r4,#0x12]  ; csStream
00088e  4281              CMP      r1,r0
000890  d102              BNE      |L1.2200|
;;;569    						g_state = 5;
000892  f8848003          STRB     r8,[r4,#3]
000896  e018              B        |L1.2250|
                  |L1.2200|
;;;570    					else 
;;;571    						g_state = 0;
000898  70e6              STRB     r6,[r4,#3]
00089a  e016              B        |L1.2250|
                  |L1.2204|
;;;572    				}
;;;573    			}
;;;574    			else
;;;575    				g_state = 0;
00089c  70e6              STRB     r6,[r4,#3]
00089e  e014              B        |L1.2250|
                  |L1.2208|
;;;576    			break;
;;;577    			
;;;578    		case 5:
;;;579    			ser_packet(type, buf, len, true);
0008a0  2301              MOVS     r3,#1
0008a2  7b22              LDRB     r2,[r4,#0xc]  ; len
0008a4  a901              ADD      r1,sp,#4
0008a6  7ae0              LDRB     r0,[r4,#0xb]  ; type
0008a8  f7fffffe          BL       _Z10ser_packethPKhhb ; ser_packet(unsigned char, const unsigned char*, unsigned char, bool)
;;;580    			g_state = 0;
0008ac  70e6              STRB     r6,[r4,#3]
;;;581    			break;
0008ae  e00c              B        |L1.2250|
                  |L1.2224|
                          DCD      ||.data||
                  |L1.2228|
                          DCD      ||.bss||
                  |L1.2232|
                          DCD      0x40045000
                  |L1.2236|
0008bc  67656e65          DCB      "general",0
0008c0  72616c00
                  |L1.2244|
                          DCD      g_blobs
                  |L1.2248|
;;;582    		
;;;583    		default:
;;;584    			g_state = 0; // try another whole word
0008c8  70e6              STRB     r6,[r4,#3]
                  |L1.2250|
;;;585    			break;
;;;586    		}
;;;587    		if (oldState==g_state)
0008ca  78e0              LDRB     r0,[r4,#3]  ; g_state
0008cc  4285              CMP      r5,r0
0008ce  d00d              BEQ      |L1.2284|
                  |L1.2256|
0008d0  78e5              LDRB     r5,[r4,#3]            ;503  ; g_state
0008d2  2d06              CMP      r5,#6                 ;504
0008d4  d2f8              BCS      |L1.2248|
0008d6  e8dff005          TBB      [pc,r5]               ;504
0008da  0807              DCB      0x08,0x07
0008dc  06050403          DCB      0x06,0x05,0x04,0x03
0008e0  e7de              B        |L1.2208|
0008e2  e7b7              B        |L1.2132|
0008e4  e7a2              B        |L1.2092|
0008e6  e761              B        |L1.1964|
0008e8  e74e              B        |L1.1928|
0008ea  e749              B        |L1.1920|
                  |L1.2284|
;;;588    			break;
;;;589    	}
;;;590    }
0008ec  b012              ADD      sp,sp,#0x48
0008ee  e8bd81f0          POP      {r4-r8,pc}
;;;591    
                          ENDP

                  _Z13ser_newPacketv PROC ; ser_newPacket()
;;;626    
;;;627    bool ser_newPacket()
0008f2  498a              LDR      r1,|L1.2844|
;;;628    {
;;;629    	bool result = g_newPacket;
0008f4  7908              LDRB     r0,[r1,#4]  ; g_newPacket
;;;630    	g_newPacket = false;
0008f6  2200              MOVS     r2,#0
0008f8  710a              STRB     r2,[r1,#4]
;;;631    	return result;
;;;632    }
0008fa  4770              BX       lr
;;;633    
                          ENDP

                  _Z16ser_setInterfaceh PROC ; ser_setInterface(unsigned char)
;;;674    
;;;675    int ser_setInterface(uint8_t interface)
0008fc  e92d47f0          PUSH     {r4-r10,lr}
;;;676    {
000900  4605              MOV      r5,r0
;;;677    	if (interface>SER_INTERFACE_LEGO)
000902  2d06              CMP      r5,#6
000904  d903              BLS      |L1.2318|
;;;678    		return -1;
000906  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2314|
;;;679    	
;;;680    	if (g_serial!=NULL)
;;;681    		g_serial->close();
;;;682    
;;;683    	// get g_oldProtocol after we close to prevent race condition with spi interrupt routine
;;;684    	prm_get("Pixy 1.0 compatibility mode", &g_oldProtocol, END);
;;;685    	
;;;686    	// reset variables
;;;687    	g_state = 0;
;;;688    	g_interface = interface;
;;;689    	g_txReadIndex = 0; 
;;;690    	g_txLen = 0; 
;;;691    	g_tx = g_txBuf;
;;;692    	g_brightnessQ.m_valid = false;
;;;693    
;;;694    	switch (interface)
;;;695    	{		    
;;;696    	case SER_INTERFACE_SS_SPI:
;;;697    		if (g_oldProtocol)
;;;698    		{
;;;699    			spi_deinit();
;;;700    			spi2_deinit();
;;;701    			spi_init(txCallback);
;;;702    			g_serial = g_spi;
;;;703    			g_spi->setAutoSlaveSelect(false);
;;;704    		}
;;;705    		else
;;;706    		{
;;;707    			spi_deinit();
;;;708    			spi2_deinit();
;;;709    			spi2_init();
;;;710    			g_serial = g_spi2;
;;;711    			g_spi2->setAutoSlaveSelect(false);
;;;712    		}
;;;713    		break;
;;;714    
;;;715    	case SER_INTERFACE_I2C:     
;;;716    		g_serial = g_i2c0;
;;;717    		g_i2c0->setFlags(false, true);
;;;718    		break;
;;;719    
;;;720    	case SER_INTERFACE_UART:    
;;;721    		g_serial = g_uart0;
;;;722    		break;
;;;723    
;;;724    	case SER_INTERFACE_ADX:      
;;;725    		g_ad->setDirection(true);
;;;726    		g_serial = g_ad;
;;;727    		break;
;;;728    
;;;729    	case SER_INTERFACE_ADY:
;;;730    		g_ad->setDirection(false);
;;;731    		g_serial = g_ad;
;;;732    		break;		
;;;733    
;;;734    	case SER_INTERFACE_LEGO:
;;;735    		g_serial = g_i2c0;
;;;736     		g_i2c0->setSlaveAddr(0x01);
;;;737    		g_i2c0->setFlags(true, false);
;;;738    		g_oldProtocol = true;
;;;739    		break;
;;;740    		
;;;741    	default:
;;;742    	case SER_INTERFACE_ARDUINO_SPI:
;;;743    		if (g_oldProtocol)
;;;744    		{
;;;745    			spi_deinit();
;;;746    			spi2_deinit();
;;;747    			spi_init(txCallback);
;;;748    			g_serial = g_spi;
;;;749    			g_spi->setAutoSlaveSelect(true);
;;;750    		}
;;;751    		else
;;;752    		{
;;;753    			spi_deinit();
;;;754    			spi2_deinit();
;;;755    			spi2_init();
;;;756    			g_serial = g_spi2;
;;;757    			g_spi2->setAutoSlaveSelect(true);
;;;758    		}			
;;;759    		break;
;;;760    	}
;;;761    
;;;762    	g_serial->open();
;;;763    
;;;764    	return 0;
;;;765    }
00090a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2318|
00090e  4c83              LDR      r4,|L1.2844|
000910  69e0              LDR      r0,[r4,#0x1c]         ;680  ; g_serial
000912  b110              CBZ      r0,|L1.2330|
000914  6801              LDR      r1,[r0,#0]            ;681
000916  6849              LDR      r1,[r1,#4]            ;681
000918  4788              BLX      r1                    ;681
                  |L1.2330|
00091a  4980              LDR      r1,|L1.2844|
00091c  2200              MOVS     r2,#0                 ;684
00091e  1c89              ADDS     r1,r1,#2              ;684
000920  a07f              ADR      r0,|L1.2848|
000922  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
000926  2000              MOVS     r0,#0                 ;687
000928  70e0              STRB     r0,[r4,#3]            ;687
00092a  7025              STRB     r5,[r4,#0]            ;688
00092c  82a0              STRH     r0,[r4,#0x14]         ;689
00092e  82e0              STRH     r0,[r4,#0x16]         ;690
000930  4982              LDR      r1,|L1.2876|
000932  6221              STR      r1,[r4,#0x20]         ;691  ; g_tx
000934  4979              LDR      r1,|L1.2844|
000936  3118              ADDS     r1,r1,#0x18           ;692
000938  7008              STRB     r0,[r1,#0]            ;692
00093a  f8df8204          LDR      r8,|L1.2880|
00093e  f8df9204          LDR      r9,|L1.2884|
000942  4f81              LDR      r7,|L1.2888|
000944  4e81              LDR      r6,|L1.2892|
000946  2d07              CMP      r5,#7                 ;694
000948  d249              BCS      |L1.2526|
00094a  e8dff005          TBB      [pc,r5]               ;694
00094e  4804              DCB      0x48,0x04
000950  22292d34          DCB      0x22,0x29,0x2d,0x34
000954  3b00              DCB      0x3b,0x00
000956  78a0              LDRB     r0,[r4,#2]            ;697  ; g_oldProtocol
000958  b170              CBZ      r0,|L1.2424|
00095a  f7fffffe          BL       _Z10spi_deinitv ; spi_deinit()
00095e  f7fffffe          BL       _Z11spi2_deinitv ; spi2_deinit()
000962  f2af2027          ADR      r0,_Z10txCallbackPhj + 1 ; txCallback(unsigned char*, unsigned)
000966  f7fffffe          BL       _Z8spi_initPFjPhjE ; spi_init(unsigned(*)(unsigned char*, unsigned))
00096a  f8d80000          LDR      r0,[r8,#0]            ;702  ; g_spi
00096e  61e0              STR      r0,[r4,#0x1c]         ;702  ; g_serial
000970  2100              MOVS     r1,#0                 ;703
000972  f7fffffe          BL       _ZN3Spi18setAutoSlaveSelectEb ; Spi::setAutoSlaveSelect(bool)
000976  e04f              B        |L1.2584|
                  |L1.2424|
000978  f7fffffe          BL       _Z10spi_deinitv ; spi_deinit()
00097c  f7fffffe          BL       _Z11spi2_deinitv ; spi2_deinit()
000980  f7fffffe          BL       _Z9spi2_initv ; spi2_init()
000984  f8d90000          LDR      r0,[r9,#0]            ;710  ; g_spi2
000988  61e0              STR      r0,[r4,#0x1c]         ;710  ; g_serial
00098a  2100              MOVS     r1,#0                 ;711
00098c  f7fffffe          BL       _ZN4Spi218setAutoSlaveSelectEb ; Spi2::setAutoSlaveSelect(bool)
000990  e042              B        |L1.2584|
000992  6838              LDR      r0,[r7,#0]            ;716  ; g_i2c0
000994  61e0              STR      r0,[r4,#0x1c]         ;716  ; g_serial
000996  2201              MOVS     r2,#1                 ;717
000998  2100              MOVS     r1,#0                 ;717
00099a  f7fffffe          BL       _ZN3I2c8setFlagsEbb ; I2c::setFlags(bool, bool)
00099e  e03b              B        |L1.2584|
0009a0  486b              LDR      r0,|L1.2896|
0009a2  6800              LDR      r0,[r0,#0]            ;721  ; g_uart0
0009a4  61e0              STR      r0,[r4,#0x1c]         ;721  ; g_serial
0009a6  e037              B        |L1.2584|
0009a8  2101              MOVS     r1,#1                 ;725
0009aa  6830              LDR      r0,[r6,#0]            ;725  ; g_ad
0009ac  f7fffffe          BL       _ZN9AnalogDig12setDirectionEb ; AnalogDig::setDirection(bool)
0009b0  6830              LDR      r0,[r6,#0]            ;726  ; g_ad
0009b2  61e0              STR      r0,[r4,#0x1c]         ;726  ; g_serial
0009b4  e030              B        |L1.2584|
0009b6  2100              MOVS     r1,#0                 ;730
0009b8  6830              LDR      r0,[r6,#0]            ;730  ; g_ad
0009ba  f7fffffe          BL       _ZN9AnalogDig12setDirectionEb ; AnalogDig::setDirection(bool)
0009be  6830              LDR      r0,[r6,#0]            ;731  ; g_ad
0009c0  61e0              STR      r0,[r4,#0x1c]         ;731  ; g_serial
0009c2  e029              B        |L1.2584|
0009c4  6838              LDR      r0,[r7,#0]            ;735  ; g_i2c0
0009c6  61e0              STR      r0,[r4,#0x1c]         ;735  ; g_serial
0009c8  2101              MOVS     r1,#1                 ;736
0009ca  f7fffffe          BL       _ZN3I2c12setSlaveAddrEh ; I2c::setSlaveAddr(unsigned char)
0009ce  2200              MOVS     r2,#0                 ;737
0009d0  2101              MOVS     r1,#1                 ;737
0009d2  6838              LDR      r0,[r7,#0]            ;737  ; g_i2c0
0009d4  f7fffffe          BL       _ZN3I2c8setFlagsEbb ; I2c::setFlags(bool, bool)
0009d8  2001              MOVS     r0,#1                 ;738
0009da  70a0              STRB     r0,[r4,#2]            ;738
0009dc  e01c              B        |L1.2584|
                  |L1.2526|
0009de  78a0              LDRB     r0,[r4,#2]            ;743  ; g_oldProtocol
0009e0  b170              CBZ      r0,|L1.2560|
0009e2  f7fffffe          BL       _Z10spi_deinitv ; spi_deinit()
0009e6  f7fffffe          BL       _Z11spi2_deinitv ; spi2_deinit()
0009ea  f2af20af          ADR      r0,_Z10txCallbackPhj + 1 ; txCallback(unsigned char*, unsigned)
0009ee  f7fffffe          BL       _Z8spi_initPFjPhjE ; spi_init(unsigned(*)(unsigned char*, unsigned))
0009f2  f8d80000          LDR      r0,[r8,#0]            ;748  ; g_spi
0009f6  61e0              STR      r0,[r4,#0x1c]         ;748  ; g_serial
0009f8  2101              MOVS     r1,#1                 ;749
0009fa  f7fffffe          BL       _ZN3Spi18setAutoSlaveSelectEb ; Spi::setAutoSlaveSelect(bool)
0009fe  e00b              B        |L1.2584|
                  |L1.2560|
000a00  f7fffffe          BL       _Z10spi_deinitv ; spi_deinit()
000a04  f7fffffe          BL       _Z11spi2_deinitv ; spi2_deinit()
000a08  f7fffffe          BL       _Z9spi2_initv ; spi2_init()
000a0c  f8d90000          LDR      r0,[r9,#0]            ;756  ; g_spi2
000a10  61e0              STR      r0,[r4,#0x1c]         ;756  ; g_serial
000a12  2101              MOVS     r1,#1                 ;757
000a14  f7fffffe          BL       _ZN4Spi218setAutoSlaveSelectEb ; Spi2::setAutoSlaveSelect(bool)
                  |L1.2584|
000a18  69e0              LDR      r0,[r4,#0x1c]         ;762  ; g_serial
000a1a  6801              LDR      r1,[r0,#0]            ;762
000a1c  6809              LDR      r1,[r1,#0]            ;762
000a1e  4788              BLX      r1                    ;762
000a20  2000              MOVS     r0,#0                 ;764
000a22  e772              B        |L1.2314|
;;;766    
                          ENDP

                  _Z14ser_loadParamsv PROC ; ser_loadParams()
;;;645    
;;;646    void ser_loadParams()
000a24  b530              PUSH     {r4,r5,lr}
;;;647    {
000a26  b087              SUB      sp,sp,#0x1c
;;;648    #ifndef LEGO
;;;649    	prm_add("Data out port", 0, PRM_PRIORITY_1, 
000a28  2400              MOVS     r4,#0
000a2a  2501              MOVS     r5,#1
000a2c  e9cd5400          STRD     r5,r4,[sp,#0]
000a30  4b48              LDR      r3,|L1.2900|
000a32  f44f727a          MOV      r2,#0x3e8
000a36  4621              MOV      r1,r4
000a38  a047              ADR      r0,|L1.2904|
000a3a  9402              STR      r4,[sp,#8]
000a3c  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;650    		"Selects the port that's used to output data (default Arduino ICSP SPI) @c Interface @s 0=Arduino_ICSP_SPI @s 1=SPI_with_SS @s 2=I2C @s 3=UART @s 4=analog/digital_x @s 5=analog/digital_y @s 6=LEGO_I2C", UINT8(0), END);
;;;651    	prm_add("I2C address", PRM_FLAG_HEX_FORMAT, PRM_PRIORITY_1-1, 
000a40  2054              MOVS     r0,#0x54
000a42  e9cd5000          STRD     r5,r0,[sp,#0]
000a46  4b48              LDR      r3,|L1.2920|
000a48  f24032e7          MOV      r2,#0x3e7
000a4c  2110              MOVS     r1,#0x10
000a4e  9402              STR      r4,[sp,#8]
000a50  a046              ADR      r0,|L1.2924|
000a52  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;652    		"@c Interface Sets the I2C address if you are using I2C data out port. (default 0x54)", UINT8(I2C_DEFAULT_SLAVE_ADDR), END);
;;;653    	prm_add("UART baudrate", 0, PRM_PRIORITY_1-2, 
000a56  f44f4096          MOV      r0,#0x4b00
000a5a  e9cd0401          STRD     r0,r4,[sp,#4]
000a5e  2104              MOVS     r1,#4
000a60  9100              STR      r1,[sp,#0]
000a62  4b45              LDR      r3,|L1.2936|
000a64  f24032e6          MOV      r2,#0x3e6
000a68  2100              MOVS     r1,#0
000a6a  a044              ADR      r0,|L1.2940|
000a6c  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;654    		"@c Interface Sets the UART baudrate if you are using UART data out port. (default 19200)", UINT32(19200), END);
;;;655    	prm_add("Pixy 1.0 compatibility mode", PRM_FLAG_CHECKBOX, PRM_PRIORITY_1-3, 
000a70  e9cd5400          STRD     r5,r4,[sp,#0]
000a74  4b45              LDR      r3,|L1.2956|
000a76  f24032e5          MOV      r2,#0x3e5
000a7a  0269              LSLS     r1,r5,#9
000a7c  a028              ADR      r0,|L1.2848|
000a7e  9402              STR      r4,[sp,#8]
000a80  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;656    		"@c Interface If this is set, Pixy will return data using the Pixy 1.0 protocol.  This only applies to color connected components program, not other programs. (default false)", UINT8(0), END);
;;;657    
;;;658    	uint8_t interface, addr;
;;;659    	uint32_t baudrate;
;;;660    
;;;661    	prm_get("I2C address", &addr, END);
000a84  2200              MOVS     r2,#0
000a86  a905              ADD      r1,sp,#0x14
000a88  a038              ADR      r0,|L1.2924|
000a8a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;662    	g_i2c0->setSlaveAddr(addr);
000a8e  482e              LDR      r0,|L1.2888|
000a90  f89d1014          LDRB     r1,[sp,#0x14]
000a94  6800              LDR      r0,[r0,#0]  ; g_i2c0
000a96  f7fffffe          BL       _ZN3I2c12setSlaveAddrEh ; I2c::setSlaveAddr(unsigned char)
;;;663    
;;;664    	prm_get("UART baudrate", &baudrate, END);
000a9a  2200              MOVS     r2,#0
000a9c  a904              ADD      r1,sp,#0x10
000a9e  a037              ADR      r0,|L1.2940|
000aa0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;665    	g_uart0->setBaudrate(baudrate);
000aa4  482a              LDR      r0,|L1.2896|
000aa6  9904              LDR      r1,[sp,#0x10]
000aa8  6800              LDR      r0,[r0,#0]  ; g_uart0
000aaa  f7fffffe          BL       _ZN4Uart11setBaudrateEj ; Uart::setBaudrate(unsigned)
;;;666    
;;;667    	prm_get("Data out port", &interface, END);
000aae  2200              MOVS     r2,#0
000ab0  a906              ADD      r1,sp,#0x18
000ab2  a029              ADR      r0,|L1.2904|
000ab4  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;668    	ser_setInterface(interface);
000ab8  f89d0018          LDRB     r0,[sp,#0x18]
000abc  f7fffffe          BL       _Z16ser_setInterfaceh ; ser_setInterface(unsigned char)
;;;669    
;;;670    #else
;;;671    	ser_setInterface(SER_INTERFACE_LEGO);
;;;672    #endif
;;;673    }
000ac0  b007              ADD      sp,sp,#0x1c
000ac2  bd30              POP      {r4,r5,pc}
;;;674    
                          ENDP

                  _Z8ser_initP5Chirp PROC ; ser_init(Chirp*)
;;;633    
;;;634    int ser_init(Chirp *chirp)
000ac4  b510              PUSH     {r4,lr}
;;;635    {
;;;636    	chirp->registerModule(g_module);
000ac6  4932              LDR      r1,|L1.2960|
000ac8  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;637    	i2c_init(txCallback);
000acc  f2af3093          ADR      r0,_Z10txCallbackPhj + 1 ; txCallback(unsigned char*, unsigned)
000ad0  f7fffffe          BL       _Z8i2c_initPFjPhjE ; i2c_init(unsigned(*)(unsigned char*, unsigned))
;;;638    	uart_init(txCallback);
000ad4  f2af309b          ADR      r0,_Z10txCallbackPhj + 1 ; txCallback(unsigned char*, unsigned)
000ad8  f7fffffe          BL       _Z9uart_initPFjPhjE ; uart_init(unsigned(*)(unsigned char*, unsigned))
;;;639    	ad_init();
000adc  f7fffffe          BL       _Z7ad_initv ; ad_init()
;;;640    
;;;641    	ser_loadParams();
000ae0  f7fffffe          BL       _Z14ser_loadParamsv ; ser_loadParams()
;;;642    		
;;;643    	return 0;	
000ae4  2000              MOVS     r0,#0
;;;644    }
000ae6  bd10              POP      {r4,pc}
;;;645    
                          ENDP

                  _Z10ser_updatev PROC ; ser_update()
;;;766    
;;;767    void ser_update()
000ae8  b510              PUSH     {r4,lr}
;;;768    {
;;;769    	// handled queued commands 
;;;770    	// Brightness change
;;;771    	if (g_brightnessQ.m_valid)
000aea  4c0c              LDR      r4,|L1.2844|
000aec  3418              ADDS     r4,r4,#0x18
000aee  7820              LDRB     r0,[r4,#0]  ; g_brightnessQ
000af0  2800              CMP      r0,#0
000af2  d004              BEQ      |L1.2814|
;;;772    	{
;;;773    		cam_setBrightness(g_brightnessQ.m_brightness);
000af4  1c60              ADDS     r0,r4,#1
000af6  f7fffffe          BL       _Z17cam_setBrightnessRKh ; cam_setBrightness(const unsigned char&)
;;;774    		g_brightnessQ.m_valid = false;
000afa  2000              MOVS     r0,#0
000afc  7020              STRB     r0,[r4,#0]
                  |L1.2814|
;;;775    	}
;;;776    	// update serial channel
;;;777    	ser_getSerial()->update();
000afe  f7fffffe          BL       _Z13ser_getSerialv ; ser_getSerial()
000b02  6801              LDR      r1,[r0,#0]
000b04  6909              LDR      r1,[r1,#0x10]
000b06  e8bd4010          POP      {r4,lr}
000b0a  4708              BX       r1
;;;778    }
;;;779    	
                          ENDP

                  _Z12ser_setReadyv PROC ; ser_setReady()
;;;780    void ser_setReady()
000b0c  4903              LDR      r1,|L1.2844|
;;;781    {
;;;782    	g_ready = true;
000b0e  2001              MOVS     r0,#1
000b10  7148              STRB     r0,[r1,#5]
;;;783    }
000b12  4770              BX       lr
;;;784    
                          ENDP

                  _Z16ser_getInterfacev PROC ; ser_getInterface()
;;;785    
;;;786    uint8_t ser_getInterface()
000b14  4801              LDR      r0,|L1.2844|
;;;787    {
;;;788    	return g_interface;
000b16  7800              LDRB     r0,[r0,#0]  ; g_interface
;;;789    }
000b18  4770              BX       lr
;;;790    
                          ENDP

000b1a  0000              DCW      0x0000
                  |L1.2844|
                          DCD      ||.data||
                  |L1.2848|
000b20  50697879          DCB      "Pixy 1.0 compatibility mode",0
000b24  20312e30
000b28  20636f6d
000b2c  70617469
000b30  62696c69
000b34  7479206d
000b38  6f646500
                  |L1.2876|
                          DCD      ||.bss||
                  |L1.2880|
                          DCD      g_spi
                  |L1.2884|
                          DCD      g_spi2
                  |L1.2888|
                          DCD      g_i2c0
                  |L1.2892|
                          DCD      g_ad
                  |L1.2896|
                          DCD      g_uart0
                  |L1.2900|
                          DCD      ||.conststring||+0xb8
                  |L1.2904|
000b58  44617461          DCB      "Data out port",0
000b5c  206f7574
000b60  20706f72
000b64  7400    
000b66  00                DCB      0
000b67  00                DCB      0
                  |L1.2920|
                          DCD      ||.conststring||+0x180
                  |L1.2924|
000b6c  49324320          DCB      "I2C address",0
000b70  61646472
000b74  65737300
                  |L1.2936|
                          DCD      ||.conststring||+0x1d8
                  |L1.2940|
000b7c  55415254          DCB      "UART baudrate",0
000b80  20626175
000b84  64726174
000b88  6500    
000b8a  00                DCB      0
000b8b  00                DCB      0
                  |L1.2956|
                          DCD      ||.conststring||+0x234
                  |L1.2960|
                          DCD      ||.constdata||

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_txBuf
                          %        261

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      ||.conststring||
                          DCD      _Z15ser_packetChirpRKhRKjPS_P5Chirp ; ser_packetChirp(const unsigned char&, const unsigned&, const unsigned char*, Chirp*)
000008  01810000          DCB      0x01,0x81,0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      ||.conststring||+0xc
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  7365725f          DCB      "ser_packet",0
000004  7061636b
000008  657400  
00000b  00                DCB      0
00000c  53656e64          DCB      "Send program-related sensor data based on request@p typ"
000010  2070726f
000014  6772616d
000018  2d72656c
00001c  61746564
000020  2073656e
000024  736f7220
000028  64617461
00002c  20626173
000030  6564206f
000034  6e207265
000038  71756573
00003c  74407020
000040  747970  
000043  65207265          DCB      "e request type identifier@p data request data@r returns"
000047  71756573
00004b  74207479
00004f  70652069
000053  64656e74
000057  69666965
00005b  72407020
00005f  64617461
000063  20726571
000067  75657374
00006b  20646174
00006f  61407220
000073  72657475
000077  726e73  
00007a  20302072          DCB      " 0 regardless and return data array of bytes based on r"
00007e  65676172
000082  646c6573
000086  7320616e
00008a  64207265
00008e  7475726e
000092  20646174
000096  61206172
00009a  72617920
00009e  6f662062
0000a2  79746573
0000a6  20626173
0000aa  6564206f
0000ae  6e2072  
0000b1  65717565          DCB      "equest",0
0000b5  737400  
0000b8  53656c65          DCB      "Selects the port that's used to output data (default Ar"
0000bc  63747320
0000c0  74686520
0000c4  706f7274
0000c8  20746861
0000cc  74277320
0000d0  75736564
0000d4  20746f20
0000d8  6f757470
0000dc  75742064
0000e0  61746120
0000e4  28646566
0000e8  61756c74
0000ec  204172  
0000ef  6475696e          DCB      "duino ICSP SPI) @c Interface @s 0=Arduino_ICSP_SPI @s 1"
0000f3  6f204943
0000f7  53502053
0000fb  50492920
0000ff  40632049
000103  6e746572
000107  66616365
00010b  20407320
00010f  303d4172
000113  6475696e
000117  6f5f4943
00011b  53505f53
00011f  50492040
000123  732031  
000126  3d535049          DCB      "=SPI_with_SS @s 2=I2C @s 3=UART @s 4=analog/digital_x @"
00012a  5f776974
00012e  685f5353
000132  20407320
000136  323d4932
00013a  43204073
00013e  20333d55
000142  41525420
000146  40732034
00014a  3d616e61
00014e  6c6f672f
000152  64696769
000156  74616c5f
00015a  782040  
00015d  7320353d          DCB      "s 5=analog/digital_y @s 6=LEGO_I2C",0
000161  616e616c
000165  6f672f64
000169  69676974
00016d  616c5f79
000171  20407320
000175  363d4c45
000179  474f5f49
00017d  324300  
000180  40632049          DCB      "@c Interface Sets the I2C address if you are using I2C "
000184  6e746572
000188  66616365
00018c  20536574
000190  73207468
000194  65204932
000198  43206164
00019c  64726573
0001a0  73206966
0001a4  20796f75
0001a8  20617265
0001ac  20757369
0001b0  6e672049
0001b4  324320  
0001b7  64617461          DCB      "data out port. (default 0x54)",0
0001bb  206f7574
0001bf  20706f72
0001c3  742e2028
0001c7  64656661
0001cb  756c7420
0001cf  30783534
0001d3  2900    
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
0001d8  40632049          DCB      "@c Interface Sets the UART baudrate if you are using UA"
0001dc  6e746572
0001e0  66616365
0001e4  20536574
0001e8  73207468
0001ec  65205541
0001f0  52542062
0001f4  61756472
0001f8  61746520
0001fc  69662079
000200  6f752061
000204  72652075
000208  73696e67
00020c  205541  
00020f  52542064          DCB      "RT data out port. (default 19200)",0
000213  61746120
000217  6f757420
00021b  706f7274
00021f  2e202864
000223  65666175
000227  6c742031
00022b  39323030
00022f  2900    
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
000234  40632049          DCB      "@c Interface If this is set, Pixy will return data usin"
000238  6e746572
00023c  66616365
000240  20496620
000244  74686973
000248  20697320
00024c  7365742c
000250  20506978
000254  79207769
000258  6c6c2072
00025c  65747572
000260  6e206461
000264  74612075
000268  73696e  
00026b  67207468          DCB      "g the Pixy 1.0 protocol.  This only applies to color co"
00026f  65205069
000273  78792031
000277  2e302070
00027b  726f746f
00027f  636f6c2e
000283  20205468
000287  6973206f
00028b  6e6c7920
00028f  6170706c
000293  69657320
000297  746f2063
00029b  6f6c6f72
00029f  20636f  
0002a2  6e6e6563          DCB      "nnected components program, not other programs. (defaul"
0002a6  74656420
0002aa  636f6d70
0002ae  6f6e656e
0002b2  74732070
0002b6  726f6772
0002ba  616d2c20
0002be  6e6f7420
0002c2  6f746865
0002c6  72207072
0002ca  6f677261
0002ce  6d732e20
0002d2  28646566
0002d6  61756c  
0002d9  74206661          DCB      "t false)",0
0002dd  6c736529
0002e1  00      

                          AREA ||.data||, DATA, ALIGN=2

                  g_interface
000000  ff                DCB      0xff
                  g_angle
000001  00                DCB      0x00
                  g_oldProtocol
000002  00                DCB      0x00
                  g_state
000003  00                DCB      0x00
                  g_newPacket
000004  00                DCB      0x00
                  g_ready
000005  00                DCB      0x00
                  lastLamp
000006  00                DCB      0x00
                  ||ccc||
000007  ff                DCB      0xff
                  line
000008  ff                DCB      0xff
                  video
000009  ff                DCB      0xff
                  lastByte
00000a  00                DCB      0x00
                  type
00000b  00                DCB      0x00
                  len
00000c  0000              DCB      0x00,0x00
                  lastReverse
00000e  ffff              DCW      0xffff
                  w
000010  0000              DCB      0x00,0x00
                  csStream
000012  0000              DCB      0x00,0x00
                  g_txReadIndex
000014  0000              DCB      0x00,0x00
                  g_txLen
000016  0000              DCB      0x00,0x00
                  g_brightnessQ
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  g_serial
                          DCD      0x00000000
                  g_tx
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\serial.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_serial_cpp_888a17e1___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___10_serial_cpp_888a17e1___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_serial_cpp_888a17e1___Z7__REVSHi|
#line 144
|__asm___10_serial_cpp_888a17e1___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
