; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\line.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\line.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\line.crf src\line.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _Z14tanDiffAbs1000RK5PointS1_S1_S1_b PROC ; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
;;;131    
;;;132    uint32_t tanDiffAbs1000(const Point &p00, const Point &p01, const Point &p10, const Point &p11, bool min=false)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  9e04              LDR      r6,[sp,#0x10]
;;;134    	// find tangent of angle difference between the two lines
;;;135    	int16_t xdiff0, ydiff0;
;;;136    	int16_t xdiff1, ydiff1;
;;;137    	int32_t x, y, res;
;;;138    
;;;139    	xdiff0 = p01.m_x - p00.m_x;
000004  780c              LDRB     r4,[r1,#0]
000006  7805              LDRB     r5,[r0,#0]
000008  1b64              SUBS     r4,r4,r5
;;;140    	ydiff0 = p01.m_y - p00.m_y;
00000a  7849              LDRB     r1,[r1,#1]
00000c  7840              LDRB     r0,[r0,#1]
00000e  1a09              SUBS     r1,r1,r0
;;;141    	xdiff1 = p11.m_x - p10.m_x;
000010  7818              LDRB     r0,[r3,#0]
000012  7815              LDRB     r5,[r2,#0]
000014  1b45              SUBS     r5,r0,r5
;;;142    	ydiff1 = p11.m_y - p10.m_y;
000016  7858              LDRB     r0,[r3,#1]
000018  7852              LDRB     r2,[r2,#1]
00001a  1a82              SUBS     r2,r0,r2
;;;143    
;;;144    	x = xdiff0*xdiff1 + ydiff0*ydiff1;
00001c  fb14f005          SMULBB   r0,r4,r5
000020  fb110002          SMLABB   r0,r1,r2,r0
;;;145    	y = ydiff0*xdiff1 - ydiff1*xdiff0;
000024  fb11f105          SMULBB   r1,r1,r5
000028  fb021114          MLS      r1,r2,r4,r1
;;;146    
;;;147    	// min==true says that we don't care how the lines stack up, just return the abs of the minimum.
;;;148    	// min==false says that we care of the angles open beyond 90 degrees, in which case return a big value.
;;;149    	if ((min&&x==0) || (!min&&x<=0))
00002c  2e00              CMP      r6,#0
00002e  d000              BEQ      |L1.50|
000030  b110              CBZ      r0,|L1.56|
                  |L1.50|
000032  b91e              CBNZ     r6,|L1.60|
000034  2800              CMP      r0,#0
000036  dc01              BGT      |L1.60|
                  |L1.56|
;;;150    		return 1000000;
000038  48f7              LDR      r0,|L1.1048|
                  |L1.58|
;;;151    
;;;152    	res = y*1000/x;
;;;153    	res = ABS(res);
;;;154    	return res;
;;;155    }
00003a  bd70              POP      {r4-r6,pc}
                  |L1.60|
00003c  f44f727a          MOV      r2,#0x3e8             ;152
000040  4351              MULS     r1,r2,r1              ;152
000042  fb91f0f0          SDIV     r0,r1,r0              ;152
000046  2800              CMP      r0,#0                 ;153
000048  daf7              BGE      |L1.58|
00004a  4240              RSBS     r0,r0,#0              ;153
00004c  bd70              POP      {r4-r6,pc}
;;;156    
                          ENDP

                  _Z10tanAbs1000RK5PointS1_ PROC ; tanAbs1000(const Point&, const Point&)
;;;157    uint32_t tanAbs1000(const Point &p0, const Point &p1)
00004e  780a              LDRB     r2,[r1,#0]
;;;158    {
;;;159    	// find tangent of angle difference between the two lines
;;;160    	int16_t xdiff, ydiff;
;;;161    	int32_t res;
;;;162    
;;;163    	xdiff = p1.m_x - p0.m_x;
000050  7803              LDRB     r3,[r0,#0]
000052  1ad2              SUBS     r2,r2,r3
;;;164    	ydiff = p1.m_y - p0.m_y;
000054  7849              LDRB     r1,[r1,#1]
000056  7840              LDRB     r0,[r0,#1]
000058  1a08              SUBS     r0,r1,r0
;;;165    
;;;166    	if (xdiff==0)
00005a  2a00              CMP      r2,#0
00005c  d008              BEQ      |L1.112|
;;;167    		return 1000000;
;;;168    
;;;169    	res = ydiff*1000/xdiff;
00005e  f44f717a          MOV      r1,#0x3e8
000062  4348              MULS     r0,r1,r0
000064  fb90f0f2          SDIV     r0,r0,r2
;;;170    	res = ABS(res);
000068  2800              CMP      r0,#0
00006a  da00              BGE      |L1.110|
00006c  4240              RSBS     r0,r0,#0
                  |L1.110|
;;;171    	return res;
;;;172    }
00006e  4770              BX       lr
                  |L1.112|
000070  48e9              LDR      r0,|L1.1048|
000072  4770              BX       lr
;;;173    
                          ENDP

                  _Z10xdirectionRK5PointS1_ PROC ; xdirection(const Point&, const Point&)
;;;174    bool xdirection(const Point &p0, const Point &p1)
000074  780a              LDRB     r2,[r1,#0]
;;;175    {
;;;176        int16_t xdiff, ydiff;
;;;177    
;;;178        xdiff = p1.m_x - p0.m_x;
000076  7803              LDRB     r3,[r0,#0]
000078  1ad2              SUBS     r2,r2,r3
;;;179        ydiff = p1.m_y - p0.m_y;
00007a  7849              LDRB     r1,[r1,#1]
00007c  7840              LDRB     r0,[r0,#1]
00007e  1a08              SUBS     r0,r1,r0
;;;180    
;;;181        return abs(xdiff)>abs(ydiff);
000080  2a00              CMP      r2,#0
000082  da00              BGE      |L1.134|
000084  4252              RSBS     r2,r2,#0
                  |L1.134|
000086  2800              CMP      r0,#0
000088  da00              BGE      |L1.140|
00008a  4240              RSBS     r0,r0,#0
                  |L1.140|
00008c  4282              CMP      r2,r0
00008e  dd01              BLE      |L1.148|
000090  2001              MOVS     r0,#1
;;;182    }
000092  4770              BX       lr
                  |L1.148|
000094  2000              MOVS     r0,#0                 ;181
000096  4770              BX       lr
;;;183    
                          ENDP

                  _Z19line_shadowCallbackPKcPKv PROC ; line_shadowCallback(const char*, const void*)
;;;188    
;;;189    void line_shadowCallback(const char *id, const void *val)
000098  b5f0              PUSH     {r4-r7,lr}
;;;190    {
00009a  b08b              SUB      sp,sp,#0x2c
00009c  4607              MOV      r7,r0
00009e  460c              MOV      r4,r1
;;;191    	int responseInt;
;;;192    	bool callM0 = false;
0000a0  2600              MOVS     r6,#0
;;;193    	uint16_t leading, trailing;
;;;194    	
;;;195    	if (strcmp(id, "Edge distance")==0)
0000a2  a1de              ADR      r1,|L1.1052|
0000a4  4638              MOV      r0,r7
0000a6  f7fffffe          BL       strcmp
;;;196    	{
;;;197    		g_dist = *(uint16_t *)val;
0000aa  4de0              LDR      r5,|L1.1068|
0000ac  2800              CMP      r0,#0                 ;195
0000ae  d056              BEQ      |L1.350|
;;;198    		callM0 = true;
;;;199    	}
;;;200    	else if (strcmp(id, "Edge threshold")==0)
0000b0  a1df              ADR      r1,|L1.1072|
0000b2  4638              MOV      r0,r7
0000b4  f7fffffe          BL       strcmp
0000b8  2800              CMP      r0,#0
0000ba  d054              BEQ      |L1.358|
;;;201    	{
;;;202    		g_thresh = *(uint16_t *)val;
;;;203    		g_hThresh = g_thresh*LINE_HTHRESH_RATIO;	
;;;204    		callM0 = true;
;;;205    	}
;;;206    	else if (strcmp(id, "Minimum line width")==0)
0000bc  a1e0              ADR      r1,|L1.1088|
0000be  4638              MOV      r0,r7
0000c0  f7fffffe          BL       strcmp
0000c4  2800              CMP      r0,#0
0000c6  d058              BEQ      |L1.378|
;;;207    		g_minLineWidth = *(uint16_t *)val;
;;;208    	else if (strcmp(id, "Maximum line width")==0)
0000c8  a1e2              ADR      r1,|L1.1108|
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       strcmp
0000d0  2800              CMP      r0,#0
0000d2  d055              BEQ      |L1.384|
;;;209    		g_maxLineWidth = *(uint16_t *)val;
;;;210    	else if (strcmp(id, "Line extraction distance")==0)
0000d4  a1e4              ADR      r1,|L1.1128|
0000d6  4638              MOV      r0,r7
0000d8  f7fffffe          BL       strcmp
0000dc  2800              CMP      r0,#0
0000de  d052              BEQ      |L1.390|
;;;211    		g_extractionDist = *(uint16_t *)val;
;;;212    	else if (strcmp(id, "Maximum merge distance")==0)
0000e0  a1e8              ADR      r1,|L1.1156|
0000e2  4638              MOV      r0,r7
0000e4  f7fffffe          BL       strcmp
0000e8  2800              CMP      r0,#0
0000ea  d04f              BEQ      |L1.396|
;;;213    		g_maxMergeDist = *(uint16_t *)val;
;;;214    	else if (strcmp(id, "Minimum line length")==0)
0000ec  a1eb              ADR      r1,|L1.1180|
0000ee  4638              MOV      r0,r7
0000f0  f7fffffe          BL       strcmp
0000f4  2800              CMP      r0,#0
0000f6  d04c              BEQ      |L1.402|
;;;215    	{
;;;216    		g_minLineLength = *(uint16_t *)val;
;;;217    		g_minLineLength2 = g_minLineLength*g_minLineLength; // squared
;;;218    	}
;;;219    	else if (strcmp(id, "Maximum line compare")==0)
0000f8  a1ed              ADR      r1,|L1.1200|
0000fa  4638              MOV      r0,r7
0000fc  f7fffffe          BL       strcmp
000100  2800              CMP      r0,#0
000102  d04b              BEQ      |L1.412|
;;;220    		g_maxLineCompare = *(uint32_t *)val; 
;;;221    	else if (strcmp(id, "White line")==0)
000104  a1f0              ADR      r1,|L1.1224|
000106  4638              MOV      r0,r7
000108  f7fffffe          BL       strcmp
00010c  2800              CMP      r0,#0
00010e  d04e              BEQ      |L1.430|
;;;222    		g_whiteLine = *(uint8_t *)val;
;;;223    	else if (strcmp(id, "Manual vector select")==0)
000110  a1f0              ADR      r1,|L1.1236|
000112  4638              MOV      r0,r7
000114  f7fffffe          BL       strcmp
000118  2800              CMP      r0,#0
00011a  d04b              BEQ      |L1.436|
;;;224    		g_manualVectorSelect = *(uint8_t *)val;
;;;225    	else if (strcmp(id, "Line filtering")==0)
00011c  a1f3              ADR      r1,|L1.1260|
00011e  4638              MOV      r0,r7
000120  f7fffffe          BL       strcmp
000124  2800              CMP      r0,#0
000126  d04a              BEQ      |L1.446|
;;;226    		g_lineFiltering = *(uint8_t *)val;
;;;227    	else if (strcmp(id, "Intersection filtering")==0)
000128  a1f4              ADR      r1,|L1.1276|
00012a  4638              MOV      r0,r7
00012c  f7fffffe          BL       strcmp
000130  2800              CMP      r0,#0
000132  d047              BEQ      |L1.452|
;;;228    	{
;;;229    		uint8_t v;
;;;230    		v = *(uint8_t *)val;
;;;231    		leading = v*LINE_FILTERING_MULTIPLIER;
;;;232    		trailing = (leading+1)>>1;
;;;233    		g_primaryIntersection.setTiming(leading, trailing); 
;;;234    	}
;;;235    	else if (strcmp(id, "Barcode filtering")==0)
000134  a1f7              ADR      r1,|L1.1300|
000136  4638              MOV      r0,r7
000138  f7fffffe          BL       strcmp
00013c  b398              CBZ      r0,|L1.422|
;;;236    		g_barcodeFiltering = *(uint8_t *)val;
;;;237    	else if (strcmp(id, "Delayed turn")==0)
00013e  a1fa              ADR      r1,|L1.1320|
000140  4638              MOV      r0,r7
000142  f7fffffe          BL       strcmp
000146  b378              CBZ      r0,|L1.424|
;;;238    		g_delayedTurn = *(uint8_t *)val;
;;;239    	else if (strcmp(id, "Go")==0)
000148  a1fb              ADR      r1,|L1.1336|
00014a  4638              MOV      r0,r7
00014c  f7fffffe          BL       strcmp
000150  b358              CBZ      r0,|L1.426|
;;;240    		g_go = *(uint8_t *)val;
;;;241    	else if (strcmp(id, "Repeat")==0)
000152  a1fa              ADR      r1,|L1.1340|
000154  4638              MOV      r0,r7
000156  f7fffffe          BL       strcmp
00015a  b338              CBZ      r0,|L1.428|
00015c  e045              B        |L1.490|
                  |L1.350|
00015e  8820              LDRH     r0,[r4,#0]            ;197
000160  84e8              STRH     r0,[r5,#0x26]         ;197
000162  2601              MOVS     r6,#1                 ;198
000164  e041              B        |L1.490|
                  |L1.358|
000166  8820              LDRH     r0,[r4,#0]            ;202
000168  8528              STRH     r0,[r5,#0x28]         ;202
00016a  eb000040          ADD      r0,r0,r0,LSL #1       ;203
00016e  2105              MOVS     r1,#5                 ;203
000170  fbb0f0f1          UDIV     r0,r0,r1              ;203
000174  8568              STRH     r0,[r5,#0x2a]         ;203
000176  2601              MOVS     r6,#1                 ;204
000178  e037              B        |L1.490|
                  |L1.378|
00017a  8820              LDRH     r0,[r4,#0]            ;207
00017c  83e8              STRH     r0,[r5,#0x1e]         ;207
00017e  e034              B        |L1.490|
                  |L1.384|
000180  8820              LDRH     r0,[r4,#0]            ;209
000182  8428              STRH     r0,[r5,#0x20]         ;209
000184  e031              B        |L1.490|
                  |L1.390|
000186  8820              LDRH     r0,[r4,#0]            ;211
000188  84a8              STRH     r0,[r5,#0x24]         ;211
00018a  e02e              B        |L1.490|
                  |L1.396|
00018c  8820              LDRH     r0,[r4,#0]            ;213
00018e  8468              STRH     r0,[r5,#0x22]         ;213
000190  e02b              B        |L1.490|
                  |L1.402|
000192  8820              LDRH     r0,[r4,#0]            ;216
000194  6528              STR      r0,[r5,#0x50]         ;216  ; g_minLineLength
000196  4340              MULS     r0,r0,r0              ;217
000198  64e8              STR      r0,[r5,#0x4c]         ;217  ; g_minLineLength2
00019a  e026              B        |L1.490|
                  |L1.412|
00019c  49a3              LDR      r1,|L1.1068|
00019e  6820              LDR      r0,[r4,#0]            ;220
0001a0  3180              ADDS     r1,r1,#0x80           ;220
0001a2  6048              STR      r0,[r1,#4]            ;220  ; g_maxLineCompare
0001a4  e021              B        |L1.490|
                  |L1.422|
0001a6  e015              B        |L1.468|
                  |L1.424|
0001a8  e017              B        |L1.474|
                  |L1.426|
0001aa  e019              B        |L1.480|
                  |L1.428|
0001ac  e01b              B        |L1.486|
                  |L1.430|
0001ae  7820              LDRB     r0,[r4,#0]            ;222
0001b0  7028              STRB     r0,[r5,#0]            ;222
0001b2  e01a              B        |L1.490|
                  |L1.436|
0001b4  7820              LDRB     r0,[r4,#0]            ;224
0001b6  b100              CBZ      r0,|L1.442|
0001b8  2001              MOVS     r0,#1                 ;224
                  |L1.442|
0001ba  75a8              STRB     r0,[r5,#0x16]         ;224
0001bc  e015              B        |L1.490|
                  |L1.446|
0001be  7820              LDRB     r0,[r4,#0]            ;226
0001c0  73e8              STRB     r0,[r5,#0xf]          ;226
0001c2  e012              B        |L1.490|
                  |L1.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;230
0001c6  0100              LSLS     r0,r0,#4              ;231
0001c8  1c41              ADDS     r1,r0,#1              ;232
0001ca  084a              LSRS     r2,r1,#1              ;232
0001cc  49dd              LDR      r1,|L1.1348|
0001ce  80c8              STRH     r0,[r1,#6]            ;233
0001d0  810a              STRH     r2,[r1,#8]            ;233
0001d2  e00a              B        |L1.490|
                  |L1.468|
0001d4  7820              LDRB     r0,[r4,#0]            ;236
0001d6  7428              STRB     r0,[r5,#0x10]         ;236
0001d8  e007              B        |L1.490|
                  |L1.474|
0001da  7820              LDRB     r0,[r4,#0]            ;238
0001dc  7528              STRB     r0,[r5,#0x14]         ;238
0001de  e004              B        |L1.490|
                  |L1.480|
0001e0  7820              LDRB     r0,[r4,#0]            ;240
0001e2  7068              STRB     r0,[r5,#1]            ;240
0001e4  e001              B        |L1.490|
                  |L1.486|
;;;242    		g_repeat = *(uint8_t *)val;
0001e6  7820              LDRB     r0,[r4,#0]
0001e8  70a8              STRB     r0,[r5,#2]
                  |L1.490|
;;;243    
;;;244    	if (callM0)
0001ea  2e00              CMP      r6,#0
0001ec  d016              BEQ      |L1.540|
;;;245    		g_chirpM0->callSync(g_setEdgeParamsM0, UINT16(g_dist), UINT16(g_thresh), UINT16(g_hThresh), END_OUT_ARGS, &responseInt, END_IN_ARGS);
0001ee  2000              MOVS     r0,#0
0001f0  a90a              ADD      r1,sp,#0x28
0001f2  e9cd0105          STRD     r0,r1,[sp,#0x14]
0001f6  9007              STR      r0,[sp,#0x1c]
0001f8  9008              STR      r0,[sp,#0x20]
0001fa  8d2a              LDRH     r2,[r5,#0x28]  ; g_thresh
0001fc  8d69              LDRH     r1,[r5,#0x2a]  ; g_hThresh
0001fe  2002              MOVS     r0,#2
000200  e9cd0201          STRD     r0,r2,[sp,#4]
000204  e9cd0103          STRD     r0,r1,[sp,#0xc]
000208  8ce8              LDRH     r0,[r5,#0x26]  ; g_dist
00020a  9000              STR      r0,[sp,#0]
00020c  48ce              LDR      r0,|L1.1352|
00020e  2302              MOVS     r3,#2
000210  f9b5201c          LDRSH    r2,[r5,#0x1c]  ; g_setEdgeParamsM0
000214  2100              MOVS     r1,#0
000216  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000218  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
                  |L1.540|
;;;246    }
00021c  b00b              ADD      sp,sp,#0x2c
00021e  bdf0              POP      {r4-r7,pc}
;;;247    
                          ENDP

                  _Z15line_loadParamsa PROC ; line_loadParams(signed char)
;;;249    
;;;250    int line_loadParams(int8_t progIndex)
000220  e92d4ff0          PUSH     {r4-r11,lr}
;;;251    {	
000224  b0b3              SUB      sp,sp,#0xcc
;;;252    	int i, responseInt=-1;
000226  f04f31ff          MOV      r1,#0xffffffff
00022a  9132              STR      r1,[sp,#0xc8]
;;;253    	char id[32], desc[128];
;;;254    	uint16_t leading, trailing;
;;;255    	
;;;256    	// add params
;;;257    	if (progIndex>=0)
;;;258    	{
;;;259    		prm_add("Edge distance", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4,
00022c  2400              MOVS     r4,#0
00022e  f04f0802          MOV      r8,#2
000232  2800              CMP      r0,#0                 ;257
000234  db68              BLT      |L1.776|
000236  3019              ADDS     r0,r0,#0x19
000238  2601              MOVS     r6,#1
00023a  fa06f000          LSL      r0,r6,r0
00023e  064f              LSLS     r7,r1,#25
000240  4387              BICS     r7,r7,r0
000242  f04f0904          MOV      r9,#4
000246  f4477580          ORR      r5,r7,#0x100
00024a  f44f6b7a          MOV      r11,#0xfa0
00024e  4bbf              LDR      r3,|L1.1356|
000250  465a              MOV      r2,r11
000252  4629              MOV      r1,r5
000254  a071              ADR      r0,|L1.1052|
000256  e9cd8900          STRD     r8,r9,[sp,#0]
00025a  9402              STR      r4,[sp,#8]
00025c  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;260    			"@c Expert @m 1 @M 15 Sets the distance between pixels when computing edges (default " STRINGIFY(LINE_EDGE_DIST_DEFAULT) ")", UINT16(LINE_EDGE_DIST_DEFAULT), END);
;;;261    		prm_setShadowCallback("Edge distance", (ShadowCallback)line_shadowCallback);
000260  f2af11cb          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
000264  a06d              ADR      r0,|L1.1052|
000266  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;262    
;;;263    		prm_add("Edge threshold", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_5,
00026a  2023              MOVS     r0,#0x23
00026c  e9cd8000          STRD     r8,r0,[sp,#0]
000270  f2413a88          MOV      r10,#0x1388
000274  4629              MOV      r1,r5
000276  4bb6              LDR      r3,|L1.1360|
000278  4652              MOV      r2,r10
00027a  9402              STR      r4,[sp,#8]
00027c  a06c              ADR      r0,|L1.1072|
00027e  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;264    			"@c Tuning @m 1 @M 150 Sets edge detection threshold (default " STRINGIFY(LINE_EDGE_THRESH_DEFAULT) ")", UINT16(LINE_EDGE_THRESH_DEFAULT), END);
;;;265    		prm_setShadowCallback("Edge threshold", (ShadowCallback)line_shadowCallback);
000282  f2af11eb          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
000286  a06a              ADR      r0,|L1.1072|
000288  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;266    
;;;267    		prm_add("Minimum line width", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_5, 
00028c  e9cd8400          STRD     r8,r4,[sp,#0]
000290  4629              MOV      r1,r5
000292  a3b0              ADR      r3,|L1.1364|
000294  4652              MOV      r2,r10
000296  a06a              ADR      r0,|L1.1088|
000298  9402              STR      r4,[sp,#8]
00029a  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;268    			"@c Tuning @m 0 @M 100 Sets minimum detected line width " STRINGIFY(LINE_MIN_WIDTH) ")", UINT16(LINE_MIN_WIDTH), END);
;;;269    		prm_setShadowCallback("Minimum line width", (ShadowCallback)line_shadowCallback);
00029e  f2af2107          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0002a2  a067              ADR      r0,|L1.1088|
0002a4  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;270    
;;;271    		prm_add("Maximum line width", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_5, 
0002a8  2064              MOVS     r0,#0x64
0002aa  e9cd8000          STRD     r8,r0,[sp,#0]
0002ae  4629              MOV      r1,r5
0002b0  a3b7              ADR      r3,|L1.1424|
0002b2  4652              MOV      r2,r10
0002b4  9402              STR      r4,[sp,#8]
0002b6  a067              ADR      r0,|L1.1108|
0002b8  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;272    			"@c Tuning @m 1 @M 250 Sets maximum detected line width " STRINGIFY(LINE_MAX_WIDTH) ")", UINT16(LINE_MAX_WIDTH), END);
;;;273    		prm_setShadowCallback("Maximum line width", (ShadowCallback)line_shadowCallback);	
0002bc  f2af2127          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0002c0  a064              ADR      r0,|L1.1108|
0002c2  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;274    
;;;275    		prm_add("Line extraction distance", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4,
0002c6  200d              MOVS     r0,#0xd
0002c8  e9cd8000          STRD     r8,r0,[sp,#0]
0002cc  4629              MOV      r1,r5
0002ce  4bbf              LDR      r3,|L1.1484|
0002d0  465a              MOV      r2,r11
0002d2  9402              STR      r4,[sp,#8]
0002d4  a064              ADR      r0,|L1.1128|
0002d6  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;276    			"@c Expert @m 1 @M 25 Sets the distance to search when extracting lines (default " STRINGIFY(LINE_EXTRACTION_DIST_DEFAULT) ")", UINT16(LINE_EXTRACTION_DIST_DEFAULT), END);
;;;277    		prm_setShadowCallback("Line extraction distance", (ShadowCallback)line_shadowCallback);
0002da  f2af2143          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0002de  a062              ADR      r0,|L1.1128|
0002e0  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;278    
;;;279    		prm_add("Maximum merge distance", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4, 
0002e4  2006              MOVS     r0,#6
0002e6  e9cd8000          STRD     r8,r0,[sp,#0]
0002ea  4629              MOV      r1,r5
0002ec  4bb8              LDR      r3,|L1.1488|
0002ee  465a              MOV      r2,r11
0002f0  9402              STR      r4,[sp,#8]
0002f2  a064              ADR      r0,|L1.1156|
0002f4  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;280    			"@c Expert @m 0 @M 25 Sets the search distance for merging lines (default " STRINGIFY(LINE_MAX_MERGE_DIST) ")", UINT16(LINE_MAX_MERGE_DIST), END);
;;;281    		prm_setShadowCallback("Maximum merge distance", (ShadowCallback)line_shadowCallback);
0002f8  f2af2163          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0002fc  a061              ADR      r0,|L1.1156|
0002fe  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;282    
;;;283    		prm_add("Minimum line length", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4, 
000302  200a              MOVS     r0,#0xa
000304  4629              MOV      r1,r5
000306  e000              B        |L1.778|
                  |L1.776|
000308  e1d6              B        |L1.1720|
                  |L1.778|
00030a  e9cd8000          STRD     r8,r0,[sp,#0]
00030e  a3b1              ADR      r3,|L1.1492|
000310  465a              MOV      r2,r11
000312  9402              STR      r4,[sp,#8]
000314  a061              ADR      r0,|L1.1180|
000316  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;284    			"@c Expert @m 1 @M 50 Sets the minimum line length (default " STRINGIFY(LINE_MIN_LENGTH) ")", UINT16(LINE_MIN_LENGTH), END);
;;;285    		prm_setShadowCallback("Minimum line length", (ShadowCallback)line_shadowCallback);
00031a  f2af2183          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
00031e  a05f              ADR      r0,|L1.1180|
000320  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;286    
;;;287    		prm_add("Maximum line compare", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4, 
000324  e9cd9a00          STRD     r9,r10,[sp,#0]
000328  4629              MOV      r1,r5
00032a  4bba              LDR      r3,|L1.1556|
00032c  465a              MOV      r2,r11
00032e  a060              ADR      r0,|L1.1200|
000330  9402              STR      r4,[sp,#8]
000332  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;288    			"@c Expert @m 1 @M 10000 Sets the maximum distance between lines for them to be considered the same line between frames (default " STRINGIFY(LINE_MAX_COMPARE) ")", UINT32(LINE_MAX_COMPARE), END);
;;;289    		prm_setShadowCallback("Maximum line compare", (ShadowCallback)line_shadowCallback);
000336  f2af219f          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
00033a  a05d              ADR      r0,|L1.1200|
00033c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;290    
;;;291    		prm_add("White line", PROG_FLAGS(progIndex) | PRM_FLAG_CHECKBOX, PRM_PRIORITY_5, 
000340  e9cd6400          STRD     r6,r4,[sp,#0]
000344  f4477900          ORR      r9,r7,#0x200
000348  4bb3              LDR      r3,|L1.1560|
00034a  4652              MOV      r2,r10
00034c  4649              MOV      r1,r9
00034e  a05e              ADR      r0,|L1.1224|
000350  9402              STR      r4,[sp,#8]
000352  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;292    			"@c Tuning If this is set, Pixy will look for light lines on dark background.  If this is not set, Pixy will look for dark lines on light background (default false)", UINT8(0), END);
;;;293    		prm_setShadowCallback("White line", (ShadowCallback)line_shadowCallback);
000356  f2af21bf          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
00035a  a05b              ADR      r0,|L1.1224|
00035c  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;294    
;;;295    		prm_add("Line filtering", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4-1, 
000360  9600              STR      r6,[sp,#0]
000362  e9cd6401          STRD     r6,r4,[sp,#4]
000366  4629              MOV      r1,r5
000368  4bac              LDR      r3,|L1.1564|
00036a  f640729f          MOV      r2,#0xf9f
00036e  a05f              ADR      r0,|L1.1260|
000370  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;296    			"@c Expert @m 0 @M 30 Sets the amount of noise filtering for line detection (default " STRINGIFY(LINE_LINE_FILTERING) ")", UINT8(LINE_LINE_FILTERING), END);
;;;297    		prm_setShadowCallback("Line filtering", (ShadowCallback)line_shadowCallback);
000374  f2af21df          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
000378  a05c              ADR      r0,|L1.1260|
00037a  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;298    
;;;299    		prm_add("Intersection filtering", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4-2, 
00037e  9600              STR      r6,[sp,#0]
000380  e9cd6401          STRD     r6,r4,[sp,#4]
000384  4629              MOV      r1,r5
000386  4ba6              LDR      r3,|L1.1568|
000388  f640729e          MOV      r2,#0xf9e
00038c  a05b              ADR      r0,|L1.1276|
00038e  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;300    			"@c Expert @m 0 @M 30 Sets the amount of noise filtering for intersection detection (default " STRINGIFY(LINE_INTERSECTION_FILTERING) ")", UINT8(LINE_INTERSECTION_FILTERING), END);
;;;301    		prm_setShadowCallback("Intersection filtering", (ShadowCallback)line_shadowCallback);
000392  f2af21fb          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
000396  a059              ADR      r0,|L1.1276|
000398  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;302    
;;;303    		prm_add("Barcode filtering", PROG_FLAGS(progIndex) | PRM_FLAG_SLIDER, PRM_PRIORITY_4-3, 
00039c  9600              STR      r6,[sp,#0]
00039e  e9cd6401          STRD     r6,r4,[sp,#4]
0003a2  4629              MOV      r1,r5
0003a4  4b9f              LDR      r3,|L1.1572|
0003a6  f640729d          MOV      r2,#0xf9d
0003aa  a05a              ADR      r0,|L1.1300|
0003ac  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;304    			"@c Expert @m 0 @M 30 Sets the amount of noise filtering for barcode detection (default " STRINGIFY(LINE_BARCODE_FILTERING) ")", UINT8(LINE_BARCODE_FILTERING), END);
;;;305    		prm_setShadowCallback("Barcode filtering", (ShadowCallback)line_shadowCallback);
0003b0  f2af311b          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0003b4  a057              ADR      r0,|L1.1300|
0003b6  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;306    
;;;307    		prm_add("Default turn angle", PROG_FLAGS(progIndex) | PRM_FLAG_SIGNED, PRM_PRIORITY_4-4, 
0003ba  e9cd8400          STRD     r8,r4,[sp,#0]
0003be  f0470180          ORR      r1,r7,#0x80
0003c2  4b99              LDR      r3,|L1.1576|
0003c4  f640729c          MOV      r2,#0xf9c
0003c8  a098              ADR      r0,|L1.1580|
0003ca  9402              STR      r4,[sp,#8]
0003cc  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;308    			"@c Expert Sets the turn angle that Pixy chooses by default if next turn angle is not set.  Does not apply if Delayed turn is set (default 0)", UINT16(0), END);
;;;309    		
;;;310    		prm_add("Delayed turn", PROG_FLAGS(progIndex) | PRM_FLAG_CHECKBOX, PRM_PRIORITY_4-5, 
0003d0  e9cd6400          STRD     r6,r4,[sp,#0]
0003d4  4649              MOV      r1,r9
0003d6  4b9a              LDR      r3,|L1.1600|
0003d8  f640729b          MOV      r2,#0xf9b
0003dc  a052              ADR      r0,|L1.1320|
0003de  9402              STR      r4,[sp,#8]
0003e0  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;311    			"@c Expert If true, Pixy will wait for client to choose turn direction after detecting intersection, otherwise Pixy will choose default turn angle or next turn angle after detecting intersection. (default false)", UINT8(0), END);
;;;312    		prm_setShadowCallback("Delayed turn", (ShadowCallback)line_shadowCallback);
0003e4  f2af314f          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
0003e8  a04f              ADR      r0,|L1.1320|
0003ea  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;313    
;;;314    		prm_add("Manual vector select", PROG_FLAGS(progIndex) | PRM_FLAG_CHECKBOX, PRM_PRIORITY_4-6, 
0003ee  e9cd6400          STRD     r6,r4,[sp,#0]
0003f2  4649              MOV      r1,r9
0003f4  4b93              LDR      r3,|L1.1604|
0003f6  f640729a          MOV      r2,#0xf9a
0003fa  a036              ADR      r0,|L1.1236|
0003fc  9402              STR      r4,[sp,#8]
0003fe  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;315    			"@c Expert If false, Pixy will automatically choose the primary vector for tracking. If true, the user selects the primary vectory by calling SelectVector (default false)", UINT8(0), END);
;;;316    		prm_setShadowCallback("Manual vector select", (ShadowCallback)line_shadowCallback);
000402  f2af316b          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
000406  a033              ADR      r0,|L1.1236|
000408  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;317    
;;;318    		prm_add("Go", PROG_FLAGS(progIndex) | PRM_FLAG_CHECKBOX  
00040c  e9cd6400          STRD     r6,r4,[sp,#0]
000410  f2072101          ADD      r1,r7,#0x201
000414  460d              MOV      r5,r1
000416  e117              B        |L1.1608|
                  |L1.1048|
                          DCD      0x000f4240
                  |L1.1052|
00041c  45646765          DCB      "Edge distance",0
000420  20646973
000424  74616e63
000428  6500    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
                          DCD      ||.data||
                  |L1.1072|
000430  45646765          DCB      "Edge threshold",0
000434  20746872
000438  6573686f
00043c  6c6400  
00043f  00                DCB      0
                  |L1.1088|
000440  4d696e69          DCB      "Minimum line width",0
000444  6d756d20
000448  6c696e65
00044c  20776964
000450  746800  
000453  00                DCB      0
                  |L1.1108|
000454  4d617869          DCB      "Maximum line width",0
000458  6d756d20
00045c  6c696e65
000460  20776964
000464  746800  
000467  00                DCB      0
                  |L1.1128|
000468  4c696e65          DCB      "Line extraction distance",0
00046c  20657874
000470  72616374
000474  696f6e20
000478  64697374
00047c  616e6365
000480  00      
000481  00                DCB      0
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  4d617869          DCB      "Maximum merge distance",0
000488  6d756d20
00048c  6d657267
000490  65206469
000494  7374616e
000498  636500  
00049b  00                DCB      0
                  |L1.1180|
00049c  4d696e69          DCB      "Minimum line length",0
0004a0  6d756d20
0004a4  6c696e65
0004a8  206c656e
0004ac  67746800
                  |L1.1200|
0004b0  4d617869          DCB      "Maximum line compare",0
0004b4  6d756d20
0004b8  6c696e65
0004bc  20636f6d
0004c0  70617265
0004c4  00      
0004c5  00                DCB      0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L1.1224|
0004c8  57686974          DCB      "White line",0
0004cc  65206c69
0004d0  6e6500  
0004d3  00                DCB      0
                  |L1.1236|
0004d4  4d616e75          DCB      "Manual vector select",0
0004d8  616c2076
0004dc  6563746f
0004e0  72207365
0004e4  6c656374
0004e8  00      
0004e9  00                DCB      0
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  4c696e65          DCB      "Line filtering",0
0004f0  2066696c
0004f4  74657269
0004f8  6e6700  
0004fb  00                DCB      0
                  |L1.1276|
0004fc  496e7465          DCB      "Intersection filtering",0
000500  72736563
000504  74696f6e
000508  2066696c
00050c  74657269
000510  6e6700  
000513  00                DCB      0
                  |L1.1300|
000514  42617263          DCB      "Barcode filtering",0
000518  6f646520
00051c  66696c74
000520  6572696e
000524  6700    
000526  00                DCB      0
000527  00                DCB      0
                  |L1.1320|
000528  44656c61          DCB      "Delayed turn",0
00052c  79656420
000530  7475726e
000534  00      
000535  00                DCB      0
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  476f00            DCB      "Go",0
00053b  00                DCB      0
                  |L1.1340|
00053c  52657065          DCB      "Repeat",0
000540  617400  
000543  00                DCB      0
                  |L1.1348|
                          DCD      ||.bss||+0x48
                  |L1.1352|
                          DCD      g_chirpM0
                  |L1.1356|
                          DCD      ||.conststring||
                  |L1.1360|
                          DCD      ||.conststring||+0x58
                  |L1.1364|
000554  40632054          DCB      "@c Tuning @m 0 @M 100 Sets minimum detected line width "
000558  756e696e
00055c  6720406d
000560  20302040
000564  4d203130
000568  30205365
00056c  7473206d
000570  696e696d
000574  756d2064
000578  65746563
00057c  74656420
000580  6c696e65
000584  20776964
000588  746820  
00058b  302900            DCB      "0)",0
00058e  00                DCB      0
00058f  00                DCB      0
                  |L1.1424|
000590  40632054          DCB      "@c Tuning @m 1 @M 250 Sets maximum detected line width "
000594  756e696e
000598  6720406d
00059c  20312040
0005a0  4d203235
0005a4  30205365
0005a8  7473206d
0005ac  6178696d
0005b0  756d2064
0005b4  65746563
0005b8  74656420
0005bc  6c696e65
0005c0  20776964
0005c4  746820  
0005c7  31303029          DCB      "100)",0
0005cb  00      
                  |L1.1484|
                          DCD      ||.conststring||+0x9c
                  |L1.1488|
                          DCD      ||.conststring||+0xf0
                  |L1.1492|
0005d4  40632045          DCB      "@c Expert @m 1 @M 50 Sets the minimum line length (defa"
0005d8  78706572
0005dc  7420406d
0005e0  20312040
0005e4  4d203530
0005e8  20536574
0005ec  73207468
0005f0  65206d69
0005f4  6e696d75
0005f8  6d206c69
0005fc  6e65206c
000600  656e6774
000604  68202864
000608  656661  
00060b  756c7420          DCB      "ult 10)",0
00060f  31302900
000613  00                DCB      0
                  |L1.1556|
                          DCD      ||.conststring||+0x13c
                  |L1.1560|
                          DCD      ||.conststring||+0x1c4
                  |L1.1564|
                          DCD      ||.conststring||+0x268
                  |L1.1568|
                          DCD      ||.conststring||+0x2c0
                  |L1.1572|
                          DCD      ||.conststring||+0x320
                  |L1.1576|
                          DCD      ||.conststring||+0x37c
                  |L1.1580|
00062c  44656661          DCB      "Default turn angle",0
000630  756c7420
000634  7475726e
000638  20616e67
00063c  6c6500  
00063f  00                DCB      0
                  |L1.1600|
                          DCD      ||.conststring||+0x40c
                  |L1.1604|
                          DCD      ||.conststring||+0x4e0
                  |L1.1608|
000648  a3fe              ADR      r3,|L1.2628|
00064a  465a              MOV      r2,r11
00064c  f2af1018          ADR      r0,|L1.1336|
000650  9402              STR      r4,[sp,#8]
000652  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;319    			| PRM_FLAG_INTERNAL, 
;;;320    			PRM_PRIORITY_4,
;;;321    			"@c Expert Debug flag. (default false)", UINT8(0), END);
;;;322    		prm_setShadowCallback("Go", (ShadowCallback)line_shadowCallback);
000656  f2af51bf          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
00065a  f2af1024          ADR      r0,|L1.1336|
00065e  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;323    
;;;324    		prm_add("Repeat", PROG_FLAGS(progIndex) | PRM_FLAG_CHECKBOX 
000662  e9cd6400          STRD     r6,r4,[sp,#0]
000666  4629              MOV      r1,r5
000668  a3f6              ADR      r3,|L1.2628|
00066a  465a              MOV      r2,r11
00066c  f2af1034          ADR      r0,|L1.1340|
000670  9402              STR      r4,[sp,#8]
000672  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
;;;325    			| PRM_FLAG_INTERNAL, 
;;;326    			PRM_PRIORITY_4,
;;;327    			"@c Expert Debug flag. (default false)", UINT8(0), END);
;;;328    		prm_setShadowCallback("Repeat", (ShadowCallback)line_shadowCallback);
000676  f2af51df          ADR      r1,_Z19line_shadowCallbackPKcPKv + 1 ; line_shadowCallback(const char*, const void*)
00067a  f2af1040          ADR      r0,|L1.1340|
00067e  f7fffffe          BL       _Z21prm_setShadowCallbackPKcPFvS0_PKvE ; prm_setShadowCallback(const char*, void(*)(const char*, const void*))
;;;329    	
;;;330    		for (i=0; i<16; i++)
000682  2500              MOVS     r5,#0
;;;331    		{
;;;332    			sprintf(id, "Barcode label %d", i);
;;;333    			sprintf(desc, "@c Barcode_Labels Sets the label for barcodes that match barcode pattern %d.", i);
;;;334    			prm_add(id, PROG_FLAGS(progIndex), PRM_PRIORITY_3-i, desc, STRING(""), END);
000684  26a1              MOVS     r6,#0xa1
                  |L1.1670|
000686  462a              MOV      r2,r5                 ;332
000688  a1f8              ADR      r1,|L1.2668|
00068a  a82a              ADD      r0,sp,#0xa8           ;332
00068c  f7fffffe          BL       __2sprintf
000690  462a              MOV      r2,r5                 ;333
000692  49fb              LDR      r1,|L1.2688|
000694  a80a              ADD      r0,sp,#0x28           ;333
000696  f7fffffe          BL       __2sprintf
00069a  a0f8              ADR      r0,|L1.2684|
00069c  e9cd6000          STRD     r6,r0,[sp,#0]
0006a0  f6a530b8          SUB      r0,r5,#0xbb8
0006a4  4242              RSBS     r2,r0,#0
0006a6  4639              MOV      r1,r7
0006a8  ab0a              ADD      r3,sp,#0x28
0006aa  9402              STR      r4,[sp,#8]
0006ac  a82a              ADD      r0,sp,#0xa8
0006ae  f7fffffe          BL       _Z7prm_addPKcjjS0_z ; prm_add(const char*, unsigned, unsigned, const char*, ...)
0006b2  1c6d              ADDS     r5,r5,#1              ;330
0006b4  2d10              CMP      r5,#0x10              ;330
0006b6  dbe6              BLT      |L1.1670|
                  |L1.1720|
;;;335    		}
;;;336    	}
;;;337    	
;;;338    	// load params
;;;339    	prm_get("Edge distance", &g_dist, END);	
0006b8  49f2              LDR      r1,|L1.2692|
0006ba  2200              MOVS     r2,#0
0006bc  f2af20a4          ADR      r0,|L1.1052|
0006c0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;340    	prm_get("Edge threshold", &g_thresh, END);	
0006c4  49ef              LDR      r1,|L1.2692|
0006c6  2200              MOVS     r2,#0
0006c8  1c89              ADDS     r1,r1,#2
0006ca  f2af209c          ADR      r0,|L1.1072|
0006ce  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;341    	g_hThresh = g_thresh*LINE_HTHRESH_RATIO;
0006d2  4dec              LDR      r5,|L1.2692|
0006d4  3d26              SUBS     r5,r5,#0x26
0006d6  2105              MOVS     r1,#5
0006d8  8d28              LDRH     r0,[r5,#0x28]  ; g_thresh
0006da  eb000040          ADD      r0,r0,r0,LSL #1
0006de  fbb0f0f1          UDIV     r0,r0,r1
0006e2  8568              STRH     r0,[r5,#0x2a]
;;;342    	prm_get("Minimum line width", &g_minLineWidth, END);
0006e4  2200              MOVS     r2,#0
0006e6  f105011e          ADD      r1,r5,#0x1e
0006ea  f2af20ac          ADR      r0,|L1.1088|
0006ee  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;343    	prm_get("Maximum line width", &g_maxLineWidth, END);
0006f2  2200              MOVS     r2,#0
0006f4  f1050120          ADD      r1,r5,#0x20
0006f8  f2af20a8          ADR      r0,|L1.1108|
0006fc  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;344    	prm_get("Line extraction distance", &g_extractionDist, END);
000700  2200              MOVS     r2,#0
000702  f1050124          ADD      r1,r5,#0x24
000706  f2af20a0          ADR      r0,|L1.1128|
00070a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;345    	prm_get("Maximum merge distance", &g_maxMergeDist, END);
00070e  2200              MOVS     r2,#0
000710  f1050122          ADD      r1,r5,#0x22
000714  f2af2094          ADR      r0,|L1.1156|
000718  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;346    	prm_get("Minimum line length", &g_minLineLength, END);
00071c  2200              MOVS     r2,#0
00071e  f1050150          ADD      r1,r5,#0x50
000722  f2af2088          ADR      r0,|L1.1180|
000726  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;347    	g_minLineLength2 = g_minLineLength*g_minLineLength; // square it 
00072a  6d28              LDR      r0,[r5,#0x50]  ; g_minLineLength
00072c  4340              MULS     r0,r0,r0
00072e  64e8              STR      r0,[r5,#0x4c]  ; g_minLineLength2
;;;348    	prm_get("Maximum line compare", &g_maxLineCompare, END);
000730  2200              MOVS     r2,#0
000732  f1050184          ADD      r1,r5,#0x84
000736  f2af2088          ADR      r0,|L1.1200|
00073a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;349    	prm_get("White line", &g_whiteLine, END);
00073e  2200              MOVS     r2,#0
000740  4629              MOV      r1,r5
000742  f2af207c          ADR      r0,|L1.1224|
000746  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;350    	prm_get("Intersection filtering", &g_lineFiltering, END);
00074a  2200              MOVS     r2,#0
00074c  f105010f          ADD      r1,r5,#0xf
000750  f2af2058          ADR      r0,|L1.1276|
000754  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;351    	leading = g_lineFiltering*LINE_FILTERING_MULTIPLIER;
000758  7be8              LDRB     r0,[r5,#0xf]  ; g_lineFiltering
00075a  0100              LSLS     r0,r0,#4
;;;352    	trailing = (leading+1)>>1;
00075c  1c41              ADDS     r1,r0,#1
00075e  084a              LSRS     r2,r1,#1
;;;353    	g_primaryIntersection.setTiming(leading, trailing); 
000760  49c9              LDR      r1,|L1.2696|
000762  80c8              STRH     r0,[r1,#6]
000764  810a              STRH     r2,[r1,#8]
;;;354    	prm_get("Line filtering", &g_lineFiltering, END);
000766  2200              MOVS     r2,#0
000768  f105010f          ADD      r1,r5,#0xf
00076c  f2af2084          ADR      r0,|L1.1260|
000770  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;355    	prm_get("Barcode filtering", &g_barcodeFiltering, END);
000774  2200              MOVS     r2,#0
000776  f1050110          ADD      r1,r5,#0x10
00077a  f2af2068          ADR      r0,|L1.1300|
00077e  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;356    	prm_get("Default turn angle", &g_defaultTurnAngle, END);
000782  2200              MOVS     r2,#0
000784  f1050138          ADD      r1,r5,#0x38
000788  f2af1060          ADR      r0,|L1.1580|
00078c  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;357    	prm_get("Delayed turn", &g_delayedTurn, END);
000790  2200              MOVS     r2,#0
000792  f1050114          ADD      r1,r5,#0x14
000796  f2af2070          ADR      r0,|L1.1320|
00079a  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;358    	prm_get("Manual vector select", &g_manualVectorSelect, END);
00079e  2200              MOVS     r2,#0
0007a0  f1050116          ADD      r1,r5,#0x16
0007a4  f2af20d4          ADR      r0,|L1.1236|
0007a8  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;359    	prm_get("Go", &g_go, END);	
0007ac  2200              MOVS     r2,#0
0007ae  1c69              ADDS     r1,r5,#1
0007b0  f2af207c          ADR      r0,|L1.1336|
0007b4  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;360    	prm_get("Repeat", &g_repeat, END);	
0007b8  2200              MOVS     r2,#0
0007ba  1ca9              ADDS     r1,r5,#2
0007bc  f2af2084          ADR      r0,|L1.1340|
0007c0  f7fffffe          BL       _Z7prm_getPKcz ; prm_get(const char*, ...)
;;;361    	
;;;362    	g_chirpM0->callSync(g_setEdgeParamsM0, UINT16(g_dist), UINT16(g_thresh), UINT16(g_hThresh), END_OUT_ARGS, &responseInt, END_IN_ARGS);
0007c4  a832              ADD      r0,sp,#0xc8
0007c6  e9cd4005          STRD     r4,r0,[sp,#0x14]
0007ca  9407              STR      r4,[sp,#0x1c]
0007cc  9408              STR      r4,[sp,#0x20]
0007ce  8d29              LDRH     r1,[r5,#0x28]  ; g_thresh
0007d0  8d68              LDRH     r0,[r5,#0x2a]  ; g_hThresh
0007d2  e9cd8101          STRD     r8,r1,[sp,#4]
0007d6  e9cd8003          STRD     r8,r0,[sp,#0xc]
0007da  8ce8              LDRH     r0,[r5,#0x26]  ; g_dist
0007dc  9000              STR      r0,[sp,#0]
0007de  48ab              LDR      r0,|L1.2700|
0007e0  2302              MOVS     r3,#2
0007e2  f9b5201c          LDRSH    r2,[r5,#0x1c]  ; g_setEdgeParamsM0
0007e6  2100              MOVS     r1,#0
0007e8  6800              LDR      r0,[r0,#0]  ; g_chirpM0
0007ea  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;363    	
;;;364    	return responseInt;
0007ee  9832              LDR      r0,[sp,#0xc8]
;;;365    }
0007f0  b033              ADD      sp,sp,#0xcc
0007f2  e8bd8ff0          POP      {r4-r11,pc}
;;;366    
                          ENDP

                  _Z9line_initP5Chirp PROC ; line_init(Chirp*)
;;;367    int line_init(Chirp *chirp)
0007f6  b570              PUSH     {r4-r6,lr}
;;;368    {		
;;;369    	chirp->registerModule(g_module);	
0007f8  49a5              LDR      r1,|L1.2704|
0007fa  f7fffffe          BL       _ZN5Chirp14registerModuleEPK10ProcModule ; Chirp::registerModule(const ProcModule*)
;;;370    
;;;371    	g_getEdgesM0 = g_chirpM0->getProc("getEdges", NULL);
0007fe  4da3              LDR      r5,|L1.2700|
000800  2200              MOVS     r2,#0
000802  a1a4              ADR      r1,|L1.2708|
000804  6828              LDR      r0,[r5,#0]  ; g_chirpM0
000806  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
00080a  4c9e              LDR      r4,|L1.2692|
00080c  3c26              SUBS     r4,r4,#0x26
00080e  8360              STRH     r0,[r4,#0x1a]
;;;372    	g_setEdgeParamsM0 = g_chirpM0->getProc("setEdgeParams", NULL);
000810  2200              MOVS     r2,#0
000812  a1a3              ADR      r1,|L1.2720|
000814  6828              LDR      r0,[r5,#0]  ; g_chirpM0
000816  f7fffffe          BL       _ZN5Chirp7getProcEPKcPFjPS_E ; Chirp::getProc(const char*, unsigned(*)(Chirp*))
00081a  83a0              STRH     r0,[r4,#0x1c]
;;;373    	
;;;374    	if (g_getEdgesM0<0 || g_setEdgeParamsM0<0)
00081c  f9b4101a          LDRSH    r1,[r4,#0x1a]  ; g_getEdgesM0
000820  2900              CMP      r1,#0
000822  db01              BLT      |L1.2088|
000824  2800              CMP      r0,#0
000826  da02              BGE      |L1.2094|
                  |L1.2088|
;;;375    		return -1;
000828  f04f30ff          MOV      r0,#0xffffffff
;;;376    
;;;377    	return 0;
;;;378    }
00082c  bd70              POP      {r4-r6,pc}
                  |L1.2094|
00082e  2000              MOVS     r0,#0                 ;377
000830  bd70              POP      {r4-r6,pc}
;;;379    
                          ENDP

                  _Z10line_closev PROC ; line_close()
;;;445    
;;;446    void line_close()
000832  b510              PUSH     {r4,lr}
;;;447    {
;;;448    	if (g_equeue)
000834  4c93              LDR      r4,|L1.2692|
000836  3c26              SUBS     r4,r4,#0x26
000838  6c60              LDR      r0,[r4,#0x44]  ; g_equeue
00083a  2800              CMP      r0,#0
00083c  d003              BEQ      |L1.2118|
;;;449    		delete g_equeue;
00083e  f7fffffe          BL       _ZN6EqueueD1Ev ; Equeue::~Equeue()
000842  f7fffffe          BL       _ZdlPv ; operator delete (void*)
                  |L1.2118|
;;;450    	if (g_lineBuf)
000846  6ca0              LDR      r0,[r4,#0x48]  ; g_lineBuf
000848  b108              CBZ      r0,|L1.2126|
;;;451    		free(g_lineBuf);
00084a  f7fffffe          BL       free
                  |L1.2126|
;;;452    	if (g_lineGridMem)
00084e  6da0              LDR      r0,[r4,#0x58]  ; g_lineGridMem
000850  b108              CBZ      r0,|L1.2134|
;;;453    		free(g_lineGridMem);
000852  f7fffffe          BL       free
                  |L1.2134|
;;;454    	if (g_lineSegsMem)
000856  6e20              LDR      r0,[r4,#0x60]  ; g_lineSegsMem
000858  b108              CBZ      r0,|L1.2142|
;;;455    		free(g_lineSegsMem);
00085a  f7fffffe          BL       free
                  |L1.2142|
;;;456    	if (g_lines)
00085e  6ea0              LDR      r0,[r4,#0x68]  ; g_lines
000860  b108              CBZ      r0,|L1.2150|
;;;457    		free(g_lines);
000862  f7fffffe          BL       free
                  |L1.2150|
;;;458    	if (g_candidateBarcodes)
000866  6fa0              LDR      r0,[r4,#0x78]  ; g_candidateBarcodes
000868  b108              CBZ      r0,|L1.2158|
;;;459    		free(g_candidateBarcodes);
00086a  f7fffffe          BL       free
                  |L1.2158|
;;;460    	if (g_votedBarcodesMem)
00086e  4885              LDR      r0,|L1.2692|
000870  305a              ADDS     r0,r0,#0x5a
000872  6800              LDR      r0,[r0,#0]  ; g_votedBarcodesMem
000874  b108              CBZ      r0,|L1.2170|
;;;461    		free(g_votedBarcodesMem);
000876  f7fffffe          BL       free
                  |L1.2170|
;;;462    	g_linesList.clear();
00087a  4883              LDR      r0,|L1.2696|
00087c  383c              SUBS     r0,r0,#0x3c
00087e  f7fffffe          BL       _ZN10SimpleListI5Line2E5clearEv ; SimpleList<Line2>::clear()
;;;463    	g_nodesList.clear();
000882  4881              LDR      r0,|L1.2696|
000884  3830              SUBS     r0,r0,#0x30
000886  f7fffffe          BL       _ZN10SimpleListI5PointE5clearEv ; SimpleList<Point>::clear()
;;;464    	g_nadirsList.clear();
00088a  487f              LDR      r0,|L1.2696|
00088c  3824              SUBS     r0,r0,#0x24
00088e  f7fffffe          BL       _ZN10SimpleListI5NadirE5clearEv ; SimpleList<Nadir>::clear()
;;;465    	g_intersectionsList.clear();
000892  487d              LDR      r0,|L1.2696|
000894  3818              SUBS     r0,r0,#0x18
000896  f7fffffe          BL       _ZN10SimpleListI12IntersectionE5clearEv ; SimpleList<Intersection>::clear()
;;;466    	g_lineTrackersList.clear();
00089a  487b              LDR      r0,|L1.2696|
00089c  380c              SUBS     r0,r0,#0xc
00089e  f7fffffe          BL       _ZN10SimpleListI7TrackerI5Line2EE5clearEv ; SimpleList<Tracker<Line2>>::clear()
;;;467    	g_barCodeTrackersList.clear();
0008a2  4879              LDR      r0,|L1.2696|
0008a4  e8bd4010          POP      {r4,lr}
0008a8  3030              ADDS     r0,r0,#0x30
0008aa  f7ffbffe          B.W      _ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv ; SimpleList<Tracker<DecodedBarCode>>::clear()
;;;468    }
;;;469    
                          ENDP

                  _Z9line_opena PROC ; line_open(signed char)
;;;379    
;;;380    int line_open(int8_t progIndex)
0008ae  b570              PUSH     {r4-r6,lr}
;;;381    {
0008b0  4606              MOV      r6,r0
0008b2  ed2d8b04          VPUSH    {d8-d9}
;;;382    	g_linesList.clear();
0008b6  4874              LDR      r0,|L1.2696|
0008b8  383c              SUBS     r0,r0,#0x3c
0008ba  f7fffffe          BL       _ZN10SimpleListI5Line2E5clearEv ; SimpleList<Line2>::clear()
;;;383    	g_nodesList.clear();
0008be  4872              LDR      r0,|L1.2696|
0008c0  3830              SUBS     r0,r0,#0x30
0008c2  f7fffffe          BL       _ZN10SimpleListI5PointE5clearEv ; SimpleList<Point>::clear()
;;;384    	g_nadirsList.clear();
0008c6  4870              LDR      r0,|L1.2696|
0008c8  3824              SUBS     r0,r0,#0x24
0008ca  f7fffffe          BL       _ZN10SimpleListI5NadirE5clearEv ; SimpleList<Nadir>::clear()
;;;385    	g_intersectionsList.clear();
0008ce  486e              LDR      r0,|L1.2696|
0008d0  3818              SUBS     r0,r0,#0x18
0008d2  f7fffffe          BL       _ZN10SimpleListI12IntersectionE5clearEv ; SimpleList<Intersection>::clear()
;;;386    	g_lineTrackersList.clear();
0008d6  486c              LDR      r0,|L1.2696|
0008d8  380c              SUBS     r0,r0,#0xc
0008da  f7fffffe          BL       _ZN10SimpleListI7TrackerI5Line2EE5clearEv ; SimpleList<Tracker<Line2>>::clear()
;;;387    	g_barCodeTrackersList.clear();
0008de  486a              LDR      r0,|L1.2696|
0008e0  3030              ADDS     r0,r0,#0x30
0008e2  f7fffffe          BL       _ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv ; SimpleList<Tracker<DecodedBarCode>>::clear()
;;;388    	
;;;389    	g_lineGridMem = (uint8_t *)malloc(LINE_GRID_WIDTH*LINE_GRID_HEIGHT*sizeof(LineGridNode)+CAM_PREBUF_LEN+8); // +8 for extra memory at the end because little overruns sometimes happen
0008e6  f2420060          MOV      r0,#0x2060
0008ea  f7fffffe          BL       malloc
0008ee  4c65              LDR      r4,|L1.2692|
0008f0  3c26              SUBS     r4,r4,#0x26
0008f2  65a0              STR      r0,[r4,#0x58]  ; g_lineGridMem
;;;390    	g_lineGrid = (LineGridNode *)(g_lineGridMem+CAM_PREBUF_LEN);
0008f4  3040              ADDS     r0,r0,#0x40
0008f6  6560              STR      r0,[r4,#0x54]  ; g_lineGrid
;;;391    	
;;;392    	g_lines = (SimpleListNode<Line2> **)malloc(LINE_MAX_LINES*sizeof(SimpleListNode<Line2> *));
0008f8  f44f7000          MOV      r0,#0x200
0008fc  f7fffffe          BL       malloc
000900  66a0              STR      r0,[r4,#0x68]  ; g_lines
;;;393    	g_lineSegsMem = (uint8_t *)malloc(LINE_MAX_SEGMENTS*sizeof(LineSeg)+CAM_PREBUF_LEN);
000902  f44f6024          MOV      r0,#0xa40
000906  f7fffffe          BL       malloc
00090a  6620              STR      r0,[r4,#0x60]  ; g_lineSegsMem
;;;394    	g_lineSegs = (LineSeg *)(g_lineSegsMem+CAM_PREBUF_LEN);
00090c  3040              ADDS     r0,r0,#0x40
00090e  65e0              STR      r0,[r4,#0x5c]  ; g_lineSegs
;;;395    	
;;;396    	g_candidateBarcodes = (BarCode **)malloc(LINE_MMC_CANDIDATE_BARCODES*sizeof(BarCode *));
000910  2080              MOVS     r0,#0x80
000912  f7fffffe          BL       malloc
000916  67a0              STR      r0,[r4,#0x78]  ; g_candidateBarcodes
;;;397    	
;;;398    	g_votedBarcodesMem = (uint8_t *)malloc(LINE_MMC_VOTED_BARCODES*sizeof(DecodedBarCode)+CAM_PREBUF_LEN);
000918  20c0              MOVS     r0,#0xc0
00091a  f7fffffe          BL       malloc
00091e  f1040580          ADD      r5,r4,#0x80
000922  6028              STR      r0,[r5,#0]  ; g_votedBarcodesMem
;;;399    	g_votedBarcodes = (DecodedBarCode *)(g_votedBarcodesMem+CAM_PREBUF_LEN);
000924  3040              ADDS     r0,r0,#0x40
000926  67e0              STR      r0,[r4,#0x7c]  ; g_votedBarcodes
;;;400    	
;;;401    	g_lineBuf = (uint16_t *)malloc(LINE_BUFSIZE*sizeof(uint16_t)); 
000928  f44f701f          MOV      r0,#0x27c
00092c  f7fffffe          BL       malloc
000930  64a0              STR      r0,[r4,#0x48]  ; g_lineBuf
;;;402    	g_equeue = new (std::nothrow) Equeue;
000932  495f              LDR      r1,|L1.2736|
000934  2004              MOVS     r0,#4
000936  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
00093a  b108              CBZ      r0,|L1.2368|
00093c  f7fffffe          BL       _ZN6EqueueC1Ev ; Equeue::Equeue()
                  |L1.2368|
000940  6460              STR      r0,[r4,#0x44]  ; g_equeue
;;;403    
;;;404    	g_maxSegTanAngle = tan(M_PI/4)*1000;
000942  ed9f0b5c          VLDR     d0,|L1.2740|
000946  f7fffffe          BL       __hardfp_tan
00094a  ed9f8b5c          VLDR     d8,|L1.2748|
00094e  ec510b10          VMOV     r0,r1,d0
000952  ec532b18          VMOV     r2,r3,d8
000956  f7fffffe          BL       __aeabi_dmul
00095a  f7fffffe          BL       __aeabi_d2uiz
00095e  66e0              STR      r0,[r4,#0x6c]  ; g_maxSegTanAngle
;;;405    	g_maxEquivTanAngle = tan(M_PI/10)*1000;
000960  ed9f9b58          VLDR     d9,|L1.2756|
000964  eeb00a49          VMOV.F32 s0,s18
000968  eef00a69          VMOV.F32 s1,s19
00096c  f7fffffe          BL       __hardfp_tan
000970  ec532b18          VMOV     r2,r3,d8
000974  ec510b10          VMOV     r0,r1,d0
000978  f7fffffe          BL       __aeabi_dmul
00097c  f7fffffe          BL       __aeabi_d2uiz
000980  6720              STR      r0,[r4,#0x70]  ; g_maxEquivTanAngle
;;;406    	g_maxTrackingTanAngle = tan(M_PI/10)*1000;
000982  eeb00a49          VMOV.F32 s0,s18
000986  eef00a69          VMOV.F32 s1,s19
00098a  f7fffffe          BL       __hardfp_tan
00098e  ec532b18          VMOV     r2,r3,d8
000992  ec510b10          VMOV     r0,r1,d0
000996  f7fffffe          BL       __aeabi_dmul
00099a  f7fffffe          BL       __aeabi_d2uiz
00099e  6760              STR      r0,[r4,#0x74]  ; g_maxTrackingTanAngle
;;;407    	g_pointsPerSeg = 12;
0009a0  200c              MOVS     r0,#0xc
0009a2  70e0              STRB     r0,[r4,#3]
;;;408    	g_maxError = 0.9;
0009a4  ed9f0a49          VLDR     s0,|L1.2764|
0009a8  ed840a19          VSTR     s0,[r4,#0x64]
;;;409    	
;;;410    	g_barcodeIndex = 0;
0009ac  2000              MOVS     r0,#0
0009ae  7160              STRB     r0,[r4,#5]
;;;411    	g_votedBarcodeIndex	 = 0;
0009b0  71a0              STRB     r0,[r4,#6]
;;;412    	g_maxCodeDist = 15*15;
0009b2  21e1              MOVS     r1,#0xe1
0009b4  85e1              STRH     r1,[r4,#0x2e]
;;;413    	g_minVotingThreshold = 128; // divide by 256, so 128 is 1/2
0009b6  2180              MOVS     r1,#0x80
0009b8  8621              STRH     r1,[r4,#0x30]
;;;414    	g_barCodeTrackerIndex = 0;
0009ba  7220              STRB     r0,[r4,#8]
;;;415    	g_lineTrackerIndex = 0;
0009bc  7260              STRB     r0,[r4,#9]
;;;416    	
;;;417    	g_lineState = LINE_STATE_ACQUIRING;
0009be  7360              STRB     r0,[r4,#0xd]
;;;418    	g_primaryActive = false;
0009c0  7320              STRB     r0,[r4,#0xc]
;;;419    	g_newIntersection = false;
0009c2  71e0              STRB     r0,[r4,#7]
;;;420    	g_delayedTurn = false;
0009c4  7520              STRB     r0,[r4,#0x14]
;;;421    	g_defaultTurnAngle = 0;
0009c6  8720              STRH     r0,[r4,#0x38]
;;;422    	g_nextTurnAngle = 0;
0009c8  86e0              STRH     r0,[r4,#0x36]
;;;423    	g_newTurnAngle = false;
0009ca  7560              STRB     r0,[r4,#0x15]
;;;424    	g_manualVectorSelect = false;
0009cc  75a0              STRB     r0,[r4,#0x16]
;;;425    	g_manualVectorSelecIndextActive = false;
0009ce  75e0              STRB     r0,[r4,#0x17]
;;;426    
;;;427    	g_reversePrimary = false;
0009d0  7660              STRB     r0,[r4,#0x19]
;;;428    	
;;;429    	g_renderMode = LINE_RM_ALL_FEATURES;
0009d2  2102              MOVS     r1,#2
0009d4  73a1              STRB     r1,[r4,#0xe]
;;;430    	
;;;431    	if (g_equeue==NULL || g_lineBuf==NULL || g_lineGridMem==NULL || g_lineSegsMem==NULL || 
0009d6  6c61              LDR      r1,[r4,#0x44]  ; g_equeue
0009d8  b199              CBZ      r1,|L1.2562|
0009da  6ca1              LDR      r1,[r4,#0x48]  ; g_lineBuf
0009dc  b189              CBZ      r1,|L1.2562|
0009de  6da1              LDR      r1,[r4,#0x58]  ; g_lineGridMem
0009e0  b179              CBZ      r1,|L1.2562|
0009e2  6e21              LDR      r1,[r4,#0x60]  ; g_lineSegsMem
0009e4  b169              CBZ      r1,|L1.2562|
;;;432    		g_lines==NULL || g_candidateBarcodes==NULL || g_votedBarcodesMem==NULL)
0009e6  6ea1              LDR      r1,[r4,#0x68]  ; g_lines
0009e8  b159              CBZ      r1,|L1.2562|
0009ea  6fa1              LDR      r1,[r4,#0x78]  ; g_candidateBarcodes
0009ec  b149              CBZ      r1,|L1.2562|
0009ee  6829              LDR      r1,[r5,#0]  ; g_votedBarcodesMem
0009f0  b139              CBZ      r1,|L1.2562|
;;;433    	{
;;;434    		cprintf(0, "Line memory error\n");
;;;435    		line_close();
;;;436    		return -1;
;;;437    	}
;;;438    	
;;;439    	g_repeat = 0;
0009f2  70a0              STRB     r0,[r4,#2]
;;;440    	
;;;441    	g_frameFlag = false;
0009f4  7460              STRB     r0,[r4,#0x11]
;;;442    	
;;;443    	return line_loadParams(progIndex);
0009f6  4630              MOV      r0,r6
0009f8  ecbd8b04          VPOP     {d8-d9}
0009fc  e8bd4070          POP      {r4-r6,lr}
000a00  e7fe              B        _Z15line_loadParamsa ; line_loadParams(signed char)
                  |L1.2562|
000a02  a133              ADR      r1,|L1.2768|
000a04  2000              MOVS     r0,#0                 ;434
000a06  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
000a0a  f7fffffe          BL       _Z10line_closev ; line_close()
;;;444    }
000a0e  ecbd8b04          VPOP     {d8-d9}
000a12  f04f30ff          MOV      r0,#0xffffffff        ;436
000a16  bd70              POP      {r4-r6,pc}
;;;445    
                          ENDP

                  _Z13line_getEdgesv PROC ; line_getEdges()
;;;469    
;;;470    int32_t line_getEdges()
000a18  b500              PUSH     {lr}
;;;471    {
000a1a  b087              SUB      sp,sp,#0x1c
;;;472    	int32_t responseInt = -1;
000a1c  f04f30ff          MOV      r0,#0xffffffff
000a20  9006              STR      r0,[sp,#0x18]
;;;473    	// forward call to M0, get edges
;;;474    	g_chirpM0->callSync(g_getEdgesM0, UINT32(SRAM1_LOC+CAM_PREBUF_LEN), END_OUT_ARGS, &responseInt, END_IN_ARGS);
000a22  2000              MOVS     r0,#0
000a24  a906              ADD      r1,sp,#0x18
000a26  e9cd0101          STRD     r0,r1,[sp,#4]
000a2a  9003              STR      r0,[sp,#0xc]
000a2c  9004              STR      r0,[sp,#0x10]
000a2e  482d              LDR      r0,|L1.2788|
000a30  9000              STR      r0,[sp,#0]
000a32  4814              LDR      r0,|L1.2692|
000a34  2304              MOVS     r3,#4
000a36  3826              SUBS     r0,r0,#0x26
000a38  2100              MOVS     r1,#0
000a3a  f9b0201a          LDRSH    r2,[r0,#0x1a]  ; g_getEdgesM0
000a3e  4813              LDR      r0,|L1.2700|
000a40  6800              LDR      r0,[r0,#0]  ; g_chirpM0
000a42  e051              B        |L1.2792|
                  |L1.2628|
000a44  40632045          DCB      "@c Expert Debug flag. (default false)",0
000a48  78706572
000a4c  74204465
000a50  62756720
000a54  666c6167
000a58  2e202864
000a5c  65666175
000a60  6c742066
000a64  616c7365
000a68  2900    
000a6a  00                DCB      0
000a6b  00                DCB      0
                  |L1.2668|
000a6c  42617263          DCB      "Barcode label %d"
000a70  6f646520
000a74  6c616265
000a78  6c202564
                  |L1.2684|
000a7c  00                DCB      0
000a7d  00                DCB      0
000a7e  00                DCB      0
000a7f  00                DCB      0
                  |L1.2688|
                          DCD      ||.conststring||+0x58c
                  |L1.2692|
                          DCD      ||.data||+0x26
                  |L1.2696|
                          DCD      ||.bss||+0x48
                  |L1.2700|
                          DCD      g_chirpM0
                  |L1.2704|
                          DCD      ||.constdata||
                  |L1.2708|
000a94  67657445          DCB      "getEdges",0
000a98  64676573
000a9c  00      
000a9d  00                DCB      0
000a9e  00                DCB      0
000a9f  00                DCB      0
                  |L1.2720|
000aa0  73657445          DCB      "setEdgeParams",0
000aa4  64676550
000aa8  6172616d
000aac  7300    
000aae  00                DCB      0
000aaf  00                DCB      0
                  |L1.2736|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.2740|
000ab4  54442d18          DCFD     0x3fe921fb54442d18 ; 0.78539816339744828
000ab8  3fe921fb
                  |L1.2748|
000abc  00000000          DCFD     0x408f400000000000 ; 1000
000ac0  408f4000
                  |L1.2756|
000ac4  769cf0e0          DCFD     0x3fd41b2f769cf0e0 ; 0.31415926535897931
000ac8  3fd41b2f
                  |L1.2764|
000acc  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
                  |L1.2768|
000ad0  4c696e65          DCB      "Line memory error\n",0
000ad4  206d656d
000ad8  6f727920
000adc  6572726f
000ae0  720a00  
000ae3  00                DCB      0
                  |L1.2788|
                          DCD      0x10080040
                  |L1.2792|
000ae8  f7fffffe          BL       _ZN5Chirp4callEhsz ; Chirp::call(unsigned char, short, ...)
;;;475    		
;;;476    	return responseInt;
000aec  9806              LDR      r0,[sp,#0x18]
;;;477    }
000aee  b007              ADD      sp,sp,#0x1c
000af0  bd00              POP      {pc}
;;;478    
                          ENDP

                  _Z10line_hLinehPtj PROC ; line_hLine(unsigned char, unsigned short*, unsigned)
;;;479    
;;;480    int line_hLine(uint8_t row, uint16_t *buf, uint32_t len)
000af2  e92d5ff0          PUSH     {r4-r12,lr}
;;;481    {
000af6  460d              MOV      r5,r1
000af8  4617              MOV      r7,r2
;;;482    	uint16_t j, index, bit0, bit1, col0, col1, lineWidth;
;;;483    
;;;484    	// copy a lot of code to reduce branching, make it faster
;;;485    	if (g_whiteLine) // pos neg
000afa  f8df8464          LDR      r8,|L1.3936|
;;;486    	{
;;;487    		for (j=0; buf[j]<EQ_HSCAN_LINE_START && buf[j+1]<EQ_HSCAN_LINE_START && j<len; j++)
;;;488    		{
;;;489    			bit0 = buf[j]&EQ_NEGATIVE;
;;;490    			bit1 = buf[j+1]&EQ_NEGATIVE;
;;;491    			col0 = buf[j]&~EQ_NEGATIVE;
;;;492    			col1 = buf[j+1]&~EQ_NEGATIVE;
;;;493    			if (bit0==0 && bit1!=0)
;;;494    			{
;;;495    				lineWidth = col1 - col0;
;;;496    				if (g_minLineWidth<lineWidth && lineWidth<g_maxLineWidth)
;;;497    				{
;;;498    					index = LINE_GRID_INDEX((((col0+col1)>>1) + g_dist)>>3, row>>1);
000afe  0840              LSRS     r0,r0,#1
000b00  ebc01200          RSB      r2,r0,r0,LSL #4
000b04  f8981000          LDRB     r1,[r8,#0]            ;485  ; g_whiteLine
000b08  eb021680          ADD      r6,r2,r0,LSL #6
;;;499    					if (index<LINE_GRID_WIDTH*LINE_GRID_HEIGHT+8)
000b0c  f2410914          MOV      r9,#0x1014
000b10  f44f4a7f          MOV      r10,#0xff00           ;487
000b14  2900              CMP      r1,#0                 ;485
000b16  d03a              BEQ      |L1.2958|
000b18  2400              MOVS     r4,#0                 ;487
000b1a  e02b              B        |L1.2932|
                  |L1.2844|
000b1c  f4004200          AND      r2,r0,#0x8000         ;489
000b20  f4014300          AND      r3,r1,#0x8000         ;490
000b24  f4204000          BIC      r0,r0,#0x8000         ;491
000b28  f4214100          BIC      r1,r1,#0x8000         ;492
000b2c  bb02              CBNZ     r2,|L1.2928|
000b2e  b1fb              CBZ      r3,|L1.2928|
000b30  1a0a              SUBS     r2,r1,r0              ;495
000b32  b292              UXTH     r2,r2                 ;495
000b34  f8b8301e          LDRH     r3,[r8,#0x1e]         ;496  ; g_minLineWidth
000b38  4293              CMP      r3,r2                 ;496
000b3a  d219              BCS      |L1.2928|
000b3c  f8b83020          LDRH     r3,[r8,#0x20]         ;496  ; g_maxLineWidth
000b40  429a              CMP      r2,r3                 ;496
000b42  d215              BCS      |L1.2928|
000b44  4408              ADD      r0,r0,r1              ;498
000b46  f8b81026          LDRH     r1,[r8,#0x26]         ;498  ; g_dist
000b4a  eb010050          ADD      r0,r1,r0,LSR #1       ;498
000b4e  eb0600d0          ADD      r0,r6,r0,LSR #3       ;498
000b52  4548              CMP      r0,r9
000b54  d208              BCS      |L1.2920|
;;;500    						g_lineGrid[index] |= LINE_NODE_FLAG_HLINE;
000b56  f8d81054          LDR      r1,[r8,#0x54]  ; g_lineGrid
000b5a  f8312010          LDRH     r2,[r1,r0,LSL #1]
000b5e  f4426280          ORR      r2,r2,#0x400
000b62  f8212010          STRH     r2,[r1,r0,LSL #1]
000b66  e003              B        |L1.2928|
                  |L1.2920|
;;;501    					else
;;;502    						cprintf(0, "high index\n");
000b68  a1fe              ADR      r1,|L1.3940|
000b6a  2000              MOVS     r0,#0
000b6c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.2928|
000b70  fa1ff48b          UXTH     r4,r11                ;487
                  |L1.2932|
000b74  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;487
000b78  4550              CMP      r0,r10                ;487
000b7a  d242              BCS      |L1.3074|
000b7c  f1040b01          ADD      r11,r4,#1             ;487
000b80  f835101b          LDRH     r1,[r5,r11,LSL #1]    ;487
000b84  4551              CMP      r1,r10                ;487
000b86  d23c              BCS      |L1.3074|
000b88  42bc              CMP      r4,r7                 ;487
000b8a  d3c7              BCC      |L1.2844|
000b8c  e039              B        |L1.3074|
                  |L1.2958|
;;;503    				}
;;;504    			}
;;;505    		}
;;;506    	}
;;;507    	else // black line
;;;508    	{
;;;509     		for (j=0; buf[j]<EQ_HSCAN_LINE_START && buf[j+1]<EQ_HSCAN_LINE_START && j<len; j++)
000b8e  2400              MOVS     r4,#0
000b90  e02b              B        |L1.3050|
                  |L1.2962|
;;;510    		{
;;;511    			bit0 = buf[j]&EQ_NEGATIVE;
000b92  f4004200          AND      r2,r0,#0x8000
;;;512    			bit1 = buf[j+1]&EQ_NEGATIVE;
000b96  f4014300          AND      r3,r1,#0x8000
;;;513    			col0 = buf[j]&~EQ_NEGATIVE;
000b9a  f4204000          BIC      r0,r0,#0x8000
;;;514    			col1 = buf[j+1]&~EQ_NEGATIVE;
000b9e  f4214100          BIC      r1,r1,#0x8000
;;;515    			if (bit0!=0 && bit1==0)
000ba2  b302              CBZ      r2,|L1.3046|
000ba4  b9fb              CBNZ     r3,|L1.3046|
;;;516    			{
;;;517    				lineWidth = col1 - col0;
000ba6  1a0a              SUBS     r2,r1,r0
000ba8  b292              UXTH     r2,r2
;;;518    				if (g_minLineWidth<lineWidth && lineWidth<g_maxLineWidth)
000baa  f8b8301e          LDRH     r3,[r8,#0x1e]  ; g_minLineWidth
000bae  4293              CMP      r3,r2
000bb0  d219              BCS      |L1.3046|
000bb2  f8b83020          LDRH     r3,[r8,#0x20]  ; g_maxLineWidth
000bb6  429a              CMP      r2,r3
000bb8  d215              BCS      |L1.3046|
;;;519    				{
;;;520    					index = LINE_GRID_INDEX((((col0+col1)>>1) + g_dist)>>3, row>>1);
000bba  4408              ADD      r0,r0,r1
000bbc  f8b81026          LDRH     r1,[r8,#0x26]  ; g_dist
000bc0  eb010050          ADD      r0,r1,r0,LSR #1
000bc4  eb0600d0          ADD      r0,r6,r0,LSR #3
;;;521    					if (index<LINE_GRID_WIDTH*LINE_GRID_HEIGHT+8)
000bc8  4548              CMP      r0,r9
000bca  d208              BCS      |L1.3038|
;;;522    						g_lineGrid[index] |= LINE_NODE_FLAG_HLINE;
000bcc  f8d81054          LDR      r1,[r8,#0x54]  ; g_lineGrid
000bd0  f8312010          LDRH     r2,[r1,r0,LSL #1]
000bd4  f4426280          ORR      r2,r2,#0x400
000bd8  f8212010          STRH     r2,[r1,r0,LSL #1]
000bdc  e003              B        |L1.3046|
                  |L1.3038|
;;;523    					else
;;;524    						cprintf(0, "high index\n");
000bde  a1e1              ADR      r1,|L1.3940|
000be0  2000              MOVS     r0,#0
000be2  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.3046|
000be6  fa1ff48b          UXTH     r4,r11                ;509
                  |L1.3050|
000bea  f8350014          LDRH     r0,[r5,r4,LSL #1]     ;509
000bee  4550              CMP      r0,r10                ;509
000bf0  d207              BCS      |L1.3074|
000bf2  f1040b01          ADD      r11,r4,#1             ;509
000bf6  f835101b          LDRH     r1,[r5,r11,LSL #1]    ;509
000bfa  4551              CMP      r1,r10                ;509
000bfc  d201              BCS      |L1.3074|
000bfe  42bc              CMP      r4,r7                 ;509
000c00  d3c7              BCC      |L1.2962|
                  |L1.3074|
;;;525    				}
;;;526    			}
;;;527    		}
;;;528    	}
;;;529    	
;;;530    	return 0;
000c02  2000              MOVS     r0,#0
                  |L1.3076|
;;;531    }
000c04  e8bd9ff0          POP      {r4-r12,pc}
;;;532    
                          ENDP

                  _Z10line_vLinehPhPtj PROC ; line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned)
;;;533    int line_vLine(uint8_t row, uint8_t *vstate, uint16_t *buf, uint32_t len)
000c08  e92d5ff0          PUSH     {r4-r12,lr}
;;;534    {
000c0c  4606              MOV      r6,r0
000c0e  460c              MOV      r4,r1
000c10  4690              MOV      r8,r2
000c12  4699              MOV      r9,r3
;;;535    	uint16_t i, index, bit0, col0, lineWidth;
;;;536    
;;;537    	if (g_whiteLine)
000c14  f8dfa348          LDR      r10,|L1.3936|
;;;538    	{
;;;539    		for (i=0; buf[i]<EQ_HSCAN_LINE_START && i<len; i++)
;;;540    		{
;;;541    			bit0 = buf[i]&EQ_NEGATIVE;
;;;542    			col0 = (buf[i]&~EQ_NEGATIVE)>>2;
;;;543    			if (bit0==0) // pos
;;;544    				vstate[col0] = row+1;
000c18  1c70              ADDS     r0,r6,#1
000c1a  b2c7              UXTB     r7,r0
000c1c  f89a1000          LDRB     r1,[r10,#0]           ;537  ; g_whiteLine
000c20  2900              CMP      r1,#0                 ;537
000c22  d045              BEQ      |L1.3248|
000c24  f04f0b00          MOV      r11,#0                ;539
000c28  e03a              B        |L1.3232|
                  |L1.3114|
000c2a  f4004100          AND      r1,r0,#0x8000         ;541
000c2e  f4204000          BIC      r0,r0,#0x8000         ;542
000c32  0885              LSRS     r5,r0,#2              ;542
000c34  b341              CBZ      r1,|L1.3208|
;;;545    			else // bit0!=0, neg
;;;546    			{
;;;547    				if (vstate[col0]!=0)
000c36  5d60              LDRB     r0,[r4,r5]
000c38  b338              CBZ      r0,|L1.3210|
;;;548    				{
;;;549    					lineWidth = (row - (vstate[col0]-1))<<2; // multiply by 4 because vertical is subsampled by 4
000c3a  1a30              SUBS     r0,r6,r0
000c3c  1c40              ADDS     r0,r0,#1
000c3e  f64f71ff          MOV      r1,#0xffff
000c42  ea010080          AND      r0,r1,r0,LSL #2
;;;550    					if (g_minLineWidth<lineWidth && lineWidth<g_maxLineWidth && col0<LINE_VSIZE)
000c46  f8ba101e          LDRH     r1,[r10,#0x1e]  ; g_minLineWidth
000c4a  4281              CMP      r1,r0
000c4c  d222              BCS      |L1.3220|
000c4e  f8ba1020          LDRH     r1,[r10,#0x20]  ; g_maxLineWidth
000c52  4288              CMP      r0,r1
000c54  d21e              BCS      |L1.3220|
000c56  2d9f              CMP      r5,#0x9f
000c58  d21c              BCS      |L1.3220|
;;;551    					{
;;;552    						index = LINE_GRID_INDEX(col0>>1, (row - (lineWidth>>3))>>1);
000c5a  eba600d0          SUB      r0,r6,r0,LSR #3
000c5e  1040              ASRS     r0,r0,#1
000c60  ebc01100          RSB      r1,r0,r0,LSL #4
000c64  eb011080          ADD      r0,r1,r0,LSL #6
000c68  eb000055          ADD      r0,r0,r5,LSR #1
000c6c  b280              UXTH     r0,r0
;;;553    						if (index<LINE_GRID_WIDTH*LINE_GRID_HEIGHT+8)
000c6e  f2410114          MOV      r1,#0x1014
000c72  4288              CMP      r0,r1
000c74  d20a              BCS      |L1.3212|
;;;554    							g_lineGrid[index] |= LINE_NODE_FLAG_VLINE;
000c76  f8da1054          LDR      r1,[r10,#0x54]  ; g_lineGrid
000c7a  f8312010          LDRH     r2,[r1,r0,LSL #1]
000c7e  f4426200          ORR      r2,r2,#0x800
000c82  f8212010          STRH     r2,[r1,r0,LSL #1]
000c86  e005              B        |L1.3220|
                  |L1.3208|
000c88  5567              STRB     r7,[r4,r5]            ;544
                  |L1.3210|
000c8a  e005              B        |L1.3224|
                  |L1.3212|
;;;555    						else
;;;556    							cprintf(0, "high index\n");
000c8c  a1b5              ADR      r1,|L1.3940|
000c8e  2000              MOVS     r0,#0
000c90  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.3220|
;;;557    					}
;;;558    					vstate[col0] = 0;
000c94  2000              MOVS     r0,#0
000c96  5560              STRB     r0,[r4,r5]
                  |L1.3224|
000c98  f10b0b01          ADD      r11,r11,#1            ;539
000c9c  fa1ffb8b          UXTH     r11,r11               ;539
                  |L1.3232|
000ca0  f838001b          LDRH     r0,[r8,r11,LSL #1]    ;539
000ca4  f5b04f7f          CMP      r0,#0xff00            ;539
000ca8  d247              BCS      |L1.3386|
000caa  45cb              CMP      r11,r9                ;539
000cac  d3bd              BCC      |L1.3114|
000cae  e044              B        |L1.3386|
                  |L1.3248|
;;;559    				}
;;;560    			}
;;;561    		}
;;;562    	}
;;;563    	else // black line
;;;564    	{
;;;565    		for (i=0; buf[i]<EQ_HSCAN_LINE_START && i<len; i++)
000cb0  f04f0b00          MOV      r11,#0
000cb4  e03a              B        |L1.3372|
                  |L1.3254|
;;;566    		{
;;;567    			bit0 = buf[i]&EQ_NEGATIVE;
000cb6  f4004100          AND      r1,r0,#0x8000
;;;568    			col0 = (buf[i]&~EQ_NEGATIVE)>>2;
000cba  f4204000          BIC      r0,r0,#0x8000
000cbe  0885              LSRS     r5,r0,#2
;;;569    			if (bit0!=0) // neg
000cc0  b109              CBZ      r1,|L1.3270|
;;;570    				vstate[col0] = row+1;
000cc2  5567              STRB     r7,[r4,r5]
000cc4  e02e              B        |L1.3364|
                  |L1.3270|
;;;571    			else // bit0==0, pos
;;;572    			{
;;;573    				if (vstate[col0]!=0)
000cc6  5d60              LDRB     r0,[r4,r5]
000cc8  b360              CBZ      r0,|L1.3364|
;;;574    				{
;;;575    					lineWidth = (row - (vstate[col0]-1))<<2; // multiply by 4 because vertical is subsampled by 4
000cca  1a30              SUBS     r0,r6,r0
000ccc  1c40              ADDS     r0,r0,#1
000cce  f64f71ff          MOV      r1,#0xffff
000cd2  ea010080          AND      r0,r1,r0,LSL #2
;;;576    					if (g_minLineWidth<lineWidth && lineWidth<g_maxLineWidth && col0<LINE_VSIZE)
000cd6  f8ba101e          LDRH     r1,[r10,#0x1e]  ; g_minLineWidth
000cda  4281              CMP      r1,r0
000cdc  d220              BCS      |L1.3360|
000cde  f8ba1020          LDRH     r1,[r10,#0x20]  ; g_maxLineWidth
000ce2  4288              CMP      r0,r1
000ce4  d21c              BCS      |L1.3360|
000ce6  2d9f              CMP      r5,#0x9f
000ce8  d21a              BCS      |L1.3360|
;;;577    					{
;;;578    						index = LINE_GRID_INDEX(col0>>1, (row - (lineWidth>>3))>>1);
000cea  eba600d0          SUB      r0,r6,r0,LSR #3
000cee  1040              ASRS     r0,r0,#1
000cf0  ebc01100          RSB      r1,r0,r0,LSL #4
000cf4  eb011080          ADD      r0,r1,r0,LSL #6
000cf8  eb000055          ADD      r0,r0,r5,LSR #1
000cfc  b280              UXTH     r0,r0
;;;579    						if (index<LINE_GRID_WIDTH*LINE_GRID_HEIGHT+8)
000cfe  f2410114          MOV      r1,#0x1014
000d02  4288              CMP      r0,r1
000d04  d208              BCS      |L1.3352|
;;;580    							g_lineGrid[index] |= LINE_NODE_FLAG_VLINE;
000d06  f8da1054          LDR      r1,[r10,#0x54]  ; g_lineGrid
000d0a  f8312010          LDRH     r2,[r1,r0,LSL #1]
000d0e  f4426200          ORR      r2,r2,#0x800
000d12  f8212010          STRH     r2,[r1,r0,LSL #1]
000d16  e003              B        |L1.3360|
                  |L1.3352|
;;;581    						else
;;;582    							cprintf(0, "high index\n");
000d18  a192              ADR      r1,|L1.3940|
000d1a  2000              MOVS     r0,#0
000d1c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.3360|
;;;583    					}
;;;584    					vstate[col0] = 0;
000d20  2000              MOVS     r0,#0
000d22  5560              STRB     r0,[r4,r5]
                  |L1.3364|
000d24  f10b0b01          ADD      r11,r11,#1            ;565
000d28  fa1ffb8b          UXTH     r11,r11               ;565
                  |L1.3372|
000d2c  f838001b          LDRH     r0,[r8,r11,LSL #1]    ;565
000d30  f5b04f7f          CMP      r0,#0xff00            ;565
000d34  d201              BCS      |L1.3386|
000d36  45cb              CMP      r11,r9                ;565
000d38  d3bd              BCC      |L1.3254|
                  |L1.3386|
;;;585    				}
;;;586    			}
;;;587    		}
;;;588    	}
;;;589    	return 0;
000d3a  2000              MOVS     r0,#0
;;;590    }
000d3c  e762              B        |L1.3076|
;;;591    
                          ENDP

                  _Z17line_sendLineGridh PROC ; line_sendLineGrid(unsigned char)
;;;592    int line_sendLineGrid(uint8_t renderFlags)
000d3e  b530              PUSH     {r4,r5,lr}
;;;593    {
000d40  b08b              SUB      sp,sp,#0x2c
;;;594    	uint32_t len;
;;;595    	uint8_t *gridData = (uint8_t *)g_lineGridMem + CAM_PREBUF_LEN - CAM_FRAME_HEADER_LEN;
000d42  4987              LDR      r1,|L1.3936|
000d44  6d8d              LDR      r5,[r1,#0x58]  ; g_lineGridMem
000d46  351c              ADDS     r5,r5,#0x1c
;;;596    	
;;;597    	// fill buffer contents manually for return data 
;;;598    	len = Chirp::serialize(g_chirpUsb, (uint8_t *)gridData, LINE_GRID_WIDTH*LINE_GRID_HEIGHT*sizeof(LineGridNode), HTYPE(FOURCC('L','I','N','G')), HINT8(renderFlags), UINT16(LINE_GRID_WIDTH), UINT16(LINE_GRID_HEIGHT), UINTS16_NO_COPY(LINE_GRID_WIDTH*LINE_GRID_HEIGHT), END);
000d48  2100              MOVS     r1,#0
000d4a  f241020c          MOV      r2,#0x100c
000d4e  23b2              MOVS     r3,#0xb2
000d50  2434              MOVS     r4,#0x34
000d52  e9cd4306          STRD     r4,r3,[sp,#0x18]
000d56  e9cd2108          STRD     r2,r1,[sp,#0x20]
000d5a  2202              MOVS     r2,#2
000d5c  214f              MOVS     r1,#0x4f
000d5e  e9cd2103          STRD     r2,r1,[sp,#0xc]
000d62  9205              STR      r2,[sp,#0x14]
000d64  9002              STR      r0,[sp,#8]
000d66  2041              MOVS     r0,#0x41
000d68  4981              LDR      r1,|L1.3952|
000d6a  e9cd1000          STRD     r1,r0,[sp,#0]
000d6e  4c81              LDR      r4,|L1.3956|
000d70  2364              MOVS     r3,#0x64
000d72  f2420218          MOV      r2,#0x2018
000d76  4629              MOV      r1,r5
000d78  6820              LDR      r0,[r4,#0]  ; g_chirpUsb
000d7a  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
;;;599    	if (len!=CAM_FRAME_HEADER_LEN)
000d7e  2824              CMP      r0,#0x24
000d80  d003              BEQ      |L1.3466|
;;;600    		return -1;
000d82  f04f30ff          MOV      r0,#0xffffffff
                  |L1.3462|
;;;601    	
;;;602    	g_chirpUsb->useBuffer((uint8_t *)gridData, CAM_FRAME_HEADER_LEN+LINE_GRID_WIDTH*LINE_GRID_HEIGHT*sizeof(LineGridNode)); 
;;;603    	
;;;604    	return 0;
;;;605    }
000d86  b00b              ADD      sp,sp,#0x2c
000d88  bd30              POP      {r4,r5,pc}
                  |L1.3466|
000d8a  f242023c          MOV      r2,#0x203c            ;602
000d8e  4629              MOV      r1,r5                 ;602
000d90  6820              LDR      r0,[r4,#0]            ;602  ; g_chirpUsb
000d92  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
000d96  2000              MOVS     r0,#0                 ;604
000d98  e7f5              B        |L1.3462|
;;;606    
                          ENDP

                  _Z12lineSegErrorP5PointhPh PROC ; lineSegError(Point*, unsigned char, unsigned char*)
;;;607    float lineSegError(Point ps[], uint8_t points, uint8_t *maxIndex)
000d9a  b5f0              PUSH     {r4-r7,lr}
;;;608    {
;;;609    	int8_t i, xdiff, ydiff;
;;;610    	float e, fe, maxe, error, slope;
;;;611    	
;;;612    	xdiff = ps[points-1].m_x - ps[0].m_x;
000d9c  1e4d              SUBS     r5,r1,#1
000d9e  7804              LDRB     r4,[r0,#0]
000da0  f8103015          LDRB     r3,[r0,r5,LSL #1]
000da4  1b1b              SUBS     r3,r3,r4
000da6  b25b              SXTB     r3,r3
;;;613    	ydiff = ps[points-1].m_y - ps[0].m_y;
000da8  eb000445          ADD      r4,r0,r5,LSL #1
000dac  7846              LDRB     r6,[r0,#1]
000dae  7864              LDRB     r4,[r4,#1]
000db0  1ba4              SUBS     r4,r4,r6
000db2  b264              SXTB     r4,r4
;;;614    	
;;;615    	if (ABS(ydiff)>ABS(xdiff)) // vertical
000db4  2c00              CMP      r4,#0
000db6  da01              BGE      |L1.3516|
000db8  4266              RSBS     r6,r4,#0
000dba  e000              B        |L1.3518|
                  |L1.3516|
000dbc  4626              MOV      r6,r4
                  |L1.3518|
000dbe  2b00              CMP      r3,#0
000dc0  da01              BGE      |L1.3526|
000dc2  425f              RSBS     r7,r3,#0
000dc4  e000              B        |L1.3528|
                  |L1.3526|
000dc6  461f              MOV      r7,r3
                  |L1.3528|
;;;616    	{
;;;617    		slope = (float)xdiff/ydiff;
;;;618    		for (i=1, error=0.0, maxe=-1.0; i<points; i++)
000dc8  ed9f0a6b          VLDR     s0,|L1.3960|
000dcc  eebf2a00          VMOV.F32 s4,#-1.00000000
000dd0  42be              CMP      r6,r7                 ;615
000dd2  dd34              BLE      |L1.3646|
000dd4  ee003a90          VMOV     s1,r3                 ;617
000dd8  eef81ae0          VCVT.F32.S32 s3,s1                 ;617
000ddc  ee004a90          VMOV     s1,r4                 ;617
000de0  eef80ae0          VCVT.F32.S32 s1,s1                 ;617
000de4  ee811aa0          VDIV.F32 s2,s3,s1              ;617
000de8  2301              MOVS     r3,#1
000dea  e025              B        |L1.3640|
                  |L1.3564|
;;;619    		{
;;;620    			e = ps[i].m_x - (ps[0].m_x + (ps[i].m_y-ps[0].m_y)*slope);
000dec  eb000443          ADD      r4,r0,r3,LSL #1
000df0  7846              LDRB     r6,[r0,#1]
000df2  7864              LDRB     r4,[r4,#1]
000df4  1ba4              SUBS     r4,r4,r6
000df6  ee004a90          VMOV     s1,r4
000dfa  7804              LDRB     r4,[r0,#0]
000dfc  eef81ae0          VCVT.F32.S32 s3,s1
000e00  ee004a90          VMOV     s1,r4
000e04  f8104013          LDRB     r4,[r0,r3,LSL #1]
000e08  eef80a60          VCVT.F32.U32 s1,s1
000e0c  ee410a81          VMLA.F32 s1,s3,s2
000e10  ee014a90          VMOV     s3,r4
000e14  eef81a61          VCVT.F32.U32 s3,s3
000e18  ee711ae0          VSUB.F32 s3,s3,s1
;;;621    			fe = fabsf(e);
000e1c  eef00ae1          VABS.F32 s1,s3
;;;622    			if (fe>maxe)
000e20  eef40ac2          VCMPE.F32 s1,s4
000e24  eef1fa10          VMRS     APSR_nzcv,FPSCR
000e28  dd02              BLE      |L1.3632|
;;;623    			{
;;;624    				*maxIndex = i;
000e2a  7013              STRB     r3,[r2,#0]
;;;625    				maxe = fe;
000e2c  eeb02a60          VMOV.F32 s4,s1
                  |L1.3632|
;;;626    			}
;;;627    			error += e;
000e30  ee300a21          VADD.F32 s0,s0,s3
000e34  1c5b              ADDS     r3,r3,#1              ;618
000e36  b25b              SXTB     r3,r3                 ;618
                  |L1.3640|
000e38  428b              CMP      r3,r1                 ;618
000e3a  dbd7              BLT      |L1.3564|
000e3c  e033              B        |L1.3750|
                  |L1.3646|
;;;628    		}
;;;629    	}
;;;630    	else // horizontal
;;;631    	{
;;;632    		slope = (float)ydiff/xdiff;
000e3e  ee004a90          VMOV     s1,r4
000e42  eeb81ae0          VCVT.F32.S32 s2,s1
000e46  ee003a90          VMOV     s1,r3
000e4a  eef81ae0          VCVT.F32.S32 s3,s1
000e4e  eec10a21          VDIV.F32 s1,s2,s3
;;;633    		for (i=1, error=0.0, maxe=-1.0; i<points; i++)
000e52  2301              MOVS     r3,#1
000e54  e025              B        |L1.3746|
                  |L1.3670|
;;;634    		{
;;;635    			e = ps[i].m_y - (ps[0].m_y + (ps[i].m_x-ps[0].m_x)*slope);
000e56  f8104013          LDRB     r4,[r0,r3,LSL #1]
000e5a  7806              LDRB     r6,[r0,#0]
000e5c  1ba4              SUBS     r4,r4,r6
000e5e  ee014a10          VMOV     s2,r4
000e62  7844              LDRB     r4,[r0,#1]
000e64  eef81ac1          VCVT.F32.S32 s3,s2
000e68  ee014a10          VMOV     s2,r4
000e6c  eb000443          ADD      r4,r0,r3,LSL #1
000e70  eeb81a41          VCVT.F32.U32 s2,s2
000e74  7864              LDRB     r4,[r4,#1]
000e76  ee011aa0          VMLA.F32 s2,s3,s1
000e7a  ee014a90          VMOV     s3,r4
000e7e  eef81a61          VCVT.F32.U32 s3,s3
000e82  ee711ac1          VSUB.F32 s3,s3,s2
;;;636    			fe = fabsf(e);
000e86  eeb01ae1          VABS.F32 s2,s3
;;;637    			if (fe>maxe)
000e8a  eeb41ac2          VCMPE.F32 s2,s4
000e8e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000e92  dd02              BLE      |L1.3738|
;;;638    			{
;;;639    				*maxIndex = i;
000e94  7013              STRB     r3,[r2,#0]
;;;640    				maxe = fe;
000e96  eeb02a41          VMOV.F32 s4,s2
                  |L1.3738|
;;;641    			}
;;;642    			error += e;
000e9a  ee300a21          VADD.F32 s0,s0,s3
000e9e  1c5b              ADDS     r3,r3,#1              ;633
000ea0  b25b              SXTB     r3,r3                 ;633
                  |L1.3746|
000ea2  428b              CMP      r3,r1                 ;633
000ea4  dbd7              BLT      |L1.3670|
                  |L1.3750|
;;;643    		}
;;;644    	}
;;;645    
;;;646    	error = fabsf(error)/(points-1);
000ea6  eef00ac0          VABS.F32 s1,s0
000eaa  ee005a10          VMOV     s0,r5
000eae  eeb81ac0          VCVT.F32.S32 s2,s0
000eb2  ee800a81          VDIV.F32 s0,s1,s2
;;;647    	
;;;648    	return error;
;;;649    }
000eb6  bdf0              POP      {r4-r7,pc}
;;;650    
                          ENDP

                  _Z9cleanGridP5Pointh PROC ; cleanGrid(Point*, unsigned char)
;;;651    	
;;;652    void cleanGrid(Point ps[], uint8_t points)
000eb8  b5f0              PUSH     {r4-r7,lr}
;;;653    {
;;;654    	uint8_t i;
;;;655    	int8_t xdiff, ydiff;
;;;656    	int16_t j;
;;;657    	
;;;658    	// don't put bogus indexes in grid
;;;659    	if (g_lineIndex>=LINE_MAX_LINES)
000eba  4a29              LDR      r2,|L1.3936|
000ebc  7916              LDRB     r6,[r2,#4]  ; g_lineIndex
000ebe  2e80              CMP      r6,#0x80
000ec0  d27e              BCS      |L1.4032|
;;;660    		return;
;;;661    	
;;;662    	xdiff = ps[points-1].m_x - ps[0].m_x;
000ec2  1e49              SUBS     r1,r1,#1
000ec4  7803              LDRB     r3,[r0,#0]
000ec6  f8102011          LDRB     r2,[r0,r1,LSL #1]
000eca  1ad2              SUBS     r2,r2,r3
000ecc  b253              SXTB     r3,r2
;;;663    	ydiff = ps[points-1].m_y - ps[0].m_y;
000ece  eb000241          ADD      r2,r0,r1,LSL #1
000ed2  7844              LDRB     r4,[r0,#1]
000ed4  7852              LDRB     r2,[r2,#1]
000ed6  1b12              SUBS     r2,r2,r4
000ed8  b254              SXTB     r4,r2
;;;664    	
;;;665    	if (ABS(ydiff)>ABS(xdiff)) // vertical
000eda  2c00              CMP      r4,#0
000edc  da00              BGE      |L1.3808|
000ede  4264              RSBS     r4,r4,#0
                  |L1.3808|
000ee0  2b00              CMP      r3,#0
000ee2  da00              BGE      |L1.3814|
000ee4  425b              RSBS     r3,r3,#0
                  |L1.3814|
000ee6  4a1e              LDR      r2,|L1.3936|
000ee8  429c              CMP      r4,r3
;;;666    	{
;;;667    		for (i=0; i<points-1; i++) // don't clean around the last point, otherwise we might not be able to pick up where we left off
;;;668    		{
;;;669    			j = LINE_GRID_INDEX_P(ps[i]);
;;;670    
;;;671    			g_lineGrid[j] &= ~LINE_NODE_LINE_MASK;
000eea  6d52              LDR      r2,[r2,#0x54]
000eec  dd52              BLE      |L1.3988|
000eee  2300              MOVS     r3,#0                 ;667
000ef0  e04d              B        |L1.3982|
                  |L1.3826|
000ef2  eb000443          ADD      r4,r0,r3,LSL #1       ;669
000ef6  7864              LDRB     r4,[r4,#1]            ;669
000ef8  ebc41504          RSB      r5,r4,r4,LSL #4       ;669
000efc  eb051484          ADD      r4,r5,r4,LSL #6       ;669
000f00  f8105013          LDRB     r5,[r0,r3,LSL #1]     ;669
000f04  442c              ADD      r4,r4,r5              ;669
000f06  b224              SXTH     r4,r4                 ;669
000f08  f8325014          LDRH     r5,[r2,r4,LSL #1]
000f0c  f36f0509          BFC      r5,#0,#10
;;;672    			g_lineGrid[j] |= g_lineIndex;
000f10  4335              ORRS     r5,r5,r6
000f12  f8225014          STRH     r5,[r2,r4,LSL #1]
;;;673    			if (ps[i].m_x>0)
000f16  f8105013          LDRB     r5,[r0,r3,LSL #1]
000f1a  b135              CBZ      r5,|L1.3882|
;;;674    				g_lineGrid[j-1] |= LINE_NODE_FLAG_NULL;
000f1c  1e65              SUBS     r5,r4,#1
000f1e  f8327015          LDRH     r7,[r2,r5,LSL #1]
000f22  f4474700          ORR      r7,r7,#0x8000
000f26  f8227015          STRH     r7,[r2,r5,LSL #1]
                  |L1.3882|
;;;675    			if (ps[i].m_x>1)
000f2a  f8105013          LDRB     r5,[r0,r3,LSL #1]
000f2e  2d01              CMP      r5,#1
000f30  d906              BLS      |L1.3904|
;;;676    				g_lineGrid[j-2] |= LINE_NODE_FLAG_NULL;
000f32  1ea5              SUBS     r5,r4,#2
000f34  f8327015          LDRH     r7,[r2,r5,LSL #1]
000f38  f4474700          ORR      r7,r7,#0x8000
000f3c  f8227015          STRH     r7,[r2,r5,LSL #1]
                  |L1.3904|
;;;677    			if (ps[i].m_x<LINE_GRID_WIDTH-1)
000f40  f8105013          LDRB     r5,[r0,r3,LSL #1]
000f44  2d4e              CMP      r5,#0x4e
000f46  d206              BCS      |L1.3926|
;;;678    				g_lineGrid[j+1] |= LINE_NODE_FLAG_NULL;
000f48  1c65              ADDS     r5,r4,#1
000f4a  f8327015          LDRH     r7,[r2,r5,LSL #1]
000f4e  f4474700          ORR      r7,r7,#0x8000
000f52  f8227015          STRH     r7,[r2,r5,LSL #1]
                  |L1.3926|
;;;679    			if (ps[i].m_x<LINE_GRID_WIDTH-2)
000f56  f8105013          LDRB     r5,[r0,r3,LSL #1]
000f5a  2d4d              CMP      r5,#0x4d
000f5c  d215              BCS      |L1.3978|
;;;680    				g_lineGrid[j+2] |= LINE_NODE_FLAG_NULL;
000f5e  e00d              B        |L1.3964|
                  |L1.3936|
                          DCD      ||.data||
                  |L1.3940|
000f64  68696768          DCB      "high index\n",0
000f68  20696e64
000f6c  65780a00
                  |L1.3952|
                          DCD      0x474e494c
                  |L1.3956|
                          DCD      g_chirpUsb
                  |L1.3960|
000f78  00000000          DCFS     0x00000000 ; 0
                  |L1.3964|
000f7c  1ca4              ADDS     r4,r4,#2
000f7e  f8325014          LDRH     r5,[r2,r4,LSL #1]
000f82  f4454500          ORR      r5,r5,#0x8000
000f86  f8225014          STRH     r5,[r2,r4,LSL #1]
                  |L1.3978|
000f8a  1c5b              ADDS     r3,r3,#1              ;667
000f8c  b2db              UXTB     r3,r3                 ;667
                  |L1.3982|
000f8e  428b              CMP      r3,r1                 ;667
000f90  dbaf              BLT      |L1.3826|
000f92  e043              B        |L1.4124|
                  |L1.3988|
;;;681    		}
;;;682    	}
;;;683    	else // horizontal
;;;684    	{
;;;685    		for (i=0; i<points-1; i++) // don't clean around the last point, otherwise we might not be able to pick up where we left off
000f94  2300              MOVS     r3,#0
000f96  e03f              B        |L1.4120|
                  |L1.3992|
;;;686    		{
;;;687    			j = LINE_GRID_INDEX_P(ps[i]);
000f98  eb000543          ADD      r5,r0,r3,LSL #1
000f9c  786c              LDRB     r4,[r5,#1]
000f9e  ebc41704          RSB      r7,r4,r4,LSL #4
000fa2  eb071484          ADD      r4,r7,r4,LSL #6
000fa6  f8107013          LDRB     r7,[r0,r3,LSL #1]
000faa  443c              ADD      r4,r4,r7
000fac  b224              SXTH     r4,r4
;;;688    			
;;;689    			g_lineGrid[j] &= ~LINE_NODE_LINE_MASK;
000fae  f8327014          LDRH     r7,[r2,r4,LSL #1]
000fb2  f36f0709          BFC      r7,#0,#10
;;;690    			g_lineGrid[j] |= g_lineIndex;
000fb6  4337              ORRS     r7,r7,r6
000fb8  f8227014          STRH     r7,[r2,r4,LSL #1]
;;;691    			if (ps[i].m_y>0)
000fbc  786f              LDRB     r7,[r5,#1]
000fbe  e000              B        |L1.4034|
                  |L1.4032|
000fc0  e03e              B        |L1.4160|
                  |L1.4034|
000fc2  b13f              CBZ      r7,|L1.4052|
;;;692    				g_lineGrid[j-LINE_GRID_WIDTH] |= LINE_NODE_FLAG_NULL;
000fc4  f1a4074f          SUB      r7,r4,#0x4f
000fc8  f832c017          LDRH     r12,[r2,r7,LSL #1]
000fcc  f44c4c00          ORR      r12,r12,#0x8000
000fd0  f822c017          STRH     r12,[r2,r7,LSL #1]
                  |L1.4052|
;;;693    			if (ps[i].m_y>1)
000fd4  786f              LDRB     r7,[r5,#1]
000fd6  2f01              CMP      r7,#1
000fd8  d907              BLS      |L1.4074|
;;;694    				g_lineGrid[j-LINE_GRID_WIDTH-LINE_GRID_WIDTH] |= LINE_NODE_FLAG_NULL;
000fda  f1a4079e          SUB      r7,r4,#0x9e
000fde  f832c017          LDRH     r12,[r2,r7,LSL #1]
000fe2  f44c4c00          ORR      r12,r12,#0x8000
000fe6  f822c017          STRH     r12,[r2,r7,LSL #1]
                  |L1.4074|
;;;695    			if (ps[i].m_y<LINE_GRID_HEIGHT-1)
000fea  786f              LDRB     r7,[r5,#1]
000fec  2f33              CMP      r7,#0x33
000fee  d207              BCS      |L1.4096|
;;;696    				g_lineGrid[j+LINE_GRID_WIDTH] |= LINE_NODE_FLAG_NULL;
000ff0  f104074f          ADD      r7,r4,#0x4f
000ff4  f832c017          LDRH     r12,[r2,r7,LSL #1]
000ff8  f44c4c00          ORR      r12,r12,#0x8000
000ffc  f822c017          STRH     r12,[r2,r7,LSL #1]
                  |L1.4096|
;;;697    			if (ps[i].m_y<LINE_GRID_HEIGHT-2)
001000  786d              LDRB     r5,[r5,#1]
001002  2d32              CMP      r5,#0x32
001004  d206              BCS      |L1.4116|
;;;698    				g_lineGrid[j+LINE_GRID_WIDTH+LINE_GRID_WIDTH] |= LINE_NODE_FLAG_NULL;
001006  349e              ADDS     r4,r4,#0x9e
001008  f8325014          LDRH     r5,[r2,r4,LSL #1]
00100c  f4454500          ORR      r5,r5,#0x8000
001010  f8225014          STRH     r5,[r2,r4,LSL #1]
                  |L1.4116|
001014  1c5b              ADDS     r3,r3,#1              ;685
001016  b2db              UXTB     r3,r3                 ;685
                  |L1.4120|
001018  428b              CMP      r3,r1                 ;685
00101a  dbbd              BLT      |L1.3992|
                  |L1.4124|
;;;699    		}
;;;700    	}
;;;701    	// mark last point
;;;702    	j = LINE_GRID_INDEX_P(ps[i]);
00101c  eb000143          ADD      r1,r0,r3,LSL #1
001020  f8100013          LDRB     r0,[r0,r3,LSL #1]
001024  7849              LDRB     r1,[r1,#1]
001026  ebc11401          RSB      r4,r1,r1,LSL #4
00102a  eb041181          ADD      r1,r4,r1,LSL #6
00102e  4408              ADD      r0,r0,r1
001030  b200              SXTH     r0,r0
;;;703    	g_lineGrid[j] &= ~LINE_NODE_LINE_MASK;
001032  f8321010          LDRH     r1,[r2,r0,LSL #1]
001036  f36f0109          BFC      r1,#0,#10
;;;704    	g_lineGrid[j] |= g_lineIndex;
00103a  4331              ORRS     r1,r1,r6
00103c  f8221010          STRH     r1,[r2,r0,LSL #1]
                  |L1.4160|
;;;705    }
001040  bdf0              POP      {r4-r7,pc}
;;;706    
                          ENDP

                  _Z7addlineRK5PointS1_ PROC ; addline(const Point&, const Point&)
;;;707    int addline(const Point &p0, const Point &p1)
001042  b570              PUSH     {r4-r6,lr}
;;;708    {
001044  b086              SUB      sp,sp,#0x18
001046  4605              MOV      r5,r0
001048  460e              MOV      r6,r1
;;;709    	SimpleListNode<Line2> *linen;
;;;710    	Line2 line;
00104a  a801              ADD      r0,sp,#4
00104c  f7fffffe          BL       _ZN5Line2C1Ev ; Line2::Line2()
;;;711    
;;;712    	if (g_lineIndex>=LINE_MAX_LINES)
001050  4cfd              LDR      r4,|L1.5192|
001052  7920              LDRB     r0,[r4,#4]  ; g_lineIndex
001054  2880              CMP      r0,#0x80
001056  d303              BCC      |L1.4192|
;;;713    		return -2;
001058  f06f0001          MVN      r0,#1
                  |L1.4188|
;;;714    	
;;;715    	line.m_p0 = p0;
;;;716    	line.m_p1 = p1; 
;;;717    	line.m_index = g_lineIndex;
;;;718    	linen = g_linesList.add(line);
;;;719    	if (linen==NULL)
;;;720    		return -1;
;;;721    	g_lines[g_lineIndex++] = linen;	
;;;722    	g_nodesList.add(p0);
;;;723    	g_nodesList.add(p1);		
;;;724    	return 0;
;;;725    }	
00105c  b006              ADD      sp,sp,#0x18
00105e  bd70              POP      {r4-r6,pc}
                  |L1.4192|
001060  8829              LDRH     r1,[r5,#0]            ;715
001062  f8ad1004          STRH     r1,[sp,#4]            ;715
001066  8831              LDRH     r1,[r6,#0]            ;716
001068  f8ad1006          STRH     r1,[sp,#6]            ;716
00106c  f88d0008          STRB     r0,[sp,#8]            ;717
001070  a901              ADD      r1,sp,#4              ;718
001072  48f6              LDR      r0,|L1.5196|
001074  f7fffffe          BL       _ZN10SimpleListI5Line2E3addERKS0_ ; SimpleList<Line2>::add(const Line2&)
001078  b188              CBZ      r0,|L1.4254|
00107a  7922              LDRB     r2,[r4,#4]            ;721  ; g_lineIndex
00107c  1c51              ADDS     r1,r2,#1              ;721
00107e  7121              STRB     r1,[r4,#4]            ;721
001080  6ea1              LDR      r1,[r4,#0x68]         ;721  ; g_lines
001082  f8410022          STR      r0,[r1,r2,LSL #2]     ;721
001086  48f1              LDR      r0,|L1.5196|
001088  4629              MOV      r1,r5                 ;722
00108a  300c              ADDS     r0,r0,#0xc            ;722
00108c  f7fffffe          BL       _ZN10SimpleListI5PointE3addERKS0_ ; SimpleList<Point>::add(const Point&)
001090  48ee              LDR      r0,|L1.5196|
001092  4631              MOV      r1,r6                 ;723
001094  300c              ADDS     r0,r0,#0xc            ;723
001096  f7fffffe          BL       _ZN10SimpleListI5PointE3addERKS0_ ; SimpleList<Point>::add(const Point&)
00109a  2000              MOVS     r0,#0                 ;724
00109c  e7de              B        |L1.4188|
                  |L1.4254|
00109e  f04f30ff          MOV      r0,#0xffffffff        ;720
0010a2  e7db              B        |L1.4188|
;;;726    
                          ENDP

                  _Z14finishGridNodeP5PointhsRS_ PROC ; finishGridNode(Point*, unsigned char, short, Point&)
;;;727    LineSegIndex finishGridNode(Point ps[], uint8_t points, LineSegIndex prevSeg, Point &p0)
0010a4  e92d4fff          PUSH     {r0-r11,lr}
;;;728    {
0010a8  b081              SUB      sp,sp,#4
0010aa  4604              MOV      r4,r0
0010ac  460e              MOV      r6,r1
0010ae  4690              MOV      r8,r2
;;;729    	float error;
;;;730    	LineSeg *ls0, *ls1;
;;;731    	uint8_t maxIndex;
;;;732    	
;;;733    	if (points==0 || g_lineSegIndex>=LINE_MAX_SEGMENTS-1 || g_lineIndex>=LINE_MAX_LINES-1)
0010b0  2e00              CMP      r6,#0
0010b2  d007              BEQ      |L1.4292|
0010b4  4de4              LDR      r5,|L1.5192|
0010b6  f9b5002c          LDRSH    r0,[r5,#0x2c]  ; g_lineSegIndex
0010ba  28ff              CMP      r0,#0xff
0010bc  da02              BGE      |L1.4292|
0010be  7928              LDRB     r0,[r5,#4]  ; g_lineIndex
0010c0  287f              CMP      r0,#0x7f
0010c2  d303              BCC      |L1.4300|
                  |L1.4292|
;;;734    		return prevSeg; // return prevSeg to help logic in extractLines
0010c4  4640              MOV      r0,r8
                  |L1.4294|
;;;735    	
;;;736    	// check error of segment, split if necessary
;;;737    	error = lineSegError(ps, points, &maxIndex);
;;;738    	if (error<g_maxError || points<=5)
;;;739    	{
;;;740    		ls0 = &g_lineSegs[g_lineSegIndex++];
;;;741    		ls0->reset();
;;;742    		ls0->m_p0.m_x = ps[0].m_x;
;;;743    		ls0->m_p0.m_y = ps[0].m_y;
;;;744    		ls0->m_p1.m_x = ps[points-1].m_x;
;;;745    		ls0->m_p1.m_y = ps[points-1].m_y;
;;;746    		ls0->m_ls0 = prevSeg;
;;;747    		ls0->m_line = g_lineIndex;
;;;748    		cleanGrid(ps, points);
;;;749    	}
;;;750    	else // split 
;;;751    	{		
;;;752    		ls0 = &g_lineSegs[g_lineSegIndex++];
;;;753    		ls0->reset();
;;;754    		ls0->m_p0.m_x = ps[0].m_x;
;;;755    		ls0->m_p0.m_y = ps[0].m_y;
;;;756    		ls0->m_p1.m_x = ps[maxIndex].m_x;
;;;757    		ls0->m_p1.m_y = ps[maxIndex].m_y;
;;;758    		ls0->m_ls0 = prevSeg;
;;;759    		ls0->m_ls1 = g_lineSegIndex;
;;;760    		ls0->m_line = g_lineIndex;
;;;761    		cleanGrid(ps, maxIndex+1);
;;;762    
;;;763    		// split the line
;;;764    		addline(p0, ps[maxIndex+1]);
;;;765    		p0 = ps[maxIndex+1];
;;;766    		
;;;767    		ls1 = &g_lineSegs[g_lineSegIndex++];
;;;768    		ls1->reset();
;;;769    		ls1->m_p0.m_x = ps[maxIndex].m_x;
;;;770    		ls1->m_p0.m_y = ps[maxIndex].m_y;
;;;771    		ls1->m_p1.m_x = ps[points-1].m_x;
;;;772    		ls1->m_p1.m_y = ps[points-1].m_y;
;;;773    		ls1->m_ls0 = g_lineSegIndex-2;
;;;774    		ls1->m_line = g_lineIndex;
;;;775    		cleanGrid(ps+maxIndex+1, points-(maxIndex+1));
;;;776    	}
;;;777    	return g_lineSegIndex-1;
;;;778    }
0010c6  b005              ADD      sp,sp,#0x14
0010c8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4300|
0010cc  466a              MOV      r2,sp                 ;737
0010ce  4631              MOV      r1,r6                 ;737
0010d0  4620              MOV      r0,r4                 ;737
0010d2  f7fffffe          BL       _Z12lineSegErrorP5PointhPh ; lineSegError(Point*, unsigned char, unsigned char*)
0010d6  edd50a19          VLDR     s1,[r5,#0x64]         ;738
0010da  1e77              SUBS     r7,r6,#1              ;744
0010dc  f04f0b00          MOV      r11,#0                ;738
0010e0  eeb40ae0          VCMPE.F32 s0,s1                 ;738
0010e4  f04f3aff          MOV      r10,#0xffffffff       ;738
0010e8  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;738
0010ec  eb040947          ADD      r9,r4,r7,LSL #1       ;744
0010f0  d301              BCC      |L1.4342|
0010f2  2e05              CMP      r6,#5                 ;738
0010f4  d821              BHI      |L1.4410|
                  |L1.4342|
0010f6  f9b5002c          LDRSH    r0,[r5,#0x2c]         ;740  ; g_lineSegIndex
0010fa  1c41              ADDS     r1,r0,#1              ;740
0010fc  85a9              STRH     r1,[r5,#0x2c]         ;740
0010fe  6de9              LDR      r1,[r5,#0x5c]         ;740  ; g_lineSegs
001100  eb000080          ADD      r0,r0,r0,LSL #2       ;740
001104  eb010040          ADD      r0,r1,r0,LSL #1       ;740
001108  f8a0a006          STRH     r10,[r0,#6]           ;740
00110c  f8a0a004          STRH     r10,[r0,#4]           ;740
001110  f880b008          STRB     r11,[r0,#8]           ;740
001114  7821              LDRB     r1,[r4,#0]            ;742
001116  7001              STRB     r1,[r0,#0]            ;742
001118  7861              LDRB     r1,[r4,#1]            ;743
00111a  7041              STRB     r1,[r0,#1]            ;743
00111c  f8141017          LDRB     r1,[r4,r7,LSL #1]     ;744
001120  7081              STRB     r1,[r0,#2]            ;744
001122  f8991001          LDRB     r1,[r9,#1]            ;745
001126  70c1              STRB     r1,[r0,#3]            ;745
001128  f8a08004          STRH     r8,[r0,#4]            ;746
00112c  7929              LDRB     r1,[r5,#4]            ;747  ; g_lineIndex
00112e  7201              STRB     r1,[r0,#8]            ;747
001130  4631              MOV      r1,r6                 ;748
001132  4620              MOV      r0,r4                 ;748
001134  f7fffffe          BL       _Z9cleanGridP5Pointh ; cleanGrid(Point*, unsigned char)
001138  e067              B        |L1.4618|
                  |L1.4410|
00113a  f9b5002c          LDRSH    r0,[r5,#0x2c]         ;752  ; g_lineSegIndex
00113e  1c41              ADDS     r1,r0,#1              ;752
001140  85a9              STRH     r1,[r5,#0x2c]         ;752
001142  6dea              LDR      r2,[r5,#0x5c]         ;752  ; g_lineSegs
001144  eb000080          ADD      r0,r0,r0,LSL #2       ;752
001148  eb020040          ADD      r0,r2,r0,LSL #1       ;752
00114c  f8a0a006          STRH     r10,[r0,#6]           ;752
001150  f8a0a004          STRH     r10,[r0,#4]           ;752
001154  f880b008          STRB     r11,[r0,#8]           ;752
001158  7822              LDRB     r2,[r4,#0]            ;754
00115a  7002              STRB     r2,[r0,#0]            ;754
00115c  7862              LDRB     r2,[r4,#1]            ;755
00115e  7042              STRB     r2,[r0,#1]            ;755
001160  f89d2000          LDRB     r2,[sp,#0]            ;756
001164  f8142012          LDRB     r2,[r4,r2,LSL #1]     ;756
001168  7082              STRB     r2,[r0,#2]            ;756
00116a  f89d2000          LDRB     r2,[sp,#0]            ;757
00116e  eb040242          ADD      r2,r4,r2,LSL #1       ;757
001172  7852              LDRB     r2,[r2,#1]            ;757
001174  70c2              STRB     r2,[r0,#3]            ;757
001176  f8a08004          STRH     r8,[r0,#4]            ;758
00117a  80c1              STRH     r1,[r0,#6]            ;759
00117c  7929              LDRB     r1,[r5,#4]            ;760  ; g_lineIndex
00117e  7201              STRB     r1,[r0,#8]            ;760
001180  f89d0000          LDRB     r0,[sp,#0]            ;761
001184  1c40              ADDS     r0,r0,#1              ;761
001186  b2c1              UXTB     r1,r0                 ;761
001188  4620              MOV      r0,r4                 ;761
00118a  f7fffffe          BL       _Z9cleanGridP5Pointh ; cleanGrid(Point*, unsigned char)
00118e  f89d0000          LDRB     r0,[sp,#0]            ;764
001192  1c40              ADDS     r0,r0,#1              ;764
001194  eb040140          ADD      r1,r4,r0,LSL #1       ;764
001198  9804              LDR      r0,[sp,#0x10]         ;764
00119a  f7fffffe          BL       _Z7addlineRK5PointS1_ ; addline(const Point&, const Point&)
00119e  f89d0000          LDRB     r0,[sp,#0]            ;765
0011a2  1c40              ADDS     r0,r0,#1              ;765
0011a4  eb040140          ADD      r1,r4,r0,LSL #1       ;765
0011a8  9804              LDR      r0,[sp,#0x10]         ;765
0011aa  8809              LDRH     r1,[r1,#0]            ;765
0011ac  8001              STRH     r1,[r0,#0]            ;765
0011ae  f9b5102c          LDRSH    r1,[r5,#0x2c]         ;767  ; g_lineSegIndex
0011b2  1c4a              ADDS     r2,r1,#1              ;767
0011b4  85aa              STRH     r2,[r5,#0x2c]         ;767
0011b6  eb010081          ADD      r0,r1,r1,LSL #2       ;767
0011ba  6de9              LDR      r1,[r5,#0x5c]         ;767  ; g_lineSegs
0011bc  eb010040          ADD      r0,r1,r0,LSL #1       ;767
0011c0  f8a0a006          STRH     r10,[r0,#6]           ;767
0011c4  f8a0a004          STRH     r10,[r0,#4]           ;767
0011c8  f880b008          STRB     r11,[r0,#8]           ;767
0011cc  f89d1000          LDRB     r1,[sp,#0]            ;769
0011d0  f8141011          LDRB     r1,[r4,r1,LSL #1]     ;769
0011d4  7001              STRB     r1,[r0,#0]            ;769
0011d6  f89d1000          LDRB     r1,[sp,#0]            ;770
0011da  eb040141          ADD      r1,r4,r1,LSL #1       ;770
0011de  7849              LDRB     r1,[r1,#1]            ;770
0011e0  7041              STRB     r1,[r0,#1]            ;770
0011e2  f8141017          LDRB     r1,[r4,r7,LSL #1]     ;771
0011e6  7081              STRB     r1,[r0,#2]            ;771
0011e8  f8991001          LDRB     r1,[r9,#1]            ;772
0011ec  70c1              STRB     r1,[r0,#3]            ;772
0011ee  1e92              SUBS     r2,r2,#2              ;773
0011f0  8082              STRH     r2,[r0,#4]            ;773
0011f2  7929              LDRB     r1,[r5,#4]            ;774  ; g_lineIndex
0011f4  7201              STRB     r1,[r0,#8]            ;774
0011f6  f89d0000          LDRB     r0,[sp,#0]            ;775
0011fa  1a31              SUBS     r1,r6,r0              ;775
0011fc  1e49              SUBS     r1,r1,#1              ;775
0011fe  eb040040          ADD      r0,r4,r0,LSL #1       ;775
001202  b2c9              UXTB     r1,r1                 ;775
001204  1c80              ADDS     r0,r0,#2              ;775
001206  f7fffffe          BL       _Z9cleanGridP5Pointh ; cleanGrid(Point*, unsigned char)
                  |L1.4618|
00120a  8da8              LDRH     r0,[r5,#0x2c]         ;777  ; g_lineSegIndex
00120c  1e40              SUBS     r0,r0,#1              ;777
00120e  b200              SXTH     r0,r0                 ;777
001210  e759              B        |L1.4294|
;;;779    
                          ENDP

                  _Z6ydirUpR5PointRtRhPS_ PROC ; ydirUp(Point&, unsigned short&, unsigned char&, Point*)
;;;780    bool ydirUp(Point &p, uint16_t &i, uint8_t &points, Point ps[])
001212  e92d43f0          PUSH     {r4-r9,lr}
;;;781    {
;;;782    	if (p.m_y==0)
001216  7844              LDRB     r4,[r0,#1]
001218  2c00              CMP      r4,#0
00121a  d026              BEQ      |L1.4714|
;;;783    		return false;
;;;784    
;;;785    	if (g_lineGrid[i-LINE_GRID_WIDTH]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-LINE_GRID_WIDTH]&LINE_NODE_FLAG_NULL))
00121c  f8dfc228          LDR      r12,|L1.5192|
001220  880e              LDRH     r6,[r1,#0]
001222  f8dc7054          LDR      r7,[r12,#0x54]  ; g_lineGrid
001226  f1a6054f          SUB      r5,r6,#0x4f
00122a  f8375015          LDRH     r5,[r7,r5,LSL #1]
00122e  f4156f40          TST      r5,#0xc00
001232  d01c              BEQ      |L1.4718|
001234  042d              LSLS     r5,r5,#16
001236  d41a              BMI      |L1.4718|
;;;786    	{
;;;787    		p.m_y--;
001238  1e64              SUBS     r4,r4,#1
00123a  7044              STRB     r4,[r0,#1]
;;;788    		ps[points] = p;
00123c  7814              LDRB     r4,[r2,#0]
00123e  8800              LDRH     r0,[r0,#0]
001240  eb030344          ADD      r3,r3,r4,LSL #1
001244  8018              STRH     r0,[r3,#0]
;;;789    		i += -LINE_GRID_WIDTH;
001246  8808              LDRH     r0,[r1,#0]
001248  384f              SUBS     r0,r0,#0x4f
00124a  b280              UXTH     r0,r0
00124c  8008              STRH     r0,[r1,#0]
;;;790    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
00124e  f8dc1054          LDR      r1,[r12,#0x54]  ; g_lineGrid
001252  f8313010          LDRH     r3,[r1,r0,LSL #1]
001256  f4434300          ORR      r3,r3,#0x8000
00125a  f8213010          STRH     r3,[r1,r0,LSL #1]
;;;791    		points++;
00125e  7810              LDRB     r0,[r2,#0]
001260  1c40              ADDS     r0,r0,#1
001262  7010              STRB     r0,[r2,#0]
;;;792    		return true;
001264  2001              MOVS     r0,#1
                  |L1.4710|
;;;793    	}
;;;794    	else if (p.m_x>0 && g_lineGrid[i-LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_NULL))
;;;795    	{
;;;796    		p.m_y--;
;;;797    		p.m_x--;
;;;798    		ps[points] = p;
;;;799    		i += -LINE_GRID_WIDTH-1;
;;;800    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;801    		points++;
;;;802    		return true;
;;;803    	}
;;;804    	else if (p.m_x<LINE_GRID_WIDTH-1 && g_lineGrid[i-LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_NULL))
;;;805    	{
;;;806    		p.m_y--;
;;;807    		p.m_x++;
;;;808    		ps[points] = p;
;;;809    		i += -LINE_GRID_WIDTH+1;
;;;810    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;811    		points++;
;;;812    		return true;
;;;813    	}
;;;814    	else // no points in the up direction
;;;815    		return false;
;;;816    }
001266  e8bd83f0          POP      {r4-r9,pc}
                  |L1.4714|
00126a  2000              MOVS     r0,#0                 ;783
00126c  e7fb              B        |L1.4710|
                  |L1.4718|
00126e  7805              LDRB     r5,[r0,#0]            ;794
001270  b31d              CBZ      r5,|L1.4794|
001272  f1a60850          SUB      r8,r6,#0x50           ;794
001276  f8378018          LDRH     r8,[r7,r8,LSL #1]     ;794
00127a  f4186f40          TST      r8,#0xc00             ;794
00127e  d01c              BEQ      |L1.4794|
001280  ea5f4808          LSLS     r8,r8,#16             ;794
001284  d419              BMI      |L1.4794|
001286  1e64              SUBS     r4,r4,#1              ;796
001288  7044              STRB     r4,[r0,#1]            ;796
00128a  1e6d              SUBS     r5,r5,#1              ;797
00128c  7005              STRB     r5,[r0,#0]            ;797
00128e  7814              LDRB     r4,[r2,#0]            ;798
001290  8800              LDRH     r0,[r0,#0]            ;798
001292  eb030344          ADD      r3,r3,r4,LSL #1       ;798
001296  8018              STRH     r0,[r3,#0]            ;798
001298  8808              LDRH     r0,[r1,#0]            ;799
00129a  3850              SUBS     r0,r0,#0x50           ;799
00129c  b280              UXTH     r0,r0                 ;799
00129e  8008              STRH     r0,[r1,#0]            ;799
0012a0  f8dc1054          LDR      r1,[r12,#0x54]        ;800  ; g_lineGrid
0012a4  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;800
0012a8  f4434300          ORR      r3,r3,#0x8000         ;800
0012ac  f8213010          STRH     r3,[r1,r0,LSL #1]     ;800
0012b0  7810              LDRB     r0,[r2,#0]            ;801
0012b2  1c40              ADDS     r0,r0,#1              ;801
0012b4  7010              STRB     r0,[r2,#0]            ;801
0012b6  2001              MOVS     r0,#1                 ;802
0012b8  e7d5              B        |L1.4710|
                  |L1.4794|
0012ba  2d4e              CMP      r5,#0x4e              ;804
0012bc  d221              BCS      |L1.4866|
0012be  3e4e              SUBS     r6,r6,#0x4e           ;804
0012c0  f8376016          LDRH     r6,[r7,r6,LSL #1]     ;804
0012c4  f4166f40          TST      r6,#0xc00             ;804
0012c8  d01b              BEQ      |L1.4866|
0012ca  0436              LSLS     r6,r6,#16             ;804
0012cc  d419              BMI      |L1.4866|
0012ce  1e64              SUBS     r4,r4,#1              ;806
0012d0  7044              STRB     r4,[r0,#1]            ;806
0012d2  1c6d              ADDS     r5,r5,#1              ;807
0012d4  7005              STRB     r5,[r0,#0]            ;807
0012d6  7814              LDRB     r4,[r2,#0]            ;808
0012d8  8800              LDRH     r0,[r0,#0]            ;808
0012da  eb030344          ADD      r3,r3,r4,LSL #1       ;808
0012de  8018              STRH     r0,[r3,#0]            ;808
0012e0  8808              LDRH     r0,[r1,#0]            ;809
0012e2  384e              SUBS     r0,r0,#0x4e           ;809
0012e4  b280              UXTH     r0,r0                 ;809
0012e6  8008              STRH     r0,[r1,#0]            ;809
0012e8  f8dc1054          LDR      r1,[r12,#0x54]        ;810  ; g_lineGrid
0012ec  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;810
0012f0  f4434300          ORR      r3,r3,#0x8000         ;810
0012f4  f8213010          STRH     r3,[r1,r0,LSL #1]     ;810
0012f8  7810              LDRB     r0,[r2,#0]            ;811
0012fa  1c40              ADDS     r0,r0,#1              ;811
0012fc  7010              STRB     r0,[r2,#0]            ;811
0012fe  2001              MOVS     r0,#1                 ;812
001300  e7b1              B        |L1.4710|
                  |L1.4866|
001302  2000              MOVS     r0,#0                 ;815
001304  e7af              B        |L1.4710|
;;;817    
                          ENDP

                  _Z8xdirLeftR5PointRtRhPS_ PROC ; xdirLeft(Point&, unsigned short&, unsigned char&, Point*)
;;;818    bool xdirLeft(Point &p, uint16_t &i, uint8_t &points, Point ps[])
001306  e92d41f0          PUSH     {r4-r8,lr}
;;;819    {
;;;820    	if (p.m_x>0 && g_lineGrid[i-1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-1]&LINE_NODE_FLAG_NULL))
00130a  4f4f              LDR      r7,|L1.5192|
00130c  7804              LDRB     r4,[r0,#0]
00130e  6d7d              LDR      r5,[r7,#0x54]
001310  2c00              CMP      r4,#0
001312  d020              BEQ      |L1.4950|
001314  880e              LDRH     r6,[r1,#0]
001316  1e76              SUBS     r6,r6,#1
001318  f8356016          LDRH     r6,[r5,r6,LSL #1]
00131c  f4166f40          TST      r6,#0xc00
001320  d019              BEQ      |L1.4950|
001322  0436              LSLS     r6,r6,#16
001324  d417              BMI      |L1.4950|
;;;821    	{
;;;822    		p.m_x--;
001326  1e64              SUBS     r4,r4,#1
001328  7004              STRB     r4,[r0,#0]
;;;823    		ps[points] = p;
00132a  7814              LDRB     r4,[r2,#0]
00132c  8800              LDRH     r0,[r0,#0]
00132e  eb030344          ADD      r3,r3,r4,LSL #1
001332  8018              STRH     r0,[r3,#0]
;;;824    		i+= -1;
001334  8808              LDRH     r0,[r1,#0]
001336  1e40              SUBS     r0,r0,#1
001338  b280              UXTH     r0,r0
00133a  8008              STRH     r0,[r1,#0]
;;;825    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
00133c  6d79              LDR      r1,[r7,#0x54]  ; g_lineGrid
00133e  f8313010          LDRH     r3,[r1,r0,LSL #1]
001342  f4434300          ORR      r3,r3,#0x8000
001346  f8213010          STRH     r3,[r1,r0,LSL #1]
;;;826    		points++;
00134a  7810              LDRB     r0,[r2,#0]
00134c  1c40              ADDS     r0,r0,#1
00134e  7010              STRB     r0,[r2,#0]
;;;827    		return true;
001350  2001              MOVS     r0,#1
                  |L1.4946|
;;;828    	}
;;;829    	else if (p.m_x>0 && p.m_y>0 && g_lineGrid[i-LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_NULL))
;;;830    	{
;;;831    		p.m_y--;
;;;832    		p.m_x--;
;;;833    		ps[points] = p;
;;;834    		i += -LINE_GRID_WIDTH-1;
;;;835    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;836    		points++;
;;;837    		return true;
;;;838    	}
;;;839    	else if (p.m_x>0 && p.m_y<LINE_GRID_HEIGHT-1 && g_lineGrid[i+LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i+LINE_GRID_WIDTH-1]&LINE_NODE_FLAG_NULL))
;;;840    	{
;;;841    		p.m_y++;
;;;842    		p.m_x--;
;;;843    		ps[points] = p;
;;;844    		i += LINE_GRID_WIDTH-1;
;;;845    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;846    		points++;
;;;847    		return true;
;;;848    	}
;;;849    	else
;;;850    		return false;
;;;851    }
001352  e8bd81f0          POP      {r4-r8,pc}
                  |L1.4950|
001356  b334              CBZ      r4,|L1.5030|
001358  7846              LDRB     r6,[r0,#1]            ;829
00135a  b326              CBZ      r6,|L1.5030|
00135c  f8b1c000          LDRH     r12,[r1,#0]           ;829
001360  f1ac0c50          SUB      r12,r12,#0x50         ;829
001364  f835c01c          LDRH     r12,[r5,r12,LSL #1]   ;829
001368  f41c6f40          TST      r12,#0xc00            ;829
00136c  d01b              BEQ      |L1.5030|
00136e  ea5f4c0c          LSLS     r12,r12,#16           ;829
001372  d418              BMI      |L1.5030|
001374  1e76              SUBS     r6,r6,#1              ;831
001376  7046              STRB     r6,[r0,#1]            ;831
001378  1e64              SUBS     r4,r4,#1              ;832
00137a  7004              STRB     r4,[r0,#0]            ;832
00137c  7814              LDRB     r4,[r2,#0]            ;833
00137e  8800              LDRH     r0,[r0,#0]            ;833
001380  eb030344          ADD      r3,r3,r4,LSL #1       ;833
001384  8018              STRH     r0,[r3,#0]            ;833
001386  8808              LDRH     r0,[r1,#0]            ;834
001388  3850              SUBS     r0,r0,#0x50           ;834
00138a  b280              UXTH     r0,r0                 ;834
00138c  8008              STRH     r0,[r1,#0]            ;834
00138e  6d79              LDR      r1,[r7,#0x54]         ;835  ; g_lineGrid
001390  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;835
001394  f4434300          ORR      r3,r3,#0x8000         ;835
001398  f8213010          STRH     r3,[r1,r0,LSL #1]     ;835
00139c  7810              LDRB     r0,[r2,#0]            ;836
00139e  1c40              ADDS     r0,r0,#1              ;836
0013a0  7010              STRB     r0,[r2,#0]            ;836
0013a2  2001              MOVS     r0,#1                 ;837
0013a4  e7d5              B        |L1.4946|
                  |L1.5030|
0013a6  b334              CBZ      r4,|L1.5110|
0013a8  7846              LDRB     r6,[r0,#1]            ;839
0013aa  2e33              CMP      r6,#0x33              ;839
0013ac  d223              BCS      |L1.5110|
0013ae  f8b1c000          LDRH     r12,[r1,#0]           ;839
0013b2  f10c0c4e          ADD      r12,r12,#0x4e         ;839
0013b6  f835501c          LDRH     r5,[r5,r12,LSL #1]    ;839
0013ba  f4156f40          TST      r5,#0xc00             ;839
0013be  d01a              BEQ      |L1.5110|
0013c0  042d              LSLS     r5,r5,#16             ;839
0013c2  d418              BMI      |L1.5110|
0013c4  1c76              ADDS     r6,r6,#1              ;841
0013c6  7046              STRB     r6,[r0,#1]            ;841
0013c8  1e64              SUBS     r4,r4,#1              ;842
0013ca  7004              STRB     r4,[r0,#0]            ;842
0013cc  7814              LDRB     r4,[r2,#0]            ;843
0013ce  8800              LDRH     r0,[r0,#0]            ;843
0013d0  eb030344          ADD      r3,r3,r4,LSL #1       ;843
0013d4  8018              STRH     r0,[r3,#0]            ;843
0013d6  8808              LDRH     r0,[r1,#0]            ;844
0013d8  304e              ADDS     r0,r0,#0x4e           ;844
0013da  b280              UXTH     r0,r0                 ;844
0013dc  8008              STRH     r0,[r1,#0]            ;844
0013de  6d79              LDR      r1,[r7,#0x54]         ;845  ; g_lineGrid
0013e0  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;845
0013e4  f4434300          ORR      r3,r3,#0x8000         ;845
0013e8  f8213010          STRH     r3,[r1,r0,LSL #1]     ;845
0013ec  7810              LDRB     r0,[r2,#0]            ;846
0013ee  1c40              ADDS     r0,r0,#1              ;846
0013f0  7010              STRB     r0,[r2,#0]            ;846
0013f2  2001              MOVS     r0,#1                 ;847
0013f4  e7ad              B        |L1.4946|
                  |L1.5110|
0013f6  2000              MOVS     r0,#0                 ;850
0013f8  e7ab              B        |L1.4946|
;;;852    
                          ENDP

                  _Z9xdirRightR5PointRtRhPS_ PROC ; xdirRight(Point&, unsigned short&, unsigned char&, Point*)
;;;853    bool xdirRight(Point &p, uint16_t &i, uint8_t &points, Point ps[])
0013fa  e92d41f0          PUSH     {r4-r8,lr}
;;;854    {
;;;855    	if (p.m_x<LINE_GRID_WIDTH-1 && g_lineGrid[i+1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i+1]&LINE_NODE_FLAG_NULL))
0013fe  4f12              LDR      r7,|L1.5192|
001400  7804              LDRB     r4,[r0,#0]
001402  6d7d              LDR      r5,[r7,#0x54]
001404  2c4e              CMP      r4,#0x4e
001406  d223              BCS      |L1.5200|
001408  880e              LDRH     r6,[r1,#0]
00140a  1c76              ADDS     r6,r6,#1
00140c  f8356016          LDRH     r6,[r5,r6,LSL #1]
001410  f4166f40          TST      r6,#0xc00
001414  d01c              BEQ      |L1.5200|
001416  0436              LSLS     r6,r6,#16
001418  d41a              BMI      |L1.5200|
;;;856    	{
;;;857    		p.m_x++;
00141a  1c64              ADDS     r4,r4,#1
00141c  7004              STRB     r4,[r0,#0]
;;;858    		ps[points] = p;
00141e  7814              LDRB     r4,[r2,#0]
001420  8800              LDRH     r0,[r0,#0]
001422  eb030344          ADD      r3,r3,r4,LSL #1
001426  8018              STRH     r0,[r3,#0]
;;;859    		i += 1;
001428  8808              LDRH     r0,[r1,#0]
00142a  1c40              ADDS     r0,r0,#1
00142c  b280              UXTH     r0,r0
00142e  8008              STRH     r0,[r1,#0]
;;;860    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
001430  6d79              LDR      r1,[r7,#0x54]  ; g_lineGrid
001432  f8313010          LDRH     r3,[r1,r0,LSL #1]
001436  f4434300          ORR      r3,r3,#0x8000
00143a  f8213010          STRH     r3,[r1,r0,LSL #1]
;;;861    		points++;
00143e  7810              LDRB     r0,[r2,#0]
001440  1c40              ADDS     r0,r0,#1
001442  7010              STRB     r0,[r2,#0]
;;;862    		return true;
001444  2001              MOVS     r0,#1
;;;863    	}
;;;864    	else if (p.m_x<LINE_GRID_WIDTH-1 && p.m_y>0 && g_lineGrid[i-LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i-LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_NULL))
;;;865    	{
;;;866    		p.m_y--;
;;;867    		p.m_x++;
;;;868    		ps[points] = p;
;;;869    		i += -LINE_GRID_WIDTH+1;
;;;870    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;871    		points++;
;;;872    		return true;
;;;873    	}
;;;874    	else if (p.m_x<LINE_GRID_WIDTH-1 && p.m_y<LINE_GRID_HEIGHT-1 && g_lineGrid[i+LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_1 && !(g_lineGrid[i+LINE_GRID_WIDTH+1]&LINE_NODE_FLAG_NULL))
;;;875    	{
;;;876    		p.m_y++;
;;;877    		p.m_x++;
;;;878    		ps[points] = p;
;;;879    		i += LINE_GRID_WIDTH+1;
;;;880    		g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
;;;881    		points++;
;;;882    		return true;
;;;883    	}
;;;884    	else
;;;885    		return false;
;;;886    }
001446  e784              B        |L1.4946|
                  |L1.5192|
                          DCD      ||.data||
                  |L1.5196|
                          DCD      ||.bss||+0xc
                  |L1.5200|
001450  2c4e              CMP      r4,#0x4e              ;864
001452  d226              BCS      |L1.5282|
001454  7846              LDRB     r6,[r0,#1]            ;864
001456  b326              CBZ      r6,|L1.5282|
001458  f8b1c000          LDRH     r12,[r1,#0]           ;864
00145c  f1ac0c4e          SUB      r12,r12,#0x4e         ;864
001460  f835c01c          LDRH     r12,[r5,r12,LSL #1]   ;864
001464  f41c6f40          TST      r12,#0xc00            ;864
001468  d01b              BEQ      |L1.5282|
00146a  ea5f4c0c          LSLS     r12,r12,#16           ;864
00146e  d418              BMI      |L1.5282|
001470  1e76              SUBS     r6,r6,#1              ;866
001472  7046              STRB     r6,[r0,#1]            ;866
001474  1c64              ADDS     r4,r4,#1              ;867
001476  7004              STRB     r4,[r0,#0]            ;867
001478  7814              LDRB     r4,[r2,#0]            ;868
00147a  8800              LDRH     r0,[r0,#0]            ;868
00147c  eb030344          ADD      r3,r3,r4,LSL #1       ;868
001480  8018              STRH     r0,[r3,#0]            ;868
001482  8808              LDRH     r0,[r1,#0]            ;869
001484  384e              SUBS     r0,r0,#0x4e           ;869
001486  b280              UXTH     r0,r0                 ;869
001488  8008              STRH     r0,[r1,#0]            ;869
00148a  6d79              LDR      r1,[r7,#0x54]         ;870  ; g_lineGrid
00148c  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;870
001490  f4434300          ORR      r3,r3,#0x8000         ;870
001494  f8213010          STRH     r3,[r1,r0,LSL #1]     ;870
001498  7810              LDRB     r0,[r2,#0]            ;871
00149a  1c40              ADDS     r0,r0,#1              ;871
00149c  7010              STRB     r0,[r2,#0]            ;871
00149e  2001              MOVS     r0,#1                 ;872
0014a0  e757              B        |L1.4946|
                  |L1.5282|
0014a2  2c4e              CMP      r4,#0x4e              ;874
0014a4  d226              BCS      |L1.5364|
0014a6  7846              LDRB     r6,[r0,#1]            ;874
0014a8  2e33              CMP      r6,#0x33              ;874
0014aa  d223              BCS      |L1.5364|
0014ac  f8b1c000          LDRH     r12,[r1,#0]           ;874
0014b0  f10c0c50          ADD      r12,r12,#0x50         ;874
0014b4  f835501c          LDRH     r5,[r5,r12,LSL #1]    ;874
0014b8  f4156f40          TST      r5,#0xc00             ;874
0014bc  d01a              BEQ      |L1.5364|
0014be  042d              LSLS     r5,r5,#16             ;874
0014c0  d418              BMI      |L1.5364|
0014c2  1c76              ADDS     r6,r6,#1              ;876
0014c4  7046              STRB     r6,[r0,#1]            ;876
0014c6  1c64              ADDS     r4,r4,#1              ;877
0014c8  7004              STRB     r4,[r0,#0]            ;877
0014ca  7814              LDRB     r4,[r2,#0]            ;878
0014cc  8800              LDRH     r0,[r0,#0]            ;878
0014ce  eb030344          ADD      r3,r3,r4,LSL #1       ;878
0014d2  8018              STRH     r0,[r3,#0]            ;878
0014d4  8808              LDRH     r0,[r1,#0]            ;879
0014d6  3050              ADDS     r0,r0,#0x50           ;879
0014d8  b280              UXTH     r0,r0                 ;879
0014da  8008              STRH     r0,[r1,#0]            ;879
0014dc  6d79              LDR      r1,[r7,#0x54]         ;880  ; g_lineGrid
0014de  f8313010          LDRH     r3,[r1,r0,LSL #1]     ;880
0014e2  f4434300          ORR      r3,r3,#0x8000         ;880
0014e6  f8213010          STRH     r3,[r1,r0,LSL #1]     ;880
0014ea  7810              LDRB     r0,[r2,#0]            ;881
0014ec  1c40              ADDS     r0,r0,#1              ;881
0014ee  7010              STRB     r0,[r2,#0]            ;881
0014f0  2001              MOVS     r0,#1                 ;882
0014f2  e72e              B        |L1.4946|
                  |L1.5364|
0014f4  2000              MOVS     r0,#0                 ;885
0014f6  e72c              B        |L1.4946|
;;;887    
                          ENDP

                  _Z19extractLineSegmentsRK5Point PROC ; extractLineSegments(const Point&)
;;;888    void extractLineSegments(const Point &p)
0014f8  e92d43f0          PUSH     {r4-r9,lr}
;;;889    {
0014fc  b095              SUB      sp,sp,#0x54
;;;890    	bool ydir = true;
0014fe  2601              MOVS     r6,#1
;;;891    	bool rdir = true;
001500  2701              MOVS     r7,#1
;;;892    	uint16_t i = LINE_GRID_INDEX_P(p);
001502  7841              LDRB     r1,[r0,#1]
001504  ebc11201          RSB      r2,r1,r1,LSL #4
001508  eb021181          ADD      r1,r2,r1,LSL #6
00150c  7802              LDRB     r2,[r0,#0]
00150e  4411              ADD      r1,r1,r2
001510  9114              STR      r1,[sp,#0x50]
;;;893    	Point ps[LINE_MAX_SEGMENT_POINTS];
;;;894    	uint8_t points = 0;
001512  f04f0900          MOV      r9,#0
001516  f8cd900c          STR      r9,[sp,#0xc]
;;;895    	LineSegIndex prevSeg = -1, thisSeg = -1;
00151a  1eb4              SUBS     r4,r6,#2
;;;896    	uint32_t angle;
;;;897    	Point p2 = p; // current point	
00151c  8802              LDRH     r2,[r0,#0]
00151e  9202              STR      r2,[sp,#8]
;;;898    	Point p0 = p; // first point of line
001520  8800              LDRH     r0,[r0,#0]
001522  9001              STR      r0,[sp,#4]
;;;899    	
;;;900    	// nullify current point
;;;901    	ps[0] = p2;
001524  f8ad2010          STRH     r2,[sp,#0x10]
;;;902    	g_lineGrid[i] |= LINE_NODE_FLAG_NULL;
001528  f8df858c          LDR      r8,|L1.6840|
00152c  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
001530  f8302011          LDRH     r2,[r0,r1,LSL #1]
001534  f4424200          ORR      r2,r2,#0x8000
001538  f8202011          STRH     r2,[r0,r1,LSL #1]
;;;903    	points++;
00153c  f89d000c          LDRB     r0,[sp,#0xc]
001540  1c40              ADDS     r0,r0,#1
001542  9003              STR      r0,[sp,#0xc]
                  |L1.5444|
;;;904    		
;;;905    	while(1)
;;;906    	{
;;;907    		if (ydir)
001544  b1de              CBZ      r6,|L1.5502|
;;;908    		{
;;;909    			if (!ydirUp(p2, i, points, ps))
001546  ab04              ADD      r3,sp,#0x10
001548  aa03              ADD      r2,sp,#0xc
00154a  a914              ADD      r1,sp,#0x50
00154c  a802              ADD      r0,sp,#8
00154e  f7fffffe          BL       _Z6ydirUpR5PointRtRhPS_ ; ydirUp(Point&, unsigned short&, unsigned char&, Point*)
001552  bb28              CBNZ     r0,|L1.5536|
;;;910    			{
;;;911    				if (!xdirLeft(p2, i, points, ps))
001554  ab04              ADD      r3,sp,#0x10
001556  aa03              ADD      r2,sp,#0xc
001558  a914              ADD      r1,sp,#0x50
00155a  a802              ADD      r0,sp,#8
00155c  f7fffffe          BL       _Z8xdirLeftR5PointRtRhPS_ ; xdirLeft(Point&, unsigned short&, unsigned char&, Point*)
001560  b110              CBZ      r0,|L1.5480|
;;;912    				{
;;;913    					if (!xdirRight(p2, i, points, ps))
;;;914    						goto end;
;;;915    					else
;;;916    					{
;;;917    						ydir = false;
;;;918    						rdir = true;
;;;919    					}
;;;920    				}
;;;921    				else
;;;922    				{
;;;923    					ydir = false;
001562  2600              MOVS     r6,#0
;;;924    					rdir = false;
001564  2700              MOVS     r7,#0
001566  e02b              B        |L1.5568|
                  |L1.5480|
001568  ab04              ADD      r3,sp,#0x10           ;913
00156a  aa03              ADD      r2,sp,#0xc            ;913
00156c  a914              ADD      r1,sp,#0x50           ;913
00156e  a802              ADD      r0,sp,#8              ;913
001570  f7fffffe          BL       _Z9xdirRightR5PointRtRhPS_ ; xdirRight(Point&, unsigned short&, unsigned char&, Point*)
001574  2800              CMP      r0,#0                 ;913
001576  d07e              BEQ      |L1.5750|
001578  2600              MOVS     r6,#0                 ;917
00157a  2701              MOVS     r7,#1                 ;918
00157c  e020              B        |L1.5568|
                  |L1.5502|
;;;925    				}				
;;;926    			}
;;;927    		}
;;;928    		else if (!ydir && rdir)
00157e  b187              CBZ      r7,|L1.5538|
;;;929    		{
;;;930    			if (!xdirRight(p2, i, points, ps))
001580  ab04              ADD      r3,sp,#0x10
001582  aa03              ADD      r2,sp,#0xc
001584  a914              ADD      r1,sp,#0x50
001586  a802              ADD      r0,sp,#8
001588  f7fffffe          BL       _Z9xdirRightR5PointRtRhPS_ ; xdirRight(Point&, unsigned short&, unsigned char&, Point*)
00158c  b940              CBNZ     r0,|L1.5536|
;;;931    			{
;;;932    				if (!ydirUp(p2, i, points, ps))
00158e  ab04              ADD      r3,sp,#0x10
001590  aa03              ADD      r2,sp,#0xc
001592  a914              ADD      r1,sp,#0x50
001594  a802              ADD      r0,sp,#8
001596  f7fffffe          BL       _Z6ydirUpR5PointRtRhPS_ ; ydirUp(Point&, unsigned short&, unsigned char&, Point*)
00159a  2800              CMP      r0,#0
00159c  d06b              BEQ      |L1.5750|
;;;933    					goto end;
;;;934    				else
;;;935    					ydir = true;
00159e  2601              MOVS     r6,#1
                  |L1.5536|
0015a0  e00e              B        |L1.5568|
                  |L1.5538|
;;;936    			}
;;;937    		}
;;;938    		else if (!ydir && !rdir)
;;;939    		{
;;;940    			if (!xdirLeft(p2, i, points, ps))
0015a2  ab04              ADD      r3,sp,#0x10
0015a4  aa03              ADD      r2,sp,#0xc
0015a6  a914              ADD      r1,sp,#0x50
0015a8  a802              ADD      r0,sp,#8
0015aa  f7fffffe          BL       _Z8xdirLeftR5PointRtRhPS_ ; xdirLeft(Point&, unsigned short&, unsigned char&, Point*)
0015ae  b938              CBNZ     r0,|L1.5568|
;;;941    			{
;;;942    				if (!ydirUp(p2, i, points, ps))
0015b0  ab04              ADD      r3,sp,#0x10
0015b2  aa03              ADD      r2,sp,#0xc
0015b4  a914              ADD      r1,sp,#0x50
0015b6  a802              ADD      r0,sp,#8
0015b8  f7fffffe          BL       _Z6ydirUpR5PointRtRhPS_ ; ydirUp(Point&, unsigned short&, unsigned char&, Point*)
0015bc  b3f0              CBZ      r0,|L1.5692|
;;;943    					goto end;
;;;944    				else
;;;945    					ydir = true;
0015be  2601              MOVS     r6,#1
                  |L1.5568|
;;;946    			}
;;;947    		}
;;;948    		
;;;949    		if (points>=g_pointsPerSeg)
0015c0  f89d100c          LDRB     r1,[sp,#0xc]
0015c4  f8980003          LDRB     r0,[r8,#3]  ; g_pointsPerSeg
0015c8  4281              CMP      r1,r0
0015ca  d3bb              BCC      |L1.5444|
;;;950    		{
;;;951    			thisSeg = finishGridNode(ps, points, prevSeg, p0);
0015cc  ab01              ADD      r3,sp,#4
0015ce  4622              MOV      r2,r4
0015d0  a804              ADD      r0,sp,#0x10
0015d2  f7fffffe          BL       _Z14finishGridNodeP5PointhsRS_ ; finishGridNode(Point*, unsigned char, short, Point&)
0015d6  4605              MOV      r5,r0
;;;952    			if (prevSeg>=0)
0015d8  2c00              CMP      r4,#0
0015da  db48              BLT      |L1.5742|
;;;953    			{
;;;954    				if (thisSeg-prevSeg>1) // deal with bisected segment 
0015dc  1b28              SUBS     r0,r5,r4
0015de  2801              CMP      r0,#1
0015e0  dd12              BLE      |L1.5640|
;;;955    				{
;;;956    					g_lineSegs[prevSeg].m_ls1 = thisSeg-1; // link up prev segment with this one
0015e2  f8d8205c          LDR      r2,[r8,#0x5c]  ; g_lineSegs
0015e6  eb040084          ADD      r0,r4,r4,LSL #2
0015ea  eb020040          ADD      r0,r2,r0,LSL #1
0015ee  1e69              SUBS     r1,r5,#1
0015f0  80c1              STRH     r1,[r0,#6]
;;;957    					// look at angle between segments, add if it exceeds a threshold 
;;;958    					angle = tanDiffAbs1000(g_lineSegs[prevSeg].m_p0, g_lineSegs[prevSeg].m_p1, g_lineSegs[thisSeg-1].m_p0, g_lineSegs[thisSeg-1].m_p1);
0015f2  eb010181          ADD      r1,r1,r1,LSL #2
0015f6  eb020241          ADD      r2,r2,r1,LSL #1
0015fa  1c93              ADDS     r3,r2,#2
0015fc  1c81              ADDS     r1,r0,#2
0015fe  f8cd9000          STR      r9,[sp,#0]
001602  f7fffffe          BL       _Z14tanDiffAbs1000RK5PointS1_S1_S1_b ; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
001606  e010              B        |L1.5674|
                  |L1.5640|
;;;959    				}
;;;960    				else
;;;961    				{
;;;962    					g_lineSegs[prevSeg].m_ls1 = thisSeg; // link up prev segment with this one
001608  f8d8105c          LDR      r1,[r8,#0x5c]  ; g_lineSegs
00160c  eb040084          ADD      r0,r4,r4,LSL #2
001610  eb010040          ADD      r0,r1,r0,LSL #1
001614  80c5              STRH     r5,[r0,#6]
;;;963    					// look at angle between segments, add if it exceeds a threshold 
;;;964    					angle = tanDiffAbs1000(g_lineSegs[prevSeg].m_p0, g_lineSegs[prevSeg].m_p1, g_lineSegs[thisSeg].m_p0, g_lineSegs[thisSeg].m_p1);
001616  eb050285          ADD      r2,r5,r5,LSL #2
00161a  eb010242          ADD      r2,r1,r2,LSL #1
00161e  1c93              ADDS     r3,r2,#2
001620  1c81              ADDS     r1,r0,#2
001622  f8cd9000          STR      r9,[sp,#0]
001626  f7fffffe          BL       _Z14tanDiffAbs1000RK5PointS1_S1_S1_b ; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
                  |L1.5674|
;;;965    				}
;;;966    				if (angle>g_maxSegTanAngle)
00162a  f8d8106c          LDR      r1,[r8,#0x6c]  ; g_maxSegTanAngle
00162e  4288              CMP      r0,r1
001630  d91d              BLS      |L1.5742|
;;;967    				{
;;;968    					// split the line here
;;;969    					addline(p0, g_lineSegs[prevSeg].m_p1);
001632  eb040084          ADD      r0,r4,r4,LSL #2
001636  f8d8105c          LDR      r1,[r8,#0x5c]  ; g_lineSegs
00163a  e000              B        |L1.5694|
                  |L1.5692|
00163c  e01b              B        |L1.5750|
                  |L1.5694|
00163e  eb010140          ADD      r1,r1,r0,LSL #1
001642  1c89              ADDS     r1,r1,#2
001644  a801              ADD      r0,sp,#4
001646  f7fffffe          BL       _Z7addlineRK5PointS1_ ; addline(const Point&, const Point&)
;;;970    					if (g_lineIndex<LINE_MAX_LINES)
00164a  f8980004          LDRB     r0,[r8,#4]  ; g_lineIndex
00164e  2880              CMP      r0,#0x80
001650  d20b              BCS      |L1.5738|
;;;971    					{
;;;972    						g_lineSegs[thisSeg].m_line = g_lineIndex; // set line seg line index to new index
001652  f8d8205c          LDR      r2,[r8,#0x5c]  ; g_lineSegs
001656  eb050185          ADD      r1,r5,r5,LSL #2
00165a  eb020141          ADD      r1,r2,r1,LSL #1
00165e  7208              STRB     r0,[r1,#8]
;;;973    						cleanGrid(ps, points); // set nodes to new line index
001660  f89d100c          LDRB     r1,[sp,#0xc]
001664  a804              ADD      r0,sp,#0x10
001666  f7fffffe          BL       _Z9cleanGridP5Pointh ; cleanGrid(Point*, unsigned char)
                  |L1.5738|
;;;974    					}
;;;975    					p0 = ps[0];
00166a  9804              LDR      r0,[sp,#0x10]
00166c  9001              STR      r0,[sp,#4]
                  |L1.5742|
;;;976    				}
;;;977    			}
;;;978    			prevSeg = thisSeg;
00166e  462c              MOV      r4,r5
;;;979    			points = 0;
001670  f8cd900c          STR      r9,[sp,#0xc]
001674  e766              B        |L1.5444|
                  |L1.5750|
;;;980    		}
;;;981    	}
;;;982    
;;;983    	end:
;;;984    	// should we use the current segment?
;;;985    	// we should if there were previous segments or if the current segment is bigger than 2
;;;986    	if (prevSeg>=0 || points>2)
001676  2c00              CMP      r4,#0
001678  da03              BGE      |L1.5762|
00167a  f89d000c          LDRB     r0,[sp,#0xc]
00167e  2802              CMP      r0,#2
001680  d910              BLS      |L1.5796|
                  |L1.5762|
;;;987    	{		
;;;988    		thisSeg = finishGridNode(ps, points, prevSeg, p0);	
001682  ab01              ADD      r3,sp,#4
001684  4622              MOV      r2,r4
001686  f89d100c          LDRB     r1,[sp,#0xc]
00168a  a804              ADD      r0,sp,#0x10
00168c  f7fffffe          BL       _Z14finishGridNodeP5PointhsRS_ ; finishGridNode(Point*, unsigned char, short, Point&)
;;;989    		if (prevSeg>=0)
001690  2c00              CMP      r4,#0
001692  db06              BLT      |L1.5794|
;;;990    			g_lineSegs[prevSeg].m_ls1 = thisSeg;
001694  f8d8205c          LDR      r2,[r8,#0x5c]  ; g_lineSegs
001698  eb040184          ADD      r1,r4,r4,LSL #2
00169c  eb020141          ADD      r1,r2,r1,LSL #1
0016a0  80c8              STRH     r0,[r1,#6]
                  |L1.5794|
;;;991    		prevSeg = thisSeg;
0016a2  4604              MOV      r4,r0
                  |L1.5796|
;;;992    	}
;;;993    	
;;;994    	// add line
;;;995    	if (prevSeg>=0 && g_lineIndex<LINE_MAX_LINES)
0016a4  2c00              CMP      r4,#0
0016a6  db0d              BLT      |L1.5828|
0016a8  f8980004          LDRB     r0,[r8,#4]  ; g_lineIndex
0016ac  2880              CMP      r0,#0x80
0016ae  d209              BCS      |L1.5828|
;;;996    	{
;;;997    		if (addline(p0, g_lineSegs[prevSeg].m_p1)<0)
0016b0  f8d8105c          LDR      r1,[r8,#0x5c]  ; g_lineSegs
0016b4  eb040084          ADD      r0,r4,r4,LSL #2
0016b8  eb010140          ADD      r1,r1,r0,LSL #1
0016bc  1c89              ADDS     r1,r1,#2
0016be  a801              ADD      r0,sp,#4
0016c0  f7fffffe          BL       _Z7addlineRK5PointS1_ ; addline(const Point&, const Point&)
                  |L1.5828|
;;;998    			return;
;;;999    	}		
;;;1000   }
0016c4  b015              ADD      sp,sp,#0x54
0016c6  e5ce              B        |L1.4710|
;;;1001   
                          ENDP

                  _Z19extractLineSegmentsv PROC ; extractLineSegments()
;;;1002   void extractLineSegments()
0016c8  b5f8              PUSH     {r3-r7,lr}
;;;1003   {
;;;1004   	int8_t i, j;
;;;1005   	uint16_t k;
;;;1006   	LineGridNode node;
;;;1007   	
;;;1008   	for (i=LINE_GRID_HEIGHT-1; i>=0; i--) // bottom-up
0016ca  2533              MOVS     r5,#0x33
;;;1009   	{
;;;1010   		k = i*LINE_GRID_WIDTH;
;;;1011   		for (j=0; j<LINE_GRID_WIDTH; j++, k++)
;;;1012   		{
;;;1013   			node = g_lineGrid[k];
0016cc  4ffa              LDR      r7,|L1.6840|
                  |L1.5838|
0016ce  ebc51005          RSB      r0,r5,r5,LSL #4       ;1010
0016d2  eb001085          ADD      r0,r0,r5,LSL #6       ;1010
0016d6  b286              UXTH     r6,r0                 ;1010
0016d8  2400              MOVS     r4,#0                 ;1011
                  |L1.5850|
0016da  6d78              LDR      r0,[r7,#0x54]  ; g_lineGrid
0016dc  f8300016          LDRH     r0,[r0,r6,LSL #1]
;;;1014   			if (node&LINE_NODE_FLAG_1 && !(node&LINE_NODE_FLAG_NULL))
0016e0  f4106f40          TST      r0,#0xc00
0016e4  d008              BEQ      |L1.5880|
0016e6  0400              LSLS     r0,r0,#16
0016e8  d406              BMI      |L1.5880|
;;;1015   				// we could do some analysis here to find the end of the continuous train of pixels, then asses which direction 
;;;1016   				// the line is headed, upper-right, upper-left if it's horizontal
;;;1017   				extractLineSegments(Point(j, i)); 
0016ea  4668              MOV      r0,sp
0016ec  f88d4000          STRB     r4,[sp,#0]
0016f0  f88d5001          STRB     r5,[sp,#1]
0016f4  f7fffffe          BL       _Z19extractLineSegmentsRK5Point ; extractLineSegments(const Point&)
                  |L1.5880|
0016f8  1c64              ADDS     r4,r4,#1              ;1011
0016fa  b264              SXTB     r4,r4                 ;1011
0016fc  1c76              ADDS     r6,r6,#1              ;1011
0016fe  b2b6              UXTH     r6,r6                 ;1011
001700  2c4f              CMP      r4,#0x4f              ;1011
001702  dbea              BLT      |L1.5850|
001704  1e6d              SUBS     r5,r5,#1              ;1008
001706  b26d              SXTB     r5,r5                 ;1008
001708  2d00              CMP      r5,#0                 ;1008
00170a  dae0              BGE      |L1.5838|
;;;1018   		}
;;;1019   	}
;;;1020   }
00170c  bdf8              POP      {r3-r7,pc}
;;;1021   
                          ENDP

                  _Z8addNadirRK5PointS1_ PROC ; addNadir(const Point&, const Point&)
;;;1022   
;;;1023   void addNadir(const Point &p0, const Point &p1)
00170e  b5f0              PUSH     {r4-r7,lr}
;;;1024   {
001710  b089              SUB      sp,sp,#0x24
001712  4606              MOV      r6,r0
001714  460f              MOV      r7,r1
001716  2500              MOVS     r5,#0
001718  f88d501e          STRB     r5,[sp,#0x1e]
00171c  f8ad5020          STRH     r5,[sp,#0x20]
;;;1025   	uint16_t dist;
;;;1026   	SimpleListNode<Nadir> *i;
;;;1027   	Nadir n;
;;;1028   	uint8_t i0, i1, is;
;;;1029   	Point pp0, pp1;
;;;1030   	
;;;1031   	// calc distance between points
;;;1032   	dist = p0.dist2(p1);
001720  4639              MOV      r1,r7
001722  4630              MOV      r0,r6
001724  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
001728  4684              MOV      r12,r0
;;;1033   	
;;;1034   	// find lines
;;;1035   	i0 = LINE_GRID_LINE_P(p0);
00172a  7870              LDRB     r0,[r6,#1]
00172c  ebc01100          RSB      r1,r0,r0,LSL #4
001730  eb011080          ADD      r0,r1,r0,LSL #6
001734  7831              LDRB     r1,[r6,#0]
001736  4401              ADD      r1,r1,r0
001738  48df              LDR      r0,|L1.6840|
00173a  6d44              LDR      r4,[r0,#0x54]  ; g_lineGrid
00173c  f8142011          LDRB     r2,[r4,r1,LSL #1]
;;;1036   	i1 = LINE_GRID_LINE_P(p1);
001740  7878              LDRB     r0,[r7,#1]
001742  ebc01100          RSB      r1,r0,r0,LSL #4
001746  eb011080          ADD      r0,r1,r0,LSL #6
00174a  7839              LDRB     r1,[r7,#0]
00174c  4408              ADD      r0,r0,r1
00174e  f8143010          LDRB     r3,[r4,r0,LSL #1]
;;;1037   	
;;;1038   	if (i0==i1)
001752  429a              CMP      r2,r3
001754  d039              BEQ      |L1.6090|
;;;1039   		return;
;;;1040   	if (i0<i1)
001756  d204              BCS      |L1.5986|
;;;1041   	{
;;;1042   		pp0 = p0;
001758  8830              LDRH     r0,[r6,#0]
00175a  9002              STR      r0,[sp,#8]
;;;1043   		pp1 = p1;
00175c  8838              LDRH     r0,[r7,#0]
00175e  9001              STR      r0,[sp,#4]
001760  e006              B        |L1.6000|
                  |L1.5986|
;;;1044   	}
;;;1045   	else // swap
;;;1046   	{
;;;1047   		pp0 = p1;
001762  8838              LDRH     r0,[r7,#0]
001764  9002              STR      r0,[sp,#8]
;;;1048   		pp1 = p0;
001766  8830              LDRH     r0,[r6,#0]
001768  9001              STR      r0,[sp,#4]
;;;1049   		is = i0;
00176a  4610              MOV      r0,r2
;;;1050   		i0 = i1;
00176c  461a              MOV      r2,r3
;;;1051   		i1 = is;
00176e  4603              MOV      r3,r0
                  |L1.6000|
;;;1052   	}
;;;1053   	
;;;1054   	// search nadir list for this pair, if it exists, and it's closer, replace it.
;;;1055   	for (i=g_nadirsList.m_first; i!=NULL; i=i->m_next)
001770  48d2              LDR      r0,|L1.6844|
001772  6800              LDR      r0,[r0,#0]  ; g_nadirsList
001774  e02c              B        |L1.6096|
                  |L1.6006|
;;;1056   	{
;;;1057   		if (i0==LINE_GRID_LINE_P(i->m_object.m_points[0]) && i1==LINE_GRID_LINE_P(i->m_object.m_points[1]))
001776  7841              LDRB     r1,[r0,#1]
001778  ebc11601          RSB      r6,r1,r1,LSL #4
00177c  eb061181          ADD      r1,r6,r1,LSL #6
001780  7806              LDRB     r6,[r0,#0]
001782  4431              ADD      r1,r1,r6
001784  f8341011          LDRH     r1,[r4,r1,LSL #1]
001788  f3c10109          UBFX     r1,r1,#0,#10
00178c  4291              CMP      r1,r2
00178e  d11e              BNE      |L1.6094|
001790  78c1              LDRB     r1,[r0,#3]
001792  ebc11601          RSB      r6,r1,r1,LSL #4
001796  eb061181          ADD      r1,r6,r1,LSL #6
00179a  7886              LDRB     r6,[r0,#2]
00179c  4431              ADD      r1,r1,r6
00179e  f8341011          LDRH     r1,[r4,r1,LSL #1]
0017a2  f3c10109          UBFX     r1,r1,#0,#10
0017a6  4299              CMP      r1,r3
0017a8  d111              BNE      |L1.6094|
;;;1058   		{
;;;1059   			if (dist < i->m_object.m_dist)
0017aa  8a81              LDRH     r1,[r0,#0x14]
0017ac  4561              CMP      r1,r12
0017ae  d90c              BLS      |L1.6090|
;;;1060   			{
;;;1061   				i->m_object.m_dist = dist;
0017b0  f8a0c014          STRH     r12,[r0,#0x14]
;;;1062   				i->m_object.m_points[0] = pp0;
0017b4  f8bd1008          LDRH     r1,[sp,#8]
0017b8  8001              STRH     r1,[r0,#0]
;;;1063   				i->m_object.m_points[1] = pp1;
0017ba  f8bd2004          LDRH     r2,[sp,#4]
0017be  8042              STRH     r2,[r0,#2]
;;;1064   				i->m_object.m_pavg = pp0;
0017c0  8201              STRH     r1,[r0,#0x10]
;;;1065   				i->m_object.m_pavg.avg(pp1);
0017c2  a901              ADD      r1,sp,#4
0017c4  3010              ADDS     r0,r0,#0x10
0017c6  f7fffffe          BL       _ZN5Point3avgERKS_ ; Point::avg(const Point&)
                  |L1.6090|
;;;1066   			}
;;;1067   			return;
;;;1068   		}
;;;1069   	}
;;;1070   			
;;;1071   	// if it isn't in the list, add it.
;;;1072   	n.m_points[0] = pp0;
;;;1073   	n.m_points[1] = pp1;
;;;1074   	n.m_n = 2;
;;;1075   	n.m_dist = dist;
;;;1076   	n.m_pavg = pp0;
;;;1077   	n.m_pavg.avg(pp1);
;;;1078   	g_nadirsList.add(n);
;;;1079   }
0017ca  b009              ADD      sp,sp,#0x24
0017cc  bdf0              POP      {r4-r7,pc}
                  |L1.6094|
0017ce  6980              LDR      r0,[r0,#0x18]         ;1055
                  |L1.6096|
0017d0  2800              CMP      r0,#0                 ;1055
0017d2  d1d0              BNE      |L1.6006|
0017d4  f8bd0008          LDRH     r0,[sp,#8]            ;1072
0017d8  f8ad000c          STRH     r0,[sp,#0xc]          ;1072
0017dc  f8bd1004          LDRH     r1,[sp,#4]            ;1073
0017e0  f8ad100e          STRH     r1,[sp,#0xe]          ;1073
0017e4  2102              MOVS     r1,#2                 ;1074
0017e6  f88d101e          STRB     r1,[sp,#0x1e]         ;1074
0017ea  f8adc020          STRH     r12,[sp,#0x20]        ;1075
0017ee  f8ad001c          STRH     r0,[sp,#0x1c]         ;1076
0017f2  a901              ADD      r1,sp,#4              ;1077
0017f4  a807              ADD      r0,sp,#0x1c           ;1077
0017f6  f7fffffe          BL       _ZN5Point3avgERKS_ ; Point::avg(const Point&)
0017fa  4cb0              LDR      r4,|L1.6844|
0017fc  af03              ADD      r7,sp,#0xc            ;1078
0017fe  49b0              LDR      r1,|L1.6848|
001800  201c              MOVS     r0,#0x1c              ;1078
001802  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
001806  b110              CBZ      r0,|L1.6158|
001808  7485              STRB     r5,[r0,#0x12]         ;1078
00180a  8285              STRH     r5,[r0,#0x14]         ;1078
00180c  6185              STR      r5,[r0,#0x18]         ;1078
                  |L1.6158|
00180e  4606              MOV      r6,r0                 ;1078
001810  2e00              CMP      r6,#0                 ;1078
001812  d0da              BEQ      |L1.6090|
001814  2216              MOVS     r2,#0x16              ;1078
001816  4639              MOV      r1,r7                 ;1078
001818  4630              MOV      r0,r6                 ;1078
00181a  f7fffffe          BL       __aeabi_memcpy
00181e  8920              LDRH     r0,[r4,#8]            ;1078
001820  1c40              ADDS     r0,r0,#1              ;1078
001822  8120              STRH     r0,[r4,#8]            ;1078
001824  6820              LDR      r0,[r4,#0]            ;1078
001826  b118              CBZ      r0,|L1.6192|
001828  6860              LDR      r0,[r4,#4]            ;1078
00182a  6186              STR      r6,[r0,#0x18]         ;1078
                  |L1.6188|
00182c  6066              STR      r6,[r4,#4]            ;1078
00182e  e7cc              B        |L1.6090|
                  |L1.6192|
001830  6026              STR      r6,[r4,#0]
001832  e7fb              B        |L1.6188|
;;;1080   
                          ENDP

                  _Z6searchRK5Pointh PROC ; search(const Point&, unsigned char)
;;;1081   void search(const Point &p, uint8_t radius)
001834  e92d4ff8          PUSH     {r3-r11,lr}
;;;1082   {
001838  4604              MOV      r4,r0
00183a  4689              MOV      r9,r1
;;;1083   	int8_t i, r;
;;;1084   	uint16_t j, k;
;;;1085   	uint8_t i0, i1;
;;;1086   	
;;;1087   	j = LINE_GRID_INDEX(p.m_x, p.m_y);
00183c  7860              LDRB     r0,[r4,#1]
00183e  7822              LDRB     r2,[r4,#0]
001840  ebc01100          RSB      r1,r0,r0,LSL #4
001844  eb011180          ADD      r1,r1,r0,LSL #6
001848  188f              ADDS     r7,r1,r2
;;;1088   	i0 = g_lineGrid[j]&LINE_NODE_LINE_MASK;
00184a  f8df826c          LDR      r8,|L1.6840|
00184e  f8d81054          LDR      r1,[r8,#0x54]  ; g_lineGrid
001852  f8116017          LDRB     r6,[r1,r7,LSL #1]
;;;1089   	
;;;1090   	// search up
;;;1091   	r = p.m_y - radius;
001856  eba00109          SUB      r1,r0,r9
00185a  fa4ffb81          SXTB     r11,r1
;;;1092   	if (r<0) 
00185e  f1bb0f00          CMP      r11,#0
001862  da01              BGE      |L1.6248|
;;;1093   		r = 0;
001864  f04f0b00          MOV      r11,#0
                  |L1.6248|
;;;1094   	for (i=p.m_y-1, k=j-LINE_GRID_WIDTH; i>=r; i--, k-=LINE_GRID_WIDTH)
001868  1e40              SUBS     r0,r0,#1
00186a  b245              SXTB     r5,r0
00186c  f1a7004f          SUB      r0,r7,#0x4f
001870  fa1ffa80          UXTH     r10,r0
001874  e015              B        |L1.6306|
                  |L1.6262|
;;;1095   	{
;;;1096   		i1 = g_lineGrid[k]&LINE_NODE_LINE_MASK;
001876  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
00187a  f810001a          LDRB     r0,[r0,r10,LSL #1]
;;;1097   		if (i1==0 || i0==i1)
00187e  b150              CBZ      r0,|L1.6294|
001880  4286              CMP      r6,r0
001882  d008              BEQ      |L1.6294|
;;;1098   			continue;
;;;1099   		addNadir(p, Point(p.m_x, i));
001884  7820              LDRB     r0,[r4,#0]
001886  4669              MOV      r1,sp
001888  f88d0000          STRB     r0,[sp,#0]
00188c  f88d5001          STRB     r5,[sp,#1]
001890  4620              MOV      r0,r4
001892  f7fffffe          BL       _Z8addNadirRK5PointS1_ ; addNadir(const Point&, const Point&)
                  |L1.6294|
001896  1e6d              SUBS     r5,r5,#1              ;1094
001898  b26d              SXTB     r5,r5                 ;1094
00189a  f1aa0a4f          SUB      r10,r10,#0x4f         ;1094
00189e  fa1ffa8a          UXTH     r10,r10               ;1094
                  |L1.6306|
0018a2  455d              CMP      r5,r11                ;1094
0018a4  dae7              BGE      |L1.6262|
;;;1100   	}
;;;1101   	// search down
;;;1102   	r = p.m_y + radius;
0018a6  7860              LDRB     r0,[r4,#1]
0018a8  eb000109          ADD      r1,r0,r9
0018ac  fa4ffb81          SXTB     r11,r1
;;;1103   	if (r>LINE_GRID_HEIGHT) 
0018b0  f1bb0f34          CMP      r11,#0x34
0018b4  dd01              BLE      |L1.6330|
;;;1104   		r = LINE_GRID_HEIGHT;
0018b6  f04f0b34          MOV      r11,#0x34
                  |L1.6330|
;;;1105   	for (i=p.m_y+1, k=j+LINE_GRID_WIDTH; i<r; i++, k+=LINE_GRID_WIDTH)
0018ba  1c40              ADDS     r0,r0,#1
0018bc  b245              SXTB     r5,r0
0018be  f107004f          ADD      r0,r7,#0x4f
0018c2  fa1ffa80          UXTH     r10,r0
0018c6  e015              B        |L1.6388|
                  |L1.6344|
;;;1106   	{
;;;1107   		i1 = g_lineGrid[k]&LINE_NODE_LINE_MASK;
0018c8  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
0018cc  f810001a          LDRB     r0,[r0,r10,LSL #1]
;;;1108   		if (i1==0 || i0==i1)
0018d0  b150              CBZ      r0,|L1.6376|
0018d2  4286              CMP      r6,r0
0018d4  d008              BEQ      |L1.6376|
;;;1109   			continue;
;;;1110   		addNadir(p, Point(p.m_x, i));
0018d6  7820              LDRB     r0,[r4,#0]
0018d8  4669              MOV      r1,sp
0018da  f88d0000          STRB     r0,[sp,#0]
0018de  f88d5001          STRB     r5,[sp,#1]
0018e2  4620              MOV      r0,r4
0018e4  f7fffffe          BL       _Z8addNadirRK5PointS1_ ; addNadir(const Point&, const Point&)
                  |L1.6376|
0018e8  1c6d              ADDS     r5,r5,#1              ;1105
0018ea  b26d              SXTB     r5,r5                 ;1105
0018ec  f10a0a4f          ADD      r10,r10,#0x4f         ;1105
0018f0  fa1ffa8a          UXTH     r10,r10               ;1105
                  |L1.6388|
0018f4  455d              CMP      r5,r11                ;1105
0018f6  dbe7              BLT      |L1.6344|
;;;1111   	}
;;;1112   	
;;;1113   	// search left
;;;1114   	r = p.m_x - radius;
0018f8  7820              LDRB     r0,[r4,#0]
0018fa  eba00109          SUB      r1,r0,r9
0018fe  fa4ffb81          SXTB     r11,r1
;;;1115   	if (r<0)
001902  f1bb0f00          CMP      r11,#0
001906  da01              BGE      |L1.6412|
;;;1116   		r = 0;
001908  f04f0b00          MOV      r11,#0
                  |L1.6412|
;;;1117   	for (i=p.m_x-1, k=j-1; i>=r; i--, k--)
00190c  1e40              SUBS     r0,r0,#1
00190e  b245              SXTB     r5,r0
001910  1e78              SUBS     r0,r7,#1
001912  fa1ffa80          UXTH     r10,r0
001916  e015              B        |L1.6468|
                  |L1.6424|
;;;1118   	{
;;;1119   		i1 = g_lineGrid[k]&LINE_NODE_LINE_MASK;
001918  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
00191c  f810001a          LDRB     r0,[r0,r10,LSL #1]
;;;1120   		if (i1==0 || i0==i1)
001920  b150              CBZ      r0,|L1.6456|
001922  4286              CMP      r6,r0
001924  d008              BEQ      |L1.6456|
;;;1121   			continue;
;;;1122   		addNadir(p, Point(i, p.m_y));
001926  7860              LDRB     r0,[r4,#1]
001928  4669              MOV      r1,sp
00192a  f88d5000          STRB     r5,[sp,#0]
00192e  f88d0001          STRB     r0,[sp,#1]
001932  4620              MOV      r0,r4
001934  f7fffffe          BL       _Z8addNadirRK5PointS1_ ; addNadir(const Point&, const Point&)
                  |L1.6456|
001938  1e6d              SUBS     r5,r5,#1              ;1117
00193a  b26d              SXTB     r5,r5                 ;1117
00193c  f1aa0a01          SUB      r10,r10,#1            ;1117
001940  fa1ffa8a          UXTH     r10,r10               ;1117
                  |L1.6468|
001944  455d              CMP      r5,r11                ;1117
001946  dae7              BGE      |L1.6424|
;;;1123   	}
;;;1124   	// search right
;;;1125   	r = p.m_x + radius;
001948  7820              LDRB     r0,[r4,#0]
00194a  eb000109          ADD      r1,r0,r9
00194e  fa4ff981          SXTB     r9,r1
;;;1126   	if (r>LINE_GRID_WIDTH)
001952  f1b90f4f          CMP      r9,#0x4f
001956  dd01              BLE      |L1.6492|
;;;1127   		r = LINE_GRID_WIDTH;
001958  f04f094f          MOV      r9,#0x4f
                  |L1.6492|
;;;1128   	for (i=p.m_x+1, k=j+1; i<r; i++, k++)
00195c  1c40              ADDS     r0,r0,#1
00195e  b245              SXTB     r5,r0
001960  1c7f              ADDS     r7,r7,#1
001962  b2bf              UXTH     r7,r7
001964  e013              B        |L1.6542|
                  |L1.6502|
;;;1129   	{
;;;1130   		i1 = g_lineGrid[k]&LINE_NODE_LINE_MASK;
001966  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
00196a  f8100017          LDRB     r0,[r0,r7,LSL #1]
;;;1131   		if (i1==0 || i0==i1)
00196e  b150              CBZ      r0,|L1.6534|
001970  4286              CMP      r6,r0
001972  d008              BEQ      |L1.6534|
;;;1132   			continue;
;;;1133   		addNadir(p, Point(i, p.m_y));
001974  7860              LDRB     r0,[r4,#1]
001976  4669              MOV      r1,sp
001978  f88d5000          STRB     r5,[sp,#0]
00197c  f88d0001          STRB     r0,[sp,#1]
001980  4620              MOV      r0,r4
001982  f7fffffe          BL       _Z8addNadirRK5PointS1_ ; addNadir(const Point&, const Point&)
                  |L1.6534|
001986  1c6d              ADDS     r5,r5,#1              ;1128
001988  b26d              SXTB     r5,r5                 ;1128
00198a  1c7f              ADDS     r7,r7,#1              ;1128
00198c  b2bf              UXTH     r7,r7                 ;1128
                  |L1.6542|
00198e  454d              CMP      r5,r9                 ;1128
001990  dbe9              BLT      |L1.6502|
;;;1134   	}	
;;;1135   }
001992  e8bd8ff8          POP      {r3-r11,pc}
;;;1136   
                          ENDP

                  _Z10findNadirsv PROC ; findNadirs()
;;;1137   
;;;1138   void findNadirs()
001996  e92d47f0          PUSH     {r4-r10,lr}
;;;1139   {
;;;1140   	SimpleListNode<Point> *i, *j;
;;;1141   	uint16_t dist;
;;;1142   	uint8_t li, lj;
;;;1143   	uint16_t maxMergeDist2=g_maxMergeDist*g_maxMergeDist;
00199a  4f47              LDR      r7,|L1.6840|
00199c  8c78              LDRH     r0,[r7,#0x22]  ; g_maxMergeDist
00199e  4340              MULS     r0,r0,r0
0019a0  b286              UXTH     r6,r0
;;;1144   	
;;;1145   	// do n^2 search (or n*(n-1)/2 search)
;;;1146   	for (i=g_nodesList.m_first; i!=NULL; i=i->m_next)
0019a2  f8df8118          LDR      r8,|L1.6844|
0019a6  f1a8080c          SUB      r8,r8,#0xc
0019aa  f8d85000          LDR      r5,[r8,#0]  ; g_nodesList
0019ae  e025              B        |L1.6652|
                  |L1.6576|
;;;1147   	{
;;;1148   		li = LINE_GRID_LINE_P(i->m_object); 
0019b0  7868              LDRB     r0,[r5,#1]
0019b2  ebc01100          RSB      r1,r0,r0,LSL #4
0019b6  eb011080          ADD      r0,r1,r0,LSL #6
0019ba  7829              LDRB     r1,[r5,#0]
0019bc  4408              ADD      r0,r0,r1
0019be  6d79              LDR      r1,[r7,#0x54]  ; g_lineGrid
0019c0  f8119010          LDRB     r9,[r1,r0,LSL #1]
;;;1149   		for (j=i->m_next; j!=NULL; j=j->m_next)
0019c4  686c              LDR      r4,[r5,#4]
0019c6  e016              B        |L1.6646|
                  |L1.6600|
;;;1150   		{
;;;1151   			lj = LINE_GRID_LINE_P(j->m_object); 
0019c8  7860              LDRB     r0,[r4,#1]
0019ca  ebc01100          RSB      r1,r0,r0,LSL #4
0019ce  eb011080          ADD      r0,r1,r0,LSL #6
0019d2  7821              LDRB     r1,[r4,#0]
0019d4  4408              ADD      r0,r0,r1
0019d6  6d79              LDR      r1,[r7,#0x54]  ; g_lineGrid
0019d8  f8110010          LDRB     r0,[r1,r0,LSL #1]
;;;1152   			if (li==lj) // if we're the same line, don't bother.  We're looking for a greater line index
0019dc  4581              CMP      r9,r0
0019de  d009              BEQ      |L1.6644|
;;;1153   				continue;
;;;1154   			dist = i->m_object.dist2(j->m_object);
0019e0  4621              MOV      r1,r4
0019e2  4628              MOV      r0,r5
0019e4  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
;;;1155   			if (dist<=maxMergeDist2)
0019e8  42b0              CMP      r0,r6
0019ea  d803              BHI      |L1.6644|
;;;1156   				// in general li<lj because of the ordering of the labeling of the nodes and lines
;;;1157   				// this is important because of the grid search below.  We'll ignore cases where li>=lj
;;;1158   				// in the interest of efficiency.
;;;1159   				addNadir(i->m_object, j->m_object);
0019ec  4621              MOV      r1,r4
0019ee  4628              MOV      r0,r5
0019f0  f7fffffe          BL       _Z8addNadirRK5PointS1_ ; addNadir(const Point&, const Point&)
                  |L1.6644|
0019f4  6864              LDR      r4,[r4,#4]            ;1149
                  |L1.6646|
0019f6  2c00              CMP      r4,#0                 ;1149
0019f8  d1e6              BNE      |L1.6600|
0019fa  686d              LDR      r5,[r5,#4]            ;1146
                  |L1.6652|
0019fc  2d00              CMP      r5,#0                 ;1146
0019fe  d1d7              BNE      |L1.6576|
;;;1160   		}
;;;1161   	}
;;;1162   	
;;;1163   	// do grid search 
;;;1164   	for (i=g_nodesList.m_first; i!=NULL; i=i->m_next)
001a00  f8d84000          LDR      r4,[r8,#0]  ; g_nodesList
001a04  e005              B        |L1.6674|
                  |L1.6662|
;;;1165   		search(i->m_object, g_maxMergeDist);
001a06  f8971022          LDRB     r1,[r7,#0x22]  ; g_maxMergeDist
001a0a  4620              MOV      r0,r4
001a0c  f7fffffe          BL       _Z6searchRK5Pointh ; search(const Point&, unsigned char)
001a10  6864              LDR      r4,[r4,#4]            ;1164
                  |L1.6674|
001a12  2c00              CMP      r4,#0                 ;1164
001a14  d1f7              BNE      |L1.6662|
;;;1166   }
001a16  e8bd87f0          POP      {r4-r10,pc}
;;;1167   
                          ENDP

                  _Z12reduceNadirsv PROC ; reduceNadirs()
;;;1168   void reduceNadirs()
001a1a  e92d5ff0          PUSH     {r4-r12,lr}
;;;1169   {
;;;1170   	SimpleListNode<Nadir> *i, *j, *inext, *jnext;
;;;1171   	uint32_t dist;
;;;1172   	uint16_t n, maxMergeDist2=(g_maxMergeDist*g_maxMergeDist*12)>>3; // multiply by a scaling factor of 1.5
001a1e  4826              LDR      r0,|L1.6840|
001a20  8c40              LDRH     r0,[r0,#0x22]  ; g_maxMergeDist
001a22  4340              MULS     r0,r0,r0
001a24  eb000040          ADD      r0,r0,r0,LSL #1
001a28  f3c00a4f          UBFX     r10,r0,#1,#16
;;;1173   	
;;;1174   	while(1)
;;;1175   	{
;;;1176   		// perform n^2 search, looking for nadirs that are close to each other
;;;1177   		n = 0;
;;;1178   		for (i=g_nadirsList.m_first; i!=NULL; i=inext)
001a2c  f8dfb08c          LDR      r11,|L1.6844|
                  |L1.6704|
001a30  f04f0900          MOV      r9,#0                 ;1177
001a34  f8db6000          LDR      r6,[r11,#0]  ; g_nadirsList
001a38  e037              B        |L1.6826|
                  |L1.6714|
;;;1179   		{
;;;1180   			inext = i->m_next;
001a3a  69b7              LDR      r7,[r6,#0x18]
;;;1181   			for (j=i->m_next; j!=NULL; j=jnext)
001a3c  463d              MOV      r5,r7
001a3e  e031              B        |L1.6820|
                  |L1.6720|
;;;1182   			{
;;;1183   				jnext = j->m_next;
001a40  f8d58018          LDR      r8,[r5,#0x18]
;;;1184   				dist = i->m_object.m_pavg.dist2(j->m_object.m_pavg);
001a44  f1050110          ADD      r1,r5,#0x10
001a48  f1060010          ADD      r0,r6,#0x10
001a4c  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
;;;1185   				if (dist<maxMergeDist2)
001a50  4550              CMP      r0,r10
001a52  d226              BCS      |L1.6818|
;;;1186   				{
;;;1187   					i->m_object.merge(j->m_object); // merge j -> i
001a54  4629              MOV      r1,r5
001a56  4630              MOV      r0,r6
001a58  f7fffffe          BL       _ZN5Nadir5mergeERKS_ ; Nadir::merge(const Nadir&)
;;;1188   					g_nadirsList.remove(j);
001a5c  4c17              LDR      r4,|L1.6844|
001a5e  2100              MOVS     r1,#0
001a60  6820              LDR      r0,[r4,#0]
001a62  4602              MOV      r2,r0
001a64  e014              B        |L1.6800|
                  |L1.6758|
001a66  42a8              CMP      r0,r5
001a68  d110              BNE      |L1.6796|
001a6a  42aa              CMP      r2,r5
001a6c  d101              BNE      |L1.6770|
001a6e  69aa              LDR      r2,[r5,#0x18]
001a70  6022              STR      r2,[r4,#0]
                  |L1.6770|
001a72  6863              LDR      r3,[r4,#4]
001a74  42ab              CMP      r3,r5
001a76  d100              BNE      |L1.6778|
001a78  6061              STR      r1,[r4,#4]
                  |L1.6778|
001a7a  b109              CBZ      r1,|L1.6784|
001a7c  6982              LDR      r2,[r0,#0x18]
001a7e  618a              STR      r2,[r1,#0x18]
                  |L1.6784|
001a80  f7fffffe          BL       _ZdlPv ; operator delete (void*)
001a84  8920              LDRH     r0,[r4,#8]
001a86  1e40              SUBS     r0,r0,#1
001a88  8120              STRH     r0,[r4,#8]
001a8a  e003              B        |L1.6804|
                  |L1.6796|
001a8c  4601              MOV      r1,r0
001a8e  6980              LDR      r0,[r0,#0x18]
                  |L1.6800|
001a90  2800              CMP      r0,#0
001a92  d1e8              BNE      |L1.6758|
                  |L1.6804|
;;;1189   					if (inext==j)
001a94  42af              CMP      r7,r5
001a96  d100              BNE      |L1.6810|
;;;1190   						inext = jnext;
001a98  4647              MOV      r7,r8
                  |L1.6810|
;;;1191   					n++;
001a9a  f1090901          ADD      r9,r9,#1
001a9e  fa1ff989          UXTH     r9,r9
                  |L1.6818|
001aa2  4645              MOV      r5,r8                 ;1181
                  |L1.6820|
001aa4  2d00              CMP      r5,#0                 ;1181
001aa6  d1cb              BNE      |L1.6720|
001aa8  463e              MOV      r6,r7                 ;1178
                  |L1.6826|
001aaa  2e00              CMP      r6,#0                 ;1178
001aac  d1c5              BNE      |L1.6714|
;;;1192   				}
;;;1193   			}
;;;1194   		}
;;;1195   		if (n==0) // no change, return...
001aae  f1b90f00          CMP      r9,#0
001ab2  d1bd              BNE      |L1.6704|
                  |L1.6836|
;;;1196   			break;
;;;1197   	}
;;;1198   }
001ab4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6840|
                          DCD      ||.data||
                  |L1.6844|
                          DCD      ||.bss||+0x24
                  |L1.6848|
                          DCD      _ZSt7nothrow ; std::nothrow
                          ENDP

                  _Z7addLineP14SimpleListNodeI5NadirEhRK5PointPS_I5Line2E PROC ; addLine(SimpleListNode<Nadir>*, unsigned char, const Point&, SimpleListNode<Line2>*)
;;;1202   // p01 is outer point of line0
;;;1203   void addLine(SimpleListNode<Nadir> *nadirs, uint8_t li0, const Point &p01, SimpleListNode<Line2> *linen1)
001ac4  e92d5ff0          PUSH     {r4-r12,lr}
;;;1204   {
001ac8  4606              MOV      r6,r0
001aca  4688              MOV      r8,r1
001acc  461c              MOV      r4,r3
;;;1205   	SimpleListNode<Intersection> *j;
;;;1206   	uint8_t i, li1 = linen1->m_object.m_index;
001ace  7927              LDRB     r7,[r4,#4]
;;;1207   	int8_t diffx, diffy;
;;;1208   	bool horiz;
;;;1209   	const Line2 &line1 = linen1->m_object;
;;;1210   
;;;1211   	// determine direction
;;;1212   	diffx = p01.m_x - line1.m_p1.m_x;
001ad0  7810              LDRB     r0,[r2,#0]
001ad2  78a1              LDRB     r1,[r4,#2]
001ad4  1a40              SUBS     r0,r0,r1
001ad6  b240              SXTB     r0,r0
;;;1213   	diffy = p01.m_y - line1.m_p1.m_y;
001ad8  7851              LDRB     r1,[r2,#1]
001ada  78e2              LDRB     r2,[r4,#3]
001adc  1a89              SUBS     r1,r1,r2
001ade  b249              SXTB     r1,r1
;;;1214   	
;;;1215   	horiz = ABS(diffx)>ABS(diffy);
001ae0  2800              CMP      r0,#0
001ae2  da00              BGE      |L1.6886|
001ae4  4240              RSBS     r0,r0,#0
                  |L1.6886|
001ae6  2900              CMP      r1,#0
001ae8  da00              BGE      |L1.6892|
001aea  4249              RSBS     r1,r1,#0
                  |L1.6892|
001aec  4288              CMP      r0,r1
001aee  dd02              BLE      |L1.6902|
001af0  f04f0901          MOV      r9,#1
001af4  e001              B        |L1.6906|
                  |L1.6902|
001af6  f04f0900          MOV      r9,#0
                  |L1.6906|
;;;1216   
;;;1217   	// look through intersections list for lines that are affected
;;;1218   	for (j=g_intersectionsList.m_first; j!=NULL; j=j->m_next)
001afa  48f7              LDR      r0,|L1.7896|
001afc  6805              LDR      r5,[r0,#0]  ; g_intersectionsList
001afe  e019              B        |L1.6964|
                  |L1.6912|
;;;1219   	{
;;;1220   		for (i=0; i<j->m_object.m_n; i++)
001b00  f04f0a00          MOV      r10,#0
001b04  e012              B        |L1.6956|
                  |L1.6918|
;;;1221   		{
;;;1222   			// line li0 has changed.  It's had one of its endpoints set to the new intersection
;;;1223   			if (j->m_object.m_lines[i]->m_object.m_index==li0)
001b06  eb050b8a          ADD      r11,r5,r10,LSL #2
001b0a  f8db0004          LDR      r0,[r11,#4]
001b0e  7900              LDRB     r0,[r0,#4]
001b10  4540              CMP      r0,r8
001b12  d107              BNE      |L1.6948|
;;;1224   			{
;;;1225   				// We only need to look at line1.m_p1 since it's the only point that's an endpoint and therefore possibly coincident with this intersection
;;;1226   				// if line.m_p1 is coincident with the intersection, we need to change the line pointer
;;;1227   				if (j->m_object.m_p.equals(line1.m_p1))
001b14  1ca1              ADDS     r1,r4,#2
001b16  4628              MOV      r0,r5
001b18  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
001b1c  b110              CBZ      r0,|L1.6948|
;;;1228   				{
;;;1229   					j->m_object.m_lines[i] = linen1;
001b1e  f8cb4004          STR      r4,[r11,#4]
;;;1230   					linen1->m_object.m_i1 = j; // if we change the line in an intersection, we need to change the line to point to the intersection
001b22  60e5              STR      r5,[r4,#0xc]
                  |L1.6948|
001b24  f10a0a01          ADD      r10,r10,#1            ;1220
001b28  f00a0aff          AND      r10,r10,#0xff         ;1220
                  |L1.6956|
001b2c  78a8              LDRB     r0,[r5,#2]            ;1220
001b2e  4550              CMP      r0,r10                ;1220
001b30  d8e9              BHI      |L1.6918|
001b32  6a6d              LDR      r5,[r5,#0x24]         ;1218
                  |L1.6964|
001b34  2d00              CMP      r5,#0                 ;1218
001b36  d1e3              BNE      |L1.6912|
;;;1231   				}
;;;1232   			}
;;;1233   		}
;;;1234   	}
;;;1235   
;;;1236   	// look through remaining nadir list for points->lines that are affected
;;;1237   	for (; nadirs!=NULL; nadirs=nadirs->m_next)
;;;1238   	{
;;;1239   		for (i=0; i<nadirs->m_object.m_n; i++)
;;;1240   		{
;;;1241   			const Point &pt = nadirs->m_object.m_points[i];
;;;1242   			//if (LINE_GRID_INDEX_P(pt)>LINE_GRID_HEIGHT*LINE_GRID_WIDTH)
;;;1243   			//	printf("*** %d\n");
;;;1244   			if (li0==LINE_GRID_LINE_P(pt))
;;;1245   			{
;;;1246   				if (horiz)
;;;1247   				{
;;;1248   					if (SIGN(pt.m_x-line1.m_p0.m_x)==SIGN(line1.m_p1.m_x-line1.m_p0.m_x))
001b38  f04f3aff          MOV      r10,#0xffffffff
001b3c  e061              B        |L1.7170|
                  |L1.6974|
001b3e  2300              MOVS     r3,#0                 ;1239
001b40  e05b              B        |L1.7162|
                  |L1.6978|
001b42  eb060043          ADD      r0,r6,r3,LSL #1       ;1241
001b46  7842              LDRB     r2,[r0,#1]            ;1244
001b48  f890b000          LDRB     r11,[r0,#0]           ;1244
001b4c  ebc21102          RSB      r1,r2,r2,LSL #4       ;1244
001b50  eb011182          ADD      r1,r1,r2,LSL #6       ;1244
001b54  eb01050b          ADD      r5,r1,r11             ;1244
001b58  49e0              LDR      r1,|L1.7900|
001b5a  6d49              LDR      r1,[r1,#0x54]         ;1244  ; g_lineGrid
001b5c  f831c015          LDRH     r12,[r1,r5,LSL #1]    ;1244
001b60  f3cc0e09          UBFX     lr,r12,#0,#10         ;1244
001b64  45c6              CMP      lr,r8                 ;1244
001b66  d146              BNE      |L1.7158|
001b68  f1b90f00          CMP      r9,#0                 ;1246
001b6c  d021              BEQ      |L1.7090|
001b6e  7822              LDRB     r2,[r4,#0]
001b70  ebbb0b02          SUBS     r11,r11,r2
001b74  d402              BMI      |L1.7036|
001b76  f04f0b01          MOV      r11,#1
001b7a  e000              B        |L1.7038|
                  |L1.7036|
001b7c  46d3              MOV      r11,r10
                  |L1.7038|
001b7e  f894e002          LDRB     lr,[r4,#2]
001b82  ebbe0202          SUBS     r2,lr,r2
001b86  d401              BMI      |L1.7052|
001b88  2201              MOVS     r2,#1
001b8a  e000              B        |L1.7054|
                  |L1.7052|
001b8c  4652              MOV      r2,r10
                  |L1.7054|
001b8e  4593              CMP      r11,r2
001b90  d131              BNE      |L1.7158|
;;;1249   					{
;;;1250   						LINE_GRID_P(pt) &= ~LINE_NODE_LINE_MASK;
001b92  f36f0c09          BFC      r12,#0,#10
001b96  f821c015          STRH     r12,[r1,r5,LSL #1]
;;;1251   						LINE_GRID_P(pt) |= li1;
001b9a  7842              LDRB     r2,[r0,#1]
001b9c  7800              LDRB     r0,[r0,#0]
001b9e  ebc21502          RSB      r5,r2,r2,LSL #4
001ba2  eb051282          ADD      r2,r5,r2,LSL #6
001ba6  4410              ADD      r0,r0,r2
001ba8  ea4c0c07          ORR      r12,r12,r7
001bac  f821c010          STRH     r12,[r1,r0,LSL #1]
001bb0  e021              B        |L1.7158|
                  |L1.7090|
;;;1252   					}
;;;1253   				}
;;;1254   				else // vertical
;;;1255   				{
;;;1256   					if (SIGN(pt.m_y-line1.m_p0.m_y)==SIGN(line1.m_p1.m_y-line1.m_p0.m_y))
001bb2  f894b001          LDRB     r11,[r4,#1]
001bb6  ebb2020b          SUBS     r2,r2,r11
001bba  d401              BMI      |L1.7104|
001bbc  2201              MOVS     r2,#1
001bbe  e000              B        |L1.7106|
                  |L1.7104|
001bc0  4652              MOV      r2,r10
                  |L1.7106|
001bc2  f894e003          LDRB     lr,[r4,#3]
001bc6  ebbe0b0b          SUBS     r11,lr,r11
001bca  d402              BMI      |L1.7122|
001bcc  f04f0b01          MOV      r11,#1
001bd0  e000              B        |L1.7124|
                  |L1.7122|
001bd2  46d3              MOV      r11,r10
                  |L1.7124|
001bd4  455a              CMP      r2,r11
001bd6  d10e              BNE      |L1.7158|
;;;1257   					{
;;;1258   						LINE_GRID_P(pt) &= ~LINE_NODE_LINE_MASK;
001bd8  f36f0c09          BFC      r12,#0,#10
001bdc  f821c015          STRH     r12,[r1,r5,LSL #1]
;;;1259   						LINE_GRID_P(pt) |= li1;
001be0  7842              LDRB     r2,[r0,#1]
001be2  7800              LDRB     r0,[r0,#0]
001be4  ebc21502          RSB      r5,r2,r2,LSL #4
001be8  eb051282          ADD      r2,r5,r2,LSL #6
001bec  4410              ADD      r0,r0,r2
001bee  ea4c0c07          ORR      r12,r12,r7
001bf2  f821c010          STRH     r12,[r1,r0,LSL #1]
                  |L1.7158|
001bf6  1c5b              ADDS     r3,r3,#1              ;1239
001bf8  b2db              UXTB     r3,r3                 ;1239
                  |L1.7162|
001bfa  7cb0              LDRB     r0,[r6,#0x12]         ;1239
001bfc  4298              CMP      r0,r3                 ;1239
001bfe  d8a0              BHI      |L1.6978|
001c00  69b6              LDR      r6,[r6,#0x18]         ;1237
                  |L1.7170|
001c02  2e00              CMP      r6,#0                 ;1237
001c04  d19b              BNE      |L1.6974|
;;;1260   					}
;;;1261   				}
;;;1262   			}			
;;;1263   		}
;;;1264   	}
;;;1265   }
001c06  e755              B        |L1.6836|
;;;1266   
                          ENDP

                  _Z9validLineP14SimpleListNodeI5Line2E PROC ; validLine(SimpleListNode<Line2>*)
;;;1454   
;;;1455   bool validLine(SimpleListNode<Line2> *linen)
001c08  2800              CMP      r0,#0
;;;1456   {
001c0a  d003              BEQ      |L1.7188|
;;;1457   	SimpleListNode<Line2> *i;
;;;1458   	
;;;1459   	if (linen==NULL)
;;;1460   		return true; // valid
;;;1461   
;;;1462   	for (i=g_linesList.m_first; i!=NULL; i=i->m_next)
001c0c  49b2              LDR      r1,|L1.7896|
001c0e  3924              SUBS     r1,r1,#0x24
001c10  6809              LDR      r1,[r1,#0]  ; g_linesList
001c12  e006              B        |L1.7202|
                  |L1.7188|
001c14  2001              MOVS     r0,#1                 ;1460
;;;1463   	{
;;;1464   		if (i==linen)
;;;1465   			return true;
;;;1466   	}
;;;1467   	return false;
;;;1468   }
001c16  4770              BX       lr
                  |L1.7192|
001c18  4281              CMP      r1,r0                 ;1464
001c1a  d101              BNE      |L1.7200|
001c1c  2001              MOVS     r0,#1                 ;1465
001c1e  4770              BX       lr
                  |L1.7200|
001c20  6949              LDR      r1,[r1,#0x14]         ;1462
                  |L1.7202|
001c22  2900              CMP      r1,#0                 ;1462
001c24  d1f8              BNE      |L1.7192|
001c26  2000              MOVS     r0,#0                 ;1467
001c28  4770              BX       lr
;;;1469   
                          ENDP

                  _Z17validIntersectionP14SimpleListNodeI12IntersectionE PROC ; validIntersection(SimpleListNode<Intersection>*)
;;;1439   
;;;1440   bool validIntersection(SimpleListNode<Intersection> *intern)
001c2a  2800              CMP      r0,#0
;;;1441   {
001c2c  d002              BEQ      |L1.7220|
;;;1442   	SimpleListNode<Intersection> *i;
;;;1443   	
;;;1444   	if (intern==NULL)
;;;1445   		return true; // valid
;;;1446   
;;;1447   	for (i=g_intersectionsList.m_first; i!=NULL; i=i->m_next)
001c2e  49aa              LDR      r1,|L1.7896|
001c30  6809              LDR      r1,[r1,#0]  ; g_intersectionsList
001c32  e006              B        |L1.7234|
                  |L1.7220|
001c34  2001              MOVS     r0,#1                 ;1445
;;;1448   	{
;;;1449   		if (i==intern)
;;;1450   			return true;
;;;1451   	}
;;;1452   	return false;
;;;1453   }
001c36  4770              BX       lr
                  |L1.7224|
001c38  4281              CMP      r1,r0                 ;1449
001c3a  d101              BNE      |L1.7232|
001c3c  2001              MOVS     r0,#1                 ;1450
001c3e  4770              BX       lr
                  |L1.7232|
001c40  6a49              LDR      r1,[r1,#0x24]         ;1447
                  |L1.7234|
001c42  2900              CMP      r1,#0                 ;1447
001c44  d1f8              BNE      |L1.7224|
001c46  2000              MOVS     r0,#0                 ;1452
001c48  4770              BX       lr
;;;1454   
                          ENDP

                  _Z10checkGraphihhP14SimpleListNodeI12IntersectionE PROC ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1472   
;;;1473   bool checkGraph(int val, uint8_t suppress0, uint8_t suppress1, SimpleListNode<Intersection> *intern)
001c4a  e92d5fff          PUSH     {r0-r12,lr}
;;;1474   {
001c4e  460d              MOV      r5,r1
001c50  4616              MOV      r6,r2
001c52  4698              MOV      r8,r3
;;;1475   	SimpleListNode<Line2> *i;
;;;1476   	SimpleListNode<Intersection> *j;
;;;1477   	uint8_t k, n, h, check=0;	
001c54  2700              MOVS     r7,#0
;;;1478   	
;;;1479   	if (!(g_debug&LINE_DEBUG_GRAPH_CHECK))
001c56  48a2              LDR      r0,|L1.7904|
001c58  7800              LDRB     r0,[r0,#0]  ; g_debug
001c5a  0740              LSLS     r0,r0,#29
001c5c  d402              BMI      |L1.7268|
;;;1480   		return true;
001c5e  2001              MOVS     r0,#1
                  |L1.7264|
;;;1481   	
;;;1482   	if (intern)
;;;1483   		goto intersection;
;;;1484   	
;;;1485   	// go through line list, make sure all intersection pointers are valid 
;;;1486   	// by finding them in the list, make sure the line is in the intersection's list
;;;1487   	for (i=g_linesList.m_first; i!=NULL; i=i->m_next)
;;;1488   	{
;;;1489   		CHECK(validIntersection(i->m_object.m_i0), 1);
;;;1490   		CHECK(validIntersection(i->m_object.m_i1), 2);
;;;1491   		if (i->m_object.m_i0)
;;;1492   		{
;;;1493   			for (k=n=0; k<i->m_object.m_i0->m_object.m_n; k++)
;;;1494   			{
;;;1495   				if (i->m_object.m_i0->m_object.m_lines[k]==i)
;;;1496   					n++;
;;;1497   			}
;;;1498   			CHECK(n==1, 3);
;;;1499   		}
;;;1500   		if (i->m_object.m_i1)
;;;1501   		{
;;;1502   			for (k=n=0; k<i->m_object.m_i1->m_object.m_n; k++)
;;;1503   			{
;;;1504   				if (i->m_object.m_i1->m_object.m_lines[k]==i)
;;;1505   					n++;
;;;1506   			}
;;;1507   			CHECK(n==1, 4);
;;;1508   		}		
;;;1509   	}
;;;1510   	
;;;1511   	intersection:
;;;1512   	// go through intersection list, make sure each intersection's lines are valid
;;;1513   	// make sure each line points back to the intersection
;;;1514   	for (j=g_intersectionsList.m_first; j!=NULL; j=j->m_next)
;;;1515   	{
;;;1516   		if (intern)
;;;1517   			j = intern;
;;;1518   		for (k=n=0; k<j->m_object.m_n; k++)
;;;1519   		{
;;;1520   			CHECK(validLine(j->m_object.m_lines[k]), 5);
;;;1521   			CHECK(j->m_object.m_lines[k]->m_object.m_i0 != j->m_object.m_lines[k]->m_object.m_i1, 6);
;;;1522   			CHECK(j->m_object.m_lines[k]->m_object.m_i0==j || j->m_object.m_lines[k]->m_object.m_i1==j, 7);
;;;1523   			if (j->m_object.m_lines[k]->m_object.m_i0==j)
;;;1524   				CHECK(j->m_object.m_p.equals(j->m_object.m_lines[k]->m_object.m_p0), 8);
;;;1525   			if (j->m_object.m_lines[k]->m_object.m_i1==j)
;;;1526   				CHECK(j->m_object.m_p.equals(j->m_object.m_lines[k]->m_object.m_p1), 9);			
;;;1527   			for (h=k+1; h<j->m_object.m_n; h++)
;;;1528   			{
;;;1529   				if (j->m_object.m_lines[k]==j->m_object.m_lines[h])
;;;1530   					n++;
;;;1531   			}
;;;1532   			CHECK(n==0, 10);
;;;1533   		}
;;;1534   		if (intern)
;;;1535   			break;
;;;1536   	}
;;;1537   	
;;;1538   	end:
;;;1539   	if (check!=0)
;;;1540   	{
;;;1541   		cprintf(0, "fail %d %d\n", check, val);
;;;1542   		return false;
;;;1543   	}
;;;1544   		
;;;1545   	return true;
;;;1546   }
001c60  b004              ADD      sp,sp,#0x10
001c62  e727              B        |L1.6836|
                  |L1.7268|
001c64  f1b80f00          CMP      r8,#0                 ;1482
001c68  d151              BNE      |L1.7438|
001c6a  489b              LDR      r0,|L1.7896|
001c6c  3824              SUBS     r0,r0,#0x24           ;1487
001c6e  6802              LDR      r2,[r0,#0]            ;1487  ; g_linesList
001c70  2304              MOVS     r3,#4                 ;1495
001c72  e04a              B        |L1.7434|
                  |L1.7284|
001c74  6890              LDR      r0,[r2,#8]            ;1489
001c76  f7fffffe          BL       _Z17validIntersectionP14SimpleListNodeI12IntersectionE ; validIntersection(SimpleListNode<Intersection>*)
001c7a  b928              CBNZ     r0,|L1.7304|
001c7c  2d01              CMP      r5,#1                 ;1489
001c7e  d003              BEQ      |L1.7304|
001c80  2e01              CMP      r6,#1                 ;1489
001c82  d001              BEQ      |L1.7304|
001c84  2701              MOVS     r7,#1                 ;1489
001c86  e0b5              B        |L1.7668|
                  |L1.7304|
001c88  68d0              LDR      r0,[r2,#0xc]          ;1490
001c8a  f7fffffe          BL       _Z17validIntersectionP14SimpleListNodeI12IntersectionE ; validIntersection(SimpleListNode<Intersection>*)
001c8e  b928              CBNZ     r0,|L1.7324|
001c90  2d02              CMP      r5,#2                 ;1490
001c92  d003              BEQ      |L1.7324|
001c94  2e02              CMP      r6,#2                 ;1490
001c96  d001              BEQ      |L1.7324|
001c98  2702              MOVS     r7,#2                 ;1490
001c9a  e0ab              B        |L1.7668|
                  |L1.7324|
001c9c  6894              LDR      r4,[r2,#8]            ;1491
001c9e  b1c4              CBZ      r4,|L1.7378|
001ca0  2000              MOVS     r0,#0                 ;1493
001ca2  4601              MOV      r1,r0                 ;1493
001ca4  f894c002          LDRB     r12,[r4,#2]           ;1493
001ca8  e009              B        |L1.7358|
                  |L1.7338|
001caa  eb030980          ADD      r9,r3,r0,LSL #2       ;1495
001cae  f8549009          LDR      r9,[r4,r9]            ;1495
001cb2  4591              CMP      r9,r2                 ;1495
001cb4  d101              BNE      |L1.7354|
001cb6  1c49              ADDS     r1,r1,#1              ;1496
001cb8  b2c9              UXTB     r1,r1                 ;1496
                  |L1.7354|
001cba  1c40              ADDS     r0,r0,#1              ;1493
001cbc  b2c0              UXTB     r0,r0                 ;1493
                  |L1.7358|
001cbe  4584              CMP      r12,r0                ;1493
001cc0  d8f3              BHI      |L1.7338|
001cc2  2901              CMP      r1,#1                 ;1498
001cc4  d005              BEQ      |L1.7378|
001cc6  2d03              CMP      r5,#3                 ;1498
001cc8  d003              BEQ      |L1.7378|
001cca  2e03              CMP      r6,#3                 ;1498
001ccc  d001              BEQ      |L1.7378|
001cce  2703              MOVS     r7,#3                 ;1498
001cd0  e090              B        |L1.7668|
                  |L1.7378|
001cd2  68d4              LDR      r4,[r2,#0xc]          ;1500
001cd4  b1c4              CBZ      r4,|L1.7432|
001cd6  2000              MOVS     r0,#0                 ;1502
001cd8  4601              MOV      r1,r0                 ;1502
001cda  f894c002          LDRB     r12,[r4,#2]           ;1502
001cde  e009              B        |L1.7412|
                  |L1.7392|
001ce0  eb030980          ADD      r9,r3,r0,LSL #2       ;1504
001ce4  f8549009          LDR      r9,[r4,r9]            ;1504
001ce8  4591              CMP      r9,r2                 ;1504
001cea  d101              BNE      |L1.7408|
001cec  1c49              ADDS     r1,r1,#1              ;1505
001cee  b2c9              UXTB     r1,r1                 ;1505
                  |L1.7408|
001cf0  1c40              ADDS     r0,r0,#1              ;1502
001cf2  b2c0              UXTB     r0,r0                 ;1502
                  |L1.7412|
001cf4  4584              CMP      r12,r0                ;1502
001cf6  d8f3              BHI      |L1.7392|
001cf8  2901              CMP      r1,#1                 ;1507
001cfa  d005              BEQ      |L1.7432|
001cfc  2d04              CMP      r5,#4                 ;1507
001cfe  d003              BEQ      |L1.7432|
001d00  2e04              CMP      r6,#4                 ;1507
001d02  d001              BEQ      |L1.7432|
001d04  2704              MOVS     r7,#4                 ;1507
001d06  e075              B        |L1.7668|
                  |L1.7432|
001d08  6952              LDR      r2,[r2,#0x14]         ;1487
                  |L1.7434|
001d0a  2a00              CMP      r2,#0                 ;1487
001d0c  d1b2              BNE      |L1.7284|
                  |L1.7438|
001d0e  4872              LDR      r0,|L1.7896|
001d10  6804              LDR      r4,[r0,#0]            ;1514  ; g_intersectionsList
001d12  e06d              B        |L1.7664|
                  |L1.7444|
001d14  f1b80f00          CMP      r8,#0                 ;1516
001d18  d000              BEQ      |L1.7452|
001d1a  4644              MOV      r4,r8                 ;1517
                  |L1.7452|
001d1c  f04f0900          MOV      r9,#0                 ;1518
001d20  46cb              MOV      r11,r9                ;1518
001d22  e05e              B        |L1.7650|
                  |L1.7460|
001d24  eb040a8b          ADD      r10,r4,r11,LSL #2     ;1520
001d28  f8da0004          LDR      r0,[r10,#4]           ;1520
001d2c  f7fffffe          BL       _Z9validLineP14SimpleListNodeI5Line2E ; validLine(SimpleListNode<Line2>*)
001d30  b928              CBNZ     r0,|L1.7486|
001d32  2d05              CMP      r5,#5                 ;1520
001d34  d003              BEQ      |L1.7486|
001d36  2e05              CMP      r6,#5                 ;1520
001d38  d001              BEQ      |L1.7486|
001d3a  2705              MOVS     r7,#5                 ;1520
001d3c  e05a              B        |L1.7668|
                  |L1.7486|
001d3e  f8da1004          LDR      r1,[r10,#4]           ;1521
001d42  e9d10202          LDRD     r0,r2,[r1,#8]         ;1521
001d46  4290              CMP      r0,r2                 ;1521
001d48  d105              BNE      |L1.7510|
001d4a  2d06              CMP      r5,#6                 ;1521
001d4c  d003              BEQ      |L1.7510|
001d4e  2e06              CMP      r6,#6                 ;1521
001d50  d001              BEQ      |L1.7510|
001d52  2706              MOVS     r7,#6                 ;1521
001d54  e04e              B        |L1.7668|
                  |L1.7510|
001d56  42a0              CMP      r0,r4                 ;1522
001d58  d007              BEQ      |L1.7530|
001d5a  42a2              CMP      r2,r4                 ;1522
001d5c  d005              BEQ      |L1.7530|
001d5e  2d07              CMP      r5,#7                 ;1522
001d60  d003              BEQ      |L1.7530|
001d62  2e07              CMP      r6,#7                 ;1522
001d64  d001              BEQ      |L1.7530|
001d66  2707              MOVS     r7,#7                 ;1522
001d68  e044              B        |L1.7668|
                  |L1.7530|
001d6a  42a0              CMP      r0,r4                 ;1523
001d6c  d109              BNE      |L1.7554|
001d6e  4620              MOV      r0,r4                 ;1524
001d70  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
001d74  b928              CBNZ     r0,|L1.7554|
001d76  2d08              CMP      r5,#8                 ;1524
001d78  d003              BEQ      |L1.7554|
001d7a  2e08              CMP      r6,#8                 ;1524
001d7c  d001              BEQ      |L1.7554|
001d7e  2708              MOVS     r7,#8                 ;1524
001d80  e038              B        |L1.7668|
                  |L1.7554|
001d82  f8da1004          LDR      r1,[r10,#4]           ;1525
001d86  68c8              LDR      r0,[r1,#0xc]          ;1525
001d88  42a0              CMP      r0,r4                 ;1525
001d8a  d10a              BNE      |L1.7586|
001d8c  1c89              ADDS     r1,r1,#2              ;1526
001d8e  4620              MOV      r0,r4                 ;1526
001d90  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
001d94  b928              CBNZ     r0,|L1.7586|
001d96  2d09              CMP      r5,#9                 ;1526
001d98  d003              BEQ      |L1.7586|
001d9a  2e09              CMP      r6,#9                 ;1526
001d9c  d001              BEQ      |L1.7586|
001d9e  2709              MOVS     r7,#9                 ;1526
001da0  e028              B        |L1.7668|
                  |L1.7586|
001da2  f10b0b01          ADD      r11,r11,#1            ;1527
001da6  f00b00ff          AND      r0,r11,#0xff          ;1527
001daa  78a1              LDRB     r1,[r4,#2]            ;1527
001dac  e00c              B        |L1.7624|
                  |L1.7598|
001dae  eb040380          ADD      r3,r4,r0,LSL #2       ;1529
001db2  f8da2004          LDR      r2,[r10,#4]           ;1529
001db6  685b              LDR      r3,[r3,#4]            ;1529
001db8  429a              CMP      r2,r3                 ;1529
001dba  d103              BNE      |L1.7620|
001dbc  f1090901          ADD      r9,r9,#1              ;1530
001dc0  f00909ff          AND      r9,r9,#0xff           ;1530
                  |L1.7620|
001dc4  1c40              ADDS     r0,r0,#1              ;1527
001dc6  b2c0              UXTB     r0,r0                 ;1527
                  |L1.7624|
001dc8  4281              CMP      r1,r0                 ;1527
001dca  d8f0              BHI      |L1.7598|
001dcc  f1b90f00          CMP      r9,#0                 ;1532
001dd0  d005              BEQ      |L1.7646|
001dd2  2d0a              CMP      r5,#0xa               ;1532
001dd4  d003              BEQ      |L1.7646|
001dd6  2e0a              CMP      r6,#0xa               ;1532
001dd8  d001              BEQ      |L1.7646|
001dda  270a              MOVS     r7,#0xa               ;1532
001ddc  e00a              B        |L1.7668|
                  |L1.7646|
001dde  f00b0bff          AND      r11,r11,#0xff         ;1518
                  |L1.7650|
001de2  78a0              LDRB     r0,[r4,#2]            ;1518
001de4  4558              CMP      r0,r11                ;1518
001de6  d89d              BHI      |L1.7460|
001de8  f1b80f00          CMP      r8,#0                 ;1534
001dec  d102              BNE      |L1.7668|
001dee  6a64              LDR      r4,[r4,#0x24]         ;1514
                  |L1.7664|
001df0  2c00              CMP      r4,#0                 ;1514
001df2  d18f              BNE      |L1.7444|
                  |L1.7668|
001df4  b13f              CBZ      r7,|L1.7686|
001df6  463a              MOV      r2,r7                 ;1541
001df8  a13a              ADR      r1,|L1.7908|
001dfa  2000              MOVS     r0,#0                 ;1541
001dfc  9b00              LDR      r3,[sp,#0]            ;1541
001dfe  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
001e02  2000              MOVS     r0,#0                 ;1542
001e04  e72c              B        |L1.7264|
                  |L1.7686|
001e06  2001              MOVS     r0,#1                 ;1545
001e08  e72a              B        |L1.7264|
;;;1547   
                          ENDP

                  _Z9breakLineP14SimpleListNodeI5NadirEhPS_I12IntersectionE PROC ; breakLine(SimpleListNode<Nadir>*, unsigned char, SimpleListNode<Intersection>*)
;;;1266   
;;;1267   bool breakLine(SimpleListNode<Nadir> *nadirs, uint8_t li, SimpleListNode<Intersection> *intern)
001e0a  e92d43f0          PUSH     {r4-r9,lr}
;;;1268   {
001e0e  b085              SUB      sp,sp,#0x14
001e10  4681              MOV      r9,r0
001e12  4688              MOV      r8,r1
001e14  4616              MOV      r6,r2
;;;1269   	// orig line linen0   p0                m_p               p1
;;;1270   	// broken line        p0 linen0 p1 intersection p0 linen1 p1
;;;1271   	Line2 line2;
001e16  4668              MOV      r0,sp
001e18  f7fffffe          BL       _ZN5Line2C1Ev ; Line2::Line2()
;;;1272   	SimpleListNode<Line2> *linen1;
;;;1273   	SimpleListNode<Line2> *linen0 = g_lines[li];
001e1c  4f2f              LDR      r7,|L1.7900|
001e1e  6eb8              LDR      r0,[r7,#0x68]  ; g_lines
001e20  f8504028          LDR      r4,[r0,r8,LSL #2]
;;;1274   	checkGraph(__LINE__, 1, 2);
001e24  2300              MOVS     r3,#0
001e26  2202              MOVS     r2,#2
001e28  2101              MOVS     r1,#1
001e2a  f24040fa          MOV      r0,#0x4fa
001e2e  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1275   	
;;;1276   	if (g_lineIndex>=LINE_MAX_LINES || intern->m_object.m_n>LINE_MAX_INTERSECTION_LINES-2 || 
001e32  7938              LDRB     r0,[r7,#4]  ; g_lineIndex
001e34  2880              CMP      r0,#0x80
001e36  d207              BCS      |L1.7752|
001e38  78b0              LDRB     r0,[r6,#2]
001e3a  2806              CMP      r0,#6
001e3c  d804              BHI      |L1.7752|
;;;1277   		linen0->m_object.m_p0.equals(linen0->m_object.m_p1)) // this last case is a crazy case the fouls up the addLine() logic below
001e3e  1ca1              ADDS     r1,r4,#2
001e40  4620              MOV      r0,r4
001e42  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
001e46  b118              CBZ      r0,|L1.7760|
                  |L1.7752|
;;;1278   		return false;
001e48  2000              MOVS     r0,#0
                  |L1.7754|
;;;1279   	
;;;1280   	// create new line, add it to intersection
;;;1281   	line2.m_p1 = linen0->m_object.m_p1;
;;;1282   	line2.m_p0 = intern->m_object.m_p;
;;;1283   	line2.m_index = g_lineIndex;
;;;1284   	linen1 = g_linesList.add(line2);
;;;1285   
;;;1286   	if (linen1==NULL)
;;;1287   		return false;
;;;1288   
;;;1289   	// modify first line
;;;1290   	linen0->m_object.m_p1 = intern->m_object.m_p;
;;;1291   	intern->m_object.addLine(linen0, intern, 1);
;;;1292   
;;;1293   	g_lines[g_lineIndex++] = linen1;
;;;1294   	intern->m_object.addLine(linen1, intern, 0);
;;;1295   	
;;;1296   	// feedforward new line to nadirs we haven't seen yet
;;;1297   	addLine(nadirs, li, linen0->m_object.m_p0, linen1); 
;;;1298   	
;;;1299   	checkGraph(__LINE__, 1, 2);
;;;1300   	
;;;1301   	return true;
;;;1302   }
001e4a  b005              ADD      sp,sp,#0x14
001e4c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.7760|
001e50  8860              LDRH     r0,[r4,#2]            ;1281
001e52  f8ad0002          STRH     r0,[sp,#2]            ;1281
001e56  8830              LDRH     r0,[r6,#0]            ;1282
001e58  f8ad0000          STRH     r0,[sp,#0]            ;1282
001e5c  7938              LDRB     r0,[r7,#4]            ;1283  ; g_lineIndex
001e5e  f88d0004          STRB     r0,[sp,#4]            ;1283
001e62  481d              LDR      r0,|L1.7896|
001e64  4669              MOV      r1,sp                 ;1284
001e66  3824              SUBS     r0,r0,#0x24           ;1284
001e68  f7fffffe          BL       _ZN10SimpleListI5Line2E3addERKS0_ ; SimpleList<Line2>::add(const Line2&)
001e6c  4605              MOV      r5,r0                 ;1284
001e6e  b315              CBZ      r5,|L1.7862|
001e70  8830              LDRH     r0,[r6,#0]            ;1290
001e72  8060              STRH     r0,[r4,#2]            ;1290
001e74  2301              MOVS     r3,#1                 ;1291
001e76  4632              MOV      r2,r6                 ;1291
001e78  4621              MOV      r1,r4                 ;1291
001e7a  4630              MOV      r0,r6                 ;1291
001e7c  f7fffffe          BL       _ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh ; Intersection::addLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*, unsigned char)
001e80  7938              LDRB     r0,[r7,#4]            ;1293  ; g_lineIndex
001e82  1c41              ADDS     r1,r0,#1              ;1293
001e84  7139              STRB     r1,[r7,#4]            ;1293
001e86  6eb9              LDR      r1,[r7,#0x68]         ;1293  ; g_lines
001e88  f8415020          STR      r5,[r1,r0,LSL #2]     ;1293
001e8c  2300              MOVS     r3,#0                 ;1294
001e8e  4632              MOV      r2,r6                 ;1294
001e90  4629              MOV      r1,r5                 ;1294
001e92  4630              MOV      r0,r6                 ;1294
001e94  f7fffffe          BL       _ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh ; Intersection::addLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*, unsigned char)
001e98  462b              MOV      r3,r5                 ;1297
001e9a  4622              MOV      r2,r4                 ;1297
001e9c  4641              MOV      r1,r8                 ;1297
001e9e  4648              MOV      r0,r9                 ;1297
001ea0  f7fffffe          BL       _Z7addLineP14SimpleListNodeI5NadirEhRK5PointPS_I5Line2E ; addLine(SimpleListNode<Nadir>*, unsigned char, const Point&, SimpleListNode<Line2>*)
001ea4  2300              MOVS     r3,#0                 ;1299
001ea6  2202              MOVS     r2,#2                 ;1299
001ea8  2101              MOVS     r1,#1                 ;1299
001eaa  f2405013          MOV      r0,#0x513             ;1299
001eae  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
001eb2  2001              MOVS     r0,#1                 ;1301
001eb4  e7c9              B        |L1.7754|
                  |L1.7862|
001eb6  2000              MOVS     r0,#0                 ;1287
001eb8  e7c7              B        |L1.7754|
;;;1303   
                          ENDP

                  _Z10removeLineP14SimpleListNodeI5Line2EPS_I12IntersectionE PROC ; removeLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*)
;;;1304   uint8_t removeLine(SimpleListNode<Line2> *linen, SimpleListNode<Intersection> *intern)
001eba  b570              PUSH     {r4-r6,lr}
;;;1305   {
001ebc  4605              MOV      r5,r0
;;;1306   	uint8_t i, j, m;
;;;1307   	
;;;1308   	// remove line from intersection
;;;1309   	for (i=m=0; intern && i<intern->m_object.m_n; i++)
001ebe  2000              MOVS     r0,#0
001ec0  4602              MOV      r2,r0
001ec2  e026              B        |L1.7954|
                  |L1.7876|
;;;1310   	{
;;;1311   		if (intern->m_object.m_lines[i]==linen)
001ec4  eb010482          ADD      r4,r1,r2,LSL #2
001ec8  6864              LDR      r4,[r4,#4]
001eca  42ac              CMP      r4,r5
001ecc  d11f              BNE      |L1.7950|
;;;1312   		{
;;;1313   			intern->m_object.m_n--;
001ece  1e5b              SUBS     r3,r3,#1
001ed0  708b              STRB     r3,[r1,#2]
;;;1314   			// shift lines down
;;;1315   			for (j=i; j<intern->m_object.m_n; j++)
001ed2  4613              MOV      r3,r2
001ed4  e014              B        |L1.7936|
001ed6  0000              DCW      0x0000
                  |L1.7896|
                          DCD      ||.bss||+0x30
                  |L1.7900|
                          DCD      ||.data||
                  |L1.7904|
                          DCD      g_debug
                  |L1.7908|
001ee4  6661696c          DCB      "fail %d %d\n",0
001ee8  20256420
001eec  25640a00
                  |L1.7920|
;;;1316   				intern->m_object.m_lines[j] = intern->m_object.m_lines[j+1];
001ef0  1c5c              ADDS     r4,r3,#1
001ef2  eb010684          ADD      r6,r1,r4,LSL #2
001ef6  eb010383          ADD      r3,r1,r3,LSL #2
001efa  6876              LDR      r6,[r6,#4]
001efc  605e              STR      r6,[r3,#4]
001efe  b2e3              UXTB     r3,r4                 ;1315
                  |L1.7936|
001f00  788c              LDRB     r4,[r1,#2]            ;1315
001f02  429c              CMP      r4,r3                 ;1315
001f04  d8f4              BHI      |L1.7920|
;;;1317   			i--;
001f06  1e52              SUBS     r2,r2,#1
001f08  b2d2              UXTB     r2,r2
;;;1318   			m++;
001f0a  1c40              ADDS     r0,r0,#1
001f0c  b2c0              UXTB     r0,r0
                  |L1.7950|
001f0e  1c52              ADDS     r2,r2,#1              ;1309
001f10  b2d2              UXTB     r2,r2                 ;1309
                  |L1.7954|
001f12  2900              CMP      r1,#0                 ;1309
001f14  d002              BEQ      |L1.7964|
001f16  788b              LDRB     r3,[r1,#2]            ;1309
001f18  4293              CMP      r3,r2                 ;1309
001f1a  d8d3              BHI      |L1.7876|
                  |L1.7964|
;;;1319   		}
;;;1320   	}
;;;1321   	return m;
;;;1322   }
001f1c  bd70              POP      {r4-r6,pc}
;;;1323   
                          ENDP

                  _Z10removeLineP14SimpleListNodeI5Line2E PROC ; removeLine(SimpleListNode<Line2>*)
;;;1324   
;;;1325   void removeLine(SimpleListNode<Line2> *linen)
001f1e  b510              PUSH     {r4,lr}
;;;1326   {	
001f20  4604              MOV      r4,r0
;;;1327   	removeLine(linen, linen->m_object.m_i0);
001f22  4620              MOV      r0,r4
001f24  68a1              LDR      r1,[r4,#8]
001f26  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2EPS_I12IntersectionE ; removeLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*)
;;;1328   	removeLine(linen, linen->m_object.m_i1);
001f2a  4620              MOV      r0,r4
001f2c  68e1              LDR      r1,[r4,#0xc]
001f2e  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2EPS_I12IntersectionE ; removeLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*)
;;;1329   	
;;;1330   #if 0
;;;1331   	// remove line from g_lines
;;;1332   	for (i=0; i<g_lineIndex; i++)
;;;1333   	{
;;;1334   		if (g_lines[i]==linen)
;;;1335   		{
;;;1336   			g_lines[i] = NULL;
;;;1337   			break;
;;;1338   		}
;;;1339   	}
;;;1340   #endif
;;;1341   	
;;;1342   	// remove line from g_linesList
;;;1343   	g_linesList.remove(linen);
001f32  4621              MOV      r1,r4
001f34  e8bd4010          POP      {r4,lr}
001f38  48f9              LDR      r0,|L1.8992|
001f3a  f7ffbffe          B.W      _ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E ; SimpleList<Line2>::remove(SimpleListNode<Line2>*)
;;;1344   	
;;;1345   }
;;;1346   
                          ENDP

                  _Z11replaceLineP14SimpleListNodeI5Line2ES2_ PROC ; replaceLine(SimpleListNode<Line2>*, SimpleListNode<Line2>*)
;;;1347   void replaceLine(SimpleListNode<Line2> *linen, SimpleListNode<Line2> *linenx)
001f3e  b430              PUSH     {r4,r5}
;;;1348   {
;;;1349   	uint8_t i;
;;;1350   	SimpleListNode<Intersection> *j;
;;;1351   
;;;1352   #if 0	
;;;1353   	for (i=0; i<g_lineIndex; i++)
;;;1354   	{
;;;1355   		if (g_lines[i]==linenx)
;;;1356   		{
;;;1357   			g_lines[i] = linen;
;;;1358   			break;
;;;1359   		}
;;;1360   	}
;;;1361   #endif
;;;1362   	
;;;1363   	// remove line from existing intersections
;;;1364   	for (j=g_intersectionsList.m_first; j!=NULL; j=j->m_next)
001f40  4af7              LDR      r2,|L1.8992|
001f42  3224              ADDS     r2,r2,#0x24
001f44  6813              LDR      r3,[r2,#0]  ; g_intersectionsList
001f46  e00d              B        |L1.8036|
                  |L1.8008|
;;;1365   	{
;;;1366   		for (i=0; i<j->m_object.m_n; i++)
001f48  2200              MOVS     r2,#0
001f4a  e007              B        |L1.8028|
                  |L1.8012|
;;;1367   		{
;;;1368   			if (j->m_object.m_lines[i]==linenx)
001f4c  eb030482          ADD      r4,r3,r2,LSL #2
001f50  6865              LDR      r5,[r4,#4]
001f52  428d              CMP      r5,r1
001f54  d100              BNE      |L1.8024|
;;;1369   			{
;;;1370   				j->m_object.m_lines[i] = linen;
001f56  6060              STR      r0,[r4,#4]
                  |L1.8024|
001f58  1c52              ADDS     r2,r2,#1              ;1366
001f5a  b2d2              UXTB     r2,r2                 ;1366
                  |L1.8028|
001f5c  789c              LDRB     r4,[r3,#2]            ;1366
001f5e  4294              CMP      r4,r2                 ;1366
001f60  d8f4              BHI      |L1.8012|
001f62  6a5b              LDR      r3,[r3,#0x24]         ;1364
                  |L1.8036|
001f64  2b00              CMP      r3,#0                 ;1364
001f66  d1ef              BNE      |L1.8008|
;;;1371   //				break;
;;;1372   			}
;;;1373   		}
;;;1374   	}
;;;1375   	
;;;1376   	g_linesList.remove(linenx);
001f68  bc30              POP      {r4,r5}
001f6a  48ed              LDR      r0,|L1.8992|
001f6c  f7ffbffe          B.W      _ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E ; SimpleList<Line2>::remove(SimpleListNode<Line2>*)
;;;1377   }
;;;1378   
                          ENDP

                  _Z17formIntersectionsv PROC ; formIntersections()
;;;1379   
;;;1380   void formIntersections()
001f70  e92d5ff0          PUSH     {r4-r12,lr}
;;;1381   {
;;;1382   	SimpleListNode<Nadir> *i;
;;;1383   	uint8_t j, li;
;;;1384   
;;;1385   	checkGraph(__LINE__);
001f74  2300              MOVS     r3,#0
001f76  461a              MOV      r2,r3
001f78  4619              MOV      r1,r3
001f7a  f2405069          MOV      r0,#0x569
001f7e  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1386   	
;;;1387   	// go through nadir list and break up the lines
;;;1388   	for (i=g_nadirsList.m_first; i!=NULL; i=i->m_next)
001f82  48e7              LDR      r0,|L1.8992|
001f84  3018              ADDS     r0,r0,#0x18
001f86  6805              LDR      r5,[r0,#0]  ; g_nadirsList
001f88  f04f0a00          MOV      r10,#0
;;;1389   	{
;;;1390   		SimpleListNode<Intersection> *intern = new (std::nothrow) SimpleListNode<Intersection>;
;;;1391   		if (intern==NULL)
;;;1392   			return;
;;;1393   		Intersection *inter = &intern->m_object;
;;;1394   		inter->m_p = i->m_object.m_pavg;
;;;1395   		// look at each point/line in the list
;;;1396   		// If it's an endpoint, we extend the line to the intersection point (avg)
;;;1397   		// if it's not endpoint, we need to break the line and form 2 lines, each with the endpoint at the intersection
;;;1398   		
;;;1399   		for (j=inter->m_n=0; j<i->m_object.m_n && inter->m_n<LINE_MAX_INTERSECTION_LINES; j++)
;;;1400   		{
;;;1401   			Line2 *line;
;;;1402   			SimpleListNode<Line2> *linen;
;;;1403   			const Point &pt = i->m_object.m_points[j];
;;;1404   			li = LINE_GRID_LINE_P(pt); 
001f8c  f8dfb394          LDR      r11,|L1.8996|
001f90  e09d              B        |L1.8398|
                  |L1.8082|
001f92  49e5              LDR      r1,|L1.9000|
001f94  2028              MOVS     r0,#0x28              ;1390
001f96  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
001f9a  b108              CBZ      r0,|L1.8096|
001f9c  f8c0a024          STR      r10,[r0,#0x24]        ;1390
                  |L1.8096|
001fa0  4606              MOV      r6,r0                 ;1390
001fa2  2e00              CMP      r6,#0                 ;1391
001fa4  d07e              BEQ      |L1.8356|
001fa6  8a28              LDRH     r0,[r5,#0x10]         ;1394
001fa8  8030              STRH     r0,[r6,#0]            ;1394
001faa  4657              MOV      r7,r10                ;1399
001fac  f886a002          STRB     r10,[r6,#2]           ;1399
001fb0  e073              B        |L1.8346|
                  |L1.8114|
001fb2  eb050947          ADD      r9,r5,r7,LSL #1       ;1403
001fb6  f8990001          LDRB     r0,[r9,#1]
001fba  ebc01100          RSB      r1,r0,r0,LSL #4
001fbe  eb011080          ADD      r0,r1,r0,LSL #6
001fc2  f8991000          LDRB     r1,[r9,#0]
001fc6  4408              ADD      r0,r0,r1
001fc8  f8db1054          LDR      r1,[r11,#0x54]  ; g_lineGrid
001fcc  f8118010          LDRB     r8,[r1,r0,LSL #1]
;;;1405   			if (li==0)
001fd0  f1b80f00          CMP      r8,#0
001fd4  d05f              BEQ      |L1.8342|
;;;1406   				continue;
;;;1407   			linen = g_lines[li];
001fd6  f8db0068          LDR      r0,[r11,#0x68]  ; g_lines
001fda  f8504028          LDR      r4,[r0,r8,LSL #2]
;;;1408   			line = &linen->m_object;
;;;1409   			checkGraph(__LINE__, 1, 2, intern);
001fde  4633              MOV      r3,r6
001fe0  2202              MOVS     r2,#2
001fe2  2101              MOVS     r1,#1
001fe4  f2405081          MOV      r0,#0x581
001fe8  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1410   			if (pt.equals(line->m_p0)) // matches p0
001fec  4621              MOV      r1,r4
001fee  4648              MOV      r0,r9
001ff0  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
001ff4  b1d8              CBZ      r0,|L1.8238|
;;;1411   			{
;;;1412   				line->m_p0 = inter->m_p; // extend line
001ff6  8831              LDRH     r1,[r6,#0]
001ff8  8021              STRH     r1,[r4,#0]
;;;1413   				if (line->m_i0) // if we are already pointing to another intersection, remove and add ours
001ffa  68a1              LDR      r1,[r4,#8]
001ffc  b111              CBZ      r1,|L1.8196|
;;;1414   					removeLine(linen, line->m_i0);
001ffe  4620              MOV      r0,r4
002000  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2EPS_I12IntersectionE ; removeLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*)
                  |L1.8196|
;;;1415   				inter->addLine(linen, intern, 0);
002004  2300              MOVS     r3,#0
002006  4632              MOV      r2,r6
002008  4621              MOV      r1,r4
00200a  4630              MOV      r0,r6
00200c  f7fffffe          BL       _ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh ; Intersection::addLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*, unsigned char)
;;;1416   				checkGraph(__LINE__, 0, 0, intern);
002010  2200              MOVS     r2,#0
002012  4633              MOV      r3,r6
002014  4611              MOV      r1,r2
002016  f44f60b1          MOV      r0,#0x588
00201a  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1417   				checkGraph(__LINE__, 1, 2);
00201e  2300              MOVS     r3,#0
002020  2202              MOVS     r2,#2
002022  2101              MOVS     r1,#1
002024  f2405089          MOV      r0,#0x589
002028  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
00202c  e033              B        |L1.8342|
                  |L1.8238|
;;;1418   			}
;;;1419   			else if (pt.equals(line->m_p1)) // matches p1
00202e  1ca1              ADDS     r1,r4,#2
002030  4648              MOV      r0,r9
002032  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
002036  b1d8              CBZ      r0,|L1.8304|
;;;1420   			{
;;;1421   				line->m_p1 = inter->m_p; // extend line
002038  8831              LDRH     r1,[r6,#0]
00203a  8061              STRH     r1,[r4,#2]
;;;1422   				if (line->m_i1) // if we are already pointing to another intersection, remove and add ours
00203c  68e1              LDR      r1,[r4,#0xc]
00203e  b111              CBZ      r1,|L1.8262|
;;;1423   					removeLine(linen, line->m_i1);
002040  4620              MOV      r0,r4
002042  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2EPS_I12IntersectionE ; removeLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*)
                  |L1.8262|
;;;1424   				inter->addLine(linen, intern, 1);
002046  2301              MOVS     r3,#1
002048  4632              MOV      r2,r6
00204a  4621              MOV      r1,r4
00204c  4630              MOV      r0,r6
00204e  f7fffffe          BL       _ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh ; Intersection::addLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*, unsigned char)
;;;1425   				checkGraph(__LINE__, 0, 0, intern);
002052  2200              MOVS     r2,#0
002054  4633              MOV      r3,r6
002056  4611              MOV      r1,r2
002058  f2405091          MOV      r0,#0x591
00205c  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1426   				checkGraph(__LINE__, 1, 2);
002060  2300              MOVS     r3,#0
002062  2202              MOVS     r2,#2
002064  2101              MOVS     r1,#1
002066  f2405092          MOV      r0,#0x592
00206a  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
00206e  e012              B        |L1.8342|
                  |L1.8304|
;;;1427   			}
;;;1428   			else
;;;1429   			{
;;;1430   				breakLine(i->m_next, li, intern);
002070  4632              MOV      r2,r6
002072  4641              MOV      r1,r8
002074  69a8              LDR      r0,[r5,#0x18]
002076  f7fffffe          BL       _Z9breakLineP14SimpleListNodeI5NadirEhPS_I12IntersectionE ; breakLine(SimpleListNode<Nadir>*, unsigned char, SimpleListNode<Intersection>*)
;;;1431   				checkGraph(__LINE__, 0, 0, intern);
00207a  2200              MOVS     r2,#0
00207c  4633              MOV      r3,r6
00207e  4611              MOV      r1,r2
002080  f2405097          MOV      r0,#0x597
002084  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1432   				checkGraph(__LINE__, 1, 2);
002088  2300              MOVS     r3,#0
00208a  2202              MOVS     r2,#2
00208c  2101              MOVS     r1,#1
00208e  f44f60b3          MOV      r0,#0x598
002092  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
                  |L1.8342|
002096  1c7f              ADDS     r7,r7,#1              ;1399
002098  b2ff              UXTB     r7,r7                 ;1399
                  |L1.8346|
00209a  7ca8              LDRB     r0,[r5,#0x12]         ;1399
00209c  42b8              CMP      r0,r7                 ;1399
00209e  d904              BLS      |L1.8362|
0020a0  78b0              LDRB     r0,[r6,#2]            ;1399
0020a2  e000              B        |L1.8358|
                  |L1.8356|
0020a4  e016              B        |L1.8404|
                  |L1.8358|
0020a6  2808              CMP      r0,#8                 ;1399
0020a8  d383              BCC      |L1.8114|
                  |L1.8362|
;;;1433   			}
;;;1434   		}
;;;1435   		g_intersectionsList.add(intern);
0020aa  489d              LDR      r0,|L1.8992|
0020ac  3024              ADDS     r0,r0,#0x24
0020ae  8901              LDRH     r1,[r0,#8]
0020b0  1c49              ADDS     r1,r1,#1
0020b2  8101              STRH     r1,[r0,#8]
0020b4  6801              LDR      r1,[r0,#0]
0020b6  b171              CBZ      r1,|L1.8406|
0020b8  6841              LDR      r1,[r0,#4]
0020ba  624e              STR      r6,[r1,#0x24]
                  |L1.8380|
0020bc  6046              STR      r6,[r0,#4]
;;;1436   		checkGraph(__LINE__);
0020be  2300              MOVS     r3,#0
0020c0  461a              MOV      r2,r3
0020c2  4619              MOV      r1,r3
0020c4  f240509c          MOV      r0,#0x59c
0020c8  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
0020cc  69ad              LDR      r5,[r5,#0x18]         ;1388
                  |L1.8398|
0020ce  2d00              CMP      r5,#0                 ;1388
0020d0  f47faf5f          BNE      |L1.8082|
                  |L1.8404|
;;;1437   	}
;;;1438   }	
0020d4  e4ee              B        |L1.6836|
                  |L1.8406|
0020d6  6006              STR      r6,[r0,#0]
0020d8  e7f0              B        |L1.8380|
;;;1439   
                          ENDP

                  _Z29removeShortLinesIntersectionsv PROC ; removeShortLinesIntersections()
;;;1547   
;;;1548   uint16_t removeShortLinesIntersections()
0020da  e92d5ff0          PUSH     {r4-r12,lr}
;;;1549   {
;;;1550   	uint8_t i, si;
;;;1551   	SimpleListNode<Intersection> *j;
;;;1552   	uint16_t n, m, length, shortest;
;;;1553   	
;;;1554   	// look through intersections removing short lines
;;;1555   	// we remove the shortest lines first because we want to preserve the next-longest line for when we get to lines==2
;;;1556   	for (j=g_intersectionsList.m_first, m=0; j!=NULL; j=j->m_next)
0020de  4890              LDR      r0,|L1.8992|
0020e0  3024              ADDS     r0,r0,#0x24
0020e2  6805              LDR      r5,[r0,#0]  ; g_intersectionsList
0020e4  f04f0900          MOV      r9,#0
0020e8  e039              B        |L1.8542|
                  |L1.8426|
;;;1557   	{
;;;1558   		while(1)
;;;1559   		{
;;;1560   			checkGraph(__LINE__);
0020ea  f44f6bc3          MOV      r11,#0x618
;;;1561   			n = 0;
;;;1562   			// If there are 2 lines in the intersection, no reason to trim (we'll merge them)
;;;1563   			//if (j->m_object.m_n<=2)
;;;1564   			//	break;
;;;1565   			
;;;1566   			// find shortest line in intersection
;;;1567   			for (i=0, shortest=0xffff, si=0; i<j->m_object.m_n; i++)
0020ee  f64f7aff          MOV      r10,#0xffff
0020f2  e028              B        |L1.8518|
                  |L1.8436|
;;;1568   			{
;;;1569   				length = j->m_object.m_lines[i]->m_object.length2();
0020f4  eb050084          ADD      r0,r5,r4,LSL #2
0020f8  6840              LDR      r0,[r0,#4]
0020fa  f7fffffe          BL       _ZNK5Line27length2Ev ; Line2::length2() const
;;;1570   				if (length<shortest)
0020fe  42b0              CMP      r0,r6
002100  d201              BCS      |L1.8454|
;;;1571   				{
;;;1572   					si = i;
002102  46a0              MOV      r8,r4
;;;1573   					shortest = length;
002104  4606              MOV      r6,r0
                  |L1.8454|
002106  1c64              ADDS     r4,r4,#1              ;1567
002108  b2e4              UXTB     r4,r4                 ;1567
                  |L1.8458|
00210a  78a8              LDRB     r0,[r5,#2]            ;1567
00210c  42a0              CMP      r0,r4                 ;1567
00210e  d8f1              BHI      |L1.8436|
;;;1574   				}
;;;1575   			}
;;;1576   				
;;;1577   			// if it's shorter than g_minLineLength2, possibly remove it 
;;;1578   			if (shortest<g_minLineLength2)
002110  4884              LDR      r0,|L1.8996|
002112  6cc0              LDR      r0,[r0,#0x4c]  ; g_minLineLength2
002114  4286              CMP      r6,r0
002116  d20e              BCS      |L1.8502|
;;;1579   			{
;;;1580   				SimpleListNode<Line2> *linen = j->m_object.m_lines[si];
002118  eb050088          ADD      r0,r5,r8,LSL #2
00211c  6840              LDR      r0,[r0,#4]
;;;1581   				// one of the intersection pointers needs to be NULL, the other is our intersection
;;;1582   				// if they are both non-NULL, this line bridges 2 intersections, so we can't remove
;;;1583   				if (linen->m_object.m_i0==NULL || linen->m_object.m_i1==NULL)
00211e  6881              LDR      r1,[r0,#8]
002120  b109              CBZ      r1,|L1.8486|
002122  68c1              LDR      r1,[r0,#0xc]
002124  b939              CBNZ     r1,|L1.8502|
                  |L1.8486|
;;;1584   				{
;;;1585   					removeLine(linen);
002126  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
;;;1586   					n++;
00212a  1c7f              ADDS     r7,r7,#1
00212c  b2bf              UXTH     r7,r7
;;;1587   					m++;
00212e  f1090901          ADD      r9,r9,#1
002132  fa1ff989          UXTH     r9,r9
                  |L1.8502|
;;;1588   				}
;;;1589   			}
;;;1590   			checkGraph(__LINE__);
002136  2300              MOVS     r3,#0
002138  461a              MOV      r2,r3
00213a  4619              MOV      r1,r3
00213c  f2406036          MOV      r0,#0x636
002140  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1591   			if (n==0)
002144  b157              CBZ      r7,|L1.8540|
                  |L1.8518|
002146  2300              MOVS     r3,#0                 ;1560
002148  461a              MOV      r2,r3                 ;1560
00214a  4619              MOV      r1,r3                 ;1560
00214c  4658              MOV      r0,r11                ;1560
00214e  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
002152  2700              MOVS     r7,#0                 ;1561
002154  2400              MOVS     r4,#0                 ;1567
002156  4656              MOV      r6,r10                ;1567
002158  46a0              MOV      r8,r4                 ;1567
00215a  e7d6              B        |L1.8458|
                  |L1.8540|
00215c  6a6d              LDR      r5,[r5,#0x24]         ;1556
                  |L1.8542|
00215e  2d00              CMP      r5,#0                 ;1556
002160  d1c3              BNE      |L1.8426|
;;;1592   				break;
;;;1593   		}
;;;1594   	}
;;;1595   	return m;
002162  4648              MOV      r0,r9
;;;1596   }
002164  e4a6              B        |L1.6836|
;;;1597   
                          ENDP

                  _Z15equivalentLinesRK5Line2S1_ PROC ; equivalentLines(const Line2&, const Line2&)
;;;1598   bool equivalentLines(const Line2 &line0, const Line2 &line1)
002166  b570              PUSH     {r4-r6,lr}
;;;1599   {
002168  4605              MOV      r5,r0
00216a  460c              MOV      r4,r1
;;;1600   	return ((line0.m_p0.equals(line1.m_p0) && line0.m_p1.equals(line1.m_p1)) ||
00216c  4621              MOV      r1,r4
00216e  4628              MOV      r0,r5
002170  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
002174  b120              CBZ      r0,|L1.8576|
002176  1ca1              ADDS     r1,r4,#2
002178  1ca8              ADDS     r0,r5,#2
00217a  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
00217e  b948              CBNZ     r0,|L1.8596|
                  |L1.8576|
;;;1601   		(line0.m_p0.equals(line1.m_p1) && line0.m_p1.equals(line1.m_p0)));
002180  1ca1              ADDS     r1,r4,#2
002182  4628              MOV      r0,r5
002184  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
002188  b130              CBZ      r0,|L1.8600|
00218a  4621              MOV      r1,r4
00218c  1ca8              ADDS     r0,r5,#2
00218e  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
002192  b108              CBZ      r0,|L1.8600|
                  |L1.8596|
002194  2001              MOVS     r0,#1                 ;1600
;;;1602   }
002196  bd70              POP      {r4-r6,pc}
                  |L1.8600|
002198  2000              MOVS     r0,#0                 ;1600
00219a  bd70              POP      {r4-r6,pc}
;;;1603   
                          ENDP

                  _Z13minAngleLinesRK5Line2S1_RK5Pointj PROC ; minAngleLines(const Line2&, const Line2&, const Point&, unsigned)
;;;1604   bool minAngleLines(const Line2 &line0, const Line2 &line1, const Point &p, uint32_t minAngle)
00219c  b5fe              PUSH     {r1-r7,lr}
;;;1605   {
00219e  4604              MOV      r4,r0
0021a0  460d              MOV      r5,r1
0021a2  4617              MOV      r7,r2
0021a4  461e              MOV      r6,r3
;;;1606   	Point p01, p11;
;;;1607   	
;;;1608   	if (p.equals(line0.m_p0))
0021a6  4621              MOV      r1,r4
0021a8  4638              MOV      r0,r7
0021aa  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
0021ae  b110              CBZ      r0,|L1.8630|
;;;1609   		p01 = line0.m_p1;
0021b0  8860              LDRH     r0,[r4,#2]
0021b2  9002              STR      r0,[sp,#8]
0021b4  e001              B        |L1.8634|
                  |L1.8630|
;;;1610   	else
;;;1611   		p01 = line0.m_p0;
0021b6  6820              LDR      r0,[r4,#0]
0021b8  9002              STR      r0,[sp,#8]
                  |L1.8634|
;;;1612   	if (p.equals(line1.m_p0))
0021ba  4629              MOV      r1,r5
0021bc  4638              MOV      r0,r7
0021be  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
0021c2  b110              CBZ      r0,|L1.8650|
;;;1613   		p11 = line1.m_p1;
0021c4  8868              LDRH     r0,[r5,#2]
0021c6  9001              STR      r0,[sp,#4]
0021c8  e001              B        |L1.8654|
                  |L1.8650|
;;;1614   	else
;;;1615   		p11 = line1.m_p0;
0021ca  6828              LDR      r0,[r5,#0]
0021cc  9001              STR      r0,[sp,#4]
                  |L1.8654|
;;;1616   	
;;;1617   	return (tanDiffAbs1000(p, p01, p, p11) <= minAngle);
0021ce  2000              MOVS     r0,#0
0021d0  9000              STR      r0,[sp,#0]
0021d2  ab01              ADD      r3,sp,#4
0021d4  463a              MOV      r2,r7
0021d6  a902              ADD      r1,sp,#8
0021d8  4638              MOV      r0,r7
0021da  f7fffffe          BL       _Z14tanDiffAbs1000RK5PointS1_S1_S1_b ; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
0021de  42b0              CMP      r0,r6
0021e0  d801              BHI      |L1.8678|
0021e2  2001              MOVS     r0,#1
;;;1618   }
0021e4  bdfe              POP      {r1-r7,pc}
                  |L1.8678|
0021e6  2000              MOVS     r0,#0                 ;1617
0021e8  bdfe              POP      {r1-r7,pc}
;;;1619   
                          ENDP

                  _Z33removeRedundantLinesIntersectionsv PROC ; removeRedundantLinesIntersections()
;;;1620   uint16_t removeRedundantLinesIntersections()
0021ea  e92d47f0          PUSH     {r4-r10,lr}
;;;1621   {
;;;1622   	uint8_t i, j, n;
;;;1623   	SimpleListNode<Intersection> *k;
;;;1624   
;;;1625   	for (k=g_intersectionsList.m_first, n=0; k!=NULL; k=k->m_next)
0021ee  484c              LDR      r0,|L1.8992|
0021f0  3024              ADDS     r0,r0,#0x24
0021f2  f8d08000          LDR      r8,[r0,#0]  ; g_intersectionsList
0021f6  2500              MOVS     r5,#0
0021f8  e06a              B        |L1.8912|
                  |L1.8698|
;;;1626   	{
;;;1627   		// perform n^2 search of lines within this intersection
;;;1628   		for (i=0; i<k->m_object.m_n; i++)
0021fa  2600              MOVS     r6,#0
0021fc  e062              B        |L1.8900|
                  |L1.8702|
;;;1629   		{
;;;1630   			for (j=i+1; j<k->m_object.m_n; j++)
0021fe  1c70              ADDS     r0,r6,#1
002200  b2c4              UXTB     r4,r0
002202  e059              B        |L1.8888|
                  |L1.8708|
;;;1631   			{
;;;1632   				// Check for equivalent lines...
;;;1633   				if (equivalentLines(k->m_object.m_lines[i]->m_object, k->m_object.m_lines[j]->m_object))
002204  eb080784          ADD      r7,r8,r4,LSL #2
002208  eb080986          ADD      r9,r8,r6,LSL #2
00220c  6879              LDR      r1,[r7,#4]
00220e  f8d90004          LDR      r0,[r9,#4]
002212  f7fffffe          BL       _Z15equivalentLinesRK5Line2S1_ ; equivalentLines(const Line2&, const Line2&)
002216  b138              CBZ      r0,|L1.8744|
;;;1634   				{
;;;1635   					removeLine(k->m_object.m_lines[j]);
002218  6878              LDR      r0,[r7,#4]
00221a  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
;;;1636   					n++;
00221e  1c6d              ADDS     r5,r5,#1
002220  b2ed              UXTB     r5,r5
;;;1637   					j--; // list was shifted down, decrement so we don't skip an entry
002222  1e64              SUBS     r4,r4,#1
002224  b2e4              UXTB     r4,r4
002226  e045              B        |L1.8884|
                  |L1.8744|
;;;1638   				}
;;;1639   				// Check for lines with a small angle between them
;;;1640   				else if (minAngleLines(k->m_object.m_lines[i]->m_object, k->m_object.m_lines[j]->m_object, k->m_object.m_p, g_maxEquivTanAngle))
002228  4a3e              LDR      r2,|L1.8996|
00222a  6879              LDR      r1,[r7,#4]
00222c  f8d90004          LDR      r0,[r9,#4]
002230  6f13              LDR      r3,[r2,#0x70]  ; g_maxEquivTanAngle
002232  4642              MOV      r2,r8
002234  f7fffffe          BL       _Z13minAngleLinesRK5Line2S1_RK5Pointj ; minAngleLines(const Line2&, const Line2&, const Point&, unsigned)
002238  b370              CBZ      r0,|L1.8856|
;;;1641   				{
;;;1642   					// lines i and j have a small angle between them.  Which do we delete?  Which line is longer?  What if the shorter one is connected to another intersection?
;;;1643   					// if i is longer than j
;;;1644   					if (k->m_object.m_lines[i]->m_object.length2() > k->m_object.m_lines[j]->m_object.length2())
00223a  f8d90004          LDR      r0,[r9,#4]
00223e  f7fffffe          BL       _ZNK5Line27length2Ev ; Line2::length2() const
002242  4682              MOV      r10,r0
002244  6878              LDR      r0,[r7,#4]
002246  f7fffffe          BL       _ZNK5Line27length2Ev ; Line2::length2() const
00224a  4582              CMP      r10,r0
00224c  d919              BLS      |L1.8834|
;;;1645   					{
;;;1646   						// remove line j, since it's shorter, unless it's connected...
;;;1647   						if (k->m_object.m_lines[j]->m_object.m_i0==NULL || k->m_object.m_lines[j]->m_object.m_i1==NULL)
00224e  6878              LDR      r0,[r7,#4]
002250  6881              LDR      r1,[r0,#8]
002252  b141              CBZ      r1,|L1.8806|
002254  68c1              LDR      r1,[r0,#0xc]
002256  b131              CBZ      r1,|L1.8806|
;;;1648   						{
;;;1649   							removeLine(k->m_object.m_lines[j]);
;;;1650   							n++;
;;;1651   							j--; // list was shifted down, decrement so we don't skip an entry
;;;1652   						}
;;;1653   						// otherwise remove line i, if it's not connected (we know that it's connected this intersection, so if it has at least 1 NULL intersection pointer...)
;;;1654   						else if (k->m_object.m_lines[i]->m_object.m_i0==NULL || k->m_object.m_lines[i]->m_object.m_i1==NULL)
002258  f8d90004          LDR      r0,[r9,#4]
00225c  6881              LDR      r1,[r0,#8]
00225e  b149              CBZ      r1,|L1.8820|
002260  68c1              LDR      r1,[r0,#0xc]
002262  b139              CBZ      r1,|L1.8820|
002264  e026              B        |L1.8884|
                  |L1.8806|
002266  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
00226a  1c6d              ADDS     r5,r5,#1              ;1650
00226c  b2ed              UXTB     r5,r5                 ;1650
00226e  1e64              SUBS     r4,r4,#1              ;1651
002270  b2e4              UXTB     r4,r4                 ;1651
002272  e01f              B        |L1.8884|
                  |L1.8820|
;;;1655   						{
;;;1656   							removeLine(k->m_object.m_lines[i]);
002274  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
;;;1657   							n++;
002278  1c6d              ADDS     r5,r5,#1
00227a  b2ed              UXTB     r5,r5
;;;1658   							i--; // list was shifted down, decrement so we don't skip an entry
00227c  1e76              SUBS     r6,r6,#1
00227e  b2f6              UXTB     r6,r6
;;;1659   							break; // then exit, since it affects our i-th index
002280  e01e              B        |L1.8896|
                  |L1.8834|
;;;1660   						}
;;;1661   					}
;;;1662   					else // Line j is longer than i
;;;1663   					{
;;;1664   						// remove line i, since it's shorter, unless it's connected... 
;;;1665   						if (k->m_object.m_lines[i]->m_object.m_i0==NULL || k->m_object.m_lines[i]->m_object.m_i1==NULL)
002282  f8d90004          LDR      r0,[r9,#4]
002286  6881              LDR      r1,[r0,#8]
002288  b139              CBZ      r1,|L1.8858|
00228a  68c1              LDR      r1,[r0,#0xc]
00228c  b129              CBZ      r1,|L1.8858|
;;;1666   						{
;;;1667   							removeLine(k->m_object.m_lines[i]);
;;;1668   							n++;
;;;1669   							i--; // list was shifted down, decrement so we don't skip an entry
;;;1670   							break; // then exit, since it affects our i-th index
;;;1671   						}
;;;1672   						// otherwise remove line j, if it's not connected
;;;1673   						else if (k->m_object.m_lines[j]->m_object.m_i0==NULL || k->m_object.m_lines[j]->m_object.m_i1==NULL)
00228e  6878              LDR      r0,[r7,#4]
002290  6881              LDR      r1,[r0,#8]
002292  b149              CBZ      r1,|L1.8872|
002294  68c1              LDR      r1,[r0,#0xc]
002296  b139              CBZ      r1,|L1.8872|
                  |L1.8856|
002298  e00c              B        |L1.8884|
                  |L1.8858|
00229a  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
00229e  1c6d              ADDS     r5,r5,#1              ;1668
0022a0  b2ed              UXTB     r5,r5                 ;1668
0022a2  1e76              SUBS     r6,r6,#1              ;1669
0022a4  b2f6              UXTB     r6,r6                 ;1669
0022a6  e00b              B        |L1.8896|
                  |L1.8872|
;;;1674   						{
;;;1675   							removeLine(k->m_object.m_lines[j]);
0022a8  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
;;;1676   							n++;
0022ac  1c6d              ADDS     r5,r5,#1
0022ae  b2ed              UXTB     r5,r5
;;;1677   							j--; // list was shifted down, decrement so we don't skip an entry
0022b0  1e64              SUBS     r4,r4,#1
0022b2  b2e4              UXTB     r4,r4
                  |L1.8884|
0022b4  1c64              ADDS     r4,r4,#1              ;1630
0022b6  b2e4              UXTB     r4,r4                 ;1630
                  |L1.8888|
0022b8  f8980002          LDRB     r0,[r8,#2]            ;1630
0022bc  42a0              CMP      r0,r4                 ;1630
0022be  d8a1              BHI      |L1.8708|
                  |L1.8896|
0022c0  1c76              ADDS     r6,r6,#1              ;1628
0022c2  b2f6              UXTB     r6,r6                 ;1628
                  |L1.8900|
0022c4  f8980002          LDRB     r0,[r8,#2]            ;1628
0022c8  42b0              CMP      r0,r6                 ;1628
0022ca  d898              BHI      |L1.8702|
0022cc  f8d88024          LDR      r8,[r8,#0x24]         ;1625
                  |L1.8912|
0022d0  f1b80f00          CMP      r8,#0                 ;1625
0022d4  d191              BNE      |L1.8698|
;;;1678   						}
;;;1679   					}
;;;1680   				}
;;;1681   			}
;;;1682   		}
;;;1683   	}
;;;1684   	checkGraph(__LINE__);
0022d6  2300              MOVS     r3,#0
0022d8  461a              MOV      r2,r3
0022da  4619              MOV      r1,r3
0022dc  f2406094          MOV      r0,#0x694
0022e0  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1685   	
;;;1686   	return n;
0022e4  4628              MOV      r0,r5
                  |L1.8934|
;;;1687   }
0022e6  e8bd87f0          POP      {r4-r10,pc}
;;;1688   
                          ENDP

                  _Z21simplifyIntersectionsv PROC ; simplifyIntersections()
;;;1689   uint16_t simplifyIntersections()
0022ea  e92d47f0          PUSH     {r4-r10,lr}
;;;1690   {
;;;1691   	uint16_t n;
;;;1692   	SimpleListNode<Intersection> *j, *jnext;
;;;1693   
;;;1694   	checkGraph(__LINE__);
0022ee  2300              MOVS     r3,#0
0022f0  461a              MOV      r2,r3
0022f2  4619              MOV      r1,r3
0022f4  f240609e          MOV      r0,#0x69e
0022f8  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1695   
;;;1696   	// look through intersections dealing with 0, 1 and 2-line intersections
;;;1697   	for (j=g_intersectionsList.m_first, n=0; j!=NULL; j=jnext)
0022fc  4808              LDR      r0,|L1.8992|
0022fe  3024              ADDS     r0,r0,#0x24
002300  6804              LDR      r4,[r0,#0]  ; g_intersectionsList
002302  2700              MOVS     r7,#0
;;;1698   	{
;;;1699   		jnext = j->m_next;
;;;1700   		if (j->m_object.m_n==0)
;;;1701   		{
;;;1702   			g_intersectionsList.remove(j);
;;;1703   			checkGraph(__LINE__);
;;;1704   			n++;
;;;1705   		}
;;;1706   		else if (j->m_object.m_n==1)
;;;1707   		{
;;;1708   			if (j->m_object.m_lines[0]->m_object.m_i0==j)
;;;1709   				j->m_object.m_lines[0]->m_object.m_i0 = NULL;
;;;1710   			if (j->m_object.m_lines[0]->m_object.m_i1==j)
;;;1711   				j->m_object.m_lines[0]->m_object.m_i1 = NULL;
;;;1712   			g_intersectionsList.remove(j);
;;;1713   			checkGraph(__LINE__);
;;;1714   			n++;
;;;1715   		}
;;;1716   		else if (j->m_object.m_n==2 && 
;;;1717   			j->m_object.m_p.m_x>g_minLineLength && j->m_object.m_p.m_x<LINE_GRID_WIDTH-g_minLineLength && // do not simplify intersections that are
002304  f8dfa01c          LDR      r10,|L1.8996|
002308  46b8              MOV      r8,r7
00230a  e0ab              B        |L1.9316|
                  |L1.8972|
00230c  f8d49024          LDR      r9,[r4,#0x24]         ;1699
002310  78a0              LDRB     r0,[r4,#2]            ;1700
002312  b158              CBZ      r0,|L1.9004|
002314  2801              CMP      r0,#1                 ;1706
002316  d017              BEQ      |L1.9032|
002318  2802              CMP      r0,#2                 ;1716
00231a  d02f              BEQ      |L1.9084|
00231c  e0a1              B        |L1.9314|
00231e  0000              DCW      0x0000
                  |L1.8992|
                          DCD      ||.bss||+0xc
                  |L1.8996|
                          DCD      ||.data||
                  |L1.9000|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.9004|
00232c  4621              MOV      r1,r4                 ;1702
00232e  48fb              LDR      r0,|L1.10012|
002330  f7fffffe          BL       _ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E ; SimpleList<Intersection>::remove(SimpleListNode<Intersection>*)
002334  2300              MOVS     r3,#0                 ;1703
002336  461a              MOV      r2,r3                 ;1703
002338  4619              MOV      r1,r3                 ;1703
00233a  f24060a7          MOV      r0,#0x6a7             ;1703
00233e  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
002342  1c7f              ADDS     r7,r7,#1              ;1704
002344  b2bf              UXTH     r7,r7                 ;1704
002346  e08c              B        |L1.9314|
                  |L1.9032|
002348  6860              LDR      r0,[r4,#4]            ;1708
00234a  6881              LDR      r1,[r0,#8]            ;1708
00234c  42a1              CMP      r1,r4                 ;1708
00234e  d101              BNE      |L1.9044|
002350  f8c08008          STR      r8,[r0,#8]            ;1709
                  |L1.9044|
002354  6860              LDR      r0,[r4,#4]            ;1710
002356  68c1              LDR      r1,[r0,#0xc]          ;1710
002358  42a1              CMP      r1,r4                 ;1710
00235a  d101              BNE      |L1.9056|
00235c  f8c0800c          STR      r8,[r0,#0xc]          ;1711
                  |L1.9056|
002360  4621              MOV      r1,r4                 ;1712
002362  48ee              LDR      r0,|L1.10012|
002364  f7fffffe          BL       _ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E ; SimpleList<Intersection>::remove(SimpleListNode<Intersection>*)
002368  2300              MOVS     r3,#0                 ;1713
00236a  461a              MOV      r2,r3                 ;1713
00236c  4619              MOV      r1,r3                 ;1713
00236e  f24060b1          MOV      r0,#0x6b1             ;1713
002372  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
002376  1c7f              ADDS     r7,r7,#1              ;1714
002378  b2bf              UXTH     r7,r7                 ;1714
00237a  e072              B        |L1.9314|
                  |L1.9084|
00237c  7821              LDRB     r1,[r4,#0]
00237e  f8da0050          LDR      r0,[r10,#0x50]  ; g_minLineLength
002382  4281              CMP      r1,r0
002384  d96d              BLS      |L1.9314|
002386  f1c0024f          RSB      r2,r0,#0x4f
00238a  4291              CMP      r1,r2
00238c  d269              BCS      |L1.9314|
;;;1718   			j->m_object.m_p.m_y>g_minLineLength && j->m_object.m_p.m_y<LINE_GRID_HEIGHT-g_minLineLength) // close to any edge because they don't look like intersections.
00238e  7861              LDRB     r1,[r4,#1]
002390  4281              CMP      r1,r0
002392  d966              BLS      |L1.9314|
002394  f1c00034          RSB      r0,r0,#0x34
002398  4281              CMP      r1,r0
00239a  d262              BCS      |L1.9314|
;;;1719   		{
;;;1720   			SimpleListNode<Line2> *linen0 = j->m_object.m_lines[0];
00239c  6865              LDR      r5,[r4,#4]
;;;1721   			SimpleListNode<Line2> *linen1 = j->m_object.m_lines[1];
00239e  68a6              LDR      r6,[r4,#8]
;;;1722   			g_intersectionsList.remove(j);
0023a0  4621              MOV      r1,r4
0023a2  48de              LDR      r0,|L1.10012|
0023a4  f7fffffe          BL       _ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E ; SimpleList<Intersection>::remove(SimpleListNode<Intersection>*)
;;;1723   			if (linen0->m_object.m_i0==j)
0023a8  68a8              LDR      r0,[r5,#8]
0023aa  42a0              CMP      r0,r4
0023ac  d129              BNE      |L1.9218|
;;;1724   			{
;;;1725   				if (linen1->m_object.m_i0==j)
0023ae  68b0              LDR      r0,[r6,#8]
0023b0  42a0              CMP      r0,r4
0023b2  d113              BNE      |L1.9180|
;;;1726   				{
;;;1727   					// this case will lead to an intersection with two of the same line pointers, so get rid of linen1, proceed...
;;;1728   					if (linen0->m_object.m_i1==linen1->m_object.m_i1 && linen1->m_object.m_i1!=NULL)
0023b4  68e9              LDR      r1,[r5,#0xc]
0023b6  68f0              LDR      r0,[r6,#0xc]
0023b8  4281              CMP      r1,r0
0023ba  d106              BNE      |L1.9162|
0023bc  b128              CBZ      r0,|L1.9162|
;;;1729   					{
;;;1730   						linen0->m_object.m_i0 = NULL;
0023be  f8c58008          STR      r8,[r5,#8]
;;;1731   						removeLine(linen1);
0023c2  4630              MOV      r0,r6
0023c4  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
0023c8  e042              B        |L1.9296|
                  |L1.9162|
;;;1732   					}
;;;1733   					else
;;;1734   					{
;;;1735   						linen0->m_object.m_p0 = linen1->m_object.m_p1;
0023ca  8870              LDRH     r0,[r6,#2]
0023cc  8028              STRH     r0,[r5,#0]
;;;1736   						linen0->m_object.m_i0 = linen1->m_object.m_i1;
0023ce  68f0              LDR      r0,[r6,#0xc]
0023d0  60a8              STR      r0,[r5,#8]
;;;1737   						replaceLine(linen0, linen1);
0023d2  4631              MOV      r1,r6
0023d4  4628              MOV      r0,r5
0023d6  f7fffffe          BL       _Z11replaceLineP14SimpleListNodeI5Line2ES2_ ; replaceLine(SimpleListNode<Line2>*, SimpleListNode<Line2>*)
0023da  e039              B        |L1.9296|
                  |L1.9180|
;;;1738   					}
;;;1739   				}
;;;1740   				else
;;;1741   				{
;;;1742   					// this case will lead to an intersection with two of the same line pointers, so get rid of linen1, proceed...
;;;1743   					if (linen0->m_object.m_i1==linen1->m_object.m_i0 && linen1->m_object.m_i0!=NULL)
0023dc  68e9              LDR      r1,[r5,#0xc]
0023de  4281              CMP      r1,r0
0023e0  d106              BNE      |L1.9200|
0023e2  b128              CBZ      r0,|L1.9200|
;;;1744   					{
;;;1745   						linen0->m_object.m_i0 = NULL;
0023e4  f8c58008          STR      r8,[r5,#8]
;;;1746   						removeLine(linen1);
0023e8  4630              MOV      r0,r6
0023ea  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
0023ee  e02f              B        |L1.9296|
                  |L1.9200|
;;;1747   					}
;;;1748   					else
;;;1749   					{
;;;1750   						linen0->m_object.m_p0 = linen1->m_object.m_p0;
0023f0  8830              LDRH     r0,[r6,#0]
0023f2  8028              STRH     r0,[r5,#0]
;;;1751   						linen0->m_object.m_i0 = linen1->m_object.m_i0;
0023f4  68b0              LDR      r0,[r6,#8]
0023f6  60a8              STR      r0,[r5,#8]
;;;1752   						replaceLine(linen0, linen1);
0023f8  4631              MOV      r1,r6
0023fa  4628              MOV      r0,r5
0023fc  f7fffffe          BL       _Z11replaceLineP14SimpleListNodeI5Line2ES2_ ; replaceLine(SimpleListNode<Line2>*, SimpleListNode<Line2>*)
002400  e026              B        |L1.9296|
                  |L1.9218|
;;;1753   					}
;;;1754   				}
;;;1755   			}
;;;1756   			else
;;;1757   			{
;;;1758   				if (linen1->m_object.m_i0==j)
002402  68b1              LDR      r1,[r6,#8]
002404  42a1              CMP      r1,r4
002406  d112              BNE      |L1.9262|
;;;1759   				{
;;;1760   					// this case will lead to an intersection with two of the same line pointers, so get rid of linen1, proceed...
;;;1761   					if (linen0->m_object.m_i0==linen1->m_object.m_i1 && linen1->m_object.m_i1!=NULL)
002408  68f1              LDR      r1,[r6,#0xc]
00240a  4288              CMP      r0,r1
00240c  d106              BNE      |L1.9244|
00240e  b129              CBZ      r1,|L1.9244|
;;;1762   					{
;;;1763   						linen0->m_object.m_i1 = NULL;
002410  f8c5800c          STR      r8,[r5,#0xc]
;;;1764   						removeLine(linen1);
002414  4630              MOV      r0,r6
002416  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
00241a  e019              B        |L1.9296|
                  |L1.9244|
;;;1765   					}
;;;1766   					else
;;;1767   					{
;;;1768   						linen0->m_object.m_p1 = linen1->m_object.m_p1;
00241c  8870              LDRH     r0,[r6,#2]
00241e  8068              STRH     r0,[r5,#2]
;;;1769   						linen0->m_object.m_i1 = linen1->m_object.m_i1;
002420  68f0              LDR      r0,[r6,#0xc]
002422  60e8              STR      r0,[r5,#0xc]
;;;1770   						replaceLine(linen0, linen1);
002424  4631              MOV      r1,r6
002426  4628              MOV      r0,r5
002428  f7fffffe          BL       _Z11replaceLineP14SimpleListNodeI5Line2ES2_ ; replaceLine(SimpleListNode<Line2>*, SimpleListNode<Line2>*)
00242c  e010              B        |L1.9296|
                  |L1.9262|
;;;1771   					}
;;;1772   				}
;;;1773   				else
;;;1774   				{
;;;1775   					// this case will lead to an intersection with two of the same line pointers, so get rid of linen1, proceed...
;;;1776   					if (linen0->m_object.m_i0==linen1->m_object.m_i0 && linen1->m_object.m_i0!=NULL)
00242e  4288              CMP      r0,r1
002430  d106              BNE      |L1.9280|
002432  b129              CBZ      r1,|L1.9280|
;;;1777   					{
;;;1778   						linen0->m_object.m_i1 = NULL;
002434  f8c5800c          STR      r8,[r5,#0xc]
;;;1779   						removeLine(linen1);
002438  4630              MOV      r0,r6
00243a  f7fffffe          BL       _Z10removeLineP14SimpleListNodeI5Line2E ; removeLine(SimpleListNode<Line2>*)
00243e  e007              B        |L1.9296|
                  |L1.9280|
;;;1780   					}
;;;1781   					else
;;;1782   					{
;;;1783   						linen0->m_object.m_p1 = linen1->m_object.m_p0;
002440  8830              LDRH     r0,[r6,#0]
002442  8068              STRH     r0,[r5,#2]
;;;1784   						linen0->m_object.m_i1 = linen1->m_object.m_i0;
002444  68b0              LDR      r0,[r6,#8]
002446  60e8              STR      r0,[r5,#0xc]
;;;1785   						replaceLine(linen0, linen1);
002448  4631              MOV      r1,r6
00244a  4628              MOV      r0,r5
00244c  f7fffffe          BL       _Z11replaceLineP14SimpleListNodeI5Line2ES2_ ; replaceLine(SimpleListNode<Line2>*, SimpleListNode<Line2>*)
                  |L1.9296|
;;;1786   					}
;;;1787   				}
;;;1788   			}
;;;1789   			checkGraph(__LINE__);
002450  2300              MOVS     r3,#0
002452  461a              MOV      r2,r3
002454  4619              MOV      r1,r3
002456  f24060fd          MOV      r0,#0x6fd
00245a  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;1790   			n++;
00245e  1c7f              ADDS     r7,r7,#1
002460  b2bf              UXTH     r7,r7
                  |L1.9314|
002462  464c              MOV      r4,r9                 ;1697
                  |L1.9316|
002464  2c00              CMP      r4,#0                 ;1697
002466  f47faf51          BNE      |L1.8972|
;;;1791   		}
;;;1792   	}
;;;1793   	return n;
00246a  4638              MOV      r0,r7
;;;1794   }
00246c  e73b              B        |L1.8934|
;;;1795   
                          ENDP

                  _Z18cleanIntersectionsv PROC ; cleanIntersections()
;;;1796   void cleanIntersections()
00246e  b510              PUSH     {r4,lr}
                  |L1.9328|
;;;1797   {
;;;1798   	uint16_t n;
;;;1799   	
;;;1800   	while(1)
;;;1801   	{
;;;1802   		n = 0;
;;;1803   		n += removeShortLinesIntersections(); 
002470  f7fffffe          BL       _Z29removeShortLinesIntersectionsv ; removeShortLinesIntersections()
002474  4604              MOV      r4,r0
;;;1804   		n += removeRedundantLinesIntersections();
002476  f7fffffe          BL       _Z33removeRedundantLinesIntersectionsv ; removeRedundantLinesIntersections()
00247a  4404              ADD      r4,r4,r0
;;;1805   		n += simplifyIntersections();
00247c  f7fffffe          BL       _Z21simplifyIntersectionsv ; simplifyIntersections()
002480  4420              ADD      r0,r0,r4
002482  b280              UXTH     r0,r0
002484  2800              CMP      r0,#0                 ;1800
002486  d1f3              BNE      |L1.9328|
;;;1806   		
;;;1807   		if (n==0)
;;;1808   			break;
;;;1809   	}
;;;1810   }
002488  bd10              POP      {r4,pc}
;;;1811   
                          ENDP

                  _Z14removeMinLinest PROC ; removeMinLines(unsigned short)
;;;1812   void removeMinLines(uint16_t minLineLength)
00248a  b570              PUSH     {r4-r6,lr}
;;;1813   {
00248c  4605              MOV      r5,r0
;;;1814   	SimpleListNode<Line2> *i;
;;;1815   		
;;;1816   	for (i=g_linesList.m_first; i!=NULL; i=i->m_next)
00248e  48a3              LDR      r0,|L1.10012|
002490  3824              SUBS     r0,r0,#0x24
002492  6804              LDR      r4,[r0,#0]  ; g_linesList
002494  e00e              B        |L1.9396|
                  |L1.9366|
;;;1817   	{
;;;1818   		if (i->m_object.length2()<minLineLength && i->m_object.m_i0==NULL && i->m_object.m_i1==NULL)
002496  4620              MOV      r0,r4
002498  f7fffffe          BL       _ZNK5Line27length2Ev ; Line2::length2() const
00249c  42a8              CMP      r0,r5
00249e  d208              BCS      |L1.9394|
0024a0  68a0              LDR      r0,[r4,#8]
0024a2  b930              CBNZ     r0,|L1.9394|
0024a4  68e0              LDR      r0,[r4,#0xc]
0024a6  b920              CBNZ     r0,|L1.9394|
;;;1819   			g_linesList.remove(i);
0024a8  489c              LDR      r0,|L1.10012|
0024aa  4621              MOV      r1,r4
0024ac  3824              SUBS     r0,r0,#0x24
0024ae  f7fffffe          BL       _ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E ; SimpleList<Line2>::remove(SimpleListNode<Line2>*)
                  |L1.9394|
0024b2  6964              LDR      r4,[r4,#0x14]         ;1816
                  |L1.9396|
0024b4  2c00              CMP      r4,#0                 ;1816
0024b6  d1ee              BNE      |L1.9366|
;;;1820   	}
;;;1821   }
0024b8  bd70              POP      {r4-r6,pc}
;;;1822   
                          ENDP

                  _Z16sendLineSegmentsh PROC ; sendLineSegments(unsigned char)
;;;1823   
;;;1824   int sendLineSegments(uint8_t renderFlags)
0024ba  b570              PUSH     {r4-r6,lr}
;;;1825   {
0024bc  b08a              SUB      sp,sp,#0x28
;;;1826   	uint32_t len;
;;;1827   	uint8_t *lineData = (uint8_t *)g_lineSegsMem + CAM_PREBUF_LEN - CAM_FRAME_HEADER_LEN;
0024be  4c98              LDR      r4,|L1.10016|
0024c0  6e25              LDR      r5,[r4,#0x60]  ; g_lineSegsMem
0024c2  351c              ADDS     r5,r5,#0x1c
;;;1828   	
;;;1829   	// fill buffer contents manually for return data 
;;;1830   	len = Chirp::serialize(g_chirpUsb, (uint8_t *)lineData, LINE_MAX_SEGMENTS*sizeof(LineSeg), HTYPE(FOURCC('L','I','S','G')), HINT8(renderFlags), UINT16(LINE_GRID_WIDTH), UINT16(LINE_GRID_HEIGHT), UINTS8_NO_COPY(g_lineSegIndex*sizeof(LineSeg)), END);
0024c4  f9b4202c          LDRSH    r2,[r4,#0x2c]  ; g_lineSegIndex
0024c8  2300              MOVS     r3,#0
0024ca  eb020182          ADD      r1,r2,r2,LSL #2
0024ce  0049              LSLS     r1,r1,#1
0024d0  22b1              MOVS     r2,#0xb1
0024d2  2634              MOVS     r6,#0x34
0024d4  e9cd6206          STRD     r6,r2,[sp,#0x18]
0024d8  e9cd1308          STRD     r1,r3,[sp,#0x20]
0024dc  ab02              ADD      r3,sp,#8
0024de  2102              MOVS     r1,#2
0024e0  224f              MOVS     r2,#0x4f
0024e2  c307              STM      r3!,{r0-r2}
0024e4  9105              STR      r1,[sp,#0x14]
0024e6  2041              MOVS     r0,#0x41
0024e8  498e              LDR      r1,|L1.10020|
0024ea  e9cd1000          STRD     r1,r0,[sp,#0]
0024ee  4e8e              LDR      r6,|L1.10024|
0024f0  2364              MOVS     r3,#0x64
0024f2  f44f6220          MOV      r2,#0xa00
0024f6  4629              MOV      r1,r5
0024f8  6830              LDR      r0,[r6,#0]  ; g_chirpUsb
0024fa  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
;;;1831   	if (len!=CAM_FRAME_HEADER_LEN)
0024fe  2824              CMP      r0,#0x24
002500  d003              BEQ      |L1.9482|
;;;1832   		return -1;
002502  f04f30ff          MOV      r0,#0xffffffff
                  |L1.9478|
;;;1833   	
;;;1834   	g_chirpUsb->useBuffer((uint8_t *)lineData, CAM_FRAME_HEADER_LEN+g_lineSegIndex*sizeof(LineSeg)); 
;;;1835   	
;;;1836   	return 0;
;;;1837   }
002506  b00a              ADD      sp,sp,#0x28
002508  bd70              POP      {r4-r6,pc}
                  |L1.9482|
00250a  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;1834  ; g_lineSegIndex
00250e  2124              MOVS     r1,#0x24              ;1834
002510  eb000080          ADD      r0,r0,r0,LSL #2       ;1834
002514  eb010240          ADD      r2,r1,r0,LSL #1       ;1834
002518  4629              MOV      r1,r5                 ;1834
00251a  6830              LDR      r0,[r6,#0]            ;1834  ; g_chirpUsb
00251c  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
002520  2000              MOVS     r0,#0                 ;1836
002522  e7f0              B        |L1.9478|
;;;1838   
                          ENDP

                  _Z10sendPointsRK10SimpleListI5PointEhPKc PROC ; sendPoints(const SimpleList<Point>&, unsigned char, const char*)
;;;1839   void sendPoints(const SimpleList<Point> &points, uint8_t renderFlags, const char *desc)
002524  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1840   {
002528  b08a              SUB      sp,sp,#0x28
00252a  4604              MOV      r4,r0
00252c  4690              MOV      r8,r2
;;;1841   	SimpleListNode<Point> *i;
;;;1842   
;;;1843   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(RENDER_FLAG_START), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
00252e  2500              MOVS     r5,#0
002530  f04f0934          MOV      r9,#0x34
002534  e9cd9507          STRD     r9,r5,[sp,#0x1c]
002538  2602              MOVS     r6,#2
00253a  f04f0ba1          MOV      r11,#0xa1
00253e  9606              STR      r6,[sp,#0x18]
002540  2104              MOVS     r1,#4
002542  2001              MOVS     r0,#1
002544  e88d0803          STM      sp,{r0,r1,r11}
002548  f04f0a4f          MOV      r10,#0x4f
00254c  e9cd6a04          STRD     r6,r10,[sp,#0x10]
002550  4f75              LDR      r7,|L1.10024|
002552  f8cd800c          STR      r8,[sp,#0xc]
002556  9509              STR      r5,[sp,#0x24]
002558  4b74              LDR      r3,|L1.10028|
00255a  2264              MOVS     r2,#0x64
00255c  2118              MOVS     r1,#0x18
00255e  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
002560  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1844   	
;;;1845   	for (i=points.m_first; i!=NULL; i=i->m_next)		
002564  6824              LDR      r4,[r4,#0]
002566  e00c              B        |L1.9602|
                  |L1.9576|
;;;1846   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','S')), INTS8(2, &i->m_object), END);	
002568  2081              MOVS     r0,#0x81
00256a  e9cd0600          STRD     r0,r6,[sp,#0]
00256e  e9cd4502          STRD     r4,r5,[sp,#8]
002572  9504              STR      r5,[sp,#0x10]
002574  4b6e              LDR      r3,|L1.10032|
002576  2264              MOVS     r2,#0x64
002578  2118              MOVS     r1,#0x18
00257a  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
00257c  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002580  6864              LDR      r4,[r4,#4]            ;1845
                  |L1.9602|
002582  2c00              CMP      r4,#0                 ;1845
002584  d1f0              BNE      |L1.9576|
;;;1847   	
;;;1848   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(renderFlags), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
002586  e9cd9507          STRD     r9,r5,[sp,#0x1c]
00258a  e9cd6a04          STRD     r6,r10,[sp,#0x10]
00258e  9606              STR      r6,[sp,#0x18]
002590  980b              LDR      r0,[sp,#0x2c]
002592  2101              MOVS     r1,#1
002594  e9cd1000          STRD     r1,r0,[sp,#0]
002598  e9cdb802          STRD     r11,r8,[sp,#8]
00259c  9509              STR      r5,[sp,#0x24]
00259e  4b63              LDR      r3,|L1.10028|
0025a0  2264              MOVS     r2,#0x64
0025a2  2118              MOVS     r1,#0x18
0025a4  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
0025a6  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.9642|
;;;1849   }
0025aa  b00d              ADD      sp,sp,#0x34
                  |L1.9644|
0025ac  e8bd8ff0          POP      {r4-r11,pc}
;;;1850   
                          ENDP

                  _Z10sendNadirsRK10SimpleListI5NadirEhPKc PROC ; sendNadirs(const SimpleList<Nadir>&, unsigned char, const char*)
;;;1851   
;;;1852   void sendNadirs(const SimpleList<Nadir> &nadirs, uint8_t renderFlags, const char *desc)
0025b0  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1853   {
0025b4  b08e              SUB      sp,sp,#0x38
0025b6  4604              MOV      r4,r0
0025b8  4617              MOV      r7,r2
;;;1854   	SimpleListNode<Nadir> *i;
;;;1855   	uint32_t pi;
;;;1856   	Point ps[LINE_MAX_INTERSECTION_LINES];
;;;1857   
;;;1858   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(RENDER_FLAG_START), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
0025ba  2500              MOVS     r5,#0
0025bc  f04f0a34          MOV      r10,#0x34
0025c0  e9cda507          STRD     r10,r5,[sp,#0x1c]
0025c4  f04f0802          MOV      r8,#2
0025c8  aa02              ADD      r2,sp,#8
0025ca  f04f0b4f          MOV      r11,#0x4f
0025ce  20a1              MOVS     r0,#0xa1
0025d0  f8cd8018          STR      r8,[sp,#0x18]
0025d4  e8a20981          STM      r2!,{r0,r7,r8,r11}
0025d8  2104              MOVS     r1,#4
0025da  2001              MOVS     r0,#1
0025dc  4e52              LDR      r6,|L1.10024|
0025de  e9cd0100          STRD     r0,r1,[sp,#0]
0025e2  9509              STR      r5,[sp,#0x24]
0025e4  4b51              LDR      r3,|L1.10028|
0025e6  2264              MOVS     r2,#0x64
0025e8  2118              MOVS     r1,#0x18
0025ea  6830              LDR      r0,[r6,#0]  ; g_chirpUsb
0025ec  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1859   	
;;;1860   	for (i=nadirs.m_first; i!=NULL; i=i->m_next)
0025f0  6824              LDR      r4,[r4,#0]
0025f2  f10d0928          ADD      r9,sp,#0x28           ;1856
0025f6  e01f              B        |L1.9784|
                  |L1.9720|
;;;1861   	{
;;;1862   		ps[0] = i->m_object.m_pavg;
0025f8  8a20              LDRH     r0,[r4,#0x10]
0025fa  f8ad0028          STRH     r0,[sp,#0x28]
;;;1863   		
;;;1864   		for (pi=0; pi<i->m_object.m_n; pi++)
0025fe  2000              MOVS     r0,#0
002600  e007              B        |L1.9746|
                  |L1.9730|
;;;1865   			ps[pi+1] = i->m_object.m_points[pi];
002602  1c41              ADDS     r1,r0,#1
002604  eb040240          ADD      r2,r4,r0,LSL #1
002608  eb090141          ADD      r1,r9,r1,LSL #1
00260c  8812              LDRH     r2,[r2,#0]
00260e  800a              STRH     r2,[r1,#0]
002610  1c40              ADDS     r0,r0,#1              ;1864
                  |L1.9746|
002612  7ca1              LDRB     r1,[r4,#0x12]         ;1864
002614  4281              CMP      r1,r0                 ;1864
002616  d8f4              BHI      |L1.9730|
;;;1866   		
;;;1867   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','S')), INTS8((i->m_object.m_n+1)*2, ps), END);	
002618  7ca0              LDRB     r0,[r4,#0x12]
00261a  e9cd9502          STRD     r9,r5,[sp,#8]
00261e  1c40              ADDS     r0,r0,#1
002620  0040              LSLS     r0,r0,#1
002622  9001              STR      r0,[sp,#4]
002624  2081              MOVS     r0,#0x81
002626  9504              STR      r5,[sp,#0x10]
002628  9000              STR      r0,[sp,#0]
00262a  4b41              LDR      r3,|L1.10032|
00262c  2264              MOVS     r2,#0x64
00262e  2118              MOVS     r1,#0x18
002630  6830              LDR      r0,[r6,#0]  ; g_chirpUsb
002632  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002636  69a4              LDR      r4,[r4,#0x18]         ;1860
                  |L1.9784|
002638  2c00              CMP      r4,#0                 ;1860
00263a  d1dd              BNE      |L1.9720|
;;;1868   	}
;;;1869   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(renderFlags), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
00263c  e9cda507          STRD     r10,r5,[sp,#0x1c]
002640  a902              ADD      r1,sp,#8
002642  20a1              MOVS     r0,#0xa1
002644  f8cd8018          STR      r8,[sp,#0x18]
002648  e8a10981          STM      r1!,{r0,r7,r8,r11}
00264c  980f              LDR      r0,[sp,#0x3c]
00264e  2101              MOVS     r1,#1
002650  e9cd1000          STRD     r1,r0,[sp,#0]
002654  9509              STR      r5,[sp,#0x24]
002656  4b35              LDR      r3,|L1.10028|
002658  2264              MOVS     r2,#0x64
00265a  2118              MOVS     r1,#0x18
00265c  6830              LDR      r0,[r6,#0]  ; g_chirpUsb
00265e  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.9826|
;;;1870   }
002662  b011              ADD      sp,sp,#0x44
002664  e7a2              B        |L1.9644|
;;;1871   
                          ENDP

                  _Z9sendLinesRK10SimpleListI5Line2EhPKc PROC ; sendLines(const SimpleList<Line2>&, unsigned char, const char*)
;;;1872   void sendLines(const SimpleList<Line2> &lines, uint8_t renderFlags, const char *desc)
002666  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1873   {
00266a  b08e              SUB      sp,sp,#0x38
00266c  4604              MOV      r4,r0
00266e  4692              MOV      r10,r2
;;;1874   	SimpleListNode<Line2> *n;
;;;1875   	uint8_t i;
;;;1876   	
;;;1877   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','F')), INT8(RENDER_FLAG_START), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
002670  2700              MOVS     r7,#0
002672  2034              MOVS     r0,#0x34
002674  e9cd0707          STRD     r0,r7,[sp,#0x1c]
002678  2602              MOVS     r6,#2
00267a  204f              MOVS     r0,#0x4f
00267c  9709              STR      r7,[sp,#0x24]
00267e  e9cd6004          STRD     r6,r0,[sp,#0x10]
002682  f04f0ba1          MOV      r11,#0xa1
002686  9606              STR      r6,[sp,#0x18]
002688  2004              MOVS     r0,#4
00268a  f04f0801          MOV      r8,#1
00268e  e9cdba02          STRD     r11,r10,[sp,#8]
002692  f8df9094          LDR      r9,|L1.10024|
002696  e9cd8000          STRD     r8,r0,[sp,#0]
00269a  4b26              LDR      r3,|L1.10036|
00269c  2264              MOVS     r2,#0x64
00269e  2118              MOVS     r1,#0x18
0026a0  f8d90000          LDR      r0,[r9,#0]  ; g_chirpUsb
0026a4  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1878   
;;;1879   	for(n=lines.m_first, i=0; n; n=n->m_next, i++)
0026a8  6824              LDR      r4,[r4,#0]
0026aa  2500              MOVS     r5,#0
0026ac  e01d              B        |L1.9962|
                  |L1.9902|
;;;1880   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','S')), INT8(1), INT8(i), INT16(n->m_object.m_p0.m_x), INT16(n->m_object.m_p0.m_y), INT16(n->m_object.m_p1.m_x), INT16(n->m_object.m_p1.m_y), END);
0026ae  78e0              LDRB     r0,[r4,#3]
0026b0  e9cd070b          STRD     r0,r7,[sp,#0x2c]
0026b4  970d              STR      r7,[sp,#0x34]
0026b6  960a              STR      r6,[sp,#0x28]
0026b8  78a0              LDRB     r0,[r4,#2]
0026ba  7861              LDRB     r1,[r4,#1]
0026bc  e9cd6008          STRD     r6,r0,[sp,#0x20]
0026c0  e9cd6106          STRD     r6,r1,[sp,#0x18]
0026c4  7820              LDRB     r0,[r4,#0]
0026c6  f8cd8000          STR      r8,[sp,#0]
0026ca  e9cd8502          STRD     r8,r5,[sp,#8]
0026ce  e9cd6004          STRD     r6,r0,[sp,#0x10]
0026d2  f8cd8004          STR      r8,[sp,#4]
0026d6  4b18              LDR      r3,|L1.10040|
0026d8  2264              MOVS     r2,#0x64
0026da  2118              MOVS     r1,#0x18
0026dc  f8d90000          LDR      r0,[r9,#0]  ; g_chirpUsb
0026e0  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
0026e4  6964              LDR      r4,[r4,#0x14]         ;1879
0026e6  1c6d              ADDS     r5,r5,#1              ;1879
0026e8  b2ed              UXTB     r5,r5                 ;1879
                  |L1.9962|
0026ea  2c00              CMP      r4,#0                 ;1879
0026ec  d1df              BNE      |L1.9902|
;;;1881   	
;;;1882   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','F')), INT8(renderFlags), STRING(desc), INT16(CAM_RES3_WIDTH), INT16(CAM_RES3_HEIGHT), END);	
0026ee  2068              MOVS     r0,#0x68
0026f0  e9cd0707          STRD     r0,r7,[sp,#0x1c]
0026f4  f44f701f          MOV      r0,#0x27c
0026f8  9709              STR      r7,[sp,#0x24]
0026fa  e9cd6004          STRD     r6,r0,[sp,#0x10]
0026fe  980f              LDR      r0,[sp,#0x3c]
002700  9606              STR      r6,[sp,#0x18]
002702  e9cdba02          STRD     r11,r10,[sp,#8]
002706  e9cd8000          STRD     r8,r0,[sp,#0]
00270a  4b0a              LDR      r3,|L1.10036|
00270c  2264              MOVS     r2,#0x64
00270e  2118              MOVS     r1,#0x18
002710  f8d90000          LDR      r0,[r9,#0]  ; g_chirpUsb
002714  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1883   }
002718  e7a3              B        |L1.9826|
00271a  0000              DCW      0x0000
                  |L1.10012|
                          DCD      ||.bss||+0x30
                  |L1.10016|
                          DCD      ||.data||
                  |L1.10020|
                          DCD      0x4753494c
                  |L1.10024|
                          DCD      g_chirpUsb
                  |L1.10028|
                          DCD      0x4644414e
                  |L1.10032|
                          DCD      0x5344414e
                  |L1.10036|
                          DCD      0x4653494c
                  |L1.10040|
                          DCD      0x5353494c
                          ENDP

                  _Z16sendTrackedLinesRK10SimpleListI7TrackerI5Line2EEhPKc PROC ; sendTrackedLines(const SimpleList<Tracker<Line2>>&, unsigned char, const char*)
;;;1884   
;;;1885   void sendTrackedLines(const SimpleList<Tracker<Line2> > &lines, uint8_t renderFlags, const char *desc)
00273c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1886   {
002740  b08f              SUB      sp,sp,#0x3c
002742  4604              MOV      r4,r0
002744  468b              MOV      r11,r1
002746  4691              MOV      r9,r2
;;;1887   	SimpleListNode<Tracker<Line2> > *n;
;;;1888   	Line2 *line;
;;;1889   	uint8_t i, mode;
;;;1890   	
;;;1891   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','F')), INT8(RENDER_FLAG_START), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
002748  2600              MOVS     r6,#0
00274a  2034              MOVS     r0,#0x34
00274c  e9cd0607          STRD     r0,r6,[sp,#0x1c]
002750  2502              MOVS     r5,#2
002752  204f              MOVS     r0,#0x4f
002754  9609              STR      r6,[sp,#0x24]
002756  e9cd5004          STRD     r5,r0,[sp,#0x10]
00275a  f04f0aa1          MOV      r10,#0xa1
00275e  9506              STR      r5,[sp,#0x18]
002760  2004              MOVS     r0,#4
002762  2701              MOVS     r7,#1
002764  e9cda902          STRD     r10,r9,[sp,#8]
002768  f8df83fc          LDR      r8,|L1.11112|
00276c  e9cd7000          STRD     r7,r0,[sp,#0]
002770  4bfc              LDR      r3,|L1.11108|
002772  2264              MOVS     r2,#0x64
002774  2118              MOVS     r1,#0x18
002776  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
00277a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1892   
;;;1893   	for(n=lines.m_first, i=0; n; n=n->m_next, i++)
00277e  6824              LDR      r4,[r4,#0]
002780  e020              B        |L1.10180|
                  |L1.10114|
;;;1894   	{
;;;1895   		mode = n->m_object.get()==NULL ? 1 : 0;
002782  4620              MOV      r0,r4
002784  f7fffffe          BL       _ZN7TrackerI5Line2E3getEv ; Tracker<Line2>::get()
002788  b3a0              CBZ      r0,|L1.10228|
00278a  2100              MOVS     r1,#0
                  |L1.10124|
;;;1896   		line = & n->m_object.m_object;
00278c  4620              MOV      r0,r4
;;;1897   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','S')), INT8(mode), INT8(n->m_object.m_index), INT16(line->m_p0.m_x), INT16(line->m_p0.m_y), INT16(line->m_p1.m_x), INT16(line->m_p1.m_y), END);
00278e  7dc2              LDRB     r2,[r0,#0x17]
002790  e9cd260b          STRD     r2,r6,[sp,#0x2c]
002794  960d              STR      r6,[sp,#0x34]
002796  950a              STR      r5,[sp,#0x28]
002798  7d82              LDRB     r2,[r0,#0x16]
00279a  7d43              LDRB     r3,[r0,#0x15]
00279c  e9cd5208          STRD     r5,r2,[sp,#0x20]
0027a0  e9cd5306          STRD     r5,r3,[sp,#0x18]
0027a4  7d00              LDRB     r0,[r0,#0x14]
0027a6  7862              LDRB     r2,[r4,#1]
0027a8  e9cd7100          STRD     r7,r1,[sp,#0]
0027ac  e9cd7202          STRD     r7,r2,[sp,#8]
0027b0  e9cd5004          STRD     r5,r0,[sp,#0x10]
0027b4  4bed              LDR      r3,|L1.11116|
0027b6  2264              MOVS     r2,#0x64
0027b8  2118              MOVS     r1,#0x18
0027ba  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
0027be  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
0027c2  6aa4              LDR      r4,[r4,#0x28]         ;1893
                  |L1.10180|
0027c4  2c00              CMP      r4,#0                 ;1893
0027c6  d1dc              BNE      |L1.10114|
;;;1898   	}
;;;1899   	
;;;1900   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('L','I','S','F')), INT8(renderFlags), STRING(desc), INT16(CAM_RES3_WIDTH), INT16(CAM_RES3_HEIGHT), END);	
0027c8  2068              MOVS     r0,#0x68
0027ca  e9cd0607          STRD     r0,r6,[sp,#0x1c]
0027ce  9506              STR      r5,[sp,#0x18]
0027d0  e9cdba01          STRD     r11,r10,[sp,#4]
0027d4  e9cd9503          STRD     r9,r5,[sp,#0xc]
0027d8  f44f701f          MOV      r0,#0x27c
0027dc  9700              STR      r7,[sp,#0]
0027de  9609              STR      r6,[sp,#0x24]
0027e0  9005              STR      r0,[sp,#0x14]
0027e2  4be0              LDR      r3,|L1.11108|
0027e4  2264              MOVS     r2,#0x64
0027e6  2118              MOVS     r1,#0x18
0027e8  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
0027ec  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.10224|
;;;1901   }
0027f0  b00f              ADD      sp,sp,#0x3c
0027f2  e6db              B        |L1.9644|
                  |L1.10228|
0027f4  e7ff              B        |L1.10230|
                  |L1.10230|
0027f6  2101              MOVS     r1,#1                 ;1895
0027f8  e7c8              B        |L1.10124|
;;;1902   	
                          ENDP

                  _Z17sendIntersectionsRK10SimpleListI12IntersectionEhPKc PROC ; sendIntersections(const SimpleList<Intersection>&, unsigned char, const char*)
;;;1903   void sendIntersections(const SimpleList<Intersection> &lines, uint8_t renderFlags, const char *desc)
0027fa  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1904   {
0027fe  b08a              SUB      sp,sp,#0x28
002800  4604              MOV      r4,r0
002802  4690              MOV      r8,r2
;;;1905   	SimpleListNode<Intersection> *i;
;;;1906   
;;;1907   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(RENDER_FLAG_START), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);
002804  2500              MOVS     r5,#0
002806  f04f0934          MOV      r9,#0x34
00280a  e9cd9507          STRD     r9,r5,[sp,#0x1c]
00280e  2602              MOVS     r6,#2
002810  f04f0ba1          MOV      r11,#0xa1
002814  9606              STR      r6,[sp,#0x18]
002816  2104              MOVS     r1,#4
002818  2001              MOVS     r0,#1
00281a  e88d0803          STM      sp,{r0,r1,r11}
00281e  f04f0a4f          MOV      r10,#0x4f
002822  e9cd6a04          STRD     r6,r10,[sp,#0x10]
002826  4fd0              LDR      r7,|L1.11112|
002828  f8cd800c          STR      r8,[sp,#0xc]
00282c  9509              STR      r5,[sp,#0x24]
00282e  4bd0              LDR      r3,|L1.11120|
002830  2264              MOVS     r2,#0x64
002832  2118              MOVS     r1,#0x18
002834  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
002836  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1908   	
;;;1909   	for (i=lines.m_first; i!=NULL; i=i->m_next)
00283a  6824              LDR      r4,[r4,#0]
00283c  e00c              B        |L1.10328|
                  |L1.10302|
;;;1910   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','S')), INTS8(2, &i->m_object.m_p), END);	
00283e  2081              MOVS     r0,#0x81
002840  e9cd0600          STRD     r0,r6,[sp,#0]
002844  e9cd4502          STRD     r4,r5,[sp,#8]
002848  9504              STR      r5,[sp,#0x10]
00284a  4bca              LDR      r3,|L1.11124|
00284c  2264              MOVS     r2,#0x64
00284e  2118              MOVS     r1,#0x18
002850  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
002852  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002856  6a64              LDR      r4,[r4,#0x24]         ;1909
                  |L1.10328|
002858  2c00              CMP      r4,#0                 ;1909
00285a  d1f0              BNE      |L1.10302|
;;;1911   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('N','A','D','F')), INT8(renderFlags), STRING(desc), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), END);	
00285c  e9cd9507          STRD     r9,r5,[sp,#0x1c]
002860  e9cd6a04          STRD     r6,r10,[sp,#0x10]
002864  9606              STR      r6,[sp,#0x18]
002866  980b              LDR      r0,[sp,#0x2c]
002868  2101              MOVS     r1,#1
00286a  e9cd1000          STRD     r1,r0,[sp,#0]
00286e  e9cdb802          STRD     r11,r8,[sp,#8]
002872  9509              STR      r5,[sp,#0x24]
002874  4bbe              LDR      r3,|L1.11120|
002876  2264              MOVS     r2,#0x64
002878  2118              MOVS     r1,#0x18
00287a  6838              LDR      r0,[r7,#0]  ; g_chirpUsb
00287c  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;1912   }
002880  e693              B        |L1.9642|
;;;1913   
                          ENDP

                  _Z15findTrackedLineh PROC ; findTrackedLine(unsigned char)
;;;2646   
;;;2647   Line2 *findTrackedLine(uint8_t index)
002882  4601              MOV      r1,r0
;;;2648   {
;;;2649   	SimpleListNode<Tracker<Line2> > *i;
;;;2650   	
;;;2651   	for (i=g_lineTrackersList.m_first; i!=NULL; i=i->m_next)
002884  48bc              LDR      r0,|L1.11128|
002886  6800              LDR      r0,[r0,#0]  ; g_lineTrackersList
002888  e005              B        |L1.10390|
                  |L1.10378|
;;;2652   	{
;;;2653   		if (i->m_object.m_index==index)
00288a  7842              LDRB     r2,[r0,#1]
00288c  428a              CMP      r2,r1
00288e  d101              BNE      |L1.10388|
;;;2654   			return &i->m_object.m_object;
002890  3014              ADDS     r0,r0,#0x14
;;;2655   	}
;;;2656   	return NULL;
;;;2657   }
002892  4770              BX       lr
                  |L1.10388|
002894  6a80              LDR      r0,[r0,#0x28]         ;2651
                  |L1.10390|
002896  2800              CMP      r0,#0                 ;2651
002898  d1f7              BNE      |L1.10378|
00289a  4770              BX       lr
;;;2658   
                          ENDP

                  _Z19sendPrimaryFeaturesh PROC ; sendPrimaryFeatures(unsigned char)
;;;1913   
;;;1914   void sendPrimaryFeatures(uint8_t renderFlags)
00289c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1915   {
0028a0  b093              SUB      sp,sp,#0x4c
0028a2  4607              MOV      r7,r0
;;;1916   	uint8_t n=0;
0028a4  2600              MOVS     r6,#0
;;;1917   	Line2 *primary=NULL;
0028a6  2400              MOVS     r4,#0
;;;1918   	
;;;1919   	if (g_lineState==LINE_STATE_TRACKING)
0028a8  48b4              LDR      r0,|L1.11132|
0028aa  7b41              LDRB     r1,[r0,#0xd]  ; g_lineState
0028ac  2901              CMP      r1,#1
0028ae  d109              BNE      |L1.10436|
;;;1920   	{	
;;;1921   		primary = findTrackedLine(g_primaryLineIndex);
0028b0  7a80              LDRB     r0,[r0,#0xa]  ; g_primaryLineIndex
0028b2  f7fffffe          BL       _Z15findTrackedLineh ; findTrackedLine(unsigned char)
0028b6  4604              MOV      r4,r0
;;;1922   		if (g_primaryIntersection.m_state!=TR_INVALID)
0028b8  48af              LDR      r0,|L1.11128|
0028ba  300c              ADDS     r0,r0,#0xc
0028bc  7801              LDRB     r1,[r0,#0]  ; g_primaryIntersection
0028be  2903              CMP      r1,#3
0028c0  d000              BEQ      |L1.10436|
;;;1923   			n = g_primaryIntersection.m_object.m_n;
0028c2  7d86              LDRB     r6,[r0,#0x16]  ; g_primaryIntersection
                  |L1.10436|
;;;1924   	}
;;;1925   
;;;1926   	if (primary)
0028c4  2500              MOVS     r5,#0
0028c6  f04f0801          MOV      r8,#1                 ;1919
;;;1927   	{
;;;1928   		if (g_goalPoint.equals(primary->m_p0))
;;;1929   			CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('P','V','I','0')), INT8(renderFlags), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), 
0028ca  f04f0a34          MOV      r10,#0x34
0028ce  f04f0902          MOV      r9,#2
0028d2  f04f0b4f          MOV      r11,#0x4f
0028d6  b3ec              CBZ      r4,|L1.10580|
0028d8  48a8              LDR      r0,|L1.11132|
0028da  4621              MOV      r1,r4                 ;1928
0028dc  3032              ADDS     r0,r0,#0x32           ;1928
0028de  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
0028e2  b1f8              CBZ      r0,|L1.10532|
0028e4  e9cd650f          STRD     r6,r5,[sp,#0x3c]
0028e8  f8cd8038          STR      r8,[sp,#0x38]
0028ec  9511              STR      r5,[sp,#0x44]
0028ee  7860              LDRB     r0,[r4,#1]
0028f0  7821              LDRB     r1,[r4,#0]
0028f2  e9cd800c          STRD     r8,r0,[sp,#0x30]
0028f6  e9cd810a          STRD     r8,r1,[sp,#0x28]
0028fa  78a0              LDRB     r0,[r4,#2]
0028fc  78e1              LDRB     r1,[r4,#3]
0028fe  e9cd8006          STRD     r8,r0,[sp,#0x18]
002902  e9cd9b02          STRD     r9,r11,[sp,#8]
002906  e9cd8108          STRD     r8,r1,[sp,#0x20]
00290a  e9cd9a04          STRD     r9,r10,[sp,#0x10]
00290e  4896              LDR      r0,|L1.11112|
002910  e9cd8700          STRD     r8,r7,[sp,#0]
002914  4b9a              LDR      r3,|L1.11136|
002916  2264              MOVS     r2,#0x64
002918  2118              MOVS     r1,#0x18
00291a  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
00291c  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.10528|
;;;1930   				INT8(primary->m_p1.m_x), INT8(primary->m_p1.m_y), INT8(primary->m_p0.m_x), INT8(primary->m_p0.m_y), INT8(n), END);
;;;1931   		else
;;;1932   			CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('P','V','I','0')), INT8(renderFlags), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), 
;;;1933   				INT8(primary->m_p0.m_x), INT8(primary->m_p0.m_y), INT8(primary->m_p1.m_x), INT8(primary->m_p1.m_y), INT8(n), END);
;;;1934   	}
;;;1935   	else // send null message so it always shows up as a layer
;;;1936   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('P','V','I','0')), INT8(renderFlags), INT16(LINE_GRID_WIDTH), INT16(LINE_GRID_HEIGHT), 
;;;1937   			INT8(0), INT8(0), INT8(0), INT8(0), INT8(0), END);
;;;1938   		
;;;1939   	
;;;1940   }
002920  b013              ADD      sp,sp,#0x4c
002922  e643              B        |L1.9644|
                  |L1.10532|
002924  e9cd650f          STRD     r6,r5,[sp,#0x3c]      ;1932
002928  f8cd8038          STR      r8,[sp,#0x38]         ;1932
00292c  9511              STR      r5,[sp,#0x44]         ;1932
00292e  78e1              LDRB     r1,[r4,#3]            ;1932
002930  78a0              LDRB     r0,[r4,#2]            ;1932
002932  e9cd810c          STRD     r8,r1,[sp,#0x30]      ;1932
002936  e9cd800a          STRD     r8,r0,[sp,#0x28]      ;1932
00293a  7820              LDRB     r0,[r4,#0]            ;1932
00293c  7861              LDRB     r1,[r4,#1]            ;1932
00293e  e9cd8006          STRD     r8,r0,[sp,#0x18]      ;1932
002942  e9cd9b02          STRD     r9,r11,[sp,#8]        ;1932
002946  e9cd8108          STRD     r8,r1,[sp,#0x20]      ;1932
00294a  2264              MOVS     r2,#0x64              ;1932
00294c  4b8c              LDR      r3,|L1.11136|
00294e  2118              MOVS     r1,#0x18              ;1932
002950  4885              LDR      r0,|L1.11112|
002952  e000              B        |L1.10582|
                  |L1.10580|
002954  e007              B        |L1.10598|
                  |L1.10582|
002956  e9cd9a04          STRD     r9,r10,[sp,#0x10]     ;1932
00295a  e9cd8700          STRD     r8,r7,[sp,#0]         ;1932
00295e  6800              LDR      r0,[r0,#0]            ;1932  ; g_chirpUsb
002960  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002964  e7dc              B        |L1.10528|
                  |L1.10598|
002966  e9cd850e          STRD     r8,r5,[sp,#0x38]      ;1936
00296a  9510              STR      r5,[sp,#0x40]         ;1936
00296c  9511              STR      r5,[sp,#0x44]         ;1936
00296e  e9cd850a          STRD     r8,r5,[sp,#0x28]      ;1936
002972  e9cd850c          STRD     r8,r5,[sp,#0x30]      ;1936
002976  e9cd8506          STRD     r8,r5,[sp,#0x18]      ;1936
00297a  e9cd9b02          STRD     r9,r11,[sp,#8]        ;1936
00297e  e9cd8508          STRD     r8,r5,[sp,#0x20]      ;1936
002982  e9cd9a04          STRD     r9,r10,[sp,#0x10]     ;1936
002986  4878              LDR      r0,|L1.11112|
002988  e9cd8700          STRD     r8,r7,[sp,#0]         ;1936
00298c  4b7c              LDR      r3,|L1.11136|
00298e  2264              MOVS     r2,#0x64              ;1936
002990  2118              MOVS     r1,#0x18              ;1936
002992  6800              LDR      r0,[r0,#0]            ;1936  ; g_chirpUsb
002994  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002998  e7c2              B        |L1.10528|
;;;1941   
                          ENDP

                  _Z9voteCodesP14BarCodeCluster PROC ; voteCodes(BarCodeCluster*)
;;;1942   int16_t voteCodes(BarCodeCluster *cluster)
00299a  e92d41f0          PUSH     {r4-r8,lr}
;;;1943   {
00299e  b086              SUB      sp,sp,#0x18
;;;1944       uint8_t votes[LINE_MMC_VTSIZE];
;;;1945       int16_t vals[LINE_MMC_VTSIZE];
;;;1946       int16_t val;
;;;1947       uint16_t i, j, max, maxIndex;
;;;1948   
;;;1949   	if (cluster->m_n<=1)
0029a0  f8907020          LDRB     r7,[r0,#0x20]
0029a4  2f01              CMP      r7,#1
0029a6  d804              BHI      |L1.10674|
;;;1950   		return -1;
0029a8  f04f30ff          MOV      r0,#0xffffffff
                  |L1.10668|
;;;1951   	
;;;1952       for (i=0; i<LINE_MMC_VTSIZE; i++)
;;;1953           votes[i] = 0;
;;;1954   
;;;1955       // tally votes
;;;1956       for (i=0; i<cluster->m_n; i++)
;;;1957       {
;;;1958           val = g_candidateBarcodes[cluster->m_indexes[i]]->m_val;
;;;1959           if (val<0)
;;;1960               continue;
;;;1961           // find index or empty location
;;;1962           for (j=0; j<LINE_MMC_VTSIZE; j++)
;;;1963           {
;;;1964               if (votes[j]==0)
;;;1965               {
;;;1966                   vals[j] = val;
;;;1967                   break;
;;;1968               }
;;;1969               if (vals[j]==val)
;;;1970                   break;
;;;1971           }
;;;1972           if (j>=LINE_MMC_VTSIZE)
;;;1973               continue;
;;;1974           // add vote
;;;1975           votes[j]++;
;;;1976       }
;;;1977   
;;;1978       // find winner
;;;1979       for (i=0, max=0; i<LINE_MMC_VTSIZE; i++)
;;;1980       {
;;;1981           if (votes[i]==0) // we've reached end
;;;1982               break;
;;;1983           if (votes[i]>max)
;;;1984           {
;;;1985               max = votes[i];
;;;1986               maxIndex = i;
;;;1987           }
;;;1988       }
;;;1989   
;;;1990       if (max<=1) // no valid codes, and you need at least 2 votes
;;;1991           return -2;
;;;1992   	if ((max<<8)/cluster->m_n<g_minVotingThreshold)
;;;1993   		return -3;
;;;1994       return vals[maxIndex];
;;;1995   }
0029ac  b006              ADD      sp,sp,#0x18
                  |L1.10670|
0029ae  e8bd81f0          POP      {r4-r8,pc}
                  |L1.10674|
0029b2  2100              MOVS     r1,#0                 ;1952
0029b4  2200              MOVS     r2,#0                 ;1952
0029b6  ae04              ADD      r6,sp,#0x10           ;1944
                  |L1.10680|
0029b8  5472              STRB     r2,[r6,r1]            ;1953
0029ba  1c49              ADDS     r1,r1,#1              ;1952
0029bc  b289              UXTH     r1,r1                 ;1952
0029be  2908              CMP      r1,#8                 ;1952
0029c0  d3fa              BCC      |L1.10680|
0029c2  2300              MOVS     r3,#0                 ;1956
0029c4  f8df81b4          LDR      r8,|L1.11132|
0029c8  466d              MOV      r5,sp                 ;1945
0029ca  e01a              B        |L1.10754|
                  |L1.10700|
0029cc  5cc1              LDRB     r1,[r0,r3]            ;1958
0029ce  f8d82078          LDR      r2,[r8,#0x78]         ;1958  ; g_candidateBarcodes
0029d2  f8521021          LDR      r1,[r2,r1,LSL #2]     ;1958
0029d6  f9b14006          LDRSH    r4,[r1,#6]            ;1958
0029da  2c00              CMP      r4,#0                 ;1959
0029dc  db0f              BLT      |L1.10750|
0029de  2100              MOVS     r1,#0                 ;1962
                  |L1.10720|
0029e0  5c72              LDRB     r2,[r6,r1]            ;1964
0029e2  b19a              CBZ      r2,|L1.10764|
0029e4  f9352011          LDRSH    r2,[r5,r1,LSL #1]     ;1969
0029e8  42a2              CMP      r2,r4                 ;1969
0029ea  d003              BEQ      |L1.10740|
0029ec  1c49              ADDS     r1,r1,#1              ;1962
0029ee  b289              UXTH     r1,r1                 ;1962
0029f0  2908              CMP      r1,#8                 ;1962
0029f2  d3f5              BCC      |L1.10720|
                  |L1.10740|
0029f4  2908              CMP      r1,#8                 ;1972
0029f6  d202              BCS      |L1.10750|
0029f8  5c72              LDRB     r2,[r6,r1]            ;1975
0029fa  1c52              ADDS     r2,r2,#1              ;1975
0029fc  5472              STRB     r2,[r6,r1]            ;1975
                  |L1.10750|
0029fe  1c5b              ADDS     r3,r3,#1              ;1956
002a00  b29b              UXTH     r3,r3                 ;1956
                  |L1.10754|
002a02  429f              CMP      r7,r3                 ;1956
002a04  d8e2              BHI      |L1.10700|
002a06  2200              MOVS     r2,#0                 ;1979
002a08  2000              MOVS     r0,#0                 ;1979
002a0a  e00a              B        |L1.10786|
                  |L1.10764|
002a0c  f8254011          STRH     r4,[r5,r1,LSL #1]     ;1966
002a10  e7f0              B        |L1.10740|
                  |L1.10770|
002a12  5cb1              LDRB     r1,[r6,r2]            ;1981
002a14  b139              CBZ      r1,|L1.10790|
002a16  4281              CMP      r1,r0                 ;1983
002a18  d901              BLS      |L1.10782|
002a1a  4608              MOV      r0,r1                 ;1985
002a1c  4694              MOV      r12,r2                ;1986
                  |L1.10782|
002a1e  1c52              ADDS     r2,r2,#1              ;1979
002a20  b292              UXTH     r2,r2                 ;1979
                  |L1.10786|
002a22  2a08              CMP      r2,#8                 ;1979
002a24  d3f5              BCC      |L1.10770|
                  |L1.10790|
002a26  2801              CMP      r0,#1                 ;1990
002a28  d802              BHI      |L1.10800|
002a2a  f06f0001          MVN      r0,#1                 ;1991
002a2e  e7bd              B        |L1.10668|
                  |L1.10800|
002a30  0200              LSLS     r0,r0,#8              ;1992
002a32  fbb0f0f7          UDIV     r0,r0,r7              ;1992
002a36  f8b81030          LDRH     r1,[r8,#0x30]         ;1992  ; g_minVotingThreshold
002a3a  4288              CMP      r0,r1                 ;1992
002a3c  d202              BCS      |L1.10820|
002a3e  f06f0002          MVN      r0,#2                 ;1993
002a42  e7b3              B        |L1.10668|
                  |L1.10820|
002a44  f935001c          LDRSH    r0,[r5,r12,LSL #1]    ;1994
002a48  e7b0              B        |L1.10668|
;;;1996   
                          ENDP

                  _Z7dist2_4RK7Point16S1_ PROC ; dist2_4(const Point16&, const Point16&)
;;;1997   uint32_t dist2_4(const Point16 &p0, const Point16 &p1)
002a4a  f9b12000          LDRSH    r2,[r1,#0]
;;;1998   {
;;;1999   		int32_t diffx, diffy;
;;;2000   		
;;;2001   		diffx = p1.m_x - p0.m_x;
002a4e  f9b03000          LDRSH    r3,[r0,#0]
002a52  1ad2              SUBS     r2,r2,r3
;;;2002   		diffy = (p1.m_y - p0.m_y)*4;
002a54  f9b11002          LDRSH    r1,[r1,#2]
002a58  f9b00002          LDRSH    r0,[r0,#2]
002a5c  1a08              SUBS     r0,r1,r0
002a5e  0080              LSLS     r0,r0,#2
;;;2003   		
;;;2004   		return diffx*diffx + diffy*diffy;	
002a60  4352              MULS     r2,r2,r2
002a62  fb002000          MLA      r0,r0,r0,r2
;;;2005   }
002a66  4770              BX       lr
;;;2006   
                          ENDP

                  _Z12clusterCodesv PROC ; clusterCodes()
;;;2007   void clusterCodes()
002a68  e92d43f0          PUSH     {r4-r9,lr}
;;;2008   {
002a6c  b089              SUB      sp,sp,#0x24
;;;2009       BarCodeCluster *clusters[LINE_MMC_VOTED_BARCODES];
;;;2010       uint8_t i, j, numClusters = 0;
002a6e  2600              MOVS     r6,#0
;;;2011       int16_t val;
;;;2012       int32_t dist;
;;;2013   
;;;2014       for (i=0; i<g_barcodeIndex; i++)
002a70  2500              MOVS     r5,#0
002a72  46a9              MOV      r9,r5
002a74  af01              ADD      r7,sp,#4              ;2009
;;;2015       {
;;;2016           for (j=0; j<numClusters; j++)
;;;2017           {
;;;2018               dist = dist2_4 (g_candidateBarcodes[i]->m_p0, clusters[j]->m_p1);
002a76  f8df8104          LDR      r8,|L1.11132|
002a7a  e05a              B        |L1.11058|
                  |L1.10876|
002a7c  2400              MOVS     r4,#0                 ;2016
002a7e  e00e              B        |L1.10910|
                  |L1.10880|
002a80  f8d80078          LDR      r0,[r8,#0x78]  ; g_candidateBarcodes
002a84  f8571024          LDR      r1,[r7,r4,LSL #2]
002a88  3126              ADDS     r1,r1,#0x26
002a8a  f8500025          LDR      r0,[r0,r5,LSL #2]
002a8e  f7fffffe          BL       _Z7dist2_4RK7Point16S1_ ; dist2_4(const Point16&, const Point16&)
;;;2019               if (dist<g_maxCodeDist)
002a92  f8b8102e          LDRH     r1,[r8,#0x2e]  ; g_maxCodeDist
002a96  4288              CMP      r0,r1
002a98  db03              BLT      |L1.10914|
002a9a  1c64              ADDS     r4,r4,#1              ;2016
002a9c  b2e4              UXTB     r4,r4                 ;2016
                  |L1.10910|
002a9e  42b4              CMP      r4,r6                 ;2016
002aa0  d3ee              BCC      |L1.10880|
                  |L1.10914|
;;;2020                   break;
;;;2021           }
;;;2022           if (j>=LINE_MMC_VOTED_BARCODES) // table is full, move onto next code
002aa2  2c08              CMP      r4,#8
002aa4  d243              BCS      |L1.11054|
;;;2023               continue;
;;;2024           if (j>=numClusters) // new entry
002aa6  42b4              CMP      r4,r6
002aa8  d321              BCC      |L1.10990|
;;;2025           {
;;;2026               clusters[j] = new (std::nothrow) BarCodeCluster;
002aaa  4936              LDR      r1,|L1.11140|
002aac  202c              MOVS     r0,#0x2c
002aae  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
002ab2  b160              CBZ      r0,|L1.10958|
002ab4  f1000122          ADD      r1,r0,#0x22
002ab8  f8a19002          STRH     r9,[r1,#2]
002abc  f8a19000          STRH     r9,[r1,#0]
002ac0  1d09              ADDS     r1,r1,#4
002ac2  f8a19002          STRH     r9,[r1,#2]
002ac6  f8a19000          STRH     r9,[r1,#0]
002aca  f8809020          STRB     r9,[r0,#0x20]
                  |L1.10958|
002ace  f8470024          STR      r0,[r7,r4,LSL #2]
;;;2027   			if (clusters[j]==NULL)
002ad2  b390              CBZ      r0,|L1.11066|
;;;2028   				break;
;;;2029               // reset positions
;;;2030               clusters[j]->m_p0 = g_candidateBarcodes[i]->m_p0;
002ad4  f8d81078          LDR      r1,[r8,#0x78]  ; g_candidateBarcodes
002ad8  f8512025          LDR      r2,[r1,r5,LSL #2]
002adc  6812              LDR      r2,[r2,#0]
002ade  f8402f22          STR      r2,[r0,#0x22]!
;;;2031               clusters[j]->m_p1 = g_candidateBarcodes[i]->m_p0;
002ae2  f8511025          LDR      r1,[r1,r5,LSL #2]
002ae6  6809              LDR      r1,[r1,#0]
002ae8  6041              STR      r1,[r0,#4]
;;;2032               numClusters++;
002aea  1c76              ADDS     r6,r6,#1
002aec  b2f6              UXTB     r6,r6
                  |L1.10990|
;;;2033           }
;;;2034           //cprintf(" add %d %d, %d %d %d %d", j, i, g_candidateBarcodes[i]->m_p0.m_x, g_candidateBarcodes[i]->m_p0.m_y,
;;;2035            //      clusters[j]->m_p1.m_x, clusters[j]->m_p1.m_y);
;;;2036           clusters[j]->addCode(i);
002aee  f8570024          LDR      r0,[r7,r4,LSL #2]
002af2  f8901020          LDRB     r1,[r0,#0x20]
002af6  2920              CMP      r1,#0x20
002af8  d205              BCS      |L1.11014|
002afa  5445              STRB     r5,[r0,r1]
002afc  f8901020          LDRB     r1,[r0,#0x20]
002b00  1c49              ADDS     r1,r1,#1
002b02  f8801020          STRB     r1,[r0,#0x20]
                  |L1.11014|
;;;2037           // update width, position
;;;2038           clusters[j]->updateWidth(g_candidateBarcodes[i]->m_width);
002b06  f8d82078          LDR      r2,[r8,#0x78]  ; g_candidateBarcodes
002b0a  f8521025          LDR      r1,[r2,r5,LSL #2]
002b0e  888b              LDRH     r3,[r1,#4]
002b10  f8901020          LDRB     r1,[r0,#0x20]
002b14  8d44              LDRH     r4,[r0,#0x2a]
002b16  f1a10c01          SUB      r12,r1,#1
002b1a  fb04330c          MLA      r3,r4,r12,r3
002b1e  fb93f1f1          SDIV     r1,r3,r1
002b22  8541              STRH     r1,[r0,#0x2a]
;;;2039           clusters[j]->m_p1 = g_candidateBarcodes[i]->m_p0;
002b24  f8521025          LDR      r1,[r2,r5,LSL #2]
002b28  6809              LDR      r1,[r1,#0]
002b2a  f8c01026          STR      r1,[r0,#0x26]
                  |L1.11054|
002b2e  1c6d              ADDS     r5,r5,#1              ;2014
002b30  b2ed              UXTB     r5,r5                 ;2014
                  |L1.11058|
002b32  f8980005          LDRB     r0,[r8,#5]            ;2014  ; g_barcodeIndex
002b36  4285              CMP      r5,r0                 ;2014
002b38  d3a0              BCC      |L1.10876|
                  |L1.11066|
;;;2040       }
;;;2041   
;;;2042   #if 0
;;;2043   	for (i=0; i<numClusters; i++)
;;;2044   		cprintf(0, "%d: %d %d %d %d\n", i, clusters[i]->m_p0.m_x, clusters[i]->m_p0.m_y, clusters[i]->m_p1.m_x, clusters[i]->m_p1.m_y);
;;;2045   #endif
;;;2046       // vote
;;;2047       for (i=0, g_votedBarcodeIndex=0; i<numClusters; i++)
002b3a  2400              MOVS     r4,#0
002b3c  f8889006          STRB     r9,[r8,#6]
002b40  e03b              B        |L1.11194|
                  |L1.11074|
;;;2048       {
;;;2049           if (g_votedBarcodeIndex>=LINE_MMC_VOTED_BARCODES)
002b42  f8980006          LDRB     r0,[r8,#6]  ; g_votedBarcodeIndex
002b46  2808              CMP      r0,#8
002b48  d239              BCS      |L1.11198|
;;;2050               break; // out of table space
;;;2051           val = voteCodes(clusters[i]);
002b4a  f8570024          LDR      r0,[r7,r4,LSL #2]
002b4e  f7fffffe          BL       _Z9voteCodesP14BarCodeCluster ; voteCodes(BarCodeCluster*)
;;;2052           if (val<0)
002b52  2800              CMP      r0,#0
002b54  db2f              BLT      |L1.11190|
;;;2053               continue;
;;;2054           g_votedBarcodes[g_votedBarcodeIndex].m_val = val;
002b56  f8982006          LDRB     r2,[r8,#6]  ; g_votedBarcodeIndex
002b5a  f8d8107c          LDR      r1,[r8,#0x7c]  ; g_votedBarcodes
002b5e  eb011102          ADD      r1,r1,r2,LSL #4
002b62  e011              B        |L1.11144|
                  |L1.11108|
                          DCD      0x4653494c
                  |L1.11112|
                          DCD      g_chirpUsb
                  |L1.11116|
                          DCD      0x5353494c
                  |L1.11120|
                          DCD      0x4644414e
                  |L1.11124|
                          DCD      0x5344414e
                  |L1.11128|
                          DCD      ||.bss||+0x3c
                  |L1.11132|
                          DCD      ||.data||
                  |L1.11136|
                          DCD      0x30495650
                  |L1.11140|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.11144|
002b88  8108              STRH     r0,[r1,#8]
;;;2055           g_votedBarcodes[g_votedBarcodeIndex].m_outline.m_xOffset = clusters[i]->m_p0.m_x + g_dist;
002b8a  f8570024          LDR      r0,[r7,r4,LSL #2]
002b8e  f8b85026          LDRH     r5,[r8,#0x26]  ; g_dist
002b92  8c43              LDRH     r3,[r0,#0x22]
002b94  442b              ADD      r3,r3,r5
002b96  800b              STRH     r3,[r1,#0]
;;;2056           g_votedBarcodes[g_votedBarcodeIndex].m_outline.m_yOffset = clusters[i]->m_p0.m_y;
002b98  8c83              LDRH     r3,[r0,#0x24]
002b9a  804b              STRH     r3,[r1,#2]
;;;2057           g_votedBarcodes[g_votedBarcodeIndex].m_outline.m_width = clusters[i]->m_width + 1;
002b9c  8d43              LDRH     r3,[r0,#0x2a]
002b9e  1c5b              ADDS     r3,r3,#1
002ba0  808b              STRH     r3,[r1,#4]
;;;2058           g_votedBarcodes[g_votedBarcodeIndex].m_outline.m_height = clusters[i]->m_p1.m_y - clusters[i]->m_p0.m_y + 1;
002ba2  8d03              LDRH     r3,[r0,#0x28]
002ba4  8c80              LDRH     r0,[r0,#0x24]
002ba6  1a18              SUBS     r0,r3,r0
002ba8  1c40              ADDS     r0,r0,#1
002baa  80c8              STRH     r0,[r1,#6]
;;;2059   		g_votedBarcodes[g_votedBarcodeIndex].m_tracker = NULL;
002bac  f8c1900c          STR      r9,[r1,#0xc]
;;;2060           g_votedBarcodeIndex++;
002bb0  1c52              ADDS     r2,r2,#1
002bb2  f8882006          STRB     r2,[r8,#6]
                  |L1.11190|
002bb6  1c64              ADDS     r4,r4,#1              ;2047
002bb8  b2e4              UXTB     r4,r4                 ;2047
                  |L1.11194|
002bba  42b4              CMP      r4,r6                 ;2047
002bbc  d3c1              BCC      |L1.11074|
                  |L1.11198|
;;;2061       }
;;;2062   
;;;2063   	
;;;2064   #if 0
;;;2065       for (i=0; i<g_votedBarcodeIndex; i++)
;;;2066   	cprintf(0, "%d: %d, %d %d %d %d", i, g_votedBarcodes[i].m_val,
;;;2067                  g_votedBarcodes[i].m_outline.m_xOffset, g_votedBarcodes[i].m_outline.m_yOffset,
;;;2068                  g_votedBarcodes[i].m_outline.m_width, g_votedBarcodes[i].m_outline.m_height);
;;;2069   #endif
;;;2070   	
;;;2071       for (i=0; i<numClusters; i++)
002bbe  2400              MOVS     r4,#0
002bc0  e005              B        |L1.11214|
                  |L1.11202|
;;;2072           delete clusters[i];
002bc2  f8570024          LDR      r0,[r7,r4,LSL #2]
002bc6  f7fffffe          BL       _ZdlPv ; operator delete (void*)
002bca  1c64              ADDS     r4,r4,#1              ;2071
002bcc  b2e4              UXTB     r4,r4                 ;2071
                  |L1.11214|
002bce  42b4              CMP      r4,r6                 ;2071
002bd0  d3f7              BCC      |L1.11202|
;;;2073   
;;;2074       for (i=0; i<g_barcodeIndex; i++)
002bd2  2400              MOVS     r4,#0
002bd4  e007              B        |L1.11238|
                  |L1.11222|
;;;2075           delete g_candidateBarcodes[i];
002bd6  f8d80078          LDR      r0,[r8,#0x78]  ; g_candidateBarcodes
002bda  f8500024          LDR      r0,[r0,r4,LSL #2]
002bde  f7fffffe          BL       _ZdlPv ; operator delete (void*)
002be2  1c64              ADDS     r4,r4,#1              ;2074
002be4  b2e4              UXTB     r4,r4                 ;2074
                  |L1.11238|
002be6  f8980005          LDRB     r0,[r8,#5]            ;2074  ; g_barcodeIndex
002bea  4284              CMP      r4,r0                 ;2074
002bec  d3f3              BCC      |L1.11222|
;;;2076   }
002bee  b009              ADD      sp,sp,#0x24
002bf0  e8bd83f0          POP      {r4-r9,pc}
;;;2077   
                          ENDP

                  _Z10decodeCodeP7BarCodet PROC ; decodeCode(BarCode*, unsigned short)
;;;2078   int32_t decodeCode(BarCode *bc, uint16_t dec)
002bf4  e92d4ff0          PUSH     {r4-r11,lr}
;;;2079   {
;;;2080       uint8_t i, bits;
;;;2081       uint16_t val, bit, width, minWidth, maxWidth;
;;;2082       bool flag;
;;;2083   
;;;2084       for (i=1, bits=0, val=0, flag=false, minWidth=0xffff, maxWidth=0; i<bc->m_n && bits<LINE_MMC_BITS; i++)
002bf8  2301              MOVS     r3,#1
002bfa  2500              MOVS     r5,#0
002bfc  2200              MOVS     r2,#0
002bfe  2700              MOVS     r7,#0
002c00  f64f79ff          MOV      r9,#0xffff
002c04  46cc              MOV      r12,r9
002c06  4690              MOV      r8,r2
002c08  f890a01c          LDRB     r10,[r0,#0x1c]
002c0c  e032              B        |L1.11380|
                  |L1.11278|
;;;2085       {
;;;2086           bit = bc->m_edges[i]&EQ_NEGATIVE;
002c0e  eb000443          ADD      r4,r0,r3,LSL #1
002c12  8924              LDRH     r4,[r4,#8]
002c14  f4044600          AND      r6,r4,#0x8000
;;;2087           if ((bit==0 && (i&1)) || (bit && (i&1)==0))
002c18  b916              CBNZ     r6,|L1.11296|
002c1a  ea5f7bc3          LSLS     r11,r3,#31
002c1e  d112              BNE      |L1.11334|
                  |L1.11296|
002c20  b116              CBZ      r6,|L1.11304|
002c22  ea5f7bc3          LSLS     r11,r3,#31
002c26  d00e              BEQ      |L1.11334|
                  |L1.11304|
;;;2088               return -1;
;;;2089   
;;;2090           width = bc->m_edges[i]&~EQ_NEGATIVE;
002c28  f4244400          BIC      r4,r4,#0x8000
;;;2091           if (width<minWidth)
002c2c  4564              CMP      r4,r12
002c2e  d200              BCS      |L1.11314|
;;;2092               minWidth = width;
002c30  46a4              MOV      r12,r4
                  |L1.11314|
;;;2093           if (width>maxWidth)
002c32  4544              CMP      r4,r8
002c34  d900              BLS      |L1.11320|
;;;2094               maxWidth = width;
002c36  46a0              MOV      r8,r4
                  |L1.11320|
;;;2095           if (width<dec)
002c38  428c              CMP      r4,r1
002c3a  d20f              BCS      |L1.11356|
;;;2096           {
;;;2097               if (flag)
002c3c  b167              CBZ      r7,|L1.11352|
;;;2098               {
;;;2099                   val <<= 1;
002c3e  ea090242          AND      r2,r9,r2,LSL #1
;;;2100                   if (bit==0)
002c42  b11e              CBZ      r6,|L1.11340|
002c44  e004              B        |L1.11344|
                  |L1.11334|
002c46  f04f30ff          MOV      r0,#0xffffffff        ;2088
;;;2101                       val |= 1;
;;;2102                   bits++;
;;;2103                   flag = false;
;;;2104               }
;;;2105               else
;;;2106                   flag = true;
;;;2107           }
;;;2108           else if (flag) // wide with flag, must be error
;;;2109               return 0;
;;;2110           else // wide
;;;2111           {
;;;2112               val <<= 1;
;;;2113               if (bit==0)
;;;2114                   val |= 1;
;;;2115               bits++;
;;;2116           }
;;;2117       }
;;;2118       if (bits!=LINE_MMC_BITS)
;;;2119           return 0;
;;;2120       if (maxWidth/minWidth>10)
;;;2121           return -2;
;;;2122       bc->m_val = val;
;;;2123       return 1;
;;;2124   }
002c4a  e4af              B        |L1.9644|
                  |L1.11340|
002c4c  f0420201          ORR      r2,r2,#1              ;2101
                  |L1.11344|
002c50  1c6d              ADDS     r5,r5,#1              ;2102
002c52  b2ed              UXTB     r5,r5                 ;2102
002c54  2700              MOVS     r7,#0                 ;2103
002c56  e00b              B        |L1.11376|
                  |L1.11352|
002c58  2701              MOVS     r7,#1                 ;2106
002c5a  e009              B        |L1.11376|
                  |L1.11356|
002c5c  b10f              CBZ      r7,|L1.11362|
002c5e  2000              MOVS     r0,#0                 ;2109
002c60  e4a4              B        |L1.9644|
                  |L1.11362|
002c62  ea090242          AND      r2,r9,r2,LSL #1       ;2112
002c66  b90e              CBNZ     r6,|L1.11372|
002c68  f0420201          ORR      r2,r2,#1              ;2114
                  |L1.11372|
002c6c  1c6d              ADDS     r5,r5,#1              ;2115
002c6e  b2ed              UXTB     r5,r5                 ;2115
                  |L1.11376|
002c70  1c5b              ADDS     r3,r3,#1              ;2084
002c72  b2db              UXTB     r3,r3                 ;2084
                  |L1.11380|
002c74  459a              CMP      r10,r3                ;2084
002c76  d901              BLS      |L1.11388|
002c78  2d04              CMP      r5,#4                 ;2084
002c7a  d3c8              BCC      |L1.11278|
                  |L1.11388|
002c7c  2d04              CMP      r5,#4                 ;2118
002c7e  d001              BEQ      |L1.11396|
002c80  2000              MOVS     r0,#0                 ;2119
002c82  e493              B        |L1.9644|
                  |L1.11396|
002c84  fbb8f1fc          UDIV     r1,r8,r12             ;2120
002c88  290a              CMP      r1,#0xa               ;2120
002c8a  d902              BLS      |L1.11410|
002c8c  f06f0001          MVN      r0,#1                 ;2121
002c90  e48c              B        |L1.9644|
                  |L1.11410|
002c92  80c2              STRH     r2,[r0,#6]            ;2122
002c94  2001              MOVS     r0,#1                 ;2123
002c96  e489              B        |L1.9644|
;;;2125   
                          ENDP

                  _Z5comp8PKvS0_ PROC ; comp8(const void*, const void*)
;;;2126   int comp8(const void *a, const void *b)
002c98  7800              LDRB     r0,[r0,#0]
;;;2127   {
;;;2128     return *(uint8_t *)a - *(uint8_t *)b;
002c9a  7809              LDRB     r1,[r1,#0]
002c9c  1a40              SUBS     r0,r0,r1
;;;2129   }
002c9e  4770              BX       lr
;;;2130   
                          ENDP

                  _Z10decodeCodeP7BarCode PROC ; decodeCode(BarCode*)
;;;2131   bool decodeCode(BarCode *bc)
002ca0  e92d41f0          PUSH     {r4-r8,lr}
;;;2132   {
002ca4  b088              SUB      sp,sp,#0x20
002ca6  4606              MOV      r6,r0
;;;2133       int32_t res;
;;;2134   	uint8_t halfPeriodsLUT[1<<LINE_MMC_BITS], edges[LINE_MMC_MAX_EDGES-1];
;;;2135   	uint8_t i, j, lastBit, bit, bits, transitions, ftrans, gap, maxGap, threshold;
;;;2136   	
;;;2137   	for (i=0; i<1<<LINE_MMC_BITS; i++)
002ca8  2200              MOVS     r2,#0
002caa  f10d0c10          ADD      r12,sp,#0x10          ;2134
                  |L1.11438|
;;;2138   	{
;;;2139   		// count 01 transitions
;;;2140   		// count them by looking at lsb first, so we're looking at 10 transitions
;;;2141   		for (j=0, bits=i, lastBit=0, transitions=0, ftrans=0; j<LINE_MMC_BITS; j++, bits>>=1, lastBit=bit)
002cae  2300              MOVS     r3,#0
002cb0  4614              MOV      r4,r2
002cb2  2000              MOVS     r0,#0
002cb4  2100              MOVS     r1,#0
002cb6  e00a              B        |L1.11470|
                  |L1.11448|
;;;2142   		{
;;;2143   			bit = bits&0x01;
002cb8  f0040501          AND      r5,r4,#1
;;;2144   			if (bit==0 && lastBit!=0)
002cbc  b91d              CBNZ     r5,|L1.11462|
002cbe  b110              CBZ      r0,|L1.11462|
;;;2145   			{
;;;2146   				if (i==1)
002cc0  2a01              CMP      r2,#1
002cc2  d100              BNE      |L1.11462|
;;;2147   					ftrans = 1;
002cc4  2101              MOVS     r1,#1
                  |L1.11462|
002cc6  1c5b              ADDS     r3,r3,#1              ;2141
002cc8  b2db              UXTB     r3,r3                 ;2141
002cca  0864              LSRS     r4,r4,#1              ;2141
002ccc  4628              MOV      r0,r5                 ;2141
                  |L1.11470|
002cce  2b04              CMP      r3,#4                 ;2141
002cd0  d3f2              BCC      |L1.11448|
;;;2148   				transitions++;
;;;2149   			}
;;;2150   		}
;;;2151   		halfPeriodsLUT[i] = 9;
002cd2  2009              MOVS     r0,#9
002cd4  f80c0002          STRB     r0,[r12,r2]
;;;2152   		if (ftrans)
002cd8  b119              CBZ      r1,|L1.11490|
;;;2153   			halfPeriodsLUT[i] += 2;
002cda  200b              MOVS     r0,#0xb
002cdc  f80c0002          STRB     r0,[r12,r2]
002ce0  e004              B        |L1.11500|
                  |L1.11490|
;;;2154   		else if ((i&0x01)==0)
002ce2  07d0              LSLS     r0,r2,#31
002ce4  d102              BNE      |L1.11500|
;;;2155   			halfPeriodsLUT[i] += 1;
002ce6  200a              MOVS     r0,#0xa
002ce8  f80c0002          STRB     r0,[r12,r2]
                  |L1.11500|
002cec  1c52              ADDS     r2,r2,#1              ;2137
002cee  b2d2              UXTB     r2,r2                 ;2137
002cf0  2a10              CMP      r2,#0x10              ;2137
002cf2  d3dc              BCC      |L1.11438|
;;;2156   	}
;;;2157   	
;;;2158   	// copy edges
;;;2159   	for (i=0; i<bc->m_n; i++)
002cf4  2200              MOVS     r2,#0
002cf6  ac01              ADD      r4,sp,#4              ;2134
002cf8  e005              B        |L1.11526|
                  |L1.11514|
;;;2160   		edges[i] = bc->m_edges[i];
002cfa  eb060042          ADD      r0,r6,r2,LSL #1
002cfe  7a00              LDRB     r0,[r0,#8]
002d00  54a0              STRB     r0,[r4,r2]
002d02  1c52              ADDS     r2,r2,#1              ;2159
002d04  b2d2              UXTB     r2,r2                 ;2159
                  |L1.11526|
002d06  7f30              LDRB     r0,[r6,#0x1c]         ;2159
002d08  4290              CMP      r0,r2                 ;2159
002d0a  d8f6              BHI      |L1.11514|
;;;2161   	
;;;2162   	// sort 
;;;2163   	qsort(edges, bc->m_n, sizeof(uint8_t), comp8);
002d0c  7f31              LDRB     r1,[r6,#0x1c]
002d0e  f2af0377          ADR      r3,_Z5comp8PKvS0_ + 1 ; comp8(const void*, const void*)
002d12  2201              MOVS     r2,#1
002d14  a801              ADD      r0,sp,#4
002d16  f7fffffe          BL       _ZSt5qsortPvjjPFiPKvS1_E ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
;;;2164   	
;;;2165   	// find biggest gap
;;;2166   	for (i=0, maxGap=0; i<bc->m_n-1; i++)
002d1a  2200              MOVS     r2,#0
002d1c  2000              MOVS     r0,#0
002d1e  f896801c          LDRB     r8,[r6,#0x1c]         ;2159
002d22  f1a80c01          SUB      r12,r8,#1
002d26  e00b              B        |L1.11584|
                  |L1.11560|
;;;2167   	{
;;;2168   		gap = edges[i+1] - edges[i];
002d28  18a1              ADDS     r1,r4,r2
002d2a  5ca5              LDRB     r5,[r4,r2]
002d2c  784b              LDRB     r3,[r1,#1]
002d2e  1b59              SUBS     r1,r3,r5
002d30  b2c9              UXTB     r1,r1
;;;2169   		if (gap>maxGap)
002d32  4281              CMP      r1,r0
002d34  d902              BLS      |L1.11580|
;;;2170   		{
;;;2171   			maxGap = gap;
002d36  4608              MOV      r0,r1
;;;2172   			threshold = (edges[i+1] + edges[i])>>1;
002d38  1959              ADDS     r1,r3,r5
002d3a  084f              LSRS     r7,r1,#1
                  |L1.11580|
002d3c  1c52              ADDS     r2,r2,#1              ;2166
002d3e  b2d2              UXTB     r2,r2                 ;2166
                  |L1.11584|
002d40  4594              CMP      r12,r2                ;2166
002d42  dcf1              BGT      |L1.11560|
;;;2173   		}
;;;2174   	}
;;;2175   	
;;;2176   	// is the biggest gap big enough?
;;;2177   	// It needs to be at least a quarter of the smallest gap
;;;2178   	if (maxGap < (edges[0]>>2) + 1)
002d44  f89d1004          LDRB     r1,[sp,#4]
002d48  2201              MOVS     r2,#1
002d4a  eb020191          ADD      r1,r2,r1,LSR #2
002d4e  4281              CMP      r1,r0
002d50  d905              BLS      |L1.11614|
;;;2179   		threshold = edges[bc->m_n-1] + 1;  // it's not big enough, make threshold outside our gap range
002d52  f10d0003          ADD      r0,sp,#3
002d56  f8180000          LDRB     r0,[r8,r0]
002d5a  1c40              ADDS     r0,r0,#1
002d5c  b2c7              UXTB     r7,r0
                  |L1.11614|
;;;2180   	
;;;2181       res = decodeCode(bc, threshold);
002d5e  4639              MOV      r1,r7
002d60  4630              MOV      r0,r6
002d62  f7fffffe          BL       _Z10decodeCodeP7BarCodet ; decodeCode(BarCode*, unsigned short)
;;;2182       if (res==1)
002d66  2801              CMP      r0,#1
002d68  d002              BEQ      |L1.11632|
;;;2183   		return true;
;;;2184       else // error
;;;2185   		return false;
002d6a  2000              MOVS     r0,#0
                  |L1.11628|
;;;2186   }
002d6c  b008              ADD      sp,sp,#0x20
002d6e  e61e              B        |L1.10670|
                  |L1.11632|
002d70  2001              MOVS     r0,#1                 ;2183
002d72  e7fb              B        |L1.11628|
;;;2187   
                          ENDP

                  _Z10detectCodePttbP7BarCode PROC ; detectCode(unsigned short*, unsigned short, bool, BarCode*)
;;;2188   
;;;2189   bool detectCode(uint16_t *edges, uint16_t len, bool begin, BarCode *bc)
002d74  e92d41f0          PUSH     {r4-r8,lr}
;;;2190   {
;;;2191       uint16_t col00, col0, col1, col01, width0, width, qWidth;
;;;2192       uint8_t e;
;;;2193   
;;;2194       col00 = edges[0]&~EQ_NEGATIVE;
002d78  8804              LDRH     r4,[r0,#0]
002d7a  f4244400          BIC      r4,r4,#0x8000
;;;2195       col01 = edges[1]&~EQ_NEGATIVE;
002d7e  8845              LDRH     r5,[r0,#2]
002d80  f4254500          BIC      r5,r5,#0x8000
;;;2196       width0 = col01 - col00;
002d84  1b2d              SUBS     r5,r5,r4
002d86  b2ad              UXTH     r5,r5
;;;2197       qWidth = width0<<2; // use to calc front-porch and back-porch
002d88  f64f76ff          MOV      r6,#0xffff
002d8c  ea060c85          AND      r12,r6,r5,LSL #2
;;;2198   
;;;2199       // check front quiet period
;;;2200       if (!begin)
002d90  2a00              CMP      r2,#0
002d92  d109              BNE      |L1.11688|
;;;2201       {
;;;2202           width = col00 - (edges[-1]&~EQ_NEGATIVE);
002d94  f8302c02          LDRH     r2,[r0,#-2]
002d98  f4224200          BIC      r2,r2,#0x8000
002d9c  1aa2              SUBS     r2,r4,r2
002d9e  b292              UXTH     r2,r2
;;;2203           if (width<qWidth)
002da0  4562              CMP      r2,r12
002da2  d201              BCS      |L1.11688|
;;;2204               return false;
002da4  2000              MOVS     r0,#0
;;;2205       }
;;;2206   
;;;2207   
;;;2208       // first determine if we have enough edges
;;;2209       for (e=0, bc->m_n=0; e<len-1; e++)
;;;2210       {
;;;2211           if  (e>=LINE_MMC_MAX_EDGES)
;;;2212               return false; // too many edges for valid code
;;;2213           col0 = edges[e]&~EQ_NEGATIVE;
;;;2214           // correct
;;;2215           //if ((edges[e]&EQ_NEGATIVE)==0)
;;;2216           //    col0--;
;;;2217           col1 = edges[e+1]&~EQ_NEGATIVE;
;;;2218   
;;;2219           width = col1 - col0;
;;;2220           if (width>qWidth) // back-porch?
;;;2221               break;
;;;2222           // save edge
;;;2223           bc->m_edges[e] = width | (edges[e+1]&EQ_NEGATIVE);
;;;2224           bc->m_n++;
;;;2225           bc->m_width = col1 - col00;
;;;2226       }
;;;2227   
;;;2228       if (e<LINE_MMC_MIN_EDGES-1)
;;;2229           return false; // too few edges
;;;2230   
;;;2231       bc->m_p0.m_x = col00;
;;;2232       return true;
;;;2233   }
002da6  e602              B        |L1.10670|
                  |L1.11688|
002da8  2200              MOVS     r2,#0                 ;2209
002daa  2500              MOVS     r5,#0                 ;2209
002dac  771d              STRB     r5,[r3,#0x1c]         ;2209
002dae  1e49              SUBS     r1,r1,#1              ;2209
002db0  e01e              B        |L1.11760|
                  |L1.11698|
002db2  2a0a              CMP      r2,#0xa               ;2211
002db4  d301              BCC      |L1.11706|
002db6  2000              MOVS     r0,#0                 ;2212
002db8  e5f9              B        |L1.10670|
                  |L1.11706|
002dba  f8305012          LDRH     r5,[r0,r2,LSL #1]     ;2213
002dbe  f4254600          BIC      r6,r5,#0x8000         ;2213
002dc2  1c55              ADDS     r5,r2,#1              ;2217
002dc4  46a8              MOV      r8,r5                 ;2217
002dc6  f8307015          LDRH     r7,[r0,r5,LSL #1]     ;2217
002dca  f4274500          BIC      r5,r7,#0x8000         ;2217
002dce  1bae              SUBS     r6,r5,r6              ;2219
002dd0  b2b6              UXTH     r6,r6                 ;2219
002dd2  4566              CMP      r6,r12                ;2220
002dd4  d80e              BHI      |L1.11764|
002dd6  f4074700          AND      r7,r7,#0x8000         ;2223
002dda  eb030242          ADD      r2,r3,r2,LSL #1       ;2223
002dde  4337              ORRS     r7,r7,r6              ;2223
002de0  8117              STRH     r7,[r2,#8]            ;2223
002de2  7f1a              LDRB     r2,[r3,#0x1c]         ;2224
002de4  1c52              ADDS     r2,r2,#1              ;2224
002de6  771a              STRB     r2,[r3,#0x1c]         ;2224
002de8  1b2a              SUBS     r2,r5,r4              ;2225
002dea  809a              STRH     r2,[r3,#4]            ;2225
002dec  f00802ff          AND      r2,r8,#0xff           ;2209
                  |L1.11760|
002df0  428a              CMP      r2,r1                 ;2209
002df2  dbde              BLT      |L1.11698|
                  |L1.11764|
002df4  2a07              CMP      r2,#7                 ;2228
002df6  d201              BCS      |L1.11772|
002df8  2000              MOVS     r0,#0                 ;2229
002dfa  e5d8              B        |L1.10670|
                  |L1.11772|
002dfc  801c              STRH     r4,[r3,#0]            ;2231
002dfe  2001              MOVS     r0,#1                 ;2232
002e00  e5d5              B        |L1.10670|
;;;2234   
                          ENDP

                  _Z11detectCodeshPtj PROC ; detectCodes(unsigned char, unsigned short*, unsigned)
;;;2235   void detectCodes(uint8_t row, uint16_t *edges, uint32_t len)
002e02  e92d5ff0          PUSH     {r4-r12,lr}
;;;2236   {
002e06  4682              MOV      r10,r0
002e08  460f              MOV      r7,r1
002e0a  4616              MOV      r6,r2
;;;2237   	bool res;
;;;2238   	bool begin;
;;;2239   	uint16_t j, k, bit0, bit1;
;;;2240       BarCode *bc;
;;;2241   
;;;2242   	if (len<LINE_MMC_MIN_EDGES)
002e0c  2e08              CMP      r6,#8
002e0e  d35e              BCC      |L1.11982|
;;;2243   		return;
;;;2244   
;;;2245   	bc = new (std::nothrow) BarCode;
002e10  49fc              LDR      r1,|L1.12804|
002e12  201e              MOVS     r0,#0x1e
002e14  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
002e18  b118              CBZ      r0,|L1.11810|
002e1a  f7fffffe          BL       _ZN7BarCodeC1Ev ; BarCode::BarCode()
002e1e  4604              MOV      r4,r0
002e20  e000              B        |L1.11812|
                  |L1.11810|
002e22  2400              MOVS     r4,#0
                  |L1.11812|
;;;2246   	if (bc==NULL)
002e24  2c00              CMP      r4,#0
002e26  d052              BEQ      |L1.11982|
;;;2247   		return;
;;;2248   	
;;;2249   	for (j=0, begin=true, k=0; j<len-1 && edges[j]<EQ_HSCAN_LINE_START && edges[j+1]<EQ_HSCAN_LINE_START; j++, begin=false, k++)
002e28  2000              MOVS     r0,#0
002e2a  f04f0c01          MOV      r12,#1
002e2e  2500              MOVS     r5,#0
;;;2250   	{
;;;2251   		bit0 = edges[j]&EQ_NEGATIVE;
;;;2252   		bit1 = edges[j+1]&EQ_NEGATIVE;
;;;2253   		if (bit0!=0 && bit1==0 && len>=LINE_MMC_MIN_EDGES-1+k)
;;;2254           {
;;;2255   			bc->m_p0.m_y = row;
;;;2256   
;;;2257   			if (detectCode(&edges[j], len-j, begin, bc))
;;;2258   			{
;;;2259                   if (g_barcodeIndex>=LINE_MMC_CANDIDATE_BARCODES)
002e30  f8dfb3d4          LDR      r11,|L1.12808|
002e34  f1a60901          SUB      r9,r6,#1              ;2249
002e38  e036              B        |L1.11944|
                  |L1.11834|
002e3a  f4014100          AND      r1,r1,#0x8000         ;2251
002e3e  f4024200          AND      r2,r2,#0x8000         ;2252
002e42  b359              CBZ      r1,|L1.11932|
002e44  bb52              CBNZ     r2,|L1.11932|
002e46  1de9              ADDS     r1,r5,#7              ;2253
002e48  428e              CMP      r6,r1                 ;2253
002e4a  d327              BCC      |L1.11932|
002e4c  f8a4a002          STRH     r10,[r4,#2]           ;2255
002e50  1a31              SUBS     r1,r6,r0              ;2257
002e52  b289              UXTH     r1,r1                 ;2257
002e54  eb070040          ADD      r0,r7,r0,LSL #1       ;2257
002e58  4623              MOV      r3,r4                 ;2257
002e5a  4662              MOV      r2,r12                ;2257
002e5c  f7fffffe          BL       _Z10detectCodePttbP7BarCode ; detectCode(unsigned short*, unsigned short, bool, BarCode*)
002e60  b1e0              CBZ      r0,|L1.11932|
002e62  f89b0005          LDRB     r0,[r11,#5]  ; g_barcodeIndex
002e66  2820              CMP      r0,#0x20
002e68  d22c              BCS      |L1.11972|
;;;2260   					goto end;
;;;2261   				res = decodeCode(bc);
002e6a  4620              MOV      r0,r4
002e6c  f7fffffe          BL       _Z10decodeCodeP7BarCode ; decodeCode(BarCode*)
;;;2262   #if 0
;;;2263                   cprintf(0, "%d %d: %d %d: %d, %d %d %d %d %d %d %d %d %d", bc->m_p0.m_x, bc->m_p0.m_y, res, bc->m_val,
;;;2264                              bc->m_n, bc->m_edges[0]&~EQ_NEGATIVE, bc->m_edges[1]&~EQ_NEGATIVE, bc->m_edges[2]&~EQ_NEGATIVE, bc->m_edges[3]&~EQ_NEGATIVE, bc->m_edges[4]&~EQ_NEGATIVE,
;;;2265                               bc->m_edges[5]&~EQ_NEGATIVE, bc->m_edges[6]&~EQ_NEGATIVE, bc->m_edges[7]&~EQ_NEGATIVE, bc->m_edges[8]&~EQ_NEGATIVE);
;;;2266   #endif
;;;2267   				if (res)
002e70  b1a0              CBZ      r0,|L1.11932|
;;;2268   				{
;;;2269   					g_candidateBarcodes[g_barcodeIndex++] = bc;
002e72  f89b0005          LDRB     r0,[r11,#5]  ; g_barcodeIndex
002e76  1c41              ADDS     r1,r0,#1
002e78  f88b1005          STRB     r1,[r11,#5]
002e7c  f8db1078          LDR      r1,[r11,#0x78]  ; g_candidateBarcodes
002e80  f8414020          STR      r4,[r1,r0,LSL #2]
;;;2270   					bc = new (std::nothrow) BarCode;
002e84  49df              LDR      r1,|L1.12804|
002e86  201e              MOVS     r0,#0x1e
002e88  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
002e8c  b118              CBZ      r0,|L1.11926|
002e8e  f7fffffe          BL       _ZN7BarCodeC1Ev ; BarCode::BarCode()
002e92  4604              MOV      r4,r0
002e94  e000              B        |L1.11928|
                  |L1.11926|
002e96  2400              MOVS     r4,#0
                  |L1.11928|
;;;2271   					if (bc==NULL)
002e98  2c00              CMP      r4,#0
002e9a  d018              BEQ      |L1.11982|
                  |L1.11932|
002e9c  fa1ff088          UXTH     r0,r8                 ;2249
002ea0  f04f0c00          MOV      r12,#0                ;2249
002ea4  1c6d              ADDS     r5,r5,#1              ;2249
002ea6  b2ad              UXTH     r5,r5                 ;2249
                  |L1.11944|
002ea8  4548              CMP      r0,r9                 ;2249
002eaa  d20b              BCS      |L1.11972|
002eac  f8371010          LDRH     r1,[r7,r0,LSL #1]     ;2249
002eb0  f44f437f          MOV      r3,#0xff00            ;2249
002eb4  4299              CMP      r1,r3                 ;2249
002eb6  d205              BCS      |L1.11972|
002eb8  f1000801          ADD      r8,r0,#1              ;2249
002ebc  f8372018          LDRH     r2,[r7,r8,LSL #1]     ;2249
002ec0  429a              CMP      r2,r3                 ;2249
002ec2  d3ba              BCC      |L1.11834|
                  |L1.11972|
;;;2272   						return;
;;;2273   				}
;;;2274   			}
;;;2275   		}
;;;2276   	}
;;;2277   
;;;2278   	end:	
;;;2279   	delete bc;
002ec4  4620              MOV      r0,r4
002ec6  e8bd5ff0          POP      {r4-r12,lr}
002eca  f7ffbffe          B.W      _ZdlPv ; operator delete (void*)
                  |L1.11982|
;;;2280   }
002ece  e8bd9ff0          POP      {r4-r12,pc}
;;;2281   
                          ENDP

                  _Z9sendCodesh PROC ; sendCodes(unsigned char)
;;;2282   int sendCodes(uint8_t renderFlags)
002ed2  b570              PUSH     {r4-r6,lr}
;;;2283   {
002ed4  b08a              SUB      sp,sp,#0x28
;;;2284   	uint32_t len;
;;;2285   	uint8_t *codeData = (uint8_t *)g_votedBarcodesMem + CAM_PREBUF_LEN - CAM_FRAME_HEADER_LEN;
002ed6  49cc              LDR      r1,|L1.12808|
002ed8  3180              ADDS     r1,r1,#0x80
002eda  680d              LDR      r5,[r1,#0]  ; g_votedBarcodesMem
002edc  351c              ADDS     r5,r5,#0x1c
;;;2286   	
;;;2287   	// fill buffer contents manually for return data 
;;;2288   	len = Chirp::serialize(g_chirpUsb, (uint8_t *)codeData, LINE_MMC_VOTED_BARCODES*sizeof(DecodedBarCode), HTYPE(FOURCC('C','O','D','E')), HINT8(renderFlags), UINT16(CAM_RES3_WIDTH), UINT16(CAM_RES3_HEIGHT), UINTS8_NO_COPY(g_votedBarcodeIndex*sizeof(DecodedBarCode)), END); 
002ede  4eca              LDR      r6,|L1.12808|
002ee0  2200              MOVS     r2,#0
002ee2  23b1              MOVS     r3,#0xb1
002ee4  79b1              LDRB     r1,[r6,#6]  ; g_votedBarcodeIndex
002ee6  2468              MOVS     r4,#0x68
002ee8  0109              LSLS     r1,r1,#4
002eea  e9cd4306          STRD     r4,r3,[sp,#0x18]
002eee  e9cd1208          STRD     r1,r2,[sp,#0x20]
002ef2  2202              MOVS     r2,#2
002ef4  f44f711f          MOV      r1,#0x27c
002ef8  e9cd2103          STRD     r2,r1,[sp,#0xc]
002efc  9205              STR      r2,[sp,#0x14]
002efe  9002              STR      r0,[sp,#8]
002f00  2041              MOVS     r0,#0x41
002f02  49c2              LDR      r1,|L1.12812|
002f04  e9cd1000          STRD     r1,r0,[sp,#0]
002f08  4cc1              LDR      r4,|L1.12816|
002f0a  2364              MOVS     r3,#0x64
002f0c  2280              MOVS     r2,#0x80
002f0e  4629              MOV      r1,r5
002f10  6820              LDR      r0,[r4,#0]  ; g_chirpUsb
002f12  f7fffffe          BL       _ZN5Chirp9serializeEPS_Phjz ; Chirp::serialize(Chirp*, unsigned char*, unsigned, ...)
;;;2289   	if (len!=CAM_FRAME_HEADER_LEN)
002f16  2824              CMP      r0,#0x24
002f18  d003              BEQ      |L1.12066|
;;;2290   		return -1;
002f1a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.12062|
;;;2291   	
;;;2292   	g_chirpUsb->useBuffer((uint8_t *)codeData, CAM_FRAME_HEADER_LEN+g_votedBarcodeIndex*sizeof(DecodedBarCode)); 
;;;2293   	
;;;2294   	return 0;
;;;2295   }
002f1e  b00a              ADD      sp,sp,#0x28
002f20  bd70              POP      {r4-r6,pc}
                  |L1.12066|
002f22  79b0              LDRB     r0,[r6,#6]            ;2292  ; g_votedBarcodeIndex
002f24  2124              MOVS     r1,#0x24              ;2292
002f26  eb011200          ADD      r2,r1,r0,LSL #4       ;2292
002f2a  4629              MOV      r1,r5                 ;2292
002f2c  6820              LDR      r0,[r4,#0]            ;2292  ; g_chirpUsb
002f2e  f7fffffe          BL       _ZN5Chirp9useBufferEPhj ; Chirp::useBuffer(unsigned char*, unsigned)
002f32  2000              MOVS     r0,#0                 ;2294
002f34  e7f3              B        |L1.12062|
;;;2296   
                          ENDP

                  _Z16sendTrackedCodesh PROC ; sendTrackedCodes(unsigned char)
;;;2297   int sendTrackedCodes(uint8_t renderFlags)
002f36  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;2298   {
002f3a  b08e              SUB      sp,sp,#0x38
;;;2299   	SimpleListNode<Tracker<DecodedBarCode> > *i;
;;;2300   	
;;;2301   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('B','C','0','F')), INT8(RENDER_FLAG_START), STRING("Tracked barcodes"), UINT16(CAM_RES3_WIDTH), UINT16(CAM_RES3_HEIGHT), END);
002f3c  2600              MOVS     r6,#0
002f3e  f04f0968          MOV      r9,#0x68
002f42  e9cd9607          STRD     r9,r6,[sp,#0x1c]
002f46  2502              MOVS     r5,#2
002f48  f44f7a1f          MOV      r10,#0x27c
002f4c  a0b1              ADR      r0,|L1.12820|
002f4e  f04f0ba1          MOV      r11,#0xa1
002f52  e9cdb002          STRD     r11,r0,[sp,#8]
002f56  e9cd5a04          STRD     r5,r10,[sp,#0x10]
002f5a  9506              STR      r5,[sp,#0x18]
002f5c  2004              MOVS     r0,#4
002f5e  2701              MOVS     r7,#1
002f60  f8df82ac          LDR      r8,|L1.12816|
002f64  e9cd7000          STRD     r7,r0,[sp,#0]
002f68  9609              STR      r6,[sp,#0x24]
002f6a  4baf              LDR      r3,|L1.12840|
002f6c  2264              MOVS     r2,#0x64
002f6e  2118              MOVS     r1,#0x18
002f70  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
002f74  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;2302   
;;;2303   	for (i=g_barCodeTrackersList.m_first; i!=NULL; i=i->m_next)
002f78  48ac              LDR      r0,|L1.12844|
002f7a  6804              LDR      r4,[r0,#0]  ; g_barCodeTrackersList
002f7c  e01c              B        |L1.12216|
                  |L1.12158|
;;;2304   	{
;;;2305   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('B','C','0','S')), UINT8(i->m_object.m_index), UINT16(i->m_object.m_object.m_val), 
002f7e  8b60              LDRH     r0,[r4,#0x1a]
002f80  e9cd060b          STRD     r0,r6,[sp,#0x2c]
002f84  960d              STR      r6,[sp,#0x34]
002f86  950a              STR      r5,[sp,#0x28]
002f88  8b20              LDRH     r0,[r4,#0x18]
002f8a  8ae1              LDRH     r1,[r4,#0x16]
002f8c  e9cd5008          STRD     r5,r0,[sp,#0x20]
002f90  e9cd5106          STRD     r5,r1,[sp,#0x18]
002f94  8aa0              LDRH     r0,[r4,#0x14]
002f96  f9b4101c          LDRSH    r1,[r4,#0x1c]
002f9a  e9cd5004          STRD     r5,r0,[sp,#0x10]
002f9e  e9cd5102          STRD     r5,r1,[sp,#8]
002fa2  7860              LDRB     r0,[r4,#1]
002fa4  4ba2              LDR      r3,|L1.12848|
002fa6  e9cd7000          STRD     r7,r0,[sp,#0]
002faa  2264              MOVS     r2,#0x64
002fac  2118              MOVS     r1,#0x18
002fae  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
002fb2  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
002fb6  6a64              LDR      r4,[r4,#0x24]         ;2303
                  |L1.12216|
002fb8  2c00              CMP      r4,#0                 ;2303
002fba  d1e0              BNE      |L1.12158|
;;;2306   			UINT16(i->m_object.m_object.m_outline.m_xOffset), UINT16(i->m_object.m_object.m_outline.m_yOffset), UINT16(i->m_object.m_object.m_outline.m_width), UINT16(i->m_object.m_object.m_outline.m_height), END);
;;;2307   	}
;;;2308   	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('B','C','0','F')), INT8(renderFlags), STRING("Tracked barcodes"), INT16(CAM_RES3_WIDTH), INT16(CAM_RES3_HEIGHT), END);			
002fbc  e9cd9607          STRD     r9,r6,[sp,#0x1c]
002fc0  a094              ADR      r0,|L1.12820|
002fc2  e9cd5a04          STRD     r5,r10,[sp,#0x10]
002fc6  e9cdb002          STRD     r11,r0,[sp,#8]
002fca  9609              STR      r6,[sp,#0x24]
002fcc  980e              LDR      r0,[sp,#0x38]
002fce  9506              STR      r5,[sp,#0x18]
002fd0  e9cd7000          STRD     r7,r0,[sp,#0]
002fd4  4b94              LDR      r3,|L1.12840|
002fd6  2264              MOVS     r2,#0x64
002fd8  2118              MOVS     r1,#0x18
002fda  f8d80000          LDR      r0,[r8,#0]  ; g_chirpUsb
002fde  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;2309   	
;;;2310   	return 0;
002fe2  2000              MOVS     r0,#0
                  |L1.12260|
;;;2311   }
002fe4  e404              B        |L1.10224|
;;;2312   
                          ENDP

                  _Z9clearGrid5RectB PROC ; clearGrid(RectB)
;;;2313   void clearGrid(const RectB rect)
002fe6  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;2314   {
;;;2315   	uint8_t i, j;
;;;2316   	uint16_t index;
;;;2317   	uint16_t height;
;;;2318   	int16_t r0;
;;;2319   	
;;;2320   	height = rect.m_bottom - rect.m_top;
002fe8  f8bd7006          LDRH     r7,[sp,#6]
002fec  f8bd0004          LDRH     r0,[sp,#4]
002ff0  1a39              SUBS     r1,r7,r0
;;;2321   	height *= 4;
002ff2  f64f72ff          MOV      r2,#0xffff
002ff6  ea020181          AND      r1,r2,r1,LSL #2
;;;2322   	
;;;2323   	
;;;2324   	r0 = rect.m_top-height;
002ffa  1a40              SUBS     r0,r0,r1
002ffc  b200              SXTH     r0,r0
;;;2325   	if (r0<0)
002ffe  2800              CMP      r0,#0
003000  da00              BGE      |L1.12292|
;;;2326   		r0 = 0;
003002  2000              MOVS     r0,#0
                  |L1.12292|
;;;2327   	for (i=r0; i<=rect.m_bottom; i++)
003004  b2c2              UXTB     r2,r0
;;;2328   	{
;;;2329   		for (j=rect.m_left, index=i*LINE_GRID_WIDTH+rect.m_left; j<=rect.m_right; j++, index++)
;;;2330   			g_lineGrid[index] = 0;
003006  4880              LDR      r0,|L1.12808|
003008  2300              MOVS     r3,#0                 ;2327
00300a  f8bd5002          LDRH     r5,[sp,#2]            ;2329
00300e  f8bd6000          LDRH     r6,[sp,#0]            ;2329
003012  6d44              LDR      r4,[r0,#0x54]         ;2327
003014  e011              B        |L1.12346|
                  |L1.12310|
003016  b2f0              UXTB     r0,r6                 ;2329
003018  ebc21102          RSB      r1,r2,r2,LSL #4       ;2329
00301c  eb011182          ADD      r1,r1,r2,LSL #6       ;2329
003020  4431              ADD      r1,r1,r6              ;2329
003022  b289              UXTH     r1,r1                 ;2329
003024  e005              B        |L1.12338|
                  |L1.12326|
003026  f8243011          STRH     r3,[r4,r1,LSL #1]
00302a  1c40              ADDS     r0,r0,#1              ;2329
00302c  b2c0              UXTB     r0,r0                 ;2329
00302e  1c49              ADDS     r1,r1,#1              ;2329
003030  b289              UXTH     r1,r1                 ;2329
                  |L1.12338|
003032  4285              CMP      r5,r0                 ;2329
003034  d2f7              BCS      |L1.12326|
003036  1c52              ADDS     r2,r2,#1              ;2327
003038  b2d2              UXTB     r2,r2                 ;2327
                  |L1.12346|
00303a  4297              CMP      r7,r2                 ;2327
00303c  d2eb              BCS      |L1.12310|
;;;2331   	}
;;;2332   }
00303e  bdfc              POP      {r2-r7,pc}
;;;2333   
                          ENDP

                  _Z9clearGridv PROC ; clearGrid()
;;;2334   void clearGrid()
003040  e92d41fc          PUSH     {r2-r8,lr}
;;;2335   {
003044  2000              MOVS     r0,#0
003046  f8ad0006          STRH     r0,[sp,#6]
00304a  f8ad0002          STRH     r0,[sp,#2]
00304e  f8ad0004          STRH     r0,[sp,#4]
003052  f8ad0000          STRH     r0,[sp,#0]
;;;2336   	// remove edges 
;;;2337   	int16_t val, i;
;;;2338   	uint16_t v, h;
;;;2339   	RectB rect;
;;;2340   	
;;;2341   	for (i=0; i<g_votedBarcodeIndex; i++)
003056  2600              MOVS     r6,#0
;;;2342   	{
;;;2343   		h = LINE_MMC_HBOUNDARY*g_votedBarcodes[i].m_outline.m_width;
003058  4f6b              LDR      r7,|L1.12808|
00305a  e04c              B        |L1.12534|
                  |L1.12380|
00305c  6ff8              LDR      r0,[r7,#0x7c]  ; g_votedBarcodes
00305e  eb001406          ADD      r4,r0,r6,LSL #4
003062  88a0              LDRH     r0,[r4,#4]
003064  f7fffffe          BL       __aeabi_ui2d
003068  ed9f1b72          VLDR     d1,|L1.12852|
00306c  ec532b11          VMOV     r2,r3,d1
003070  f7fffffe          BL       __aeabi_dmul
003074  f7fffffe          BL       __aeabi_d2uiz
003078  b285              UXTH     r5,r0
;;;2344   		if (h>>LINE_GRID_WIDTH_REDUCTION==0)
00307a  08e8              LSRS     r0,r5,#3
00307c  d100              BNE      |L1.12416|
;;;2345   			h = 1<<LINE_GRID_WIDTH_REDUCTION; // ensure minimum of 1 pixel in grid
00307e  2508              MOVS     r5,#8
                  |L1.12416|
;;;2346   		v = LINE_MMC_VBOUNDARY*g_votedBarcodes[i].m_outline.m_height;
003080  88e0              LDRH     r0,[r4,#6]
003082  f7fffffe          BL       __aeabi_ui2d
003086  ed9f1b6d          VLDR     d1,|L1.12860|
00308a  ec532b11          VMOV     r2,r3,d1
00308e  f7fffffe          BL       __aeabi_dmul
003092  f7fffffe          BL       __aeabi_d2uiz
003096  b280              UXTH     r0,r0
;;;2347   		if (v>>LINE_GRID_HEIGHT_REDUCTION==0)
003098  0841              LSRS     r1,r0,#1
00309a  d100              BNE      |L1.12446|
;;;2348   			v = 1<<LINE_GRID_HEIGHT_REDUCTION; // ensure minimum of 1 pixel in grid
00309c  2002              MOVS     r0,#2
                  |L1.12446|
;;;2349   		
;;;2350   		val = (g_votedBarcodes[i].m_outline.m_xOffset - h)>>LINE_GRID_WIDTH_REDUCTION;
00309e  8821              LDRH     r1,[r4,#0]
0030a0  1b49              SUBS     r1,r1,r5
0030a2  10c9              ASRS     r1,r1,#3
;;;2351   		if (val<0)
0030a4  2900              CMP      r1,#0
0030a6  da00              BGE      |L1.12458|
;;;2352   			val = 0;
0030a8  2100              MOVS     r1,#0
                  |L1.12458|
;;;2353   		rect.m_left = val;
0030aa  f8ad1000          STRH     r1,[sp,#0]
;;;2354   		
;;;2355   		val = (g_votedBarcodes[i].m_outline.m_xOffset + g_votedBarcodes[i].m_outline.m_width + h)>>LINE_GRID_WIDTH_REDUCTION;
0030ae  8821              LDRH     r1,[r4,#0]
0030b0  88a2              LDRH     r2,[r4,#4]
0030b2  4411              ADD      r1,r1,r2
0030b4  4429              ADD      r1,r1,r5
0030b6  08c9              LSRS     r1,r1,#3
;;;2356   		if (val>=LINE_GRID_WIDTH)
0030b8  294f              CMP      r1,#0x4f
0030ba  db00              BLT      |L1.12478|
;;;2357   			val = LINE_GRID_WIDTH-1;
0030bc  214e              MOVS     r1,#0x4e
                  |L1.12478|
;;;2358   		rect.m_right = val;
0030be  f8ad1002          STRH     r1,[sp,#2]
;;;2359   		
;;;2360   		val = (g_votedBarcodes[i].m_outline.m_yOffset - v)>>LINE_GRID_HEIGHT_REDUCTION;
0030c2  8861              LDRH     r1,[r4,#2]
0030c4  1a09              SUBS     r1,r1,r0
0030c6  f341014f          SBFX     r1,r1,#1,#16
;;;2361   		if (val<0)
0030ca  2900              CMP      r1,#0
0030cc  da00              BGE      |L1.12496|
;;;2362   			val = 0;
0030ce  2100              MOVS     r1,#0
                  |L1.12496|
;;;2363   		rect.m_top = val;
0030d0  f8ad1004          STRH     r1,[sp,#4]
;;;2364   		
;;;2365   		val = (g_votedBarcodes[i].m_outline.m_yOffset + g_votedBarcodes[i].m_outline.m_height + v)>>LINE_GRID_HEIGHT_REDUCTION;
0030d4  8861              LDRH     r1,[r4,#2]
0030d6  88e2              LDRH     r2,[r4,#6]
0030d8  4411              ADD      r1,r1,r2
0030da  4408              ADD      r0,r0,r1
0030dc  f340004f          SBFX     r0,r0,#1,#16
;;;2366   		if (val>=LINE_GRID_HEIGHT)
0030e0  2834              CMP      r0,#0x34
0030e2  db00              BLT      |L1.12518|
;;;2367   			val = LINE_GRID_HEIGHT-1;
0030e4  2033              MOVS     r0,#0x33
                  |L1.12518|
;;;2368   		rect.m_bottom = val;
0030e6  f8ad0006          STRH     r0,[sp,#6]
;;;2369   		
;;;2370   		clearGrid(rect); 
0030ea  e9dd0100          LDRD     r0,r1,[sp,#0]
0030ee  f7fffffe          BL       _Z9clearGrid5RectB ; clearGrid(RectB)
0030f2  1c76              ADDS     r6,r6,#1              ;2341
0030f4  b236              SXTH     r6,r6                 ;2341
                  |L1.12534|
0030f6  79b8              LDRB     r0,[r7,#6]            ;2341  ; g_votedBarcodeIndex
0030f8  4286              CMP      r6,r0                 ;2341
0030fa  dbaf              BLT      |L1.12380|
;;;2371   	}	
;;;2372   }
0030fc  e8bd81fc          POP      {r2-r8,pc}
;;;2373   
                          ENDP

                  _Z12compareLinesRK5Line2S1_ PROC ; compareLines(const Line2&, const Line2&)
;;;2374   
;;;2375   uint32_t compareLines(const Line2 &line0, const Line2 &line1)
003100  e92d43f8          PUSH     {r3-r9,lr}
;;;2376   {
003104  4605              MOV      r5,r0
003106  460c              MOV      r4,r1
;;;2377   	uint16_t d0, d1, d2, d3, da, db;
;;;2378   	uint32_t angle, df;
;;;2379   	
;;;2380   	d0 = line0.m_p0.dist2(line1.m_p0);
003108  4621              MOV      r1,r4
00310a  4628              MOV      r0,r5
00310c  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
003110  4607              MOV      r7,r0
;;;2381   	d1 = line0.m_p0.dist2(line1.m_p1);
003112  1ca1              ADDS     r1,r4,#2
003114  4628              MOV      r0,r5
003116  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
00311a  4680              MOV      r8,r0
;;;2382   	d2 = line0.m_p1.dist2(line1.m_p0);
00311c  4621              MOV      r1,r4
00311e  1ca8              ADDS     r0,r5,#2
003120  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
003124  4606              MOV      r6,r0
;;;2383   	d3 = line0.m_p1.dist2(line1.m_p1);
003126  1ca1              ADDS     r1,r4,#2
003128  1ca8              ADDS     r0,r5,#2
00312a  f7fffffe          BL       _ZNK5Point5dist2ERKS_ ; Point::dist2(const Point&) const
;;;2384   	
;;;2385   	da = MIN(d0, d1);
00312e  4547              CMP      r7,r8
003130  d201              BCS      |L1.12598|
003132  4639              MOV      r1,r7
003134  e000              B        |L1.12600|
                  |L1.12598|
003136  4641              MOV      r1,r8
                  |L1.12600|
;;;2386   	db = MIN(d2, d3);
003138  4286              CMP      r6,r0
00313a  d200              BCS      |L1.12606|
00313c  4630              MOV      r0,r6
                  |L1.12606|
;;;2387   	
;;;2388   	df = da+db;
00313e  180e              ADDS     r6,r1,r0
;;;2389   	
;;;2390   	// compare to max line distance
;;;2391   	if (df>g_maxLineCompare)
003140  4831              LDR      r0,|L1.12808|
;;;2392   		return TR_MAXVAL;
003142  f04f37ff          MOV      r7,#0xffffffff
003146  3080              ADDS     r0,r0,#0x80           ;2391
003148  6840              LDR      r0,[r0,#4]            ;2391  ; g_maxLineCompare
00314a  4286              CMP      r6,r0                 ;2391
00314c  d902              BLS      |L1.12628|
00314e  4638              MOV      r0,r7
                  |L1.12624|
;;;2393   
;;;2394   	// test angle
;;;2395   	angle = tanDiffAbs1000(line0.m_p0, line0.m_p1, line1.m_p0, line1.m_p1, true);
;;;2396   	if (angle>g_maxTrackingTanAngle)
;;;2397   		return TR_MAXVAL;
;;;2398   		
;;;2399   	return da+db;
;;;2400   }
003150  e8bd83f8          POP      {r3-r9,pc}
                  |L1.12628|
003154  2001              MOVS     r0,#1                 ;2395
003156  9000              STR      r0,[sp,#0]            ;2395
003158  1ca3              ADDS     r3,r4,#2              ;2395
00315a  4622              MOV      r2,r4                 ;2395
00315c  1ca9              ADDS     r1,r5,#2              ;2395
00315e  4628              MOV      r0,r5                 ;2395
003160  f7fffffe          BL       _Z14tanDiffAbs1000RK5PointS1_S1_S1_b ; tanDiffAbs1000(const Point&, const Point&, const Point&, const Point&, bool)
003164  4928              LDR      r1,|L1.12808|
003166  6f49              LDR      r1,[r1,#0x74]         ;2396  ; g_maxTrackingTanAngle
003168  4288              CMP      r0,r1                 ;2396
00316a  d901              BLS      |L1.12656|
00316c  4638              MOV      r0,r7                 ;2397
00316e  e7ef              B        |L1.12624|
                  |L1.12656|
003170  4630              MOV      r0,r6                 ;2399
003172  e7ed              B        |L1.12624|
;;;2401   
                          ENDP

                  _Z19handleLineTracking2v PROC ; handleLineTracking2()
;;;2402   uint16_t handleLineTracking2()
003174  e92d5ff0          PUSH     {r4-r12,lr}
;;;2403   {
;;;2404   	uint32_t val, min;
;;;2405   	uint16_t n=0;
003178  f04f0800          MOV      r8,#0
;;;2406   	SimpleListNode<Tracker<Line2> > *i;
;;;2407   	SimpleListNode<Line2> *j;
;;;2408   	uint8_t k;
;;;2409   	Line2 *minLine;
;;;2410   	bool priority;
;;;2411   	
;;;2412   	// go through list, find best candidates
;;;2413   	for (i=g_lineTrackersList.m_first; i!=NULL; i=i->m_next)
00317c  482b              LDR      r0,|L1.12844|
00317e  383c              SUBS     r0,r0,#0x3c
003180  6804              LDR      r4,[r0,#0]  ; g_lineTrackersList
;;;2414   	{
;;;2415   		// calculate priority -- primary lines and lines in the primary intersection
;;;2416   		priority = false;
;;;2417   		if (g_primaryActive && g_primaryLineIndex==i->m_object.m_index)
;;;2418   			priority = true;
;;;2419   		else if (g_primaryIntersection.m_state!=TR_INVALID)
003182  f1000b0c          ADD      r11,r0,#0xc
;;;2420   		{
;;;2421   			for (k=0; k<g_primaryIntersection.m_object.m_n; k++)
;;;2422   			{
;;;2423   				if (g_primaryIntersection.m_object.m_lines[k].m_index==i->m_object.m_index)
;;;2424   				{
;;;2425   					priority = true;
;;;2426   					break;
;;;2427   				}
;;;2428   			}
;;;2429   		}
;;;2430   		// already found minimum, continue
;;;2431   		if (i->m_object.m_minVal!=TR_MAXVAL)
003186  f04f3aff          MOV      r10,#0xffffffff
00318a  e086              B        |L1.12954|
                  |L1.12684|
00318c  f04f0900          MOV      r9,#0                 ;2416
003190  481d              LDR      r0,|L1.12808|
003192  7b01              LDRB     r1,[r0,#0xc]          ;2417  ; g_primaryActive
003194  b131              CBZ      r1,|L1.12708|
003196  7861              LDRB     r1,[r4,#1]            ;2417
003198  7a80              LDRB     r0,[r0,#0xa]          ;2417  ; g_primaryLineIndex
00319a  4281              CMP      r1,r0                 ;2417
00319c  d102              BNE      |L1.12708|
00319e  f04f0901          MOV      r9,#1                 ;2418
0031a2  e014              B        |L1.12750|
                  |L1.12708|
0031a4  f89b0000          LDRB     r0,[r11,#0]           ;2419  ; g_primaryIntersection
0031a8  2803              CMP      r0,#3                 ;2419
0031aa  d010              BEQ      |L1.12750|
0031ac  2000              MOVS     r0,#0                 ;2421
0031ae  f89b1016          LDRB     r1,[r11,#0x16]        ;2421
0031b2  e00a              B        |L1.12746|
                  |L1.12724|
0031b4  eb0b0280          ADD      r2,r11,r0,LSL #2      ;2423
0031b8  7863              LDRB     r3,[r4,#1]            ;2423
0031ba  7e12              LDRB     r2,[r2,#0x18]         ;2423
0031bc  429a              CMP      r2,r3                 ;2423
0031be  d102              BNE      |L1.12742|
0031c0  f04f0901          MOV      r9,#1                 ;2425
0031c4  e003              B        |L1.12750|
                  |L1.12742|
0031c6  1c40              ADDS     r0,r0,#1              ;2421
0031c8  b2c0              UXTB     r0,r0                 ;2421
                  |L1.12746|
0031ca  4281              CMP      r1,r0                 ;2421
0031cc  d8f2              BHI      |L1.12724|
                  |L1.12750|
0031ce  68e0              LDR      r0,[r4,#0xc]
0031d0  1c40              ADDS     r0,r0,#1
0031d2  d161              BNE      |L1.12952|
;;;2432   			continue;
;;;2433   		
;;;2434   		// find min
;;;2435   		for (j=g_linesList.m_first, min=TR_MAXVAL, minLine=NULL; j!=NULL; j=j->m_next)
0031d4  4815              LDR      r0,|L1.12844|
0031d6  386c              SUBS     r0,r0,#0x6c
0031d8  6806              LDR      r6,[r0,#0]  ; g_linesList
0031da  4657              MOV      r7,r10
0031dc  2500              MOVS     r5,#0
0031de  e041              B        |L1.12900|
                  |L1.12768|
;;;2436   		{
;;;2437   			val = compareLines(i->m_object.m_object, j->m_object);
0031e0  4631              MOV      r1,r6
0031e2  f1040014          ADD      r0,r4,#0x14
0031e6  f7fffffe          BL       _Z12compareLinesRK5Line2S1_ ; compareLines(const Line2&, const Line2&)
;;;2438   			if (!priority) 
0031ea  f1b90f00          CMP      r9,#0
0031ee  d100              BNE      |L1.12786|
;;;2439   				val <<= 12; // we scale up by 4096 because this exceeds pretty much all possible compare values due to geometry
0031f0  0300              LSLS     r0,r0,#12
                  |L1.12786|
;;;2440   			// find minimum, but if line is already chosen, make sure we're a better match
;;;2441   			if (val<min && i->m_object.swappable(val, &j->m_object))
0031f2  42b8              CMP      r0,r7
0031f4  d235              BCS      |L1.12898|
0031f6  6931              LDR      r1,[r6,#0x10]
0031f8  b321              CBZ      r1,|L1.12868|
0031fa  68cb              LDR      r3,[r1,#0xc]
0031fc  4283              CMP      r3,r0
0031fe  d823              BHI      |L1.12872|
003200  2100              MOVS     r1,#0
003202  e02b              B        |L1.12892|
                  |L1.12804|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.12808|
                          DCD      ||.data||
                  |L1.12812|
                          DCD      0x45444f43
                  |L1.12816|
                          DCD      g_chirpUsb
                  |L1.12820|
003214  54726163          DCB      "Tracked barcodes",0
003218  6b656420
00321c  62617263
003220  6f646573
003224  00      
003225  00                DCB      0
003226  00                DCB      0
003227  00                DCB      0
                  |L1.12840|
                          DCD      0x46304342
                  |L1.12844|
                          DCD      ||.bss||+0x78
                  |L1.12848|
                          DCD      0x53304342
                  |L1.12852|
003234  9999999a          DCFD     0x3fb999999999999a ; 0.10000000000000001
003238  3fb99999
                  |L1.12860|
00323c  00000000          DCFD     0x3fd0000000000000 ; 0.25
003240  3fd00000
                  |L1.12868|
003244  2101              MOVS     r1,#1
003246  e009              B        |L1.12892|
                  |L1.12872|
003248  7822              LDRB     r2,[r4,#0]
00324a  b1d2              CBZ      r2,|L1.12930|
00324c  2a01              CMP      r2,#1
00324e  d018              BEQ      |L1.12930|
003250  7809              LDRB     r1,[r1,#0]
003252  2902              CMP      r1,#2
003254  d017              BEQ      |L1.12934|
003256  2903              CMP      r1,#3
003258  d015              BEQ      |L1.12934|
00325a  2100              MOVS     r1,#0
                  |L1.12892|
00325c  b109              CBZ      r1,|L1.12898|
;;;2442   			{
;;;2443   				min = val;
00325e  4607              MOV      r7,r0
;;;2444   				minLine = &j->m_object;
003260  4635              MOV      r5,r6
                  |L1.12898|
003262  6976              LDR      r6,[r6,#0x14]         ;2435
                  |L1.12900|
003264  2e00              CMP      r6,#0                 ;2435
003266  d1bb              BNE      |L1.12768|
;;;2445   			}
;;;2446   		}
;;;2447   		if (minLine)
003268  b155              CBZ      r5,|L1.12928|
;;;2448   		{
;;;2449   			// if this minimum line already has a tracker, see which is better
;;;2450   			if (minLine->m_tracker)
00326a  6928              LDR      r0,[r5,#0x10]
00326c  b168              CBZ      r0,|L1.12938|
00326e  f8c0a00c          STR      r10,[r0,#0xc]
;;;2451   			{
;;;2452   				minLine->m_tracker->resetMin(); // reset tracker pointed to by current minline
;;;2453   				minLine->m_tracker = &i->m_object; 
003272  612c              STR      r4,[r5,#0x10]
003274  6125              STR      r5,[r4,#0x10]
003276  60e7              STR      r7,[r4,#0xc]
;;;2454   				i->m_object.setMin(minLine, min);
;;;2455   				n++;
003278  f1080801          ADD      r8,r8,#1
00327c  fa1ff888          UXTH     r8,r8
                  |L1.12928|
003280  e00a              B        |L1.12952|
                  |L1.12930|
003282  2101              MOVS     r1,#1
003284  e7ea              B        |L1.12892|
                  |L1.12934|
003286  2101              MOVS     r1,#1
003288  e7e8              B        |L1.12892|
                  |L1.12938|
;;;2456   			}
;;;2457   			else
;;;2458   			{
;;;2459   				minLine->m_tracker = &i->m_object; // update tracker pointer			
00328a  612c              STR      r4,[r5,#0x10]
00328c  6125              STR      r5,[r4,#0x10]
00328e  60e7              STR      r7,[r4,#0xc]
;;;2460   				i->m_object.setMin(minLine, min);
;;;2461   				n++;
003290  f1080801          ADD      r8,r8,#1
003294  fa1ff888          UXTH     r8,r8
                  |L1.12952|
003298  6aa4              LDR      r4,[r4,#0x28]         ;2413
                  |L1.12954|
00329a  2c00              CMP      r4,#0                 ;2413
00329c  f47faf76          BNE      |L1.12684|
;;;2462   			}
;;;2463   		}
;;;2464   	}
;;;2465   	return n;
0032a0  4640              MOV      r0,r8
;;;2466   }
0032a2  e614              B        |L1.11982|
;;;2467   
                          ENDP

                  _Z18handleLineTrackingv PROC ; handleLineTracking()
;;;2468   
;;;2469   void handleLineTracking()
0032a4  e92d4ff0          PUSH     {r4-r11,lr}
;;;2470   {
0032a8  b08f              SUB      sp,sp,#0x3c
;;;2471   	SimpleListNode<Tracker<Line2> > *i, *inext;
;;;2472   	SimpleListNode<Line2> *j;
;;;2473   	uint16_t leading, trailing;
;;;2474   	
;;;2475   	// reset tracking table
;;;2476   	// Note, we don't need to reset g_linesList entries (e.g. m_tracker) because these are renewed  
;;;2477   	for (i=g_lineTrackersList.m_first; i!=NULL; i=i->m_next)
0032aa  f8dfb410          LDR      r11,|L1.14012|
0032ae  f8db0000          LDR      r0,[r11,#0]  ; g_lineTrackersList
0032b2  f04f31ff          MOV      r1,#0xffffffff
0032b6  e001              B        |L1.12988|
                  |L1.12984|
0032b8  60c1              STR      r1,[r0,#0xc]          ;2470
0032ba  6a80              LDR      r0,[r0,#0x28]
                  |L1.12988|
0032bc  2800              CMP      r0,#0
0032be  d1fb              BNE      |L1.12984|
                  |L1.12992|
;;;2478   		i->m_object.resetMin();
;;;2479   	
;;;2480   	// do search, find minimums
;;;2481   	while(handleLineTracking2());
0032c0  f7fffffe          BL       _Z19handleLineTracking2v ; handleLineTracking2()
0032c4  2800              CMP      r0,#0
0032c6  d1fb              BNE      |L1.12992|
;;;2482   	
;;;2483   	// go through, update tracker, remove entries that are no longer valid
;;;2484   	for (i=g_lineTrackersList.m_first; i!=NULL; i=inext)
0032c8  f8db5000          LDR      r5,[r11,#0]  ; g_lineTrackersList
0032cc  e022              B        |L1.13076|
                  |L1.13006|
;;;2485   	{
;;;2486   		inext = i->m_next;
0032ce  6aae              LDR      r6,[r5,#0x28]
;;;2487   		
;;;2488   		if (i->m_object.update()&TR_EVENT_INVALIDATED)
0032d0  4628              MOV      r0,r5
0032d2  f7fffffe          BL       _ZN7TrackerI5Line2E6updateEv ; Tracker<Line2>::update()
0032d6  07c0              LSLS     r0,r0,#31
0032d8  d01b              BEQ      |L1.13074|
;;;2489   			g_lineTrackersList.remove(i); // no longer valid?  remove from tracker list
0032da  4cf8              LDR      r4,|L1.14012|
0032dc  2100              MOVS     r1,#0
0032de  6820              LDR      r0,[r4,#0]
0032e0  4602              MOV      r2,r0
0032e2  e014              B        |L1.13070|
                  |L1.13028|
0032e4  42a8              CMP      r0,r5
0032e6  d110              BNE      |L1.13066|
0032e8  42aa              CMP      r2,r5
0032ea  d101              BNE      |L1.13040|
0032ec  6aaa              LDR      r2,[r5,#0x28]
0032ee  6022              STR      r2,[r4,#0]
                  |L1.13040|
0032f0  6862              LDR      r2,[r4,#4]
0032f2  42aa              CMP      r2,r5
0032f4  d100              BNE      |L1.13048|
0032f6  6061              STR      r1,[r4,#4]
                  |L1.13048|
0032f8  b109              CBZ      r1,|L1.13054|
0032fa  6a82              LDR      r2,[r0,#0x28]
0032fc  628a              STR      r2,[r1,#0x28]
                  |L1.13054|
0032fe  f7fffffe          BL       _ZdlPv ; operator delete (void*)
003302  8920              LDRH     r0,[r4,#8]
003304  1e40              SUBS     r0,r0,#1
003306  8120              STRH     r0,[r4,#8]
003308  e003              B        |L1.13074|
                  |L1.13066|
00330a  4601              MOV      r1,r0
00330c  6a80              LDR      r0,[r0,#0x28]
                  |L1.13070|
00330e  2800              CMP      r0,#0
003310  d1e8              BNE      |L1.13028|
                  |L1.13074|
003312  4635              MOV      r5,r6                 ;2484
                  |L1.13076|
003314  2d00              CMP      r5,#0                 ;2484
003316  d1da              BNE      |L1.13006|
;;;2490   	}	
;;;2491   	
;;;2492   	// find new candidates
;;;2493   	for (j=g_linesList.m_first; j!=NULL; j=j->m_next)
003318  48e8              LDR      r0,|L1.14012|
00331a  3830              SUBS     r0,r0,#0x30
00331c  6804              LDR      r4,[r0,#0]  ; g_linesList
00331e  46aa              MOV      r10,r5
003320  e052              B        |L1.13256|
                  |L1.13090|
;;;2494   	{
;;;2495   		if (j->m_object.m_tracker==NULL)
003322  6920              LDR      r0,[r4,#0x10]
003324  bbe8              CBNZ     r0,|L1.13218|
;;;2496   		{
;;;2497   			SimpleListNode<Tracker<Line2> > *n;
;;;2498   			leading = g_lineFiltering*LINE_FILTERING_MULTIPLIER;
003326  f8df8398          LDR      r8,|L1.14016|
00332a  f898000f          LDRB     r0,[r8,#0xf]  ; g_lineFiltering
00332e  0107              LSLS     r7,r0,#4
;;;2499   			trailing = (leading+1)>>1;
003330  1c78              ADDS     r0,r7,#1
003332  ea4f0950          LSR      r9,r0,#1
;;;2500   			n = g_lineTrackersList.add(Tracker<Line2>(j->m_object, g_lineTrackerIndex++, leading, trailing));
003336  4ee1              LDR      r6,|L1.14012|
003338  ad05              ADD      r5,sp,#0x14
00333a  2214              MOVS     r2,#0x14
00333c  4621              MOV      r1,r4
00333e  4668              MOV      r0,sp
003340  f7fffffe          BL       __aeabi_memcpy4
003344  f8981009          LDRB     r1,[r8,#9]  ; g_lineTrackerIndex
003348  1c48              ADDS     r0,r1,#1
00334a  f8880009          STRB     r0,[r8,#9]
00334e  4688              MOV      r8,r1
003350  f1050014          ADD      r0,r5,#0x14
003354  f7fffffe          BL       _ZN5Line2C1Ev ; Line2::Line2()
003358  f1a00514          SUB      r5,r0,#0x14
00335c  2214              MOVS     r2,#0x14
00335e  4669              MOV      r1,sp
003360  f1050014          ADD      r0,r5,#0x14
003364  f7fffffe          BL       __aeabi_memcpy4
003368  f8858001          STRB     r8,[r5,#1]
00336c  4628              MOV      r0,r5
00336e  80c7              STRH     r7,[r0,#6]
003370  f8a09008          STRH     r9,[r0,#8]
003374  f7fffffe          BL       _ZN7TrackerI5Line2E5resetEv ; Tracker<Line2>::reset()
003378  46a8              MOV      r8,r5
00337a  49d2              LDR      r1,|L1.14020|
00337c  202c              MOVS     r0,#0x2c
00337e  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
003382  b178              CBZ      r0,|L1.13220|
003384  f44f77fa          MOV      r7,#0x1f4
003388  3014              ADDS     r0,r0,#0x14
00338a  f7fffffe          BL       _ZN5Line2C1Ev ; Line2::Line2()
00338e  f1a00514          SUB      r5,r0,#0x14
003392  80ef              STRH     r7,[r5,#6]
003394  812f              STRH     r7,[r5,#8]
003396  4628              MOV      r0,r5
003398  f7fffffe          BL       _ZN7TrackerI5Line2E5resetEv ; Tracker<Line2>::reset()
00339c  f8c5a028          STR      r10,[r5,#0x28]
0033a0  e001              B        |L1.13222|
                  |L1.13218|
0033a2  e010              B        |L1.13254|
                  |L1.13220|
0033a4  2500              MOVS     r5,#0
                  |L1.13222|
0033a6  b1ed              CBZ      r5,|L1.13284|
0033a8  2228              MOVS     r2,#0x28
0033aa  4641              MOV      r1,r8
0033ac  4628              MOV      r0,r5
0033ae  f7fffffe          BL       __aeabi_memcpy4
0033b2  8930              LDRH     r0,[r6,#8]
0033b4  1c40              ADDS     r0,r0,#1
0033b6  8130              STRH     r0,[r6,#8]
0033b8  6830              LDR      r0,[r6,#0]
0033ba  b1a8              CBZ      r0,|L1.13288|
0033bc  6871              LDR      r1,[r6,#4]
0033be  628d              STR      r5,[r1,#0x28]
                  |L1.13248|
0033c0  6075              STR      r5,[r6,#4]
                  |L1.13250|
;;;2501   			if (n==NULL)
0033c2  b19d              CBZ      r5,|L1.13292|
;;;2502   			{
;;;2503   				cprintf(0, "hlt\n");
;;;2504   				break;
;;;2505   			}
;;;2506   			j->m_object.m_tracker = &n->m_object; // point back to tracker
0033c4  6125              STR      r5,[r4,#0x10]
                  |L1.13254|
0033c6  6964              LDR      r4,[r4,#0x14]         ;2493
                  |L1.13256|
0033c8  2c00              CMP      r4,#0                 ;2493
0033ca  d1aa              BNE      |L1.13090|
                  |L1.13260|
;;;2507   		}
;;;2508   	}
;;;2509   	if (g_debug&LINE_DEBUG_TRACKING)
0033cc  48be              LDR      r0,|L1.14024|
0033ce  7800              LDRB     r0,[r0,#0]  ; g_debug
0033d0  0700              LSLS     r0,r0,#28
0033d2  d525              BPL      |L1.13344|
;;;2510   	{
;;;2511   		uint8_t n;
;;;2512   		cprintf(0, "Trackers\n");
0033d4  a1bd              ADR      r1,|L1.14028|
0033d6  2000              MOVS     r0,#0
0033d8  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
;;;2513   		for (i=g_lineTrackersList.m_first, n=0; i!=NULL; i=i->m_next, n++)
0033dc  f8db4000          LDR      r4,[r11,#0]  ; g_lineTrackersList
0033e0  2500              MOVS     r5,#0
0033e2  e01b              B        |L1.13340|
                  |L1.13284|
0033e4  4655              MOV      r5,r10
0033e6  e7ec              B        |L1.13250|
                  |L1.13288|
0033e8  6035              STR      r5,[r6,#0]
0033ea  e7e9              B        |L1.13248|
                  |L1.13292|
0033ec  a1ba              ADR      r1,|L1.14040|
0033ee  2000              MOVS     r0,#0                 ;2503
0033f0  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0033f4  e7ea              B        |L1.13260|
                  |L1.13302|
;;;2514   			cprintf(0, "   %d: %d %d (%d %d)(%d %d)\n", n, i->m_object.m_index, i->m_object.m_state, 
0033f6  7d61              LDRB     r1,[r4,#0x15]
0033f8  7de0              LDRB     r0,[r4,#0x17]
0033fa  7da2              LDRB     r2,[r4,#0x16]
0033fc  7d23              LDRB     r3,[r4,#0x14]
0033fe  e9cd3101          STRD     r3,r1,[sp,#4]
003402  e9cd2003          STRD     r2,r0,[sp,#0xc]
003406  7820              LDRB     r0,[r4,#0]
003408  9000              STR      r0,[sp,#0]
00340a  7863              LDRB     r3,[r4,#1]
00340c  462a              MOV      r2,r5
00340e  a1b4              ADR      r1,|L1.14048|
003410  2000              MOVS     r0,#0
003412  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
003416  6aa4              LDR      r4,[r4,#0x28]         ;2513
003418  1c6d              ADDS     r5,r5,#1              ;2513
00341a  b2ed              UXTB     r5,r5                 ;2513
                  |L1.13340|
00341c  2c00              CMP      r4,#0                 ;2513
00341e  d1ea              BNE      |L1.13302|
                  |L1.13344|
;;;2515   			i->m_object.m_object.m_p0.m_x, i->m_object.m_object.m_p0.m_y, i->m_object.m_object.m_p1.m_x, i->m_object.m_object.m_p1.m_y);
;;;2516   	}
;;;2517   }
003420  e5e0              B        |L1.12260|
;;;2518   
                          ENDP

                  _Z15compareBarCodesRK14DecodedBarCodeS1_ PROC ; compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)
;;;2519   uint32_t compareBarCodes(const DecodedBarCode &c0, const DecodedBarCode &c1)
003422  b510              PUSH     {r4,lr}
;;;2520   {
;;;2521   	int32_t x, y;
;;;2522   	
;;;2523   	// different values are different
;;;2524   	if (c0.m_val!=c1.m_val)
003424  f9b02008          LDRSH    r2,[r0,#8]
003428  f9b13008          LDRSH    r3,[r1,#8]
00342c  429a              CMP      r2,r3
00342e  d002              BEQ      |L1.13366|
;;;2525   		return TR_MAXVAL;
003430  f04f30ff          MOV      r0,#0xffffffff
;;;2526   	
;;;2527   	// find distance between 
;;;2528   	x = c0.m_outline.m_xOffset + (c0.m_outline.m_width>>1);
;;;2529   	y = c0.m_outline.m_yOffset + (c0.m_outline.m_height>>1);
;;;2530   	x -= c1.m_outline.m_xOffset + (c1.m_outline.m_width>>1);
;;;2531   	y -= c1.m_outline.m_yOffset + (c1.m_outline.m_height>>1);
;;;2532   	
;;;2533   	return x*x + y*y; 
;;;2534   }
003434  bd10              POP      {r4,pc}
                  |L1.13366|
003436  8802              LDRH     r2,[r0,#0]            ;2528
003438  8883              LDRH     r3,[r0,#4]            ;2528
00343a  eb020253          ADD      r2,r2,r3,LSR #1       ;2528
00343e  8843              LDRH     r3,[r0,#2]            ;2529
003440  88c0              LDRH     r0,[r0,#6]            ;2529
003442  eb030050          ADD      r0,r3,r0,LSR #1       ;2529
003446  880b              LDRH     r3,[r1,#0]            ;2530
003448  888c              LDRH     r4,[r1,#4]            ;2530
00344a  eb030354          ADD      r3,r3,r4,LSR #1       ;2530
00344e  1ad2              SUBS     r2,r2,r3              ;2530
003450  884b              LDRH     r3,[r1,#2]            ;2531
003452  88c9              LDRH     r1,[r1,#6]            ;2531
003454  eb030151          ADD      r1,r3,r1,LSR #1       ;2531
003458  1a40              SUBS     r0,r0,r1              ;2531
00345a  4352              MULS     r2,r2,r2              ;2533
00345c  fb002000          MLA      r0,r0,r0,r2           ;2533
003460  bd10              POP      {r4,pc}
;;;2535   
                          ENDP

                  _Z22handleBarCodeTracking2v PROC ; handleBarCodeTracking2()
;;;2536   uint16_t handleBarCodeTracking2()
003462  e92d47f0          PUSH     {r4-r10,lr}
;;;2537   {
;;;2538   	uint32_t val, min;
;;;2539   	uint16_t n=0;
003466  f04f0800          MOV      r8,#0
;;;2540   	SimpleListNode<Tracker<DecodedBarCode> > *i;
;;;2541   	uint8_t j;
;;;2542   	DecodedBarCode *minCode;
;;;2543   	
;;;2544   	// go through list, find best candidates
;;;2545   	for (i=g_barCodeTrackersList.m_first; i!=NULL; i=i->m_next)
00346a  4894              LDR      r0,|L1.14012|
00346c  303c              ADDS     r0,r0,#0x3c
00346e  6804              LDR      r4,[r0,#0]  ; g_barCodeTrackersList
;;;2546   	{
;;;2547   		// already found minimum, continue
;;;2548   		if (i->m_object.m_minVal!=TR_MAXVAL)
;;;2549   			continue;
;;;2550   		
;;;2551   		// find min
;;;2552   		for (j=0, min=TR_MAXVAL, minCode=NULL; j<g_votedBarcodeIndex; j++)
;;;2553   		{
;;;2554   			val = compareBarCodes(i->m_object.m_object, g_votedBarcodes[j]);
003470  f8dfa24c          LDR      r10,|L1.14016|
003474  f04f39ff          MOV      r9,#0xffffffff        ;2548
003478  e04a              B        |L1.13584|
                  |L1.13434|
00347a  68e0              LDR      r0,[r4,#0xc]          ;2548
00347c  1c40              ADDS     r0,r0,#1              ;2548
00347e  d146              BNE      |L1.13582|
003480  2600              MOVS     r6,#0                 ;2552
003482  464f              MOV      r7,r9                 ;2552
003484  2500              MOVS     r5,#0                 ;2552
003486  e026              B        |L1.13526|
                  |L1.13448|
003488  f8da007c          LDR      r0,[r10,#0x7c]  ; g_votedBarcodes
00348c  eb001106          ADD      r1,r0,r6,LSL #4
003490  f1040014          ADD      r0,r4,#0x14
003494  f7fffffe          BL       _Z15compareBarCodesRK14DecodedBarCodeS1_ ; compareBarCodes(const DecodedBarCode&, const DecodedBarCode&)
003498  4601              MOV      r1,r0
;;;2555   			// find minimum, but if line is already chosen, make sure we're a better match
;;;2556   			if (val<min && i->m_object.swappable(val, &g_votedBarcodes[j]))
00349a  42b9              CMP      r1,r7
00349c  d219              BCS      |L1.13522|
00349e  f8da007c          LDR      r0,[r10,#0x7c]  ; g_votedBarcodes
0034a2  eb001206          ADD      r2,r0,r6,LSL #4
0034a6  68d0              LDR      r0,[r2,#0xc]
0034a8  b120              CBZ      r0,|L1.13492|
0034aa  68c3              LDR      r3,[r0,#0xc]
0034ac  428b              CMP      r3,r1
0034ae  d803              BHI      |L1.13496|
0034b0  2000              MOVS     r0,#0
0034b2  e00b              B        |L1.13516|
                  |L1.13492|
0034b4  2001              MOVS     r0,#1
0034b6  e009              B        |L1.13516|
                  |L1.13496|
0034b8  7823              LDRB     r3,[r4,#0]
0034ba  b1eb              CBZ      r3,|L1.13560|
0034bc  2b01              CMP      r3,#1
0034be  d01b              BEQ      |L1.13560|
0034c0  7800              LDRB     r0,[r0,#0]
0034c2  2802              CMP      r0,#2
0034c4  d01a              BEQ      |L1.13564|
0034c6  2803              CMP      r0,#3
0034c8  d018              BEQ      |L1.13564|
0034ca  2000              MOVS     r0,#0
                  |L1.13516|
0034cc  b108              CBZ      r0,|L1.13522|
;;;2557   			{
;;;2558   				min = val;
0034ce  460f              MOV      r7,r1
;;;2559   				minCode = &g_votedBarcodes[j];
0034d0  4615              MOV      r5,r2
                  |L1.13522|
0034d2  1c76              ADDS     r6,r6,#1              ;2552
0034d4  b2f6              UXTB     r6,r6                 ;2552
                  |L1.13526|
0034d6  f89a0006          LDRB     r0,[r10,#6]           ;2552  ; g_votedBarcodeIndex
0034da  4286              CMP      r6,r0                 ;2552
0034dc  d3d4              BCC      |L1.13448|
;;;2560   			}
;;;2561   		}
;;;2562   		if (minCode)
0034de  b1b5              CBZ      r5,|L1.13582|
;;;2563   		{
;;;2564   			// if this minimum line already has a tracker, see which is better
;;;2565   			if (minCode->m_tracker)
0034e0  68e8              LDR      r0,[r5,#0xc]
0034e2  b168              CBZ      r0,|L1.13568|
0034e4  f8c0900c          STR      r9,[r0,#0xc]
;;;2566   			{
;;;2567   				minCode->m_tracker->resetMin(); // reset tracker pointed to by current minline
;;;2568   				minCode->m_tracker = &i->m_object; 
0034e8  60ec              STR      r4,[r5,#0xc]
0034ea  6125              STR      r5,[r4,#0x10]
0034ec  60e7              STR      r7,[r4,#0xc]
;;;2569   				i->m_object.setMin(minCode, min);
;;;2570   				n++;
0034ee  f1080801          ADD      r8,r8,#1
0034f2  fa1ff888          UXTH     r8,r8
0034f6  e00a              B        |L1.13582|
                  |L1.13560|
0034f8  2001              MOVS     r0,#1
0034fa  e7e7              B        |L1.13516|
                  |L1.13564|
0034fc  2001              MOVS     r0,#1
0034fe  e7e5              B        |L1.13516|
                  |L1.13568|
;;;2571   			}
;;;2572   			else
;;;2573   			{
;;;2574   				minCode->m_tracker = &i->m_object; // update tracker pointer			
003500  60ec              STR      r4,[r5,#0xc]
003502  6125              STR      r5,[r4,#0x10]
003504  60e7              STR      r7,[r4,#0xc]
;;;2575   				i->m_object.setMin(minCode, min);
;;;2576   				n++;
003506  f1080801          ADD      r8,r8,#1
00350a  fa1ff888          UXTH     r8,r8
                  |L1.13582|
00350e  6a64              LDR      r4,[r4,#0x24]         ;2545
                  |L1.13584|
003510  2c00              CMP      r4,#0                 ;2545
003512  d1b2              BNE      |L1.13434|
;;;2577   			}
;;;2578   		}
;;;2579   	}
;;;2580   	return n;
003514  4640              MOV      r0,r8
;;;2581   }
003516  e8bd87f0          POP      {r4-r10,pc}
;;;2582   
                          ENDP

                  _Z21handleBarCodeTrackingv PROC ; handleBarCodeTracking()
;;;2583   void handleBarCodeTracking()
00351a  e92d4ff0          PUSH     {r4-r11,lr}
;;;2584   {
00351e  b08d              SUB      sp,sp,#0x34
;;;2585   	SimpleListNode<Tracker<DecodedBarCode> > *i, *inext;
;;;2586   	uint8_t j;
;;;2587   	uint16_t leading, trailing;
;;;2588   	
;;;2589   	// reset tracking table
;;;2590   	// Note, we don't need to reset g_linesList entries (e.g. m_tracker) because these are renewed  
;;;2591   	for (i=g_barCodeTrackersList.m_first; i!=NULL; i=i->m_next) 
003520  4c66              LDR      r4,|L1.14012|
003522  343c              ADDS     r4,r4,#0x3c
003524  6820              LDR      r0,[r4,#0]  ; g_barCodeTrackersList
003526  f04f31ff          MOV      r1,#0xffffffff
00352a  e001              B        |L1.13616|
                  |L1.13612|
00352c  60c1              STR      r1,[r0,#0xc]          ;2584
00352e  6a40              LDR      r0,[r0,#0x24]
                  |L1.13616|
003530  2800              CMP      r0,#0
003532  d1fb              BNE      |L1.13612|
                  |L1.13620|
;;;2592   		i->m_object.resetMin();
;;;2593   	
;;;2594   	// do search, find minimums
;;;2595   	while(handleBarCodeTracking2());
003534  f7fffffe          BL       _Z22handleBarCodeTracking2v ; handleBarCodeTracking2()
003538  2800              CMP      r0,#0
00353a  d1fb              BNE      |L1.13620|
;;;2596   	
;;;2597   	// go through, update tracker, remove entries that are no longer valid
;;;2598   	for (i=g_barCodeTrackersList.m_first; i!=NULL; i=inext)
00353c  485f              LDR      r0,|L1.14012|
00353e  303c              ADDS     r0,r0,#0x3c
003540  6805              LDR      r5,[r0,#0]  ; g_barCodeTrackersList
003542  e023              B        |L1.13708|
                  |L1.13636|
;;;2599   	{
;;;2600   		inext = i->m_next;
003544  6a6e              LDR      r6,[r5,#0x24]
;;;2601   		
;;;2602   		if (i->m_object.update()&TR_EVENT_INVALIDATED)
003546  4628              MOV      r0,r5
003548  f7fffffe          BL       _ZN7TrackerI14DecodedBarCodeE6updateEv ; Tracker<DecodedBarCode>::update()
00354c  07c0              LSLS     r0,r0,#31
00354e  d01c              BEQ      |L1.13706|
;;;2603   			g_barCodeTrackersList.remove(i); // no longer valid?  remove from tracker list
003550  4c5a              LDR      r4,|L1.14012|
003552  343c              ADDS     r4,r4,#0x3c
003554  2100              MOVS     r1,#0
003556  6820              LDR      r0,[r4,#0]
003558  4602              MOV      r2,r0
00355a  e014              B        |L1.13702|
                  |L1.13660|
00355c  42a8              CMP      r0,r5
00355e  d110              BNE      |L1.13698|
003560  42aa              CMP      r2,r5
003562  d101              BNE      |L1.13672|
003564  6a6a              LDR      r2,[r5,#0x24]
003566  6022              STR      r2,[r4,#0]
                  |L1.13672|
003568  6862              LDR      r2,[r4,#4]
00356a  42aa              CMP      r2,r5
00356c  d100              BNE      |L1.13680|
00356e  6061              STR      r1,[r4,#4]
                  |L1.13680|
003570  b109              CBZ      r1,|L1.13686|
003572  6a42              LDR      r2,[r0,#0x24]
003574  624a              STR      r2,[r1,#0x24]
                  |L1.13686|
003576  f7fffffe          BL       _ZdlPv ; operator delete (void*)
00357a  8920              LDRH     r0,[r4,#8]
00357c  1e40              SUBS     r0,r0,#1
00357e  8120              STRH     r0,[r4,#8]
003580  e003              B        |L1.13706|
                  |L1.13698|
003582  4601              MOV      r1,r0
003584  6a40              LDR      r0,[r0,#0x24]
                  |L1.13702|
003586  2800              CMP      r0,#0
003588  d1e8              BNE      |L1.13660|
                  |L1.13706|
00358a  4635              MOV      r5,r6                 ;2598
                  |L1.13708|
00358c  2d00              CMP      r5,#0                 ;2598
00358e  d1d9              BNE      |L1.13636|
;;;2604   	}	
;;;2605   	
;;;2606   	// find new candidates
;;;2607   	for (j=0; j<g_votedBarcodeIndex; j++)
003590  2400              MOVS     r4,#0
003592  46a3              MOV      r11,r4
;;;2608   	{
;;;2609   		if (g_votedBarcodes[j].m_tracker==NULL)
003594  f8dfa128          LDR      r10,|L1.14016|
003598  e05a              B        |L1.13904|
                  |L1.13722|
00359a  f8da007c          LDR      r0,[r10,#0x7c]  ; g_votedBarcodes
00359e  eb001104          ADD      r1,r0,r4,LSL #4
0035a2  68c8              LDR      r0,[r1,#0xc]
0035a4  bbe0              CBNZ     r0,|L1.13856|
;;;2610   		{
;;;2611   			SimpleListNode<Tracker<DecodedBarCode> > *n;
;;;2612   			leading = g_barcodeFiltering*LINE_FILTERING_MULTIPLIER;
0035a6  f89a0010          LDRB     r0,[r10,#0x10]  ; g_barcodeFiltering
0035aa  0107              LSLS     r7,r0,#4
;;;2613   			trailing = (leading+1)>>1;
0035ac  1c78              ADDS     r0,r7,#1
0035ae  ea4f0950          LSR      r9,r0,#1
;;;2614   			n = g_barCodeTrackersList.add(Tracker<DecodedBarCode>(g_votedBarcodes[j], g_barCodeTrackerIndex++, leading, trailing));
0035b2  e891002c          LDM      r1,{r2,r3,r5}
0035b6  68c9              LDR      r1,[r1,#0xc]
0035b8  e88d002c          STM      sp,{r2,r3,r5}
0035bc  9103              STR      r1,[sp,#0xc]
0035be  f89a8008          LDRB     r8,[r10,#8]  ; g_barCodeTrackerIndex
0035c2  4e3e              LDR      r6,|L1.14012|
0035c4  f1080101          ADD      r1,r8,#1
0035c8  363c              ADDS     r6,r6,#0x3c
0035ca  a804              ADD      r0,sp,#0x10
0035cc  f88a1008          STRB     r1,[r10,#8]
0035d0  3014              ADDS     r0,r0,#0x14
0035d2  f7fffffe          BL       _ZN14DecodedBarCodeC1Ev ; DecodedBarCode::DecodedBarCode()
0035d6  f1a00514          SUB      r5,r0,#0x14
0035da  e89d000f          LDM      sp,{r0-r3}
0035de  3514              ADDS     r5,r5,#0x14
0035e0  c50f              STM      r5!,{r0-r3}
0035e2  3d24              SUBS     r5,r5,#0x24
0035e4  f8858001          STRB     r8,[r5,#1]
0035e8  4628              MOV      r0,r5
0035ea  80c7              STRH     r7,[r0,#6]
0035ec  f8a09008          STRH     r9,[r0,#8]
0035f0  f7fffffe          BL       _ZN7TrackerI14DecodedBarCodeE5resetEv ; Tracker<DecodedBarCode>::reset()
0035f4  4933              LDR      r1,|L1.14020|
0035f6  2028              MOVS     r0,#0x28
0035f8  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
0035fc  b188              CBZ      r0,|L1.13858|
0035fe  f44f78fa          MOV      r8,#0x1f4
003602  3014              ADDS     r0,r0,#0x14
003604  f7fffffe          BL       _ZN14DecodedBarCodeC1Ev ; DecodedBarCode::DecodedBarCode()
003608  f1a00714          SUB      r7,r0,#0x14
00360c  f8a78006          STRH     r8,[r7,#6]
003610  f8a78008          STRH     r8,[r7,#8]
003614  4638              MOV      r0,r7
003616  f7fffffe          BL       _ZN7TrackerI14DecodedBarCodeE5resetEv ; Tracker<DecodedBarCode>::reset()
00361a  f8c7b024          STR      r11,[r7,#0x24]
00361e  e001              B        |L1.13860|
                  |L1.13856|
003620  e014              B        |L1.13900|
                  |L1.13858|
003622  2700              MOVS     r7,#0
                  |L1.13860|
003624  b32f              CBZ      r7,|L1.13938|
003626  2224              MOVS     r2,#0x24
003628  4629              MOV      r1,r5
00362a  4638              MOV      r0,r7
00362c  f7fffffe          BL       __aeabi_memcpy4
003630  8930              LDRH     r0,[r6,#8]
003632  1c40              ADDS     r0,r0,#1
003634  8130              STRH     r0,[r6,#8]
003636  6830              LDR      r0,[r6,#0]
003638  b1e8              CBZ      r0,|L1.13942|
00363a  6871              LDR      r1,[r6,#4]
00363c  624f              STR      r7,[r1,#0x24]
                  |L1.13886|
00363e  6077              STR      r7,[r6,#4]
                  |L1.13888|
;;;2615   			if (n==NULL)
003640  b1df              CBZ      r7,|L1.13946|
;;;2616   			{
;;;2617   				cprintf(0, "hlt\n");
;;;2618   				break;
;;;2619   			}
;;;2620   			g_votedBarcodes[j].m_tracker = &n->m_object; // point back to tracker
003642  f8da007c          LDR      r0,[r10,#0x7c]  ; g_votedBarcodes
003646  eb001004          ADD      r0,r0,r4,LSL #4
00364a  60c7              STR      r7,[r0,#0xc]
                  |L1.13900|
00364c  1c64              ADDS     r4,r4,#1              ;2607
00364e  b2e4              UXTB     r4,r4                 ;2607
                  |L1.13904|
003650  f89a0006          LDRB     r0,[r10,#6]           ;2607  ; g_votedBarcodeIndex
003654  4284              CMP      r4,r0                 ;2607
003656  d3a0              BCC      |L1.13722|
                  |L1.13912|
;;;2621   		}
;;;2622   	}
;;;2623   	if (g_debug&LINE_DEBUG_TRACKING)
003658  481b              LDR      r0,|L1.14024|
00365a  7800              LDRB     r0,[r0,#0]  ; g_debug
00365c  0700              LSLS     r0,r0,#28
00365e  d529              BPL      |L1.14004|
;;;2624   	{
;;;2625   		uint8_t n;
;;;2626   		cprintf(0, "Barcodes\n");
003660  a127              ADR      r1,|L1.14080|
003662  2000              MOVS     r0,#0
003664  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
;;;2627   		for (i=g_barCodeTrackersList.m_first, n=0; i!=NULL; i=i->m_next, n++)
003668  4814              LDR      r0,|L1.14012|
00366a  303c              ADDS     r0,r0,#0x3c
00366c  6804              LDR      r4,[r0,#0]  ; g_barCodeTrackersList
00366e  2500              MOVS     r5,#0
003670  e01e              B        |L1.14000|
                  |L1.13938|
003672  465f              MOV      r7,r11
003674  e7e4              B        |L1.13888|
                  |L1.13942|
003676  6037              STR      r7,[r6,#0]
003678  e7e1              B        |L1.13886|
                  |L1.13946|
00367a  a117              ADR      r1,|L1.14040|
00367c  2000              MOVS     r0,#0                 ;2617
00367e  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
003682  e7e9              B        |L1.13912|
                  |L1.13956|
;;;2628   			cprintf(0, "   %d: %d %d %d (%d %d %d %d)\n", n, i->m_object.m_index, i->m_object.m_state, i->m_object.m_object.m_val,
003684  8ae0              LDRH     r0,[r4,#0x16]
003686  8aa1              LDRH     r1,[r4,#0x14]
003688  8b22              LDRH     r2,[r4,#0x18]
00368a  8b63              LDRH     r3,[r4,#0x1a]
00368c  e9cd3202          STRD     r3,r2,[sp,#8]
003690  e9cd1004          STRD     r1,r0,[sp,#0x10]
003694  f9b4001c          LDRSH    r0,[r4,#0x1c]
003698  7821              LDRB     r1,[r4,#0]
00369a  e9cd1000          STRD     r1,r0,[sp,#0]
00369e  7863              LDRB     r3,[r4,#1]
0036a0  462a              MOV      r2,r5
0036a2  a11a              ADR      r1,|L1.14092|
0036a4  2000              MOVS     r0,#0
0036a6  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0036aa  6a64              LDR      r4,[r4,#0x24]         ;2627
0036ac  1c6d              ADDS     r5,r5,#1              ;2627
0036ae  b2ed              UXTB     r5,r5                 ;2627
                  |L1.14000|
0036b0  2c00              CMP      r4,#0                 ;2627
0036b2  d1e7              BNE      |L1.13956|
                  |L1.14004|
;;;2629   			i->m_object.m_object.m_outline.m_height, i->m_object.m_object.m_outline.m_width, 
;;;2630   			i->m_object.m_object.m_outline.m_xOffset, i->m_object.m_object.m_outline.m_yOffset);
;;;2631   	}
;;;2632   }
0036b4  b00d              ADD      sp,sp,#0x34
0036b6  e8bd8ff0          POP      {r4-r11,pc}
0036ba  0000              DCW      0x0000
                  |L1.14012|
                          DCD      ||.bss||+0x3c
                  |L1.14016|
                          DCD      ||.data||
                  |L1.14020|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.14024|
                          DCD      g_debug
                  |L1.14028|
0036cc  54726163          DCB      "Trackers\n",0
0036d0  6b657273
0036d4  0a00    
0036d6  00                DCB      0
0036d7  00                DCB      0
                  |L1.14040|
0036d8  686c740a          DCB      "hlt\n",0
0036dc  00      
0036dd  00                DCB      0
0036de  00                DCB      0
0036df  00                DCB      0
                  |L1.14048|
0036e0  20202025          DCB      "   %d: %d %d (%d %d)(%d %d)\n",0
0036e4  643a2025
0036e8  64202564
0036ec  20282564
0036f0  20256429
0036f4  28256420
0036f8  2564290a
0036fc  00      
0036fd  00                DCB      0
0036fe  00                DCB      0
0036ff  00                DCB      0
                  |L1.14080|
003700  42617263          DCB      "Barcodes\n",0
003704  6f646573
003708  0a00    
00370a  00                DCB      0
00370b  00                DCB      0
                  |L1.14092|
00370c  20202025          DCB      "   %d: %d %d %d (%d %d %d %d)\n",0
003710  643a2025
003714  64202564
003718  20256420
00371c  28256420
003720  25642025
003724  64202564
003728  290a00  
00372b  00                DCB      0
                          ENDP

                  _Z8findLineh PROC ; findLine(unsigned char)
;;;2633   
;;;2634   Line2 *findLine(uint8_t index)
00372c  4602              MOV      r2,r0
;;;2635   {
;;;2636   	SimpleListNode<Line2> *i;
;;;2637   	
;;;2638   	for (i=g_linesList.m_first; i!=NULL; i=i->m_next)
00372e  48f9              LDR      r0,|L1.15124|
003730  6800              LDR      r0,[r0,#0]  ; g_linesList
003732  e005              B        |L1.14144|
                  |L1.14132|
;;;2639   	{
;;;2640   		if (i->m_object.m_tracker && i->m_object.m_tracker->m_index==index)
003734  6901              LDR      r1,[r0,#0x10]
003736  b111              CBZ      r1,|L1.14142|
003738  7849              LDRB     r1,[r1,#1]
00373a  4291              CMP      r1,r2
00373c  d002              BEQ      |L1.14148|
                  |L1.14142|
00373e  6940              LDR      r0,[r0,#0x14]         ;2638
                  |L1.14144|
003740  2800              CMP      r0,#0                 ;2638
003742  d1f7              BNE      |L1.14132|
                  |L1.14148|
;;;2641   			return &i->m_object;
;;;2642   	}
;;;2643   	return NULL;
;;;2644   }
003744  4770              BX       lr
;;;2645   
                          ENDP

                  _Z21trackedLinesWithPointRK5Point PROC ; trackedLinesWithPoint(const Point&)
;;;2658   
;;;2659   uint8_t trackedLinesWithPoint(const Point &p)
003746  e92d41f0          PUSH     {r4-r8,lr}
;;;2660   {
00374a  4607              MOV      r7,r0
;;;2661   	uint8_t n;
;;;2662   	Line2 *line;
;;;2663   	
;;;2664   	SimpleListNode<Tracker<Line2> > *i;
;;;2665   	
;;;2666   	for (i=g_lineTrackersList.m_first, n=0; i!=NULL; i=i->m_next)
00374c  48f1              LDR      r0,|L1.15124|
00374e  3030              ADDS     r0,r0,#0x30
003750  6804              LDR      r4,[r0,#0]  ; g_lineTrackersList
003752  2600              MOVS     r6,#0
003754  e00f              B        |L1.14198|
                  |L1.14166|
;;;2667   	{
;;;2668   		line = &i->m_object.m_object;
003756  f1040514          ADD      r5,r4,#0x14
;;;2669   		if (line && (line->m_p0.equals(p) || line->m_p1.equals(p))) 
00375a  b15d              CBZ      r5,|L1.14196|
00375c  4639              MOV      r1,r7
00375e  4628              MOV      r0,r5
003760  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
003764  b920              CBNZ     r0,|L1.14192|
003766  4639              MOV      r1,r7
003768  1ca8              ADDS     r0,r5,#2
00376a  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
00376e  b108              CBZ      r0,|L1.14196|
                  |L1.14192|
;;;2670   			n++;
003770  1c76              ADDS     r6,r6,#1
003772  b2f6              UXTB     r6,r6
                  |L1.14196|
003774  6aa4              LDR      r4,[r4,#0x28]         ;2666
                  |L1.14198|
003776  2c00              CMP      r4,#0                 ;2666
003778  d1ed              BNE      |L1.14166|
;;;2671   	}
;;;2672   	return n;
00377a  4630              MOV      r0,r6
                  |L1.14204|
;;;2673   }
00377c  e8bd81f0          POP      {r4-r8,pc}
;;;2674   
                          ENDP

                  _Z20compareIntersectionsRK12IntersectionRK17FrameIntersection PROC ; compareIntersections(const Intersection&, const FrameIntersection&)
;;;2675   bool compareIntersections(const Intersection &i0, const FrameIntersection &i1)
003780  7880              LDRB     r0,[r0,#2]
;;;2676   {
;;;2677   #if 0
;;;2678   	uint8_t i, n;
;;;2679   	
;;;2680   	// count valid lines
;;;2681   	for (i=0, n=0; i<i0.m_n; i++)
;;;2682   	{
;;;2683   		if (i0.m_lines[i]->m_object.m_tracker && i0.m_lines[i]->m_object.m_tracker->get()!=NULL)
;;;2684   			n++;
;;;2685   	}
;;;2686   	
;;;2687   	// are valid lines in i0 equal to number of lines in i1?
;;;2688   	return n==i1.m_n;
;;;2689   #else
;;;2690   	return i0.m_n==i1.m_n;
003782  7889              LDRB     r1,[r1,#2]
003784  4288              CMP      r0,r1
003786  d101              BNE      |L1.14220|
003788  2001              MOVS     r0,#1
;;;2691   #endif
;;;2692   }
00378a  4770              BX       lr
                  |L1.14220|
00378c  2000              MOVS     r0,#0                 ;2690
00378e  4770              BX       lr
;;;2693   
                          ENDP

                  _Z8getAngleRK5Line2RK5Point PROC ; getAngle(const Line2&, const Point&)
;;;2694   int16_t getAngle(const Line2 &line, const Point &p)
003790  b570              PUSH     {r4-r6,lr}
;;;2695   {
003792  4604              MOV      r4,r0
003794  460d              MOV      r5,r1
;;;2696   	float x, y;
;;;2697   	int16_t xdiff, ydiff, res;
;;;2698   	
;;;2699   	// find diff's using the point that's not p
;;;2700   	// Note that y axis is pointing down, so we invert.
;;;2701   	if (p.equals(line.m_p0)) 
003796  4621              MOV      r1,r4
003798  4628              MOV      r0,r5
00379a  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
00379e  b130              CBZ      r0,|L1.14254|
;;;2702   	{
;;;2703   		xdiff = line.m_p1.m_x - p.m_x;
0037a0  78a0              LDRB     r0,[r4,#2]
0037a2  7829              LDRB     r1,[r5,#0]
0037a4  1a41              SUBS     r1,r0,r1
;;;2704   		ydiff = p.m_y - line.m_p1.m_y;
0037a6  7868              LDRB     r0,[r5,#1]
0037a8  78e2              LDRB     r2,[r4,#3]
0037aa  1a80              SUBS     r0,r0,r2
0037ac  e005              B        |L1.14266|
                  |L1.14254|
;;;2705   	}
;;;2706   	else
;;;2707   	{
;;;2708   		xdiff = line.m_p0.m_x - p.m_x;
0037ae  7820              LDRB     r0,[r4,#0]
0037b0  7829              LDRB     r1,[r5,#0]
0037b2  1a41              SUBS     r1,r0,r1
;;;2709   		ydiff = p.m_y - line.m_p0.m_y;
0037b4  7868              LDRB     r0,[r5,#1]
0037b6  7862              LDRB     r2,[r4,#1]
0037b8  1a80              SUBS     r0,r0,r2
                  |L1.14266|
;;;2710   	}
;;;2711   	// rotate axes 90 degrees so 0 is pointing straight up
;;;2712   	x = ydiff;
0037ba  ee000a10          VMOV     s0,r0
0037be  eef80ac0          VCVT.F32.S32 s1,s0
;;;2713   	y = -xdiff;
0037c2  4248              RSBS     r0,r1,#0
0037c4  ee000a10          VMOV     s0,r0
0037c8  eeb80ac0          VCVT.F32.S32 s0,s0
0037cc  f7fffffe          BL       __hardfp_atan2f
;;;2714   	
;;;2715   	res = (int16_t)(atan2(y, x)*180/(float)M_PI);
0037d0  eddf0ad1          VLDR     s1,|L1.15128|
0037d4  ee200a20          VMUL.F32 s0,s0,s1
0037d8  eddf0ad0          VLDR     s1,|L1.15132|
0037dc  ee801a20          VDIV.F32 s2,s0,s1
0037e0  eebd0ac1          VCVT.S32.F32 s0,s2
0037e4  ee100a10          VMOV     r0,s0
0037e8  b200              SXTH     r0,r0
;;;2716   	
;;;2717   	return res;
;;;2718   }
0037ea  bd70              POP      {r4-r6,pc}
;;;2719   
                          ENDP

                  _Z12compareAnglePKvS0_ PROC ; compareAngle(const void*, const void*)
;;;2720   int compareAngle(const void *a, const void *b)
0037ec  f9b00002          LDRSH    r0,[r0,#2]
;;;2721   {
;;;2722     return (((FrameIntersectionLine *)a)->m_angle - ((FrameIntersectionLine *)b)->m_angle );
0037f0  f9b11002          LDRSH    r1,[r1,#2]
0037f4  1a40              SUBS     r0,r0,r1
;;;2723   }
0037f6  4770              BX       lr
;;;2724   
                          ENDP

                  _Z18formatIntersectionRK12IntersectionP17FrameIntersectionb PROC ; formatIntersection(const Intersection&, FrameIntersection*, bool)
;;;2725   void formatIntersection(const Intersection &intersection, FrameIntersection *fintersection, bool tracked)
0037f8  e92d47f0          PUSH     {r4-r10,lr}
;;;2726   {
0037fc  4607              MOV      r7,r0
0037fe  460e              MOV      r6,r1
003800  4691              MOV      r9,r2
;;;2727   	uint8_t i, j;
;;;2728   		
;;;2729   	for (i=0, j=0; i<intersection.m_n && j<LINE_MAX_FRAME_INTERSECTION_LINES; i++)
003802  2500              MOVS     r5,#0
003804  2400              MOVS     r4,#0
003806  46a0              MOV      r8,r4
003808  e027              B        |L1.14426|
                  |L1.14346|
;;;2730   	{
;;;2731   		// only add valid lines to fintersection
;;;2732   		if (!tracked || intersection.m_lines[i]->m_object.m_tracker)// && intersection.m_lines[i]->m_object.m_tracker->get()!=NULL))
00380a  f1b90f00          CMP      r9,#0
00380e  d004              BEQ      |L1.14362|
003810  eb070085          ADD      r0,r7,r5,LSL #2
003814  6840              LDR      r0,[r0,#4]
003816  6900              LDR      r0,[r0,#0x10]
003818  b1e8              CBZ      r0,|L1.14422|
                  |L1.14362|
;;;2733   		{	
;;;2734   			if (tracked)
00381a  f1b90f00          CMP      r9,#0
00381e  d008              BEQ      |L1.14386|
;;;2735   				fintersection->m_lines[j].m_index = intersection.m_lines[i]->m_object.m_tracker->m_index;
003820  eb070085          ADD      r0,r7,r5,LSL #2
003824  eb060184          ADD      r1,r6,r4,LSL #2
003828  6840              LDR      r0,[r0,#4]
00382a  6900              LDR      r0,[r0,#0x10]
00382c  7840              LDRB     r0,[r0,#1]
00382e  7108              STRB     r0,[r1,#4]
003830  e003              B        |L1.14394|
                  |L1.14386|
;;;2736   			else
;;;2737   				fintersection->m_lines[j].m_index = 0;				
003832  eb060084          ADD      r0,r6,r4,LSL #2
003836  f8808004          STRB     r8,[r0,#4]
                  |L1.14394|
;;;2738   			fintersection->m_lines[j].m_angle = getAngle(intersection.m_lines[i]->m_object, intersection.m_p);   
00383a  eb070085          ADD      r0,r7,r5,LSL #2
00383e  4639              MOV      r1,r7
003840  6840              LDR      r0,[r0,#4]
003842  f7fffffe          BL       _Z8getAngleRK5Line2RK5Point ; getAngle(const Line2&, const Point&)
003846  4601              MOV      r1,r0
003848  eb060084          ADD      r0,r6,r4,LSL #2
00384c  80c1              STRH     r1,[r0,#6]
;;;2739   			fintersection->m_lines[j].m_reserved = 0;
00384e  f8808005          STRB     r8,[r0,#5]
;;;2740   			j++;
003852  1c64              ADDS     r4,r4,#1
003854  b2e4              UXTB     r4,r4
                  |L1.14422|
003856  1c6d              ADDS     r5,r5,#1              ;2729
003858  b2ed              UXTB     r5,r5                 ;2729
                  |L1.14426|
00385a  78b8              LDRB     r0,[r7,#2]            ;2729
00385c  42a8              CMP      r0,r5                 ;2729
00385e  d901              BLS      |L1.14436|
003860  2c06              CMP      r4,#6                 ;2729
003862  d3d2              BCC      |L1.14346|
                  |L1.14436|
;;;2741   		}
;;;2742   	}
;;;2743   	// zero-out rest of lines
;;;2744   	for (i=j; i<LINE_MAX_FRAME_INTERSECTION_LINES; i++)
003864  4620              MOV      r0,r4
003866  e009              B        |L1.14460|
                  |L1.14440|
;;;2745   	{	
;;;2746   		fintersection->m_lines[i].m_index = 0;
003868  eb060180          ADD      r1,r6,r0,LSL #2
00386c  f8818004          STRB     r8,[r1,#4]
;;;2747   		fintersection->m_lines[i].m_angle = 0;   
003870  f8a18006          STRH     r8,[r1,#6]
;;;2748   		fintersection->m_lines[i].m_reserved = 0;
003874  f8818005          STRB     r8,[r1,#5]
003878  1c40              ADDS     r0,r0,#1              ;2744
00387a  b2c0              UXTB     r0,r0                 ;2744
                  |L1.14460|
00387c  2806              CMP      r0,#6                 ;2744
00387e  d3f3              BCC      |L1.14440|
;;;2749   	}
;;;2750   	
;;;2751   	fintersection->m_x = intersection.m_p.m_x;
003880  7838              LDRB     r0,[r7,#0]
003882  7030              STRB     r0,[r6,#0]
;;;2752   	fintersection->m_y = intersection.m_p.m_y;
003884  7878              LDRB     r0,[r7,#1]
003886  7070              STRB     r0,[r6,#1]
;;;2753   	fintersection->m_n = j;
003888  70b4              STRB     r4,[r6,#2]
;;;2754   	
;;;2755   	// sort lines based on angles
;;;2756   	qsort(fintersection->m_lines, fintersection->m_n, sizeof(FrameIntersectionLine), compareAngle);
00388a  4621              MOV      r1,r4
00388c  f2af03a3          ADR      r3,_Z12compareAnglePKvS0_ + 1 ; compareAngle(const void*, const void*)
003890  2204              MOVS     r2,#4
003892  1d30              ADDS     r0,r6,#4
003894  e8bd47f0          POP      {r4-r10,lr}
003898  f7ffbffe          B.W      _ZSt5qsortPvjjPFiPKvS1_E ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
;;;2757   }
;;;2758   
                          ENDP

                  _Z25updatePrimaryIntersectionP14SimpleListNodeI12IntersectionE PROC ; updatePrimaryIntersection(SimpleListNode<Intersection>*)
;;;2759   
;;;2760   uint8_t updatePrimaryIntersection(SimpleListNode<Intersection> *intern)
00389c  b570              PUSH     {r4-r6,lr}
;;;2761   {
00389e  4604              MOV      r4,r0
0038a0  ed2d8b04          VPUSH    {d8-d9}
0038a4  b088              SUB      sp,sp,#0x20
0038a6  f04f30ff          MOV      r0,#0xffffffff
0038aa  4d9a              LDR      r5,|L1.15124|
0038ac  353c              ADDS     r5,r5,#0x3c
0038ae  60e8              STR      r0,[r5,#0xc]
;;;2762   	FrameIntersection fint;
;;;2763   	
;;;2764   	g_primaryIntersection.resetMin();
;;;2765   	
;;;2766   	if (intern && 
;;;2767   		intern->m_object.m_p.m_y>g_minLineLength*1.4 && // only consider intersections that are sufficiently far from the top
0038b0  4e9b              LDR      r6,|L1.15136|
0038b2  ed9f9b9c          VLDR     d9,|L1.15140|
0038b6  2c00              CMP      r4,#0                 ;2766
0038b8  d039              BEQ      |L1.14638|
0038ba  6d30              LDR      r0,[r6,#0x50]  ; g_minLineLength
0038bc  f7fffffe          BL       __aeabi_ui2d
0038c0  ec532b19          VMOV     r2,r3,d9
0038c4  f7fffffe          BL       __aeabi_dmul
0038c8  ec410b18          VMOV     d8,r0,r1
0038cc  7860              LDRB     r0,[r4,#1]
0038ce  f7fffffe          BL       __aeabi_ui2d
0038d2  ec532b18          VMOV     r2,r3,d8
0038d6  f7fffffe          BL       __aeabi_cdrcmple
0038da  d228              BCS      |L1.14638|
;;;2768   		intern->m_object.m_p.m_y<LINE_GRID_HEIGHT-g_minLineLength*1.4) // and bottom
0038dc  6d30              LDR      r0,[r6,#0x50]  ; g_minLineLength
0038de  f7fffffe          BL       __aeabi_ui2d
0038e2  ec532b19          VMOV     r2,r3,d9
0038e6  f7fffffe          BL       __aeabi_dmul
0038ea  ed9f1b90          VLDR     d1,|L1.15148|
0038ee  ec532b11          VMOV     r2,r3,d1
0038f2  f7fffffe          BL       __aeabi_drsub
0038f6  ec410b18          VMOV     d8,r0,r1
0038fa  7860              LDRB     r0,[r4,#1]
0038fc  f7fffffe          BL       __aeabi_ui2d
003900  ec532b18          VMOV     r2,r3,d8
003904  f7fffffe          BL       __aeabi_cdcmple
003908  d211              BCS      |L1.14638|
;;;2769   	{
;;;2770   		if (g_primaryIntersection.m_state==TR_INVALID || compareIntersections(intern->m_object, g_primaryIntersection.m_object))
00390a  7828              LDRB     r0,[r5,#0]  ; g_primaryIntersection
00390c  2803              CMP      r0,#3
00390e  d005              BEQ      |L1.14620|
003910  f1050114          ADD      r1,r5,#0x14
003914  4620              MOV      r0,r4
003916  f7fffffe          BL       _Z20compareIntersectionsRK12IntersectionRK17FrameIntersection ; compareIntersections(const Intersection&, const FrameIntersection&)
00391a  b140              CBZ      r0,|L1.14638|
                  |L1.14620|
;;;2771   		{
;;;2772   			formatIntersection(intern->m_object, &fint, true);
00391c  2201              MOVS     r2,#1
00391e  a901              ADD      r1,sp,#4
003920  4620              MOV      r0,r4
003922  f7fffffe          BL       _Z18formatIntersectionRK12IntersectionP17FrameIntersectionb ; formatIntersection(const Intersection&, FrameIntersection*, bool)
;;;2773   			g_primaryIntersection.setMin(&fint, 0);
003926  a901              ADD      r1,sp,#4
003928  2000              MOVS     r0,#0
00392a  6129              STR      r1,[r5,#0x10]
00392c  60e8              STR      r0,[r5,#0xc]
                  |L1.14638|
;;;2774   		}
;;;2775   	}
;;;2776   		
;;;2777   	return g_primaryIntersection.update();
00392e  4879              LDR      r0,|L1.15124|
003930  303c              ADDS     r0,r0,#0x3c
003932  f7fffffe          BL       _ZN7TrackerI17FrameIntersectionE6updateEv ; Tracker<FrameIntersection>::update()
;;;2778   }
003936  b008              ADD      sp,sp,#0x20
003938  ecbd8b04          VPOP     {d8-d9}
00393c  bd70              POP      {r4-r6,pc}
;;;2779   
                          ENDP

                  _Z18updatePrimaryPointRK5Line2 PROC ; updatePrimaryPoint(const Line2&)
;;;2918   #else
;;;2919   void updatePrimaryPoint(const Line2 &primary)
00393e  b570              PUSH     {r4-r6,lr}
;;;2920   {
003940  4604              MOV      r4,r0
;;;2921   	g_primaryActive = primary.m_tracker->get()!=NULL;
003942  6920              LDR      r0,[r4,#0x10]
003944  f7fffffe          BL       _ZN7TrackerI5Line2E3getEv ; Tracker<Line2>::get()
003948  b100              CBZ      r0,|L1.14668|
00394a  2001              MOVS     r0,#1
                  |L1.14668|
00394c  4d74              LDR      r5,|L1.15136|
00394e  7328              STRB     r0,[r5,#0xc]
;;;2922   	
;;;2923   	if (xdirection(primary.m_p0, primary.m_p1))
003950  1ca1              ADDS     r1,r4,#2
003952  4620              MOV      r0,r4
003954  f7fffffe          BL       _Z10xdirectionRK5PointS1_ ; xdirection(const Point&, const Point&)
003958  0001              MOVS     r1,r0
;;;2924   	{
;;;2925   		if (g_primaryPointMap&LINE_HT_RIGHT)
;;;2926   		{
;;;2927   			g_primaryPointMap = LINE_HT_RIGHT;
;;;2928   			if (primary.m_p0.m_x > primary.m_p1.m_x) // p0 is the primary point
;;;2929   			{
;;;2930   				g_primaryPoint = primary.m_p0;
;;;2931   				g_goalPoint = primary.m_p1;
;;;2932   				// update UP/DOWN flag
;;;2933   				if (primary.m_p0.m_y > primary.m_p1.m_y)
;;;2934   					g_primaryPointMap |= LINE_HT_DOWN;
00395a  f04f000a          MOV      r0,#0xa
00395e  d037              BEQ      |L1.14800|
003960  7ae9              LDRB     r1,[r5,#0xb]          ;2925  ; g_primaryPointMap
003962  0709              LSLS     r1,r1,#28             ;2925
003964  d519              BPL      |L1.14746|
003966  2108              MOVS     r1,#8                 ;2927
003968  72e9              STRB     r1,[r5,#0xb]          ;2927
00396a  7821              LDRB     r1,[r4,#0]            ;2928
00396c  78a2              LDRB     r2,[r4,#2]            ;2928
00396e  4291              CMP      r1,r2                 ;2928
003970  d909              BLS      |L1.14726|
003972  8821              LDRH     r1,[r4,#0]            ;2930
003974  86a9              STRH     r1,[r5,#0x34]         ;2930
003976  8861              LDRH     r1,[r4,#2]            ;2931
003978  8669              STRH     r1,[r5,#0x32]         ;2931
00397a  7861              LDRB     r1,[r4,#1]            ;2933
00397c  78e2              LDRB     r2,[r4,#3]            ;2933
00397e  4291              CMP      r1,r2                 ;2933
003980  d900              BLS      |L1.14724|
003982  72e8              STRB     r0,[r5,#0xb]
                  |L1.14724|
;;;2935   			}
;;;2936   			else // p1 is the primary point
;;;2937   			{
;;;2938   				g_primaryPoint = primary.m_p1;
;;;2939   				g_goalPoint = primary.m_p0;
;;;2940   				// update UP/DOWN flag
;;;2941   				if (primary.m_p1.m_y > primary.m_p0.m_y)
;;;2942   					g_primaryPointMap |= LINE_HT_DOWN;
;;;2943   			}
;;;2944   		}
;;;2945   		else // LINE_HT_LEFT
;;;2946   		{
;;;2947   			g_primaryPointMap = LINE_HT_LEFT;
;;;2948   			if (primary.m_p0.m_x < primary.m_p1.m_x) // p0 is the primary point
;;;2949   			{
;;;2950   				g_primaryPoint = primary.m_p0;
;;;2951   				g_goalPoint = primary.m_p1;
;;;2952   				// update UP/DOWN flag
;;;2953   				if (primary.m_p0.m_y > primary.m_p1.m_y)
;;;2954   					g_primaryPointMap |= LINE_HT_DOWN;
;;;2955   			}
;;;2956   			else // p1 is the primary point
;;;2957   			{
;;;2958   				g_primaryPoint = primary.m_p1;
;;;2959   				g_goalPoint = primary.m_p0;
;;;2960   				// update UP/DOWN flag
;;;2961   				if (primary.m_p1.m_y > primary.m_p0.m_y)
;;;2962   					g_primaryPointMap |= LINE_HT_DOWN;
;;;2963   			}
;;;2964   		}				
;;;2965   	}
;;;2966   	else // y direction
;;;2967   	{
;;;2968   		if (g_primaryPointMap&LINE_HT_DOWN)
;;;2969   		{
;;;2970   			g_primaryPointMap = LINE_HT_DOWN;
;;;2971   			if (primary.m_p0.m_y > primary.m_p1.m_y) // p0 is the primary point
;;;2972   			{
;;;2973   				g_primaryPoint = primary.m_p0;
;;;2974   				g_goalPoint = primary.m_p1;
;;;2975   				// update LEFT/RIGHT flag
;;;2976   				if (primary.m_p0.m_x > primary.m_p1.m_x)
;;;2977   					g_primaryPointMap |= LINE_HT_RIGHT;
;;;2978   			}
;;;2979   			else // p1 is the primary point
;;;2980   			{
;;;2981   				g_primaryPoint = primary.m_p1;
;;;2982   				g_goalPoint = primary.m_p0;
;;;2983   				// update LEFT/RIGHT flag
;;;2984   				if (primary.m_p1.m_x > primary.m_p0.m_x)
;;;2985   					g_primaryPointMap |= LINE_HT_RIGHT;
;;;2986   			}
;;;2987   		}
;;;2988   		else // LINE_HT_UP
;;;2989   		{
;;;2990   			g_primaryPointMap = LINE_HT_UP;
;;;2991   			if (primary.m_p0.m_y < primary.m_p1.m_y) // p0 is the primary point
;;;2992   			{
;;;2993   				g_primaryPoint = primary.m_p0;
;;;2994   				g_goalPoint = primary.m_p1;
;;;2995   				// update LEFT/RIGHT flag
;;;2996   				if (primary.m_p0.m_x > primary.m_p1.m_x)
;;;2997   					g_primaryPointMap |= LINE_HT_RIGHT;
;;;2998   			}
;;;2999   			else // p1 is the primary point
;;;3000   			{
;;;3001   				g_primaryPoint = primary.m_p1;
;;;3002   				g_goalPoint = primary.m_p0;
;;;3003   				// update LEFT/RIGHT flag
;;;3004   				if (primary.m_p1.m_x > primary.m_p0.m_x)
;;;3005   					g_primaryPointMap |= LINE_HT_RIGHT;
;;;3006   			}
;;;3007   		}
;;;3008   	}
;;;3009   }
003984  bd70              POP      {r4-r6,pc}
                  |L1.14726|
003986  8861              LDRH     r1,[r4,#2]            ;2938
003988  86a9              STRH     r1,[r5,#0x34]         ;2938
00398a  8821              LDRH     r1,[r4,#0]            ;2939
00398c  8669              STRH     r1,[r5,#0x32]         ;2939
00398e  78e1              LDRB     r1,[r4,#3]            ;2941
003990  7862              LDRB     r2,[r4,#1]            ;2941
003992  4291              CMP      r1,r2                 ;2941
003994  d9f6              BLS      |L1.14724|
003996  72e8              STRB     r0,[r5,#0xb]          ;2942
                  |L1.14744|
003998  bd70              POP      {r4-r6,pc}
                  |L1.14746|
00399a  2004              MOVS     r0,#4                 ;2947
00399c  72e8              STRB     r0,[r5,#0xb]          ;2947
00399e  7821              LDRB     r1,[r4,#0]            ;2948
0039a0  78a2              LDRB     r2,[r4,#2]            ;2948
0039a2  2006              MOVS     r0,#6                 ;2954
0039a4  4291              CMP      r1,r2                 ;2948
0039a6  d209              BCS      |L1.14780|
0039a8  8821              LDRH     r1,[r4,#0]            ;2950
0039aa  86a9              STRH     r1,[r5,#0x34]         ;2950
0039ac  8861              LDRH     r1,[r4,#2]            ;2951
0039ae  8669              STRH     r1,[r5,#0x32]         ;2951
0039b0  7861              LDRB     r1,[r4,#1]            ;2953
0039b2  78e2              LDRB     r2,[r4,#3]            ;2953
0039b4  4291              CMP      r1,r2                 ;2953
0039b6  d9ef              BLS      |L1.14744|
0039b8  72e8              STRB     r0,[r5,#0xb]          ;2954
                  |L1.14778|
0039ba  bd70              POP      {r4-r6,pc}
                  |L1.14780|
0039bc  8861              LDRH     r1,[r4,#2]            ;2958
0039be  86a9              STRH     r1,[r5,#0x34]         ;2958
0039c0  8821              LDRH     r1,[r4,#0]            ;2959
0039c2  8669              STRH     r1,[r5,#0x32]         ;2959
0039c4  78e1              LDRB     r1,[r4,#3]            ;2961
0039c6  7862              LDRB     r2,[r4,#1]            ;2961
0039c8  4291              CMP      r1,r2                 ;2961
0039ca  d9f6              BLS      |L1.14778|
0039cc  72e8              STRB     r0,[r5,#0xb]          ;2962
                  |L1.14798|
0039ce  bd70              POP      {r4-r6,pc}
                  |L1.14800|
0039d0  7ae9              LDRB     r1,[r5,#0xb]          ;2968  ; g_primaryPointMap
0039d2  0789              LSLS     r1,r1,#30             ;2968
0039d4  d519              BPL      |L1.14858|
0039d6  2102              MOVS     r1,#2                 ;2970
0039d8  72e9              STRB     r1,[r5,#0xb]          ;2970
0039da  7861              LDRB     r1,[r4,#1]            ;2971
0039dc  78e2              LDRB     r2,[r4,#3]            ;2971
0039de  4291              CMP      r1,r2                 ;2971
0039e0  d909              BLS      |L1.14838|
0039e2  8821              LDRH     r1,[r4,#0]            ;2973
0039e4  86a9              STRH     r1,[r5,#0x34]         ;2973
0039e6  8861              LDRH     r1,[r4,#2]            ;2974
0039e8  8669              STRH     r1,[r5,#0x32]         ;2974
0039ea  7821              LDRB     r1,[r4,#0]            ;2976
0039ec  78a2              LDRB     r2,[r4,#2]            ;2976
0039ee  4291              CMP      r1,r2                 ;2976
0039f0  d9ed              BLS      |L1.14798|
0039f2  72e8              STRB     r0,[r5,#0xb]          ;2977
                  |L1.14836|
0039f4  bd70              POP      {r4-r6,pc}
                  |L1.14838|
0039f6  8861              LDRH     r1,[r4,#2]            ;2981
0039f8  86a9              STRH     r1,[r5,#0x34]         ;2981
0039fa  8821              LDRH     r1,[r4,#0]            ;2982
0039fc  8669              STRH     r1,[r5,#0x32]         ;2982
0039fe  78a1              LDRB     r1,[r4,#2]            ;2984
003a00  7822              LDRB     r2,[r4,#0]            ;2984
003a02  4291              CMP      r1,r2                 ;2984
003a04  d9f6              BLS      |L1.14836|
003a06  72e8              STRB     r0,[r5,#0xb]          ;2985
                  |L1.14856|
003a08  bd70              POP      {r4-r6,pc}
                  |L1.14858|
003a0a  2001              MOVS     r0,#1                 ;2990
003a0c  72e8              STRB     r0,[r5,#0xb]          ;2990
003a0e  7861              LDRB     r1,[r4,#1]            ;2991
003a10  78e2              LDRB     r2,[r4,#3]            ;2991
003a12  2009              MOVS     r0,#9                 ;2997
003a14  4291              CMP      r1,r2                 ;2991
003a16  d209              BCS      |L1.14892|
003a18  8821              LDRH     r1,[r4,#0]            ;2993
003a1a  86a9              STRH     r1,[r5,#0x34]         ;2993
003a1c  8861              LDRH     r1,[r4,#2]            ;2994
003a1e  8669              STRH     r1,[r5,#0x32]         ;2994
003a20  7821              LDRB     r1,[r4,#0]            ;2996
003a22  78a2              LDRB     r2,[r4,#2]            ;2996
003a24  4291              CMP      r1,r2                 ;2996
003a26  d9ef              BLS      |L1.14856|
003a28  72e8              STRB     r0,[r5,#0xb]          ;2997
                  |L1.14890|
003a2a  bd70              POP      {r4-r6,pc}
                  |L1.14892|
003a2c  8861              LDRH     r1,[r4,#2]            ;3001
003a2e  86a9              STRH     r1,[r5,#0x34]         ;3001
003a30  8821              LDRH     r1,[r4,#0]            ;3002
003a32  8669              STRH     r1,[r5,#0x32]         ;3002
003a34  78a1              LDRB     r1,[r4,#2]            ;3004
003a36  7822              LDRB     r2,[r4,#0]            ;3004
003a38  4291              CMP      r1,r2                 ;3004
003a3a  d9f6              BLS      |L1.14890|
003a3c  72e8              STRB     r0,[r5,#0xb]          ;3005
003a3e  bd70              POP      {r4-r6,pc}
;;;3010   #endif
                          ENDP

                  _Z16intersectionTurnv PROC ; intersectionTurn()
;;;3011   
;;;3012   int intersectionTurn()
003a40  e92d41f0          PUSH     {r4-r8,lr}
;;;3013   {
;;;3014   	uint8_t k, mink;
;;;3015   	uint16_t angle, minAngle;
;;;3016   	Line2 *primary;
;;;3017   		
;;;3018   	// find line that best fits our desired turn angle (g_nextTurnAngle), ie, find minimum difference
;;;3019   	for (k=0, minAngle=0xffff; k<g_primaryIntersection.m_object.m_n; k++)
003a44  2000              MOVS     r0,#0
003a46  f64f76ff          MOV      r6,#0xffff
;;;3020   	{
;;;3021   		// calculate difference between angles
;;;3022   		angle = ABS(g_primaryIntersection.m_object.m_lines[k].m_angle - g_nextTurnAngle);
003a4a  4d32              LDR      r5,|L1.15124|
003a4c  4c34              LDR      r4,|L1.15136|
003a4e  353c              ADDS     r5,r5,#0x3c
003a50  f9b47036          LDRSH    r7,[r4,#0x36]
003a54  f8958016          LDRB     r8,[r5,#0x16]         ;3019
003a58  e00d              B        |L1.14966|
                  |L1.14938|
003a5a  eb050180          ADD      r1,r5,r0,LSL #2
003a5e  f9b1301a          LDRSH    r3,[r1,#0x1a]
003a62  1bda              SUBS     r2,r3,r7
003a64  d500              BPL      |L1.14952|
003a66  1afa              SUBS     r2,r7,r3
                  |L1.14952|
003a68  b291              UXTH     r1,r2
;;;3023   		if (angle<minAngle)
003a6a  42b1              CMP      r1,r6
003a6c  d201              BCS      |L1.14962|
;;;3024   		{
;;;3025   			minAngle = angle;
003a6e  460e              MOV      r6,r1
;;;3026   			mink = k;
003a70  4684              MOV      r12,r0
                  |L1.14962|
003a72  1c40              ADDS     r0,r0,#1              ;3019
003a74  b2c0              UXTB     r0,r0                 ;3019
                  |L1.14966|
003a76  4580              CMP      r8,r0                 ;3019
003a78  d8ef              BHI      |L1.14938|
;;;3027   		}
;;;3028   	}
;;;3029   	// assign new primary line
;;;3030   	g_primaryLineIndex = g_primaryIntersection.m_object.m_lines[mink].m_index;
003a7a  eb05008c          ADD      r0,r5,r12,LSL #2
003a7e  7e00              LDRB     r0,[r0,#0x18]
003a80  72a0              STRB     r0,[r4,#0xa]
;;;3031   	primary = findTrackedLine(g_primaryLineIndex);
003a82  f7fffffe          BL       _Z15findTrackedLineh ; findTrackedLine(unsigned char)
;;;3032   	// set g_primaryPointMap
;;;3033   	if (g_primaryIntersection.m_object.m_x==primary->m_p0.m_x && g_primaryIntersection.m_object.m_y==primary->m_p0.m_y) // primary point is p0
003a86  7d29              LDRB     r1,[r5,#0x14]  ; g_primaryIntersection
003a88  7802              LDRB     r2,[r0,#0]
003a8a  4291              CMP      r1,r2
003a8c  d108              BNE      |L1.15008|
003a8e  7d69              LDRB     r1,[r5,#0x15]  ; g_primaryIntersection
003a90  7842              LDRB     r2,[r0,#1]
003a92  4291              CMP      r1,r2
003a94  d104              BNE      |L1.15008|
;;;3034   	{
;;;3035   		g_primaryPoint = primary->m_p0;
003a96  8801              LDRH     r1,[r0,#0]
003a98  86a1              STRH     r1,[r4,#0x34]
;;;3036   		g_goalPoint = primary->m_p1;
003a9a  8841              LDRH     r1,[r0,#2]
003a9c  8661              STRH     r1,[r4,#0x32]
003a9e  e003              B        |L1.15016|
                  |L1.15008|
;;;3037   	}
;;;3038   	else // primary point is p1
;;;3039   	{
;;;3040   		g_primaryPoint = primary->m_p1;
003aa0  8841              LDRH     r1,[r0,#2]
003aa2  86a1              STRH     r1,[r4,#0x34]
;;;3041   		g_goalPoint = primary->m_p0;
003aa4  8801              LDRH     r1,[r0,#0]
003aa6  8661              STRH     r1,[r4,#0x32]
                  |L1.15016|
;;;3042   	}
;;;3043   	if (xdirection(primary->m_p0, primary->m_p1))
003aa8  1c81              ADDS     r1,r0,#2
003aaa  f7fffffe          BL       _Z10xdirectionRK5PointS1_ ; xdirection(const Point&, const Point&)
;;;3044   	{
;;;3045   		if (g_primaryPoint.m_x<g_goalPoint.m_x)
003aae  4a1c              LDR      r2,|L1.15136|
003ab0  3234              ADDS     r2,r2,#0x34
003ab2  1e93              SUBS     r3,r2,#2
;;;3046   			g_primaryPointMap = LINE_HT_LEFT;
;;;3047   		else
;;;3048   			g_primaryPointMap = LINE_HT_RIGHT;							
;;;3049   	}
;;;3050   	else // y direction
;;;3051   	{
;;;3052   		if (g_primaryPoint.m_y<g_goalPoint.m_y)
;;;3053   			g_primaryPointMap = LINE_HT_UP;
003ab4  2101              MOVS     r1,#1
003ab6  b148              CBZ      r0,|L1.15052|
003ab8  7810              LDRB     r0,[r2,#0]            ;3045  ; g_primaryPoint
003aba  781a              LDRB     r2,[r3,#0]            ;3045  ; g_goalPoint
003abc  4290              CMP      r0,r2                 ;3045
003abe  d202              BCS      |L1.15046|
003ac0  2004              MOVS     r0,#4                 ;3046
003ac2  72e0              STRB     r0,[r4,#0xb]          ;3046
003ac4  e00a              B        |L1.15068|
                  |L1.15046|
003ac6  2008              MOVS     r0,#8                 ;3048
003ac8  72e0              STRB     r0,[r4,#0xb]          ;3048
003aca  e007              B        |L1.15068|
                  |L1.15052|
003acc  7850              LDRB     r0,[r2,#1]            ;3052  ; g_primaryPoint
003ace  785a              LDRB     r2,[r3,#1]            ;3052  ; g_goalPoint
003ad0  4290              CMP      r0,r2                 ;3052
003ad2  d201              BCS      |L1.15064|
003ad4  72e1              STRB     r1,[r4,#0xb]
003ad6  e001              B        |L1.15068|
                  |L1.15064|
;;;3054   		else
;;;3055   			g_primaryPointMap = LINE_HT_DOWN;							
003ad8  2002              MOVS     r0,#2
003ada  72e0              STRB     r0,[r4,#0xb]
                  |L1.15068|
;;;3056   	}
;;;3057   	g_primaryActive = true;
003adc  7321              STRB     r1,[r4,#0xc]
;;;3058   	g_primaryIntersection.m_state = TR_INVALID; // invalidate intersection
003ade  2003              MOVS     r0,#3
003ae0  7028              STRB     r0,[r5,#0]
;;;3059   	
;;;3060   	// reset angle to default angle
;;;3061   	g_nextTurnAngle = g_defaultTurnAngle;
003ae2  8f20              LDRH     r0,[r4,#0x38]  ; g_defaultTurnAngle
003ae4  86e0              STRH     r0,[r4,#0x36]
;;;3062   	g_newTurnAngle = false;
003ae6  2000              MOVS     r0,#0
003ae8  7560              STRB     r0,[r4,#0x15]
;;;3063   	
;;;3064   	// we always succeed by choosing the closest line
;;;3065   	return 0;	
;;;3066   }
003aea  e647              B        |L1.14204|
;;;3067   
                          ENDP

                  _Z16setPrimaryVectorh PROC ; setPrimaryVector(unsigned char)
;;;3068   void setPrimaryVector(uint8_t index)
003aec  b510              PUSH     {r4,lr}
;;;3069   {
003aee  4603              MOV      r3,r0
;;;3070   	Line2 *line;
;;;3071   	
;;;3072   	line = findTrackedLine(index);
003af0  4618              MOV      r0,r3
003af2  f7fffffe          BL       _Z15findTrackedLineh ; findTrackedLine(unsigned char)
;;;3073   	if (line)
003af6  2800              CMP      r0,#0
003af8  d01c              BEQ      |L1.15156|
;;;3074   	{
;;;3075   		// choose point lower in the image as the primary point
;;;3076   		g_primaryPointMap = LINE_HT_DOWN;
003afa  4909              LDR      r1,|L1.15136|
003afc  2202              MOVS     r2,#2
003afe  72ca              STRB     r2,[r1,#0xb]
;;;3077   					
;;;3078   		g_primaryLineIndex = index;
003b00  728b              STRB     r3,[r1,#0xa]
;;;3079   		g_primaryIntersection.m_state = TR_INVALID;
003b02  4b04              LDR      r3,|L1.15124|
003b04  2203              MOVS     r2,#3
003b06  333c              ADDS     r3,r3,#0x3c
003b08  701a              STRB     r2,[r3,#0]
;;;3080   		g_lineState = LINE_STATE_TRACKING;
003b0a  2201              MOVS     r2,#1
003b0c  734a              STRB     r2,[r1,#0xd]
;;;3081   		// update 
;;;3082   		updatePrimaryPoint(*line);
003b0e  e8bd4010          POP      {r4,lr}
003b12  e7fe              B        _Z18updatePrimaryPointRK5Line2 ; updatePrimaryPoint(const Line2&)
                  |L1.15124|
                          DCD      ||.bss||+0xc
                  |L1.15128|
003b18  43340000          DCFS     0x43340000 ; 180
                  |L1.15132|
003b1c  40490fdb          DCFS     0x40490fdb ; 3.1415927410125732
                  |L1.15136|
                          DCD      ||.data||
                  |L1.15140|
003b24  66666666          DCFD     0x3ff6666666666666 ; 1.3999999999999999
003b28  3ff66666
                  |L1.15148|
003b2c  00000000          DCFD     0x404a000000000000 ; 52
003b30  404a0000
                  |L1.15156|
;;;3083   	}
;;;3084   }
003b34  bd10              POP      {r4,pc}
;;;3085   
                          ENDP

                  _Z15handleLineStatev PROC ; handleLineState()
;;;3086   void handleLineState()
003b36  e92d41ff          PUSH     {r0-r8,lr}
;;;3087   {
;;;3088   	uint8_t ymax;
;;;3089   	SimpleListNode<Tracker<Line2> > *i, *max;
;;;3090   	Line2 *line, *primary;
;;;3091   	uint8_t events;
;;;3092   	
;;;3093   	if (g_lineState==LINE_STATE_ACQUIRING)
003b3a  4dfe              LDR      r5,|L1.16180|
003b3c  2700              MOVS     r7,#0
003b3e  7b68              LDRB     r0,[r5,#0xd]  ; g_lineState
003b40  2800              CMP      r0,#0
003b42  d010              BEQ      |L1.15206|
;;;3094   	{
;;;3095   		if (g_manualVectorSelect) // // wait for user to select
;;;3096   		{
;;;3097   			if (g_manualVectorSelecIndextActive)
;;;3098   			{
;;;3099   				setPrimaryVector(g_manualVectorSelectIndex);
;;;3100   				g_manualVectorSelecIndextActive = false;
;;;3101   			}
;;;3102   			
;;;3103   			return;
;;;3104   		}
;;;3105   		// find line that meets our criteria -- it should be at least 45 degrees past horizontal and reasonably long
;;;3106   		// we will consider lines that are lower in the image first.  The first line to fit the criterial is our line.
;;;3107   		
;;;3108   		// reset 
;;;3109   		for (i=g_lineTrackersList.m_first; i!=NULL; i=i->m_next)
;;;3110   			i->m_object.resetMin();
;;;3111   
;;;3112   		while(1)
;;;3113   		{
;;;3114   			for (i=g_lineTrackersList.m_first, ymax=0, max=NULL; i!=NULL; i=i->m_next)
;;;3115   			{
;;;3116   				line = i->m_object.get();
;;;3117   				if (line!=NULL && i->m_object.m_minVal==TR_MAXVAL)
;;;3118   				{
;;;3119   					if (line->m_p0.m_y>ymax)
;;;3120   					{
;;;3121   						ymax = line->m_p0.m_y;
;;;3122   						max = i;
;;;3123   					}
;;;3124   					else if (line->m_p1.m_y>ymax)
;;;3125   					{	
;;;3126   						ymax = line->m_p1.m_y;
;;;3127   						max = i;
;;;3128   					}
;;;3129   				}
;;;3130   			}
;;;3131   			if (max)
;;;3132   			{
;;;3133   				//angle = tanAbs1000(max->m_object.m_object.m_p0, max->m_object.m_object.m_p1);
;;;3134   				//if (angle>=LINE_MIN_ACQUISITION_TAN_ANGLE && max->m_object.m_object.length2()>=LINE_MIN_ACQUISITION_LENGTH2)
;;;3135   				if (max->m_object.m_object.length2()>=LINE_MIN_ACQUISITION_LENGTH2)
;;;3136   				{
;;;3137   					//cprintf("acq %d %d %d %d %d %d\n", max->m_object.m_index, angle, 
;;;3138   					//	max->m_object.m_object.m_p0.m_x, max->m_object.m_object.m_p0.m_y, max->m_object.m_object.m_p1.m_x, max->m_object.m_object.m_p1.m_y);
;;;3139   					
;;;3140   					setPrimaryVector(max->m_object.m_index);
;;;3141   					break;
;;;3142   				}			
;;;3143   				max->m_object.m_minVal = 0; // flag that we've visited
;;;3144   			}
;;;3145   			else
;;;3146   			{
;;;3147   				//cprintf("null\n");
;;;3148   				break;
;;;3149   			}
;;;3150   		}
;;;3151   	}
;;;3152   	else // LINE_STATE_TRACKING
;;;3153   	{
;;;3154   		primary = findTrackedLine(g_primaryLineIndex);
003b44  7aa8              LDRB     r0,[r5,#0xa]  ; g_primaryLineIndex
003b46  f7fffffe          BL       _Z15findTrackedLineh ; findTrackedLine(unsigned char)
;;;3155   		
;;;3156   		if (primary)
003b4a  2800              CMP      r0,#0
003b4c  d07e              BEQ      |L1.15436|
;;;3157   		{
;;;3158   			if (g_reversePrimary)
003b4e  7e69              LDRB     r1,[r5,#0x19]  ; g_reversePrimary
003b50  b3f1              CBZ      r1,|L1.15312|
;;;3159   			{
;;;3160   				g_reversePrimary = false;
003b52  766f              STRB     r7,[r5,#0x19]
;;;3161   				if (g_primaryPointMap&LINE_HT_UP)
003b54  7ae9              LDRB     r1,[r5,#0xb]  ; g_primaryPointMap
003b56  07ca              LSLS     r2,r1,#31
003b58  d046              BEQ      |L1.15336|
;;;3162   				{
;;;3163   					g_primaryPointMap &= ~LINE_HT_UP;
003b5a  f0210101          BIC      r1,r1,#1
;;;3164   					g_primaryPointMap |= LINE_HT_DOWN;
003b5e  f0410102          ORR      r1,r1,#2
003b62  72e9              STRB     r1,[r5,#0xb]
003b64  e047              B        |L1.15350|
                  |L1.15206|
003b66  7da8              LDRB     r0,[r5,#0x16]         ;3095  ; g_manualVectorSelect
003b68  b140              CBZ      r0,|L1.15228|
003b6a  7de8              LDRB     r0,[r5,#0x17]         ;3097  ; g_manualVectorSelecIndextActive
003b6c  2800              CMP      r0,#0                 ;3097
003b6e  d003              BEQ      |L1.15224|
003b70  7e28              LDRB     r0,[r5,#0x18]         ;3099  ; g_manualVectorSelectIndex
003b72  f7fffffe          BL       _Z16setPrimaryVectorh ; setPrimaryVector(unsigned char)
003b76  75ef              STRB     r7,[r5,#0x17]         ;3100
                  |L1.15224|
;;;3165   				}
;;;3166   				else if (g_primaryPointMap&LINE_HT_DOWN)
;;;3167   				{
;;;3168   					g_primaryPointMap &= ~LINE_HT_DOWN;
;;;3169   					g_primaryPointMap |= LINE_HT_UP;
;;;3170   				}
;;;3171   				if (g_primaryPointMap&LINE_HT_RIGHT)
;;;3172   				{
;;;3173   					g_primaryPointMap &= ~LINE_HT_RIGHT;
;;;3174   					g_primaryPointMap |= LINE_HT_LEFT;
;;;3175   				}
;;;3176   				else if (g_primaryPointMap&LINE_HT_LEFT)
;;;3177   				{
;;;3178   					g_primaryPointMap &= ~LINE_HT_LEFT;
;;;3179   					g_primaryPointMap |= LINE_HT_RIGHT;
;;;3180   				}
;;;3181   			}
;;;3182   			// deal with primary point 
;;;3183   			updatePrimaryPoint(*primary);
;;;3184   			
;;;3185   			if (g_debug&LINE_DEBUG_TRACKING)
;;;3186   				cprintf(0, "Primary %d %d (%d %d)(%d %d)\n", g_primaryLineIndex, g_primaryPointMap, 
;;;3187   				g_primaryPoint.m_x, g_primaryPoint.m_y, g_goalPoint.m_x, g_goalPoint.m_y);
;;;3188   			
;;;3189   			// Find primary again in list of lines.  Note if we find "primary" here, it will be the same line as "primary" above.  
;;;3190   			// The only difference is this line will always have a valid intersection.  The "otherIndex" and "otherPoint" found 
;;;3191   			// above will apply here also. 
;;;3192   			primary = findLine(g_primaryLineIndex);
;;;3193   			if (primary)
;;;3194   			{
;;;3195   				if (primary->m_p0.equals(g_goalPoint)) // look for intersection at i0
;;;3196   					events = updatePrimaryIntersection(primary->m_i0); 
;;;3197   				else // look for intersection at i1
;;;3198   					events = updatePrimaryIntersection(primary->m_i1);
;;;3199   				
;;;3200   				// as soon as we see the g_primaryIntersection state transition to valid...
;;;3201   				if (events&TR_EVENT_VALIDATED)
;;;3202   				{
;;;3203   					g_newIntersection = true;
;;;3204   					if (g_debug&LINE_DEBUG_TRACKING)
;;;3205   						cprintf(0, "New intersection\n");
;;;3206   					
;;;3207   					// if turn angle is set before intersection, go ahead and choose turn now
;;;3208   					if (!g_delayedTurn)
;;;3209   						intersectionTurn();
;;;3210   					else // LINE_TURNMODE_DURING_INTERSECTION, we need to reset g_newTurnAngle, so we don't accidentally turn
;;;3211   						g_newTurnAngle = false;
;;;3212   				}
;;;3213   				// deal with turn, if turn mode dictates that choose turn during the intersection
;;;3214   				else if (g_newTurnAngle && g_delayedTurn && g_primaryIntersection.m_state!=TR_INVALID)
;;;3215   					intersectionTurn();
;;;3216   					
;;;3217   				if (events&TR_EVENT_INVALIDATED)
;;;3218   					g_newIntersection = false;
;;;3219   
;;;3220   				if ((g_debug&LINE_DEBUG_TRACKING) && g_primaryIntersection.m_state!=TR_INVALID)
;;;3221   					cprintf(0, "Intersection %d (%d %d)\n", g_primaryIntersection.m_state, g_primaryIntersection.m_object.m_x, g_primaryIntersection.m_object.m_y);
;;;3222   			}							
;;;3223   		}
;;;3224   		else // we lost the line
;;;3225   			g_lineState = LINE_STATE_ACQUIRING;
;;;3226   		
;;;3227   	}
;;;3228   }
003b78  e8bd81ff          POP      {r0-r8,pc}
                  |L1.15228|
003b7c  f8df83b8          LDR      r8,|L1.16184|
003b80  f8d80000          LDR      r0,[r8,#0]            ;3109  ; g_lineTrackersList
003b84  f04f31ff          MOV      r1,#0xffffffff        ;3109
003b88  e001              B        |L1.15246|
                  |L1.15242|
003b8a  60c1              STR      r1,[r0,#0xc]          ;3109
003b8c  6a80              LDR      r0,[r0,#0x28]         ;3109
                  |L1.15246|
003b8e  2800              CMP      r0,#0                 ;3109
003b90  d1fb              BNE      |L1.15242|
003b92  e024              B        |L1.15326|
                  |L1.15252|
003b94  4620              MOV      r0,r4                 ;3116
003b96  f7fffffe          BL       _ZN7TrackerI5Line2E3getEv ; Tracker<Line2>::get()
003b9a  b168              CBZ      r0,|L1.15288|
003b9c  68e1              LDR      r1,[r4,#0xc]          ;3117
003b9e  1c49              ADDS     r1,r1,#1              ;3117
003ba0  d10a              BNE      |L1.15288|
003ba2  7841              LDRB     r1,[r0,#1]            ;3119
003ba4  42b1              CMP      r1,r6                 ;3119
003ba6  d902              BLS      |L1.15278|
003ba8  460e              MOV      r6,r1                 ;3121
003baa  4625              MOV      r5,r4                 ;3122
003bac  e004              B        |L1.15288|
                  |L1.15278|
003bae  78c0              LDRB     r0,[r0,#3]            ;3124
003bb0  42b0              CMP      r0,r6                 ;3124
003bb2  d901              BLS      |L1.15288|
003bb4  4606              MOV      r6,r0                 ;3126
003bb6  4625              MOV      r5,r4                 ;3127
                  |L1.15288|
003bb8  6aa4              LDR      r4,[r4,#0x28]         ;3114
                  |L1.15290|
003bba  2c00              CMP      r4,#0                 ;3114
003bbc  d1ea              BNE      |L1.15252|
003bbe  2d00              CMP      r5,#0                 ;3131
003bc0  d0da              BEQ      |L1.15224|
003bc2  f1050014          ADD      r0,r5,#0x14           ;3135
003bc6  f7fffffe          BL       _ZNK5Line27length2Ev ; Line2::length2() const
003bca  28e1              CMP      r0,#0xe1              ;3135
003bcc  d306              BCC      |L1.15324|
003bce  e000              B        |L1.15314|
                  |L1.15312|
003bd0  e021              B        |L1.15382|
                  |L1.15314|
003bd2  7868              LDRB     r0,[r5,#1]            ;3140
003bd4  b004              ADD      sp,sp,#0x10           ;3140
003bd6  e8bd41f0          POP      {r4-r8,lr}            ;3140
003bda  e7fe              B        _Z16setPrimaryVectorh ; setPrimaryVector(unsigned char)
                  |L1.15324|
003bdc  60ef              STR      r7,[r5,#0xc]          ;3143
                  |L1.15326|
003bde  f8d84000          LDR      r4,[r8,#0]            ;3114  ; g_lineTrackersList
003be2  2600              MOVS     r6,#0                 ;3114
003be4  2500              MOVS     r5,#0                 ;3114
003be6  e7e8              B        |L1.15290|
                  |L1.15336|
003be8  078a              LSLS     r2,r1,#30             ;3166
003bea  d504              BPL      |L1.15350|
003bec  f0210102          BIC      r1,r1,#2              ;3168
003bf0  f0410101          ORR      r1,r1,#1              ;3169
003bf4  72e9              STRB     r1,[r5,#0xb]          ;3169
                  |L1.15350|
003bf6  7ae9              LDRB     r1,[r5,#0xb]          ;3171  ; g_primaryPointMap
003bf8  070a              LSLS     r2,r1,#28             ;3171
003bfa  d505              BPL      |L1.15368|
003bfc  f0210108          BIC      r1,r1,#8              ;3173
003c00  f0410104          ORR      r1,r1,#4              ;3174
003c04  72e9              STRB     r1,[r5,#0xb]          ;3174
003c06  e006              B        |L1.15382|
                  |L1.15368|
003c08  074a              LSLS     r2,r1,#29             ;3176
003c0a  d504              BPL      |L1.15382|
003c0c  f0210104          BIC      r1,r1,#4              ;3178
003c10  f0410108          ORR      r1,r1,#8              ;3179
003c14  72e9              STRB     r1,[r5,#0xb]          ;3179
                  |L1.15382|
003c16  f7fffffe          BL       _Z18updatePrimaryPointRK5Line2 ; updatePrimaryPoint(const Line2&)
003c1a  4ec8              LDR      r6,|L1.16188|
003c1c  7830              LDRB     r0,[r6,#0]            ;3185  ; g_debug
003c1e  0700              LSLS     r0,r0,#28             ;3185
003c20  d510              BPL      |L1.15428|
003c22  48c4              LDR      r0,|L1.16180|
003c24  3032              ADDS     r0,r0,#0x32           ;3186
003c26  7841              LDRB     r1,[r0,#1]            ;3186  ; g_goalPoint
003c28  7802              LDRB     r2,[r0,#0]            ;3186  ; g_goalPoint
003c2a  1c80              ADDS     r0,r0,#2              ;3186
003c2c  7843              LDRB     r3,[r0,#1]            ;3186  ; g_primaryPoint
003c2e  7800              LDRB     r0,[r0,#0]            ;3186  ; g_primaryPoint
003c30  e9cd3201          STRD     r3,r2,[sp,#4]         ;3186
003c34  9103              STR      r1,[sp,#0xc]          ;3186
003c36  9000              STR      r0,[sp,#0]            ;3186
003c38  7aeb              LDRB     r3,[r5,#0xb]          ;3186  ; g_primaryPointMap
003c3a  7aaa              LDRB     r2,[r5,#0xa]          ;3186  ; g_primaryLineIndex
003c3c  a1c0              ADR      r1,|L1.16192|
003c3e  2000              MOVS     r0,#0                 ;3186
003c40  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.15428|
003c44  7aa8              LDRB     r0,[r5,#0xa]          ;3192  ; g_primaryLineIndex
003c46  f7fffffe          BL       _Z8findLineh ; findLine(unsigned char)
003c4a  e000              B        |L1.15438|
                  |L1.15436|
003c4c  e046              B        |L1.15580|
                  |L1.15438|
003c4e  4604              MOV      r4,r0                 ;3192
003c50  2c00              CMP      r4,#0                 ;3193
                  |L1.15442|
003c52  d091              BEQ      |L1.15224|
003c54  49b7              LDR      r1,|L1.16180|
003c56  4620              MOV      r0,r4                 ;3195
003c58  3132              ADDS     r1,r1,#0x32           ;3195
003c5a  f7fffffe          BL       _ZNK5Point6equalsERKS_ ; Point::equals(const Point&) const
003c5e  b120              CBZ      r0,|L1.15466|
003c60  68a0              LDR      r0,[r4,#8]            ;3196
003c62  f7fffffe          BL       _Z25updatePrimaryIntersectionP14SimpleListNodeI12IntersectionE ; updatePrimaryIntersection(SimpleListNode<Intersection>*)
003c66  4604              MOV      r4,r0                 ;3196
003c68  e003              B        |L1.15474|
                  |L1.15466|
003c6a  68e0              LDR      r0,[r4,#0xc]          ;3198
003c6c  f7fffffe          BL       _Z25updatePrimaryIntersectionP14SimpleListNodeI12IntersectionE ; updatePrimaryIntersection(SimpleListNode<Intersection>*)
003c70  4604              MOV      r4,r0                 ;3198
                  |L1.15474|
003c72  f8df82c4          LDR      r8,|L1.16184|
003c76  07a0              LSLS     r0,r4,#30             ;3201
003c78  f108080c          ADD      r8,r8,#0xc            ;3214
003c7c  d50f              BPL      |L1.15518|
003c7e  2001              MOVS     r0,#1                 ;3203
003c80  71e8              STRB     r0,[r5,#7]            ;3203
003c82  7830              LDRB     r0,[r6,#0]            ;3204  ; g_debug
003c84  0700              LSLS     r0,r0,#28             ;3204
003c86  d503              BPL      |L1.15504|
003c88  a1b5              ADR      r1,|L1.16224|
003c8a  2000              MOVS     r0,#0                 ;3205
003c8c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.15504|
003c90  7d28              LDRB     r0,[r5,#0x14]         ;3208  ; g_delayedTurn
003c92  b108              CBZ      r0,|L1.15512|
003c94  756f              STRB     r7,[r5,#0x15]         ;3211
003c96  e00c              B        |L1.15538|
                  |L1.15512|
003c98  f7fffffe          BL       _Z16intersectionTurnv ; intersectionTurn()
003c9c  e009              B        |L1.15538|
                  |L1.15518|
003c9e  7d68              LDRB     r0,[r5,#0x15]         ;3214  ; g_newTurnAngle
003ca0  b138              CBZ      r0,|L1.15538|
003ca2  7d28              LDRB     r0,[r5,#0x14]         ;3214  ; g_delayedTurn
003ca4  b128              CBZ      r0,|L1.15538|
003ca6  f8980000          LDRB     r0,[r8,#0]            ;3214  ; g_primaryIntersection
003caa  2803              CMP      r0,#3                 ;3214
003cac  d001              BEQ      |L1.15538|
003cae  f7fffffe          BL       _Z16intersectionTurnv ; intersectionTurn()
                  |L1.15538|
003cb2  07e0              LSLS     r0,r4,#31             ;3217
003cb4  d000              BEQ      |L1.15544|
003cb6  71ef              STRB     r7,[r5,#7]            ;3218
                  |L1.15544|
003cb8  7830              LDRB     r0,[r6,#0]            ;3220  ; g_debug
003cba  0700              LSLS     r0,r0,#28             ;3220
003cbc  f57faf5c          BPL      |L1.15224|
003cc0  f8982000          LDRB     r2,[r8,#0]            ;3220  ; g_primaryIntersection
003cc4  2a03              CMP      r2,#3                 ;3220
003cc6  d0c4              BEQ      |L1.15442|
003cc8  f8980015          LDRB     r0,[r8,#0x15]         ;3221  ; g_primaryIntersection
003ccc  9000              STR      r0,[sp,#0]            ;3221
003cce  f8983014          LDRB     r3,[r8,#0x14]         ;3221  ; g_primaryIntersection
003cd2  a1a8              ADR      r1,|L1.16244|
003cd4  2000              MOVS     r0,#0                 ;3221
003cd6  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
003cda  e74d              B        |L1.15224|
                  |L1.15580|
003cdc  736f              STRB     r7,[r5,#0xd]          ;3225
003cde  e74b              B        |L1.15224|
;;;3229   
                          ENDP

                  _Z16line_processMainv PROC ; line_processMain()
;;;3230   
;;;3231   int line_processMain()
003ce0  e92d4ff0          PUSH     {r4-r11,lr}
;;;3232   {
003ce4  b0b7              SUB      sp,sp,#0xdc
003ce6  2600              MOVS     r6,#0
003ce8  960a              STR      r6,[sp,#0x28]
003cea  9609              STR      r6,[sp,#0x24]
003cec  f8ad602c          STRH     r6,[sp,#0x2c]
;;;3233   	static uint32_t n = 0;
;;;3234   	uint32_t i;
;;;3235   	uint32_t len, tlen;
;;;3236   	bool eof, error;
;;;3237   	int8_t row;
;;;3238   	uint8_t vstate[LINE_VSIZE];
;;;3239   	uint32_t timer;
;;;3240   	SimpleList<uint32_t> timers;
;;;3241   	SimpleListNode<uint32_t> *j;	
;;;3242   
;;;3243   	// send frame and data over USB 
;;;3244   	if (g_renderMode!=LINE_RM_MINIMAL)
003cf0  f8df8240          LDR      r8,|L1.16180|
;;;3245   		cam_sendFrame(g_chirpUsb, CAM_RES3_WIDTH, CAM_RES3_HEIGHT, 
003cf4  4da6              LDR      r5,|L1.16272|
003cf6  f898000e          LDRB     r0,[r8,#0xe]          ;3244  ; g_renderMode
003cfa  2800              CMP      r0,#0                 ;3244
003cfc  d008              BEQ      |L1.15632|
003cfe  48a5              LDR      r0,|L1.16276|
003d00  9000              STR      r0,[sp,#0]
003d02  2302              MOVS     r3,#2
003d04  2268              MOVS     r2,#0x68
003d06  f44f711f          MOV      r1,#0x27c
003d0a  6828              LDR      r0,[r5,#0]  ; g_chirpUsb
003d0c  f7fffffe          BL       _Z13cam_sendFrameP5Chirptthj ; cam_sendFrame(Chirp*, unsigned short, unsigned short, unsigned char, unsigned)
                  |L1.15632|
;;;3246   			RENDER_FLAG_BLEND, FOURCC('4', '0', '1', '4'));
;;;3247   
;;;3248   	// indicate start of edge data
;;;3249   	if (g_debug&LINE_DEBUG_LAYERS)
003d10  4f8a              LDR      r7,|L1.16188|
003d12  7838              LDRB     r0,[r7,#0]  ; g_debug
003d14  0780              LSLS     r0,r0,#30
003d16  d512              BPL      |L1.15678|
;;;3250   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('E','D','G','F')), HINT8(RENDER_FLAG_START), HINT16(CAM_RES3_WIDTH), HINT16(CAM_RES3_HEIGHT), END);
003d18  aa04              ADD      r2,sp,#0x10
003d1a  2168              MOVS     r1,#0x68
003d1c  2042              MOVS     r0,#0x42
003d1e  c243              STM      r2!,{r0,r1,r6}
003d20  2304              MOVS     r3,#4
003d22  2241              MOVS     r2,#0x41
003d24  f44f711f          MOV      r1,#0x27c
003d28  9607              STR      r6,[sp,#0x1c]
003d2a  e9cd2300          STRD     r2,r3,[sp,#0]
003d2e  e9cd0102          STRD     r0,r1,[sp,#8]
003d32  4b99              LDR      r3,|L1.16280|
003d34  2264              MOVS     r2,#0x64
003d36  2118              MOVS     r1,#0x18
003d38  6828              LDR      r0,[r5,#0]  ; g_chirpUsb
003d3a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.15678|
;;;3251   	
;;;3252   	// initialize variables
;;;3253   	g_lineIndex = 1; // set to 1 because 0 means empty...
003d3e  f04f0901          MOV      r9,#1
003d42  f8889004          STRB     r9,[r8,#4]
;;;3254   	g_lineSegIndex = 0;
003d46  f8a8602c          STRH     r6,[r8,#0x2c]
;;;3255   	g_barcodeIndex = 0;
003d4a  f8886005          STRB     r6,[r8,#5]
;;;3256   	memset(vstate, 0, LINE_VSIZE);
003d4e  21a0              MOVS     r1,#0xa0
003d50  a80d              ADD      r0,sp,#0x34
003d52  f7fffffe          BL       __aeabi_memclr4
;;;3257   	memset(g_lineGrid, 0, LINE_GRID_WIDTH*LINE_GRID_HEIGHT*sizeof(LineGridNode));
003d56  f2420118          MOV      r1,#0x2018
003d5a  f8d80054          LDR      r0,[r8,#0x54]  ; g_lineGrid
003d5e  f7fffffe          BL       __aeabi_memclr
;;;3258   	
;;;3259   	
;;;3260   	if (g_debug==LINE_DEBUG_BENCHMARK)
003d62  7838              LDRB     r0,[r7,#0]  ; g_debug
003d64  2801              CMP      r0,#1
003d66  d102              BNE      |L1.15726|
;;;3261   		timers.clear(); // need to clear timers because of repeat flag, leads to memory leak
003d68  a809              ADD      r0,sp,#0x24
003d6a  f7fffffe          BL       _ZN10SimpleListIjE5clearEv ; SimpleList<unsigned>::clear()
                  |L1.15726|
;;;3262   	
;;;3263   	if (g_debug&LINE_DEBUG_TRACKING)
003d6e  7838              LDRB     r0,[r7,#0]  ; g_debug
003d70  0700              LSLS     r0,r0,#28
003d72  d508              BPL      |L1.15750|
;;;3264   		cprintf(0, "Frame %d ______\n", n++);
003d74  f8d8203c          LDR      r2,[r8,#0x3c]  ; n
003d78  a188              ADR      r1,|L1.16284|
003d7a  1c50              ADDS     r0,r2,#1
003d7c  f8c8003c          STR      r0,[r8,#0x3c]  ; n
003d80  2000              MOVS     r0,#0
003d82  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.15750|
;;;3265   	
;;;3266   	checkGraph(__LINE__);
003d86  2300              MOVS     r3,#0
003d88  461a              MOV      r2,r3
003d8a  4619              MOV      r1,r3
003d8c  f64040c2          MOV      r0,#0xcc2
003d90  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
;;;3267   
;;;3268   	if (g_repeat)
;;;3269   		*g_equeue->m_fields = g_savedEqueue;
003d94  4968              LDR      r1,|L1.16184|
003d96  f8980002          LDRB     r0,[r8,#2]            ;3268  ; g_repeat
003d9a  393c              SUBS     r1,r1,#0x3c
003d9c  b1a8              CBZ      r0,|L1.15818|
003d9e  8808              LDRH     r0,[r1,#0]  ; g_savedEqueue
003da0  f8d82044          LDR      r2,[r8,#0x44]  ; g_equeue
003da4  6812              LDR      r2,[r2,#0]
003da6  8010              STRH     r0,[r2,#0]
003da8  8848              LDRH     r0,[r1,#2]  ; g_savedEqueue
003daa  f8d82044          LDR      r2,[r8,#0x44]  ; g_equeue
003dae  6812              LDR      r2,[r2,#0]
003db0  8050              STRH     r0,[r2,#2]
003db2  888a              LDRH     r2,[r1,#4]  ; g_savedEqueue
003db4  f8d80044          LDR      r0,[r8,#0x44]  ; g_equeue
003db8  6803              LDR      r3,[r0,#0]
003dba  809a              STRH     r2,[r3,#4]
003dbc  88ca              LDRH     r2,[r1,#6]  ; g_savedEqueue
003dbe  6803              LDR      r3,[r0,#0]
003dc0  80da              STRH     r2,[r3,#6]
003dc2  6802              LDR      r2,[r0,#0]
003dc4  8908              LDRH     r0,[r1,#8]  ; g_savedEqueue
003dc6  8110              STRH     r0,[r2,#8]
003dc8  e00c              B        |L1.15844|
                  |L1.15818|
;;;3270   	else
;;;3271   		g_savedEqueue = *g_equeue->m_fields;
003dca  f8d80044          LDR      r0,[r8,#0x44]  ; g_equeue
003dce  6800              LDR      r0,[r0,#0]
003dd0  8802              LDRH     r2,[r0,#0]
003dd2  800a              STRH     r2,[r1,#0]
003dd4  8842              LDRH     r2,[r0,#2]
003dd6  804a              STRH     r2,[r1,#2]
003dd8  8882              LDRH     r2,[r0,#4]
003dda  808a              STRH     r2,[r1,#4]
003ddc  88c2              LDRH     r2,[r0,#6]
003dde  80ca              STRH     r2,[r1,#6]
003de0  8900              LDRH     r0,[r0,#8]
003de2  8108              STRH     r0,[r1,#8]
                  |L1.15844|
;;;3272   	
;;;3273   	setTimer(&timer);
003de4  a80c              ADD      r0,sp,#0x30
003de6  f7fffffe          BL       setTimer
;;;3274   	for (i=0, row=-1, tlen=0; true; i++)
003dea  f04f3aff          MOV      r10,#0xffffffff
                  |L1.15854|
;;;3275   	{
;;;3276   		while((len=g_equeue->readLine(g_lineBuf, LINE_BUFSIZE, &eof, &error))==0)
;;;3277   		{	
;;;3278   			if (getTimer(timer)>100000)
003dee  f8dfb1c0          LDR      r11,|L1.16304|
003df2  e00b              B        |L1.15884|
                  |L1.15860|
003df4  980c              LDR      r0,[sp,#0x30]
003df6  f7fffffe          BL       getTimer
003dfa  4558              CMP      r0,r11
003dfc  d906              BLS      |L1.15884|
;;;3279   			{
;;;3280   				error = true;
003dfe  f8cd90d4          STR      r9,[sp,#0xd4]
;;;3281   				cprintf(0, "line hang\n");
003e02  a16c              ADR      r1,|L1.16308|
003e04  2000              MOVS     r0,#0
003e06  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
;;;3282   				goto outside;
003e0a  e032              B        |L1.15986|
                  |L1.15884|
003e0c  a835              ADD      r0,sp,#0xd4           ;3276
003e0e  9000              STR      r0,[sp,#0]            ;3276
003e10  e9d80111          LDRD     r0,r1,[r8,#0x44]      ;3276
003e14  ab36              ADD      r3,sp,#0xd8           ;3276
003e16  f44f729f          MOV      r2,#0x13e             ;3276
003e1a  f7fffffe          BL       _ZN6Equeue8readLineEPtjPbS1_ ; Equeue::readLine(unsigned short*, unsigned, bool*, bool*)
003e1e  1e04              SUBS     r4,r0,#0              ;3276
003e20  d0e8              BEQ      |L1.15860|
;;;3283   			}
;;;3284   		}
;;;3285   		tlen += len;
;;;3286   		if (g_lineBuf[0]==EQ_HSCAN_LINE_START)
003e22  f8d81048          LDR      r1,[r8,#0x48]  ; g_lineBuf
003e26  8808              LDRH     r0,[r1,#0]
003e28  f5b04f7f          CMP      r0,#0xff00
003e2c  d03a              BEQ      |L1.16036|
;;;3287   		{
;;;3288   			row++;
;;;3289   			detectCodes(row, g_lineBuf+1, len-1);
;;;3290   			line_hLine(row, g_lineBuf+1, len-1);
;;;3291   		}
;;;3292   		else if (g_lineBuf[0]==EQ_VSCAN_LINE_START)
003e2e  f64f7201          MOV      r2,#0xff01
003e32  4290              CMP      r0,r2
003e34  d106              BNE      |L1.15940|
;;;3293   			line_vLine(row, vstate, g_lineBuf+1, len-1);
003e36  1c8a              ADDS     r2,r1,#2
003e38  f00a00ff          AND      r0,r10,#0xff
003e3c  1e63              SUBS     r3,r4,#1
003e3e  a90d              ADD      r1,sp,#0x34
003e40  f7fffffe          BL       _Z10line_vLinehPhPtj ; line_vLine(unsigned char, unsigned char*, unsigned short*, unsigned)
                  |L1.15940|
;;;3294   
;;;3295   		if (g_debug&LINE_DEBUG_LAYERS)
003e44  7838              LDRB     r0,[r7,#0]  ; g_debug
003e46  0780              LSLS     r0,r0,#30
003e48  d50d              BPL      |L1.15974|
;;;3296   			CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('E','D','G','S')), UINTS16(len, g_lineBuf), END);
003e4a  f8d80048          LDR      r0,[r8,#0x48]  ; g_lineBuf
003e4e  e9cd0602          STRD     r0,r6,[sp,#8]
003e52  2082              MOVS     r0,#0x82
003e54  e9cd0400          STRD     r0,r4,[sp,#0]
003e58  9604              STR      r6,[sp,#0x10]
003e5a  4b59              LDR      r3,|L1.16320|
003e5c  2264              MOVS     r2,#0x64
003e5e  2118              MOVS     r1,#0x18
003e60  6828              LDR      r0,[r5,#0]  ; g_chirpUsb
003e62  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.15974|
;;;3297   		if (eof || error)
003e66  f89d00d8          LDRB     r0,[sp,#0xd8]
003e6a  f89d10d4          LDRB     r1,[sp,#0xd4]
003e6e  4308              ORRS     r0,r0,r1
003e70  d0bd              BEQ      |L1.15854|
                  |L1.15986|
;;;3298   			break;
;;;3299   	}
;;;3300   	
;;;3301   	outside:
;;;3302   	// indicate end of edge data
;;;3303   	if (g_debug&LINE_DEBUG_LAYERS)
003e72  7838              LDRB     r0,[r7,#0]  ; g_debug
003e74  0780              LSLS     r0,r0,#30
003e76  d511              BPL      |L1.16028|
;;;3304   		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('E','D','G','F')), 
003e78  aa04              ADD      r2,sp,#0x10
003e7a  2168              MOVS     r1,#0x68
003e7c  2042              MOVS     r0,#0x42
003e7e  c243              STM      r2!,{r0,r1,r6}
003e80  2241              MOVS     r2,#0x41
003e82  e9cd2600          STRD     r2,r6,[sp,#0]
003e86  f44f711f          MOV      r1,#0x27c
003e8a  9607              STR      r6,[sp,#0x1c]
003e8c  e9cd0102          STRD     r0,r1,[sp,#8]
003e90  4b41              LDR      r3,|L1.16280|
003e92  2264              MOVS     r2,#0x64
003e94  2118              MOVS     r1,#0x18
003e96  6828              LDR      r0,[r5,#0]  ; g_chirpUsb
003e98  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.16028|
;;;3305   			HINT8(0), HINT16(CAM_RES3_WIDTH), HINT16(CAM_RES3_HEIGHT), END);
;;;3306   
;;;3307   
;;;3308   	if (g_debug==LINE_DEBUG_BENCHMARK)
003e9c  7838              LDRB     r0,[r7,#0]  ; g_debug
003e9e  2801              CMP      r0,#1
003ea0  d013              BEQ      |L1.16074|
003ea2  e01a              B        |L1.16090|
                  |L1.16036|
003ea4  f10a0a01          ADD      r10,r10,#1            ;3288
003ea8  fa4ffa8a          SXTB     r10,r10               ;3288
003eac  f00a00ff          AND      r0,r10,#0xff          ;3289
003eb0  1e62              SUBS     r2,r4,#1              ;3289
003eb2  1c89              ADDS     r1,r1,#2              ;3289
003eb4  f7fffffe          BL       _Z11detectCodeshPtj ; detectCodes(unsigned char, unsigned short*, unsigned)
003eb8  f8d81048          LDR      r1,[r8,#0x48]         ;3290  ; g_lineBuf
003ebc  f00a00ff          AND      r0,r10,#0xff          ;3290
003ec0  1e62              SUBS     r2,r4,#1              ;3290
003ec2  1c89              ADDS     r1,r1,#2              ;3290
003ec4  f7fffffe          BL       _Z10line_hLinehPtj ; line_hLine(unsigned char, unsigned short*, unsigned)
003ec8  e7bc              B        |L1.15940|
                  |L1.16074|
;;;3309   		timers.add(getTimer(timer));
003eca  980c              LDR      r0,[sp,#0x30]
003ecc  f7fffffe          BL       getTimer
003ed0  9008              STR      r0,[sp,#0x20]
003ed2  a908              ADD      r1,sp,#0x20
003ed4  a809              ADD      r0,sp,#0x24
003ed6  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16090|
;;;3310   
;;;3311   	if (g_debug==LINE_DEBUG_BENCHMARK)
003eda  7838              LDRB     r0,[r7,#0]  ; g_debug
003edc  2801              CMP      r0,#1
003ede  d102              BNE      |L1.16102|
;;;3312   		setTimer(&timer);
003ee0  a80c              ADD      r0,sp,#0x30
003ee2  f7fffffe          BL       setTimer
                  |L1.16102|
;;;3313   	clusterCodes();
003ee6  f7fffffe          BL       _Z12clusterCodesv ; clusterCodes()
;;;3314   	if (g_debug==LINE_DEBUG_BENCHMARK)
003eea  7838              LDRB     r0,[r7,#0]  ; g_debug
003eec  2801              CMP      r0,#1
003eee  d107              BNE      |L1.16128|
;;;3315   		timers.add(getTimer(timer));
003ef0  980c              LDR      r0,[sp,#0x30]
003ef2  f7fffffe          BL       getTimer
003ef6  9008              STR      r0,[sp,#0x20]
003ef8  a908              ADD      r1,sp,#0x20
003efa  a809              ADD      r0,sp,#0x24
003efc  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16128|
;;;3316   
;;;3317   	clearGrid();
003f00  f7fffffe          BL       _Z9clearGridv ; clearGrid()
;;;3318   	
;;;3319   	g_linesList.clear();
003f04  480c              LDR      r0,|L1.16184|
003f06  3830              SUBS     r0,r0,#0x30
003f08  f7fffffe          BL       _ZN10SimpleListI5Line2E5clearEv ; SimpleList<Line2>::clear()
;;;3320   	g_nodesList.clear();
003f0c  480a              LDR      r0,|L1.16184|
003f0e  3824              SUBS     r0,r0,#0x24
003f10  f7fffffe          BL       _ZN10SimpleListI5PointE5clearEv ; SimpleList<Point>::clear()
;;;3321   	g_nadirsList.clear();
003f14  4808              LDR      r0,|L1.16184|
003f16  3818              SUBS     r0,r0,#0x18
003f18  f7fffffe          BL       _ZN10SimpleListI5NadirE5clearEv ; SimpleList<Nadir>::clear()
;;;3322   	g_intersectionsList.clear();
003f1c  4806              LDR      r0,|L1.16184|
003f1e  380c              SUBS     r0,r0,#0xc
003f20  f7fffffe          BL       _ZN10SimpleListI12IntersectionE5clearEv ; SimpleList<Intersection>::clear()
;;;3323   	
;;;3324   	if (error) // deal with error after we call clustercodes otherwise there's a memory leak
003f24  f89d00d4          LDRB     r0,[sp,#0xd4]
003f28  b110              CBZ      r0,|L1.16176|
;;;3325   	{
;;;3326   		cprintf(0, "error\n");
003f2a  4926              LDR      r1,|L1.16324|
003f2c  2000              MOVS     r0,#0
003f2e  e04b              B        |L1.16328|
                  |L1.16176|
003f30  e058              B        |L1.16356|
003f32  0000              DCW      0x0000
                  |L1.16180|
                          DCD      ||.data||
                  |L1.16184|
                          DCD      ||.bss||+0x3c
                  |L1.16188|
                          DCD      g_debug
                  |L1.16192|
003f40  5072696d          DCB      "Primary %d %d (%d %d)(%d %d)\n",0
003f44  61727920
003f48  25642025
003f4c  64202825
003f50  64202564
003f54  29282564
003f58  20256429
003f5c  0a00    
003f5e  00                DCB      0
003f5f  00                DCB      0
                  |L1.16224|
003f60  4e657720          DCB      "New intersection\n",0
003f64  696e7465
003f68  72736563
003f6c  74696f6e
003f70  0a00    
003f72  00                DCB      0
003f73  00                DCB      0
                  |L1.16244|
003f74  496e7465          DCB      "Intersection %d (%d %d)\n",0
003f78  72736563
003f7c  74696f6e
003f80  20256420
003f84  28256420
003f88  2564290a
003f8c  00      
003f8d  00                DCB      0
003f8e  00                DCB      0
003f8f  00                DCB      0
                  |L1.16272|
                          DCD      g_chirpUsb
                  |L1.16276|
                          DCD      0x34313034
                  |L1.16280|
                          DCD      0x46474445
                  |L1.16284|
003f9c  4672616d          DCB      "Frame %d ______\n",0
003fa0  65202564
003fa4  205f5f5f
003fa8  5f5f5f0a
003fac  00      
003fad  00                DCB      0
003fae  00                DCB      0
003faf  00                DCB      0
                  |L1.16304|
                          DCD      0x000186a0
                  |L1.16308|
003fb4  6c696e65          DCB      "line hang\n",0
003fb8  2068616e
003fbc  670a00  
003fbf  00                DCB      0
                  |L1.16320|
                          DCD      0x53474445
                  |L1.16324|
                          DCD      ||.text||+0xadc
                  |L1.16328|
003fc8  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
;;;3327   		g_equeue->flush();
003fcc  f8d80044          LDR      r0,[r8,#0x44]  ; g_equeue
003fd0  f7fffffe          BL       _ZN6Equeue5flushEv ; Equeue::flush()
;;;3328   		
;;;3329   		return -1;
003fd4  a809              ADD      r0,sp,#0x24
003fd6  f7fffffe          BL       _ZN10SimpleListIjE5clearEv ; SimpleList<unsigned>::clear()
003fda  f04f30ff          MOV      r0,#0xffffffff
                  |L1.16350|
;;;3330   	}
;;;3331   		
;;;3332   	g_allMutex = true;
;;;3333   	g_primaryMutex = true;
;;;3334   	handleBarCodeTracking();
;;;3335   	g_primaryMutex = false;
;;;3336   	
;;;3337   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3338   		sendCodes(0);
;;;3339   	
;;;3340   	sendTrackedCodes(RENDER_FLAG_BLEND);
;;;3341   	
;;;3342   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3343   		line_sendLineGrid(0);
;;;3344   	
;;;3345   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3346   		setTimer(&timer);
;;;3347   	extractLineSegments();
;;;3348   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3349   		timers.add(getTimer(timer));
;;;3350   	
;;;3351   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3352   	{
;;;3353   		sendLineSegments(0);
;;;3354   		sendPoints(g_nodesList, 0, "nodes");
;;;3355   	}
;;;3356   	
;;;3357   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3358   		setTimer(&timer);
;;;3359   	findNadirs();
;;;3360   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3361   		timers.add(getTimer(timer));
;;;3362   	
;;;3363   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3364   		sendNadirs(g_nadirsList, 0, "nadir pairs");
;;;3365   	
;;;3366   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3367   		setTimer(&timer);
;;;3368   	reduceNadirs();
;;;3369   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3370   		timers.add(getTimer(timer));
;;;3371   
;;;3372   	checkGraph(__LINE__);
;;;3373   
;;;3374   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3375   		setTimer(&timer);
;;;3376   	formIntersections();
;;;3377   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3378   		timers.add(getTimer(timer));
;;;3379   
;;;3380   	checkGraph(__LINE__);
;;;3381   
;;;3382   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3383   	{
;;;3384   		sendNadirs(g_nadirsList, 0, "merged nadirs");
;;;3385   		sendLines(g_linesList, 0, "pre-cleaned lines");
;;;3386   		sendIntersections(g_intersectionsList, 0, "pre-cleaned intersections");
;;;3387   	}
;;;3388   
;;;3389   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3390   		setTimer(&timer);
;;;3391   	cleanIntersections();
;;;3392   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3393   		timers.add(getTimer(timer));
;;;3394   		
;;;3395   	checkGraph(__LINE__);
;;;3396   
;;;3397       removeMinLines(g_minLineLength2);
;;;3398   	
;;;3399   	if (g_debug&LINE_DEBUG_TRACKING)
;;;3400   	{
;;;3401   		SimpleListNode<Line2> *ln;
;;;3402   		SimpleListNode<Intersection> *in;
;;;3403   		uint32_t k;
;;;3404   	
;;;3405   		cprintf(0, "Lines\n");
;;;3406   		for (ln=g_linesList.m_first, k=0; ln!=NULL; ln=ln->m_next, k++)
;;;3407   			cprintf(0, "  %d: (%d %d %x)(%d %d %x)\n", k, ln->m_object.m_p0.m_x, ln->m_object.m_p0.m_y, ln->m_object.m_i0, ln->m_object.m_p1.m_x, ln->m_object.m_p1.m_y, ln->m_object.m_i1);
;;;3408   		cprintf(0, "Intersections\n");
;;;3409   		for (in=g_intersectionsList.m_first, k=0; in!=NULL; in=in->m_next, k++)
;;;3410   			cprintf(0, " %d: %d (%d %d) %x\n", k, in->m_object.m_n, in->m_object.m_p.m_x, in->m_object.m_p.m_y, in);
;;;3411   	}
;;;3412   	
;;;3413   	checkGraph(__LINE__);
;;;3414   
;;;3415   	if (g_debug&LINE_DEBUG_LAYERS)
;;;3416   		sendLines(g_linesList, 0, "lines");
;;;3417   		
;;;3418   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3419   		setTimer(&timer);
;;;3420   	handleLineTracking();
;;;3421   	g_allMutex = false;
;;;3422   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3423   		timers.add(getTimer(timer));
;;;3424   	
;;;3425   	if (g_renderMode==LINE_RM_ALL_FEATURES|| (g_debug&LINE_DEBUG_LAYERS))
;;;3426   		sendTrackedLines(g_lineTrackersList, RENDER_FLAG_BLEND, "filtered lines");
;;;3427   
;;;3428   	if (g_renderMode==LINE_RM_ALL_FEATURES)
;;;3429   		sendIntersections(g_intersectionsList, RENDER_FLAG_BLEND, "intersections");
;;;3430   	else if (g_debug&LINE_DEBUG_LAYERS)
;;;3431   		sendIntersections(g_intersectionsList, 0, "intersections");
;;;3432   	
;;;3433   	g_primaryMutex = true;
;;;3434   	handleLineState();
;;;3435   	g_primaryMutex = false;	
;;;3436   	
;;;3437   	if (g_debug==LINE_DEBUG_BENCHMARK)
;;;3438   	{
;;;3439   		for (j=timers.m_first, i=0, timer=0; j!=NULL; j=j->m_next, i++)
;;;3440   		{
;;;3441   			timer += j->m_object;
;;;3442   			cprintf(0, "timer %d: %d\n", i, j->m_object);
;;;3443   		}
;;;3444   		cprintf(0, "total: %d\n", timer);
;;;3445   	}
;;;3446   
;;;3447   	sendPrimaryFeatures(RENDER_FLAG_BLEND);
;;;3448   
;;;3449   	// render whatever we've sent
;;;3450       exec_sendEvent(g_chirpUsb, EVT_RENDER_FLUSH);
;;;3451   	
;;;3452   	g_frameFlag = true;
;;;3453   	
;;;3454   	return 0;
;;;3455   }
003fde  b037              ADD      sp,sp,#0xdc
003fe0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.16356|
003fe4  f8889013          STRB     r9,[r8,#0x13]         ;3332
003fe8  f8889012          STRB     r9,[r8,#0x12]         ;3333
003fec  f7fffffe          BL       _Z21handleBarCodeTrackingv ; handleBarCodeTracking()
003ff0  f8886012          STRB     r6,[r8,#0x12]         ;3335
003ff4  7838              LDRB     r0,[r7,#0]            ;3337  ; g_debug
003ff6  0780              LSLS     r0,r0,#30             ;3337
003ff8  d502              BPL      |L1.16384|
003ffa  2000              MOVS     r0,#0                 ;3338
003ffc  f7fffffe          BL       _Z9sendCodesh ; sendCodes(unsigned char)
                  |L1.16384|
004000  2002              MOVS     r0,#2                 ;3340
004002  f7fffffe          BL       _Z16sendTrackedCodesh ; sendTrackedCodes(unsigned char)
004006  7838              LDRB     r0,[r7,#0]            ;3342  ; g_debug
004008  0780              LSLS     r0,r0,#30             ;3342
00400a  d502              BPL      |L1.16402|
00400c  2000              MOVS     r0,#0                 ;3343
00400e  f7fffffe          BL       _Z17line_sendLineGridh ; line_sendLineGrid(unsigned char)
                  |L1.16402|
004012  7838              LDRB     r0,[r7,#0]            ;3345  ; g_debug
004014  2801              CMP      r0,#1                 ;3345
004016  d102              BNE      |L1.16414|
004018  a80c              ADD      r0,sp,#0x30           ;3346
00401a  f7fffffe          BL       setTimer
                  |L1.16414|
00401e  f7fffffe          BL       _Z19extractLineSegmentsv ; extractLineSegments()
004022  7838              LDRB     r0,[r7,#0]            ;3348  ; g_debug
004024  2801              CMP      r0,#1                 ;3348
004026  d107              BNE      |L1.16440|
004028  980c              LDR      r0,[sp,#0x30]         ;3349
00402a  f7fffffe          BL       getTimer
00402e  9008              STR      r0,[sp,#0x20]         ;3349
004030  a908              ADD      r1,sp,#0x20           ;3349
004032  a809              ADD      r0,sp,#0x24           ;3349
004034  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16440|
004038  7838              LDRB     r0,[r7,#0]            ;3351  ; g_debug
00403a  0780              LSLS     r0,r0,#30             ;3351
00403c  d507              BPL      |L1.16462|
00403e  2000              MOVS     r0,#0                 ;3353
004040  f7fffffe          BL       _Z16sendLineSegmentsh ; sendLineSegments(unsigned char)
004044  a2f7              ADR      r2,|L1.17444|
004046  2100              MOVS     r1,#0                 ;3354
004048  48f8              LDR      r0,|L1.17452|
00404a  f7fffffe          BL       _Z10sendPointsRK10SimpleListI5PointEhPKc ; sendPoints(const SimpleList<Point>&, unsigned char, const char*)
                  |L1.16462|
00404e  7838              LDRB     r0,[r7,#0]            ;3357  ; g_debug
004050  2801              CMP      r0,#1                 ;3357
004052  d102              BNE      |L1.16474|
004054  a80c              ADD      r0,sp,#0x30           ;3358
004056  f7fffffe          BL       setTimer
                  |L1.16474|
00405a  f7fffffe          BL       _Z10findNadirsv ; findNadirs()
00405e  7838              LDRB     r0,[r7,#0]            ;3360  ; g_debug
004060  2801              CMP      r0,#1                 ;3360
004062  d107              BNE      |L1.16500|
004064  980c              LDR      r0,[sp,#0x30]         ;3361
004066  f7fffffe          BL       getTimer
00406a  9008              STR      r0,[sp,#0x20]         ;3361
00406c  a908              ADD      r1,sp,#0x20           ;3361
00406e  a809              ADD      r0,sp,#0x24           ;3361
004070  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16500|
004074  7838              LDRB     r0,[r7,#0]            ;3363  ; g_debug
004076  0780              LSLS     r0,r0,#30             ;3363
004078  d505              BPL      |L1.16518|
00407a  48ec              LDR      r0,|L1.17452|
00407c  a2ec              ADR      r2,|L1.17456|
00407e  2100              MOVS     r1,#0                 ;3364
004080  300c              ADDS     r0,r0,#0xc            ;3364
004082  f7fffffe          BL       _Z10sendNadirsRK10SimpleListI5NadirEhPKc ; sendNadirs(const SimpleList<Nadir>&, unsigned char, const char*)
                  |L1.16518|
004086  7838              LDRB     r0,[r7,#0]            ;3366  ; g_debug
004088  2801              CMP      r0,#1                 ;3366
00408a  d102              BNE      |L1.16530|
00408c  a80c              ADD      r0,sp,#0x30           ;3367
00408e  f7fffffe          BL       setTimer
                  |L1.16530|
004092  f7fffffe          BL       _Z12reduceNadirsv ; reduceNadirs()
004096  7838              LDRB     r0,[r7,#0]            ;3369  ; g_debug
004098  2801              CMP      r0,#1                 ;3369
00409a  d107              BNE      |L1.16556|
00409c  980c              LDR      r0,[sp,#0x30]         ;3370
00409e  f7fffffe          BL       getTimer
0040a2  9008              STR      r0,[sp,#0x20]         ;3370
0040a4  a908              ADD      r1,sp,#0x20           ;3370
0040a6  a809              ADD      r0,sp,#0x24           ;3370
0040a8  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16556|
0040ac  2300              MOVS     r3,#0                 ;3372
0040ae  461a              MOV      r2,r3                 ;3372
0040b0  4619              MOV      r1,r3                 ;3372
0040b2  f640502c          MOV      r0,#0xd2c             ;3372
0040b6  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
0040ba  7838              LDRB     r0,[r7,#0]            ;3374  ; g_debug
0040bc  2801              CMP      r0,#1                 ;3374
0040be  d102              BNE      |L1.16582|
0040c0  a80c              ADD      r0,sp,#0x30           ;3375
0040c2  f7fffffe          BL       setTimer
                  |L1.16582|
0040c6  f7fffffe          BL       _Z17formIntersectionsv ; formIntersections()
0040ca  7838              LDRB     r0,[r7,#0]            ;3377  ; g_debug
0040cc  2801              CMP      r0,#1                 ;3377
0040ce  d107              BNE      |L1.16608|
0040d0  980c              LDR      r0,[sp,#0x30]         ;3378
0040d2  f7fffffe          BL       getTimer
0040d6  9008              STR      r0,[sp,#0x20]         ;3378
0040d8  a908              ADD      r1,sp,#0x20           ;3378
0040da  a809              ADD      r0,sp,#0x24           ;3378
0040dc  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16608|
0040e0  2300              MOVS     r3,#0                 ;3380
0040e2  461a              MOV      r2,r3                 ;3380
0040e4  4619              MOV      r1,r3                 ;3380
0040e6  f6405034          MOV      r0,#0xd34             ;3380
0040ea  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
0040ee  7838              LDRB     r0,[r7,#0]            ;3382  ; g_debug
0040f0  0780              LSLS     r0,r0,#30             ;3382
0040f2  d511              BPL      |L1.16664|
0040f4  48cd              LDR      r0,|L1.17452|
0040f6  a2d1              ADR      r2,|L1.17468|
0040f8  2100              MOVS     r1,#0                 ;3384
0040fa  300c              ADDS     r0,r0,#0xc            ;3384
0040fc  f7fffffe          BL       _Z10sendNadirsRK10SimpleListI5NadirEhPKc ; sendNadirs(const SimpleList<Nadir>&, unsigned char, const char*)
004100  48ca              LDR      r0,|L1.17452|
004102  a2d2              ADR      r2,|L1.17484|
004104  2100              MOVS     r1,#0                 ;3385
004106  380c              SUBS     r0,r0,#0xc            ;3385
004108  f7fffffe          BL       _Z9sendLinesRK10SimpleListI5Line2EhPKc ; sendLines(const SimpleList<Line2>&, unsigned char, const char*)
00410c  48c7              LDR      r0,|L1.17452|
00410e  a2d4              ADR      r2,|L1.17504|
004110  2100              MOVS     r1,#0                 ;3386
004112  3018              ADDS     r0,r0,#0x18           ;3386
004114  f7fffffe          BL       _Z17sendIntersectionsRK10SimpleListI12IntersectionEhPKc ; sendIntersections(const SimpleList<Intersection>&, unsigned char, const char*)
                  |L1.16664|
004118  7838              LDRB     r0,[r7,#0]            ;3389  ; g_debug
00411a  2801              CMP      r0,#1                 ;3389
00411c  d102              BNE      |L1.16676|
00411e  a80c              ADD      r0,sp,#0x30           ;3390
004120  f7fffffe          BL       setTimer
                  |L1.16676|
004124  f7fffffe          BL       _Z18cleanIntersectionsv ; cleanIntersections()
004128  7838              LDRB     r0,[r7,#0]            ;3392  ; g_debug
00412a  2801              CMP      r0,#1                 ;3392
00412c  d107              BNE      |L1.16702|
00412e  980c              LDR      r0,[sp,#0x30]         ;3393
004130  f7fffffe          BL       getTimer
004134  9008              STR      r0,[sp,#0x20]         ;3393
004136  a908              ADD      r1,sp,#0x20           ;3393
004138  a809              ADD      r0,sp,#0x24           ;3393
00413a  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16702|
00413e  2300              MOVS     r3,#0                 ;3395
004140  461a              MOV      r2,r3                 ;3395
004142  4619              MOV      r1,r3                 ;3395
004144  f6405043          MOV      r0,#0xd43             ;3395
004148  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
00414c  f8b8004c          LDRH     r0,[r8,#0x4c]         ;3397  ; g_minLineLength2
004150  b280              UXTH     r0,r0                 ;3397
004152  f7fffffe          BL       _Z14removeMinLinest ; removeMinLines(unsigned short)
004156  7838              LDRB     r0,[r7,#0]            ;3399  ; g_debug
004158  0700              LSLS     r0,r0,#28             ;3399
00415a  d538              BPL      |L1.16846|
00415c  a1c7              ADR      r1,|L1.17532|
00415e  2000              MOVS     r0,#0                 ;3405
004160  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
004164  48b1              LDR      r0,|L1.17452|
004166  380c              SUBS     r0,r0,#0xc            ;3406
004168  6804              LDR      r4,[r0,#0]            ;3406  ; g_linesList
00416a  f04f0a00          MOV      r10,#0                ;3406
00416e  e012              B        |L1.16790|
                  |L1.16752|
004170  e9d43102          LDRD     r3,r1,[r4,#8]         ;3407
004174  78a2              LDRB     r2,[r4,#2]            ;3407
004176  78e0              LDRB     r0,[r4,#3]            ;3407
004178  e9cd3201          STRD     r3,r2,[sp,#4]         ;3407
00417c  e9cd0103          STRD     r0,r1,[sp,#0xc]       ;3407
004180  7860              LDRB     r0,[r4,#1]            ;3407
004182  9000              STR      r0,[sp,#0]            ;3407
004184  7823              LDRB     r3,[r4,#0]            ;3407
004186  4652              MOV      r2,r10                ;3407
004188  a1be              ADR      r1,|L1.17540|
00418a  2000              MOVS     r0,#0                 ;3407
00418c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
004190  6964              LDR      r4,[r4,#0x14]         ;3406
004192  f10a0a01          ADD      r10,r10,#1            ;3406
                  |L1.16790|
004196  2c00              CMP      r4,#0                 ;3406
004198  d1ea              BNE      |L1.16752|
00419a  a1c1              ADR      r1,|L1.17568|
00419c  2000              MOVS     r0,#0                 ;3408
00419e  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0041a2  48a2              LDR      r0,|L1.17452|
0041a4  3018              ADDS     r0,r0,#0x18           ;3409
0041a6  6804              LDR      r4,[r0,#0]            ;3409  ; g_intersectionsList
0041a8  f04f0a00          MOV      r10,#0                ;3409
0041ac  e00d              B        |L1.16842|
                  |L1.16814|
0041ae  7860              LDRB     r0,[r4,#1]            ;3410
0041b0  7821              LDRB     r1,[r4,#0]            ;3410
0041b2  e9cd0401          STRD     r0,r4,[sp,#4]         ;3410
0041b6  9100              STR      r1,[sp,#0]            ;3410
0041b8  78a3              LDRB     r3,[r4,#2]            ;3410
0041ba  4652              MOV      r2,r10                ;3410
0041bc  a1bc              ADR      r1,|L1.17584|
0041be  2000              MOVS     r0,#0                 ;3410
0041c0  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
0041c4  6a64              LDR      r4,[r4,#0x24]         ;3409
0041c6  f10a0a01          ADD      r10,r10,#1            ;3409
                  |L1.16842|
0041ca  2c00              CMP      r4,#0                 ;3409
0041cc  d1ef              BNE      |L1.16814|
                  |L1.16846|
0041ce  2300              MOVS     r3,#0                 ;3413
0041d0  461a              MOV      r2,r3                 ;3413
0041d2  4619              MOV      r1,r3                 ;3413
0041d4  f6405055          MOV      r0,#0xd55             ;3413
0041d8  f7fffffe          BL       _Z10checkGraphihhP14SimpleListNodeI12IntersectionE ; checkGraph(int, unsigned char, unsigned char, SimpleListNode<Intersection>*)
0041dc  7838              LDRB     r0,[r7,#0]            ;3415  ; g_debug
0041de  0780              LSLS     r0,r0,#30             ;3415
0041e0  d505              BPL      |L1.16878|
0041e2  4892              LDR      r0,|L1.17452|
0041e4  a29c              ADR      r2,|L1.17496|
0041e6  2100              MOVS     r1,#0                 ;3416
0041e8  380c              SUBS     r0,r0,#0xc            ;3416
0041ea  f7fffffe          BL       _Z9sendLinesRK10SimpleListI5Line2EhPKc ; sendLines(const SimpleList<Line2>&, unsigned char, const char*)
                  |L1.16878|
0041ee  7838              LDRB     r0,[r7,#0]            ;3418  ; g_debug
0041f0  2801              CMP      r0,#1                 ;3418
0041f2  d102              BNE      |L1.16890|
0041f4  a80c              ADD      r0,sp,#0x30           ;3419
0041f6  f7fffffe          BL       setTimer
                  |L1.16890|
0041fa  f7fffffe          BL       _Z18handleLineTrackingv ; handleLineTracking()
0041fe  f8886013          STRB     r6,[r8,#0x13]         ;3421
004202  7838              LDRB     r0,[r7,#0]            ;3422  ; g_debug
004204  2801              CMP      r0,#1                 ;3422
004206  d107              BNE      |L1.16920|
004208  980c              LDR      r0,[sp,#0x30]         ;3423
00420a  f7fffffe          BL       getTimer
00420e  9008              STR      r0,[sp,#0x20]         ;3423
004210  a908              ADD      r1,sp,#0x20           ;3423
004212  a809              ADD      r0,sp,#0x24           ;3423
004214  f7fffffe          BL       _ZN10SimpleListIjE3addERKj ; SimpleList<unsigned>::add(const unsigned&)
                  |L1.16920|
004218  f898000e          LDRB     r0,[r8,#0xe]          ;3425  ; g_renderMode
00421c  2802              CMP      r0,#2                 ;3425
00421e  d002              BEQ      |L1.16934|
004220  7838              LDRB     r0,[r7,#0]            ;3425  ; g_debug
004222  0780              LSLS     r0,r0,#30             ;3425
004224  d505              BPL      |L1.16946|
                  |L1.16934|
004226  4881              LDR      r0,|L1.17452|
004228  a2a6              ADR      r2,|L1.17604|
00422a  2102              MOVS     r1,#2                 ;3426
00422c  3024              ADDS     r0,r0,#0x24           ;3426
00422e  f7fffffe          BL       _Z16sendTrackedLinesRK10SimpleListI7TrackerI5Line2EEhPKc ; sendTrackedLines(const SimpleList<Tracker<Line2>>&, unsigned char, const char*)
                  |L1.16946|
004232  f898000e          LDRB     r0,[r8,#0xe]          ;3428  ; g_renderMode
004236  2802              CMP      r0,#2                 ;3428
004238  d012              BEQ      |L1.16992|
00423a  7838              LDRB     r0,[r7,#0]            ;3430  ; g_debug
00423c  0780              LSLS     r0,r0,#30             ;3430
00423e  d505              BPL      |L1.16972|
004240  487a              LDR      r0,|L1.17452|
004242  a28a              ADR      r2,|L1.17516|
004244  2100              MOVS     r1,#0                 ;3431
004246  3018              ADDS     r0,r0,#0x18           ;3431
004248  f7fffffe          BL       _Z17sendIntersectionsRK10SimpleListI12IntersectionEhPKc ; sendIntersections(const SimpleList<Intersection>&, unsigned char, const char*)
                  |L1.16972|
00424c  f8889012          STRB     r9,[r8,#0x12]         ;3433
004250  f7fffffe          BL       _Z15handleLineStatev ; handleLineState()
004254  f8886012          STRB     r6,[r8,#0x12]         ;3435
004258  7838              LDRB     r0,[r7,#0]            ;3437  ; g_debug
00425a  2801              CMP      r0,#1                 ;3437
00425c  d007              BEQ      |L1.17006|
00425e  e01d              B        |L1.17052|
                  |L1.16992|
004260  4872              LDR      r0,|L1.17452|
004262  a282              ADR      r2,|L1.17516|
004264  2102              MOVS     r1,#2                 ;3429
004266  3018              ADDS     r0,r0,#0x18           ;3429
004268  f7fffffe          BL       _Z17sendIntersectionsRK10SimpleListI12IntersectionEhPKc ; sendIntersections(const SimpleList<Intersection>&, unsigned char, const char*)
00426c  e7ee              B        |L1.16972|
                  |L1.17006|
00426e  9c09              LDR      r4,[sp,#0x24]         ;3439
004270  2700              MOVS     r7,#0                 ;3439
004272  960c              STR      r6,[sp,#0x30]         ;3439
004274  e00b              B        |L1.17038|
                  |L1.17014|
004276  6820              LDR      r0,[r4,#0]            ;3441
004278  990c              LDR      r1,[sp,#0x30]         ;3441
00427a  4408              ADD      r0,r0,r1              ;3441
00427c  900c              STR      r0,[sp,#0x30]         ;3441
00427e  463a              MOV      r2,r7                 ;3442
004280  a194              ADR      r1,|L1.17620|
004282  2000              MOVS     r0,#0                 ;3442
004284  6823              LDR      r3,[r4,#0]            ;3442
004286  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
00428a  6864              LDR      r4,[r4,#4]            ;3439
00428c  1c7f              ADDS     r7,r7,#1              ;3439
                  |L1.17038|
00428e  2c00              CMP      r4,#0                 ;3439
004290  d1f1              BNE      |L1.17014|
004292  a194              ADR      r1,|L1.17636|
004294  2000              MOVS     r0,#0                 ;3444
004296  9a0c              LDR      r2,[sp,#0x30]         ;3444
004298  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
                  |L1.17052|
00429c  2002              MOVS     r0,#2                 ;3447
00429e  f7fffffe          BL       _Z19sendPrimaryFeaturesh ; sendPrimaryFeatures(unsigned char)
0042a2  2102              MOVS     r1,#2                 ;3450
0042a4  6828              LDR      r0,[r5,#0]            ;3450  ; g_chirpUsb
0042a6  f7fffffe          BL       _Z14exec_sendEventP5Chirpj ; exec_sendEvent(Chirp*, unsigned)
0042aa  f8889011          STRB     r9,[r8,#0x11]         ;3452
0042ae  a809              ADD      r0,sp,#0x24           ;3454
0042b0  f7fffffe          BL       _ZN10SimpleListIjE5clearEv ; SimpleList<unsigned>::clear()
0042b4  2000              MOVS     r0,#0                 ;3454
0042b6  e692              B        |L1.16350|
;;;3456   
                          ENDP

                  _Z12line_processv PROC ; line_process()
;;;3457   int line_process()
0042b8  488d              LDR      r0,|L1.17648|
;;;3458   {
;;;3459   	if (!g_repeat)
0042ba  7881              LDRB     r1,[r0,#2]  ; g_repeat
0042bc  2900              CMP      r1,#0
0042be  d111              BNE      |L1.17124|
;;;3460   	{
;;;3461   		if (g_renderMode!=LINE_RM_MINIMAL)
0042c0  7b81              LDRB     r1,[r0,#0xe]  ; g_renderMode
;;;3462   		{
;;;3463   			SM_OBJECT->currentLine = 0;
;;;3464   			SM_OBJECT->stream = 1; // set streaming
0042c2  488c              LDR      r0,|L1.17652|
0042c4  2301              MOVS     r3,#1
0042c6  b161              CBZ      r1,|L1.17122|
0042c8  2200              MOVS     r2,#0                 ;3463
0042ca  1c81              ADDS     r1,r0,#2              ;3463
0042cc  800a              STRH     r2,[r1,#0]            ;3463
0042ce  7003              STRB     r3,[r0,#0]
;;;3465   
;;;3466   			// wait for frame
;;;3467   			while(SM_OBJECT->currentLine < CAM_RES3_HEIGHT-1)
0042d0  e003              B        |L1.17114|
                  |L1.17106|
;;;3468   			{
;;;3469   				// After grab starts, reset streaming so we don't accidentally grab the next frame.
;;;3470   				// If we accidentally grab the next frame, we get overruns in the equeue, etc. 
;;;3471   				// This only happens when we're running PixyMon (streaming over USB) and we're 
;;;3472   				// getting hammered with serial interrupts for communication.  This would sometimes
;;;3473   				// lead to this loop erroring -- we miss currentline and it wraps around.
;;;3474   				if (SM_OBJECT->currentLine>1)
0042d2  880b              LDRH     r3,[r1,#0]
0042d4  2b01              CMP      r3,#1
0042d6  d900              BLS      |L1.17114|
;;;3475   					SM_OBJECT->stream = 0;
0042d8  7002              STRB     r2,[r0,#0]
                  |L1.17114|
0042da  880b              LDRH     r3,[r1,#0]            ;3467
0042dc  2b67              CMP      r3,#0x67              ;3467
0042de  d3f8              BCC      |L1.17106|
0042e0  e000              B        |L1.17124|
                  |L1.17122|
;;;3476   			}
;;;3477   		}
;;;3478   		else
;;;3479   			SM_OBJECT->stream = 1; // set streaming					
0042e2  7003              STRB     r3,[r0,#0]
                  |L1.17124|
;;;3480   	}
;;;3481   		
;;;3482   	return line_processMain();
0042e4  e7fe              B        _Z16line_processMainv ; line_processMain()
;;;3483   }
;;;3484   
                          ENDP

                  _Z18line_setRenderModeh PROC ; line_setRenderMode(unsigned char)
;;;3485   int line_setRenderMode(uint8_t mode)
0042e6  4982              LDR      r1,|L1.17648|
;;;3486   {
;;;3487   	g_renderMode = mode;
0042e8  7388              STRB     r0,[r1,#0xe]
;;;3488   	if (mode>LINE_RM_ALL_FEATURES)
0042ea  2802              CMP      r0,#2
0042ec  d902              BLS      |L1.17140|
;;;3489   		return -1;
0042ee  f04f30ff          MOV      r0,#0xffffffff
;;;3490   	return 0;
;;;3491   }
0042f2  4770              BX       lr
                  |L1.17140|
0042f4  2000              MOVS     r0,#0                 ;3490
0042f6  4770              BX       lr
;;;3492   
                          ENDP

                  _Z18line_getRenderModev PROC ; line_getRenderMode()
;;;3493   uint8_t line_getRenderMode()
0042f8  487d              LDR      r0,|L1.17648|
;;;3494   {
;;;3495   	return g_renderMode;
0042fa  7b80              LDRB     r0,[r0,#0xe]  ; g_renderMode
;;;3496   }
0042fc  4770              BX       lr
;;;3497   
                          ENDP

                  _Z20line_getPrimaryFramehPht PROC ; line_getPrimaryFrame(unsigned char, unsigned char*, unsigned short)
;;;3498   
;;;3499   int line_getPrimaryFrame(uint8_t typeMap, uint8_t *buf, uint16_t len)
0042fe  e92d47f0          PUSH     {r4-r10,lr}
;;;3500   {
004302  4681              MOV      r9,r0
004304  460e              MOV      r6,r1
;;;3501   	uint16_t length = 0;
004306  2400              MOVS     r4,#0
;;;3502   	
;;;3503   	// deal with g_frameFlag -- return error when it's false, indicating no new data
;;;3504   	if (!g_frameFlag || g_primaryMutex)
004308  f8dfa1e4          LDR      r10,|L1.17648|
00430c  f89a0011          LDRB     r0,[r10,#0x11]  ; g_frameFlag
004310  f89a1012          LDRB     r1,[r10,#0x12]  ; g_primaryMutex
004314  4388              BICS     r0,r0,r1
004316  d009              BEQ      |L1.17196|
;;;3505   		return -1; // no new data, or busy
;;;3506   	g_frameFlag = false;
004318  2700              MOVS     r7,#0
00431a  f88a7011          STRB     r7,[r10,#0x11]
;;;3507   	
;;;3508   	// only return primary line if we're tracking and primary line is in active (valid) state
;;;3509   	if (g_lineState==LINE_STATE_TRACKING && g_primaryActive)
00431e  f89a000d          LDRB     r0,[r10,#0xd]  ; g_lineState
;;;3510   	{
;;;3511   		// we assume that we can fit all 3 features in a single packet (255 bytes)
;;;3512   		if (typeMap&LINE_FR_VECTOR_LINES)
;;;3513   		{
;;;3514   			// line information is always present
;;;3515   			FrameLine *line;
;;;3516   			*(uint8_t *)(buf + length) = LINE_FR_VECTOR_LINES;
;;;3517   			*(uint8_t *)(buf + length + 1) = sizeof(FrameLine);
;;;3518   			line = (FrameLine *)(buf + length + 2);
;;;3519   			line->m_x0 = g_primaryPoint.m_x;
;;;3520   			line->m_y0 = g_primaryPoint.m_y;
;;;3521   			line->m_x1 = g_goalPoint.m_x;
;;;3522   			line->m_y1 = g_goalPoint.m_y;
;;;3523   			line->m_index = g_primaryLineIndex; 
;;;3524   			line->m_flags = 0;
;;;3525   			if (g_intersectionsList.m_size)
;;;3526   				line->m_flags |= LINE_FR_FLAG_INTERSECTION;
004322  f04f0804          MOV      r8,#4
004326  2801              CMP      r0,#1                 ;3509
004328  d004              BEQ      |L1.17204|
00432a  e03a              B        |L1.17314|
                  |L1.17196|
00432c  f04f30ff          MOV      r0,#0xffffffff        ;3505
                  |L1.17200|
;;;3527   			length += sizeof(FrameLine) + 2;
;;;3528   		}
;;;3529   		// Intersection information, only present when intersection appears
;;;3530   		if ((typeMap&LINE_FR_INTERSECTION) && g_newIntersection)
;;;3531   		{
;;;3532   			*(uint8_t *)(buf + length) = LINE_FR_INTERSECTION;
;;;3533   			*(uint8_t *)(buf + length + 1) = sizeof(FrameIntersection);
;;;3534   			memcpy(buf+length+2, &g_primaryIntersection.m_object, sizeof(FrameIntersection));
;;;3535   			length += sizeof(FrameIntersection) + 2;
;;;3536   			
;;;3537   			g_newIntersection = false;
;;;3538   		}
;;;3539   	}
;;;3540   	if (typeMap&LINE_FR_BARCODE)
;;;3541   	{
;;;3542   		SimpleListNode<Tracker<DecodedBarCode> > *j;
;;;3543   	
;;;3544   		// go through list, find best candidates
;;;3545   		for (j=g_barCodeTrackersList.m_first; j!=NULL; j=j->m_next)
;;;3546   		{
;;;3547   			if (j->m_object.m_events&TR_EVENT_VALIDATED && !(j->m_object.m_eventsShadow&TR_EVENT_VALIDATED))
;;;3548   			{
;;;3549   				FrameCode *barcode;
;;;3550   	
;;;3551   				*(uint8_t *)(buf + length) = LINE_FR_BARCODE;
;;;3552   				*(uint8_t *)(buf + length + 1) = sizeof(FrameCode);
;;;3553   				barcode = (FrameCode *)(buf + length + 2);
;;;3554   				barcode->m_code = j->m_object.m_object.m_val;
;;;3555   				barcode->m_flags = 0;
;;;3556   				// return center location of code
;;;3557   				barcode->m_x = (j->m_object.m_object.m_outline.m_xOffset + (j->m_object.m_object.m_outline.m_width>>1))>>LINE_GRID_WIDTH_REDUCTION;
;;;3558   				barcode->m_y = (j->m_object.m_object.m_outline.m_yOffset + (j->m_object.m_object.m_outline.m_height>>1))>>LINE_GRID_HEIGHT_REDUCTION;
;;;3559   				length += sizeof(FrameCode) + 2;
;;;3560   				// set shadow so we don't report again
;;;3561   				j->m_object.m_eventsShadow |= TR_EVENT_VALIDATED;
;;;3562   				// only 1 code per frame
;;;3563   				break; 
;;;3564   			}
;;;3565   		}
;;;3566   	}
;;;3567   	return length;
;;;3568   }
004330  e8bd87f0          POP      {r4-r10,pc}
                  |L1.17204|
004334  f89a000c          LDRB     r0,[r10,#0xc]         ;3509  ; g_primaryActive
004338  b398              CBZ      r0,|L1.17314|
00433a  ea5f70c9          LSLS     r0,r9,#31             ;3512
00433e  d01b              BEQ      |L1.17272|
004340  2001              MOVS     r0,#1                 ;3516
004342  7030              STRB     r0,[r6,#0]            ;3516
004344  2006              MOVS     r0,#6                 ;3517
004346  7070              STRB     r0,[r6,#1]            ;3517
004348  1cb5              ADDS     r5,r6,#2              ;3518
00434a  4869              LDR      r0,|L1.17648|
00434c  3034              ADDS     r0,r0,#0x34           ;3519
00434e  7801              LDRB     r1,[r0,#0]            ;3519  ; g_primaryPoint
004350  7029              STRB     r1,[r5,#0]            ;3519
004352  7840              LDRB     r0,[r0,#1]            ;3520  ; g_primaryPoint
004354  7068              STRB     r0,[r5,#1]            ;3520
004356  4866              LDR      r0,|L1.17648|
004358  3032              ADDS     r0,r0,#0x32           ;3521
00435a  7801              LDRB     r1,[r0,#0]            ;3521  ; g_goalPoint
00435c  70a9              STRB     r1,[r5,#2]            ;3521
00435e  7840              LDRB     r0,[r0,#1]            ;3522  ; g_goalPoint
004360  70e8              STRB     r0,[r5,#3]            ;3522
004362  f89a000a          LDRB     r0,[r10,#0xa]         ;3523  ; g_primaryLineIndex
004366  7128              STRB     r0,[r5,#4]            ;3523
004368  716f              STRB     r7,[r5,#5]            ;3524
00436a  4830              LDR      r0,|L1.17452|
00436c  3018              ADDS     r0,r0,#0x18           ;3525
00436e  8900              LDRH     r0,[r0,#8]            ;3525  ; g_intersectionsList
004370  b108              CBZ      r0,|L1.17270|
004372  f8858005          STRB     r8,[r5,#5]            ;3526
                  |L1.17270|
004376  2408              MOVS     r4,#8                 ;3527
                  |L1.17272|
004378  ea5f7089          LSLS     r0,r9,#30             ;3530
00437c  d511              BPL      |L1.17314|
00437e  f89a0007          LDRB     r0,[r10,#7]           ;3530  ; g_newIntersection
004382  b170              CBZ      r0,|L1.17314|
004384  2002              MOVS     r0,#2                 ;3532
004386  5530              STRB     r0,[r6,r4]            ;3532
004388  211c              MOVS     r1,#0x1c              ;3533
00438a  1930              ADDS     r0,r6,r4              ;3533
00438c  7041              STRB     r1,[r0,#1]            ;3533
00438e  4927              LDR      r1,|L1.17452|
004390  1c80              ADDS     r0,r0,#2              ;3534
004392  221c              MOVS     r2,#0x1c              ;3534
004394  3144              ADDS     r1,r1,#0x44           ;3534
004396  f7fffffe          BL       __aeabi_memcpy
00439a  341e              ADDS     r4,r4,#0x1e           ;3535
00439c  b2a4              UXTH     r4,r4                 ;3535
00439e  f88a7007          STRB     r7,[r10,#7]           ;3537
                  |L1.17314|
0043a2  ea5f7049          LSLS     r0,r9,#29             ;3540
0043a6  d527              BPL      |L1.17400|
0043a8  4820              LDR      r0,|L1.17452|
0043aa  3060              ADDS     r0,r0,#0x60           ;3545
0043ac  6802              LDR      r2,[r0,#0]            ;3545  ; g_barCodeTrackersList
0043ae  e021              B        |L1.17396|
                  |L1.17328|
0043b0  7890              LDRB     r0,[r2,#2]            ;3547
0043b2  0780              LSLS     r0,r0,#30             ;3547
0043b4  d51d              BPL      |L1.17394|
0043b6  78d0              LDRB     r0,[r2,#3]            ;3547
0043b8  0780              LSLS     r0,r0,#30             ;3547
0043ba  d41a              BMI      |L1.17394|
0043bc  f8068004          STRB     r8,[r6,r4]            ;3551
0043c0  1930              ADDS     r0,r6,r4              ;3552
0043c2  f8808001          STRB     r8,[r0,#1]            ;3552
0043c6  7f11              LDRB     r1,[r2,#0x1c]         ;3554
0043c8  7141              STRB     r1,[r0,#5]            ;3554
0043ca  7107              STRB     r7,[r0,#4]            ;3555
0043cc  8a91              LDRH     r1,[r2,#0x14]         ;3557
0043ce  8b13              LDRH     r3,[r2,#0x18]         ;3557
0043d0  eb010153          ADD      r1,r1,r3,LSR #1       ;3557
0043d4  08c9              LSRS     r1,r1,#3              ;3557
0043d6  7081              STRB     r1,[r0,#2]            ;3557
0043d8  8ad1              LDRH     r1,[r2,#0x16]         ;3558
0043da  8b53              LDRH     r3,[r2,#0x1a]         ;3558
0043dc  eb010153          ADD      r1,r1,r3,LSR #1       ;3558
0043e0  0849              LSRS     r1,r1,#1              ;3558
0043e2  70c1              STRB     r1,[r0,#3]            ;3558
0043e4  1da4              ADDS     r4,r4,#6              ;3559
0043e6  b2a4              UXTH     r4,r4                 ;3559
0043e8  78d0              LDRB     r0,[r2,#3]            ;3561
0043ea  f0400002          ORR      r0,r0,#2              ;3561
0043ee  70d0              STRB     r0,[r2,#3]            ;3561
0043f0  e002              B        |L1.17400|
                  |L1.17394|
0043f2  6a52              LDR      r2,[r2,#0x24]         ;3545
                  |L1.17396|
0043f4  2a00              CMP      r2,#0                 ;3545
0043f6  d1db              BNE      |L1.17328|
                  |L1.17400|
0043f8  4620              MOV      r0,r4                 ;3567
0043fa  e799              B        |L1.17200|
;;;3569   
                          ENDP

                  _Z16line_getAllFramehPht PROC ; line_getAllFrame(unsigned char, unsigned char*, unsigned short)
;;;3570   int line_getAllFrame(uint8_t typeMap, uint8_t *buf, uint16_t len)
0043fc  e92d5ff0          PUSH     {r4-r12,lr}
;;;3571   {
004400  4680              MOV      r8,r0
004402  460e              MOV      r6,r1
004404  4617              MOV      r7,r2
;;;3572   	uint16_t length = 0;
004406  2400              MOVS     r4,#0
;;;3573   	uint8_t plength, *hbuf;
;;;3574   	
;;;3575   	if (!g_frameFlag || g_allMutex)
004408  4839              LDR      r0,|L1.17648|
00440a  7c41              LDRB     r1,[r0,#0x11]  ; g_frameFlag
00440c  7cc2              LDRB     r2,[r0,#0x13]  ; g_allMutex
00440e  4391              BICS     r1,r1,r2
004410  d074              BEQ      |L1.17660|
;;;3576   		return -1; // no new data, or busy
;;;3577   	g_frameFlag = false;
004412  2100              MOVS     r1,#0
004414  7441              STRB     r1,[r0,#0x11]
;;;3578   	if (typeMap&LINE_FR_VECTOR_LINES)
004416  ea5f70c8          LSLS     r0,r8,#31
00441a  d06e              BEQ      |L1.17658|
;;;3579   	{
;;;3580   		SimpleListNode<Tracker<Line2> > *n;
;;;3581   		Line2 *line;
;;;3582   		FrameLine *fline;
;;;3583   		
;;;3584   		for(n=g_lineTrackersList.m_first, plength=0, hbuf=buf+length; n!=NULL && length<len-sizeof(FrameLine)-2; n=n->m_next)
00441c  4803              LDR      r0,|L1.17452|
00441e  3024              ADDS     r0,r0,#0x24
004420  6803              LDR      r3,[r0,#0]  ; g_lineTrackersList
004422  e083              B        |L1.17708|
                  |L1.17444|
004424  6e6f6465          DCB      "nodes",0
004428  7300    
00442a  00                DCB      0
00442b  00                DCB      0
                  |L1.17452|
                          DCD      ||.bss||+0x18
                  |L1.17456|
004430  6e616469          DCB      "nadir pairs",0
004434  72207061
004438  69727300
                  |L1.17468|
00443c  6d657267          DCB      "merged nadirs",0
004440  6564206e
004444  61646972
004448  7300    
00444a  00                DCB      0
00444b  00                DCB      0
                  |L1.17484|
00444c  7072652d          DCB      "pre-cleaned "
004450  636c6561
004454  6e656420
                  |L1.17496|
004458  6c696e65          DCB      "lines",0
00445c  7300    
00445e  00                DCB      0
00445f  00                DCB      0
                  |L1.17504|
004460  7072652d          DCB      "pre-cleaned "
004464  636c6561
004468  6e656420
                  |L1.17516|
00446c  696e7465          DCB      "intersections",0
004470  72736563
004474  74696f6e
004478  7300    
00447a  00                DCB      0
00447b  00                DCB      0
                  |L1.17532|
00447c  4c696e65          DCB      "Lines\n",0
004480  730a00  
004483  00                DCB      0
                  |L1.17540|
004484  20202564          DCB      "  %d: (%d %d %x)(%d %d %x)\n",0
004488  3a202825
00448c  64202564
004490  20257829
004494  28256420
004498  25642025
00449c  78290a00
                  |L1.17568|
0044a0  496e7465          DCB      "Intersections\n",0
0044a4  72736563
0044a8  74696f6e
0044ac  730a00  
0044af  00                DCB      0
                  |L1.17584|
0044b0  2025643a          DCB      " %d: %d (%d %d) %x\n",0
0044b4  20256420
0044b8  28256420
0044bc  25642920
0044c0  25780a00
                  |L1.17604|
0044c4  66696c74          DCB      "filtered lines",0
0044c8  65726564
0044cc  206c696e
0044d0  657300  
0044d3  00                DCB      0
                  |L1.17620|
0044d4  74696d65          DCB      "timer %d: %d\n",0
0044d8  72202564
0044dc  3a202564
0044e0  0a00    
0044e2  00                DCB      0
0044e3  00                DCB      0
                  |L1.17636|
0044e4  746f7461          DCB      "total: %d\n",0
0044e8  6c3a2025
0044ec  640a00  
0044ef  00                DCB      0
                  |L1.17648|
                          DCD      ||.data||
                  |L1.17652|
                          DCD      0x2000fc00
0044f8  e000              B        |L1.17660|
                  |L1.17658|
0044fa  e022              B        |L1.17730|
                  |L1.17660|
0044fc  f04f30ff          MOV      r0,#0xffffffff        ;3576
                  |L1.17664|
;;;3585   		{
;;;3586   			fline = (FrameLine *)(buf + length + 2);
;;;3587   			line = &n->m_object.m_object;
;;;3588   			fline->m_x0 = line->m_p0.m_x;
;;;3589   			fline->m_y0 = line->m_p0.m_y;
;;;3590   			fline->m_x1 = line->m_p1.m_x;
;;;3591   			fline->m_y1 = line->m_p1.m_y;
;;;3592   			fline->m_index = n->m_object.m_index;
;;;3593   			fline->m_flags = n->m_object.m_state;
;;;3594   				
;;;3595   			length += sizeof(FrameLine);
;;;3596   			plength += sizeof(FrameLine);
;;;3597   		}
;;;3598   		if (plength>0)
;;;3599   		{
;;;3600   			*(uint8_t *)hbuf = LINE_FR_VECTOR_LINES;
;;;3601   			*(uint8_t *)(hbuf+1) = plength;
;;;3602   			length += 2;
;;;3603   		}
;;;3604   	}
;;;3605   	if (typeMap&LINE_FR_INTERSECTION)
;;;3606   	{
;;;3607   		SimpleListNode<Intersection> *i;
;;;3608   		FrameIntersection *intersection;
;;;3609   		
;;;3610   		for (i=g_intersectionsList.m_first, plength=0, hbuf=buf+length; i!=NULL && length<len-sizeof(FrameIntersection)-2; i=i->m_next)
;;;3611   		{
;;;3612   			intersection = (FrameIntersection *)(buf + length + 2);
;;;3613   			formatIntersection(i->m_object, intersection, true); 
;;;3614   				
;;;3615   			length += sizeof(FrameIntersection);
;;;3616   			plength += sizeof(FrameIntersection);			
;;;3617   		}
;;;3618   		if (plength>0)
;;;3619   		{
;;;3620   			*(uint8_t *)hbuf = LINE_FR_INTERSECTION;
;;;3621   			*(uint8_t *)(hbuf+1) = plength;
;;;3622   			length += 2;
;;;3623   		}
;;;3624   	}
;;;3625   	if (typeMap&LINE_FR_BARCODE)
;;;3626   	{
;;;3627   		SimpleListNode<Tracker<DecodedBarCode> > *j;
;;;3628   		DecodedBarCode *dcode;
;;;3629   		FrameCode *barcode;
;;;3630   		
;;;3631   		// go through list, find best candidates
;;;3632   		for (j=g_barCodeTrackersList.m_first, plength=0, hbuf=buf+length; j!=NULL && length<len-sizeof(FrameCode)-2; j=j->m_next)
;;;3633   		{
;;;3634   			dcode = &j->m_object.m_object;
;;;3635   			barcode = (FrameCode *)(buf + length + 2);
;;;3636   			barcode->m_x = (dcode->m_outline.m_xOffset + (dcode->m_outline.m_width>>1))>>LINE_GRID_WIDTH_REDUCTION;
;;;3637   			barcode->m_y = (dcode->m_outline.m_yOffset + (dcode->m_outline.m_height>>1))>>LINE_GRID_HEIGHT_REDUCTION;
;;;3638   			barcode->m_flags = j->m_object.m_state;
;;;3639   			barcode->m_code = dcode->m_val;
;;;3640   				
;;;3641   			length += sizeof(FrameCode);
;;;3642   			plength += sizeof(FrameCode);
;;;3643   		}
;;;3644   		if (plength>0)
;;;3645   		{
;;;3646   			*(uint8_t *)hbuf = LINE_FR_BARCODE;
;;;3647   			*(uint8_t *)(hbuf+1) = plength;
;;;3648   			length += 2;
;;;3649   		}
;;;3650   	}
;;;3651   	return length;
;;;3652   }
004500  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17668|
004504  1930              ADDS     r0,r6,r4              ;3586
004506  f1030514          ADD      r5,r3,#0x14           ;3587
00450a  782a              LDRB     r2,[r5,#0]            ;3588
00450c  7082              STRB     r2,[r0,#2]            ;3588
00450e  786a              LDRB     r2,[r5,#1]            ;3589
004510  70c2              STRB     r2,[r0,#3]            ;3589
004512  78aa              LDRB     r2,[r5,#2]            ;3590
004514  7102              STRB     r2,[r0,#4]            ;3590
004516  78ea              LDRB     r2,[r5,#3]            ;3591
004518  7142              STRB     r2,[r0,#5]            ;3591
00451a  785a              LDRB     r2,[r3,#1]            ;3592
00451c  7182              STRB     r2,[r0,#6]            ;3592
00451e  781a              LDRB     r2,[r3,#0]            ;3593
004520  71c2              STRB     r2,[r0,#7]            ;3593
004522  1da4              ADDS     r4,r4,#6              ;3595
004524  b2a4              UXTH     r4,r4                 ;3595
004526  1d89              ADDS     r1,r1,#6              ;3596
004528  b2c9              UXTB     r1,r1                 ;3596
00452a  6a9b              LDR      r3,[r3,#0x28]         ;3584
                  |L1.17708|
00452c  b11b              CBZ      r3,|L1.17718|
00452e  f1a70008          SUB      r0,r7,#8              ;3584
004532  4284              CMP      r4,r0                 ;3584
004534  d3e6              BCC      |L1.17668|
                  |L1.17718|
004536  b121              CBZ      r1,|L1.17730|
004538  2201              MOVS     r2,#1                 ;3600
00453a  7032              STRB     r2,[r6,#0]            ;3600
00453c  7071              STRB     r1,[r6,#1]            ;3601
00453e  1ca4              ADDS     r4,r4,#2              ;3602
004540  b2a4              UXTH     r4,r4                 ;3602
                  |L1.17730|
004542  ea5f7088          LSLS     r0,r8,#30             ;3605
004546  d521              BPL      |L1.17804|
004548  488c              LDR      r0,|L1.18300|
00454a  f8d09000          LDR      r9,[r0,#0]            ;3610  ; g_intersectionsList
00454e  2500              MOVS     r5,#0                 ;3610
004550  eb060b04          ADD      r11,r6,r4             ;3610
004554  f1a70a1e          SUB      r10,r7,#0x1e          ;3610
004558  e00b              B        |L1.17778|
                  |L1.17754|
00455a  1931              ADDS     r1,r6,r4              ;3612
00455c  1c89              ADDS     r1,r1,#2              ;3612
00455e  2201              MOVS     r2,#1                 ;3613
004560  4648              MOV      r0,r9                 ;3613
004562  f7fffffe          BL       _Z18formatIntersectionRK12IntersectionP17FrameIntersectionb ; formatIntersection(const Intersection&, FrameIntersection*, bool)
004566  341c              ADDS     r4,r4,#0x1c           ;3615
004568  b2a4              UXTH     r4,r4                 ;3615
00456a  351c              ADDS     r5,r5,#0x1c           ;3616
00456c  b2ed              UXTB     r5,r5                 ;3616
00456e  f8d99024          LDR      r9,[r9,#0x24]         ;3610
                  |L1.17778|
004572  f1b90f00          CMP      r9,#0                 ;3610
004576  d001              BEQ      |L1.17788|
004578  4554              CMP      r4,r10                ;3610
00457a  d3ee              BCC      |L1.17754|
                  |L1.17788|
00457c  b135              CBZ      r5,|L1.17804|
00457e  2002              MOVS     r0,#2                 ;3620
004580  f88b0000          STRB     r0,[r11,#0]           ;3620
004584  f88b5001          STRB     r5,[r11,#1]           ;3621
004588  1ca4              ADDS     r4,r4,#2              ;3622
00458a  b2a4              UXTH     r4,r4                 ;3622
                  |L1.17804|
00458c  ea5f7048          LSLS     r0,r8,#29             ;3625
004590  d530              BPL      |L1.17908|
004592  487a              LDR      r0,|L1.18300|
004594  3048              ADDS     r0,r0,#0x48           ;3632
004596  6803              LDR      r3,[r0,#0]            ;3632  ; g_barCodeTrackersList
004598  2200              MOVS     r2,#0                 ;3632
00459a  1935              ADDS     r5,r6,r4              ;3632
00459c  e020              B        |L1.17888|
                  |L1.17822|
00459e  4618              MOV      r0,r3                 ;3634
0045a0  1931              ADDS     r1,r6,r4              ;3635
0045a2  f8b0c014          LDRH     r12,[r0,#0x14]        ;3636
0045a6  f8b08018          LDRH     r8,[r0,#0x18]         ;3636
0045aa  eb0c0c58          ADD      r12,r12,r8,LSR #1     ;3636
0045ae  ea4f0cdc          LSR      r12,r12,#3            ;3636
0045b2  f881c002          STRB     r12,[r1,#2]           ;3636
0045b6  f8b0c016          LDRH     r12,[r0,#0x16]        ;3637
0045ba  f8b0801a          LDRH     r8,[r0,#0x1a]         ;3637
0045be  eb0c0c58          ADD      r12,r12,r8,LSR #1     ;3637
0045c2  ea4f0c5c          LSR      r12,r12,#1            ;3637
0045c6  f881c003          STRB     r12,[r1,#3]           ;3637
0045ca  f893c000          LDRB     r12,[r3,#0]           ;3638
0045ce  f881c004          STRB     r12,[r1,#4]           ;3638
0045d2  7f00              LDRB     r0,[r0,#0x1c]         ;3639
0045d4  7148              STRB     r0,[r1,#5]            ;3639
0045d6  1d24              ADDS     r4,r4,#4              ;3641
0045d8  b2a4              UXTH     r4,r4                 ;3641
0045da  1d12              ADDS     r2,r2,#4              ;3642
0045dc  b2d2              UXTB     r2,r2                 ;3642
0045de  6a5b              LDR      r3,[r3,#0x24]         ;3632
                  |L1.17888|
0045e0  b113              CBZ      r3,|L1.17896|
0045e2  1fb8              SUBS     r0,r7,#6              ;3632
0045e4  4284              CMP      r4,r0                 ;3632
0045e6  d3da              BCC      |L1.17822|
                  |L1.17896|
0045e8  b122              CBZ      r2,|L1.17908|
0045ea  2004              MOVS     r0,#4                 ;3646
0045ec  7028              STRB     r0,[r5,#0]            ;3646
0045ee  706a              STRB     r2,[r5,#1]            ;3647
0045f0  1ca4              ADDS     r4,r4,#2              ;3648
0045f2  b2a4              UXTH     r4,r4                 ;3648
                  |L1.17908|
0045f4  4620              MOV      r0,r4                 ;3651
0045f6  e783              B        |L1.17664|
;;;3653   
                          ENDP

                  _Z12line_setModea PROC ; line_setMode(signed char)
;;;3654   int line_setMode(int8_t modeMap)
0045f8  4961              LDR      r1,|L1.18304|
;;;3655   {
;;;3656   	g_delayedTurn = (modeMap & LINE_MODEMAP_TURN_DELAYED) ? true : false;
0045fa  f0000201          AND      r2,r0,#1
0045fe  750a              STRB     r2,[r1,#0x14]
;;;3657   	g_whiteLine = (modeMap & LINE_MODEMAP_WHITE_LINE) ? true : false;
004600  f3c012c0          UBFX     r2,r0,#7,#1
004604  700a              STRB     r2,[r1,#0]
;;;3658   	g_manualVectorSelect = (modeMap & LINE_MODEMAP_MANUAL_SELECT_VECTOR) ? true : false;
004606  f3c00040          UBFX     r0,r0,#1,#1
00460a  7588              STRB     r0,[r1,#0x16]
;;;3659   	return 0;
00460c  2000              MOVS     r0,#0
;;;3660   }
00460e  4770              BX       lr
;;;3661   
                          ENDP

                  _Z21line_setNextTurnAngles PROC ; line_setNextTurnAngle(short)
;;;3662   int line_setNextTurnAngle(int16_t angle)
004610  495b              LDR      r1,|L1.18304|
;;;3663   {	
;;;3664   	g_nextTurnAngle = angle;
004612  86c8              STRH     r0,[r1,#0x36]
;;;3665   	g_newTurnAngle = true;
004614  2001              MOVS     r0,#1
004616  7548              STRB     r0,[r1,#0x15]
;;;3666   		
;;;3667   	// else we've just set the angle (for later)	
;;;3668   	return 0;
004618  2000              MOVS     r0,#0
;;;3669   }
00461a  4770              BX       lr
;;;3670   
                          ENDP

                  _Z24line_setDefaultTurnAngles PROC ; line_setDefaultTurnAngle(short)
;;;3671   int line_setDefaultTurnAngle(int16_t angle)
00461c  4958              LDR      r1,|L1.18304|
;;;3672   {	
;;;3673   	g_defaultTurnAngle = angle;
00461e  8708              STRH     r0,[r1,#0x38]
;;;3674   		
;;;3675   	// else we've just set the angle (for later)	
;;;3676   	return 0;
004620  2000              MOVS     r0,#0
;;;3677   }
004622  4770              BX       lr
;;;3678   
                          ENDP

                  _Z14line_setVectorh PROC ; line_setVector(unsigned char)
;;;3679   int line_setVector(uint8_t index)
004624  4956              LDR      r1,|L1.18304|
;;;3680   {
;;;3681   	g_manualVectorSelecIndextActive = true;
004626  2201              MOVS     r2,#1
004628  75ca              STRB     r2,[r1,#0x17]
;;;3682   	g_manualVectorSelectIndex = index;
00462a  7608              STRB     r0,[r1,#0x18]
;;;3683   	
;;;3684   	return 0;
00462c  2000              MOVS     r0,#0
;;;3685   }
00462e  4770              BX       lr
;;;3686   
                          ENDP

                  _Z19line_reversePrimaryv PROC ; line_reversePrimary()
;;;3687   int line_reversePrimary()
004630  4853              LDR      r0,|L1.18304|
;;;3688   {
;;;3689   	// can't reverse primary if it's not active
;;;3690   	if (!g_primaryActive)
004632  7b01              LDRB     r1,[r0,#0xc]  ; g_primaryActive
004634  2900              CMP      r1,#0
004636  d003              BEQ      |L1.17984|
;;;3691   		return -1;
;;;3692   	
;;;3693   	g_reversePrimary = true;
004638  2101              MOVS     r1,#1
00463a  7641              STRB     r1,[r0,#0x19]
;;;3694   	return 0;
00463c  2000              MOVS     r0,#0
;;;3695   }
00463e  4770              BX       lr
                  |L1.17984|
004640  f04f30ff          MOV      r0,#0xffffffff        ;3691
004644  4770              BX       lr
;;;3696   
                          ENDP

                  _Z17line_legoLineDataPhj PROC ; line_legoLineData(unsigned char*, unsigned)
;;;3697   int line_legoLineData(uint8_t *buf, uint32_t buflen)
004646  b570              PUSH     {r4-r6,lr}
;;;3698   {
004648  4603              MOV      r3,r0
;;;3699   #if 0
;;;3700   	buf[0] = 1;
;;;3701   	buf[1] = 2;
;;;3702   	buf[2] = 3;
;;;3703   	buf[3] = 4;
;;;3704   	
;;;3705   #else
;;;3706   	SimpleListNode<Tracker<DecodedBarCode> > *j;
;;;3707   	uint8_t codeVal;
;;;3708   	uint16_t maxy;
;;;3709   	Line2 *primary;
;;;3710   	uint32_t x;
;;;3711   	static uint8_t lastData[4];
;;;3712   
;;;3713   	// override these because LEGO mode doesn't support 
;;;3714   	//sg_delayedTurn = false;
;;;3715   	g_manualVectorSelect = false;
00464a  4e4d              LDR      r6,|L1.18304|
00464c  2500              MOVS     r5,#0
00464e  75b5              STRB     r5,[r6,#0x16]
;;;3716   	
;;;3717   	if (g_allMutex || !g_frameFlag) 
004650  7c70              LDRB     r0,[r6,#0x11]  ; g_frameFlag
004652  7cf1              LDRB     r1,[r6,#0x13]  ; g_allMutex
004654  4388              BICS     r0,r0,r1
004656  d006              BEQ      |L1.18022|
;;;3718   	{
;;;3719   		memcpy(buf, lastData, 4); // use last data
;;;3720   		return 4; // busy or no new eata
;;;3721   	}
;;;3722   	
;;;3723   	g_frameFlag = false;
004658  7475              STRB     r5,[r6,#0x11]
;;;3724   	
;;;3725   	buf[2] = (uint8_t)-1;
00465a  20ff              MOVS     r0,#0xff
00465c  7098              STRB     r0,[r3,#2]
;;;3726   	
;;;3727   	// only return primary line if we're tracking and primary line is in active (valid) state
;;;3728   	if (g_lineState==LINE_STATE_TRACKING && g_primaryActive)
00465e  7b71              LDRB     r1,[r6,#0xd]  ; g_lineState
004660  2901              CMP      r1,#1
004662  d004              BEQ      |L1.18030|
004664  e017              B        |L1.18070|
                  |L1.18022|
004666  6c30              LDR      r0,[r6,#0x40]         ;3719  ; lastData
004668  6018              STR      r0,[r3,#0]            ;3719
00466a  2004              MOVS     r0,#4                 ;3720
;;;3729   	{
;;;3730   		x = (g_goalPoint.m_x *128)/78; // scale to 0 to 128
;;;3731   		buf[0] = x;
;;;3732   		if (g_goalPoint.m_y > g_primaryPoint.m_y)
;;;3733   			buf[3] = 1;
;;;3734   		else
;;;3735   			buf[3] = 0;
;;;3736   	}
;;;3737   	else
;;;3738   	{
;;;3739   		buf[0] = (uint8_t)-1;
;;;3740   		buf[3] = 0;
;;;3741   	}
;;;3742   
;;;3743   	for (j=g_barCodeTrackersList.m_first, maxy=0, codeVal=(uint8_t)-1; j!=NULL; j=j->m_next)
;;;3744   	{
;;;3745   		if (j->m_object.m_events&TR_EVENT_VALIDATED)
;;;3746   		{
;;;3747   			if (maxy < j->m_object.m_object.m_outline.m_yOffset)
;;;3748   			{
;;;3749   				maxy = j->m_object.m_object.m_outline.m_yOffset;
;;;3750   				codeVal = j->m_object.m_object.m_val;
;;;3751   			}
;;;3752   		}
;;;3753   	}
;;;3754   	buf[1] = codeVal;
;;;3755   	
;;;3756   	
;;;3757   	primary = findLine(g_primaryLineIndex);
;;;3758   	if (primary)
;;;3759   	{			
;;;3760   		if (primary->m_i1)
;;;3761   			buf[2] = primary->m_i1->m_object.m_n;
;;;3762   		else if (primary->m_i0)
;;;3763   			buf[2] = primary->m_i0->m_object.m_n;
;;;3764   	}
;;;3765   	if (g_newIntersection)
;;;3766   		g_newIntersection = false;
;;;3767   	
;;;3768   	memcpy(lastData, buf, 4);
;;;3769   #endif
;;;3770   	
;;;3771   	return 4;
;;;3772   }
00466c  bd70              POP      {r4-r6,pc}
                  |L1.18030|
00466e  7b31              LDRB     r1,[r6,#0xc]          ;3728  ; g_primaryActive
004670  b189              CBZ      r1,|L1.18070|
004672  4943              LDR      r1,|L1.18304|
004674  3132              ADDS     r1,r1,#0x32           ;3730
004676  7808              LDRB     r0,[r1,#0]            ;3730  ; g_goalPoint
004678  01c0              LSLS     r0,r0,#7              ;3730
00467a  224e              MOVS     r2,#0x4e              ;3730
00467c  fbb0f0f2          UDIV     r0,r0,r2              ;3730
004680  7018              STRB     r0,[r3,#0]            ;3731
004682  7848              LDRB     r0,[r1,#1]            ;3732  ; g_goalPoint
004684  1c89              ADDS     r1,r1,#2              ;3732
004686  7849              LDRB     r1,[r1,#1]            ;3732  ; g_primaryPoint
004688  4288              CMP      r0,r1                 ;3732
00468a  d902              BLS      |L1.18066|
00468c  2001              MOVS     r0,#1                 ;3733
00468e  70d8              STRB     r0,[r3,#3]            ;3733
004690  e003              B        |L1.18074|
                  |L1.18066|
004692  70dd              STRB     r5,[r3,#3]            ;3735
004694  e001              B        |L1.18074|
                  |L1.18070|
004696  7018              STRB     r0,[r3,#0]            ;3739
004698  70dd              STRB     r5,[r3,#3]            ;3740
                  |L1.18074|
00469a  4838              LDR      r0,|L1.18300|
00469c  3048              ADDS     r0,r0,#0x48           ;3743
00469e  6801              LDR      r1,[r0,#0]            ;3743  ; g_barCodeTrackersList
0046a0  2200              MOVS     r2,#0                 ;3743
0046a2  24ff              MOVS     r4,#0xff              ;3743
0046a4  e008              B        |L1.18104|
                  |L1.18086|
0046a6  7888              LDRB     r0,[r1,#2]            ;3745
0046a8  0780              LSLS     r0,r0,#30             ;3745
0046aa  d504              BPL      |L1.18102|
0046ac  8ac8              LDRH     r0,[r1,#0x16]         ;3747
0046ae  4290              CMP      r0,r2                 ;3747
0046b0  d901              BLS      |L1.18102|
0046b2  4602              MOV      r2,r0                 ;3749
0046b4  7f0c              LDRB     r4,[r1,#0x1c]         ;3750
                  |L1.18102|
0046b6  6a49              LDR      r1,[r1,#0x24]         ;3743
                  |L1.18104|
0046b8  2900              CMP      r1,#0                 ;3743
0046ba  d1f4              BNE      |L1.18086|
0046bc  705c              STRB     r4,[r3,#1]            ;3754
0046be  7ab0              LDRB     r0,[r6,#0xa]          ;3757  ; g_primaryLineIndex
0046c0  f7fffffe          BL       _Z8findLineh ; findLine(unsigned char)
0046c4  b140              CBZ      r0,|L1.18136|
0046c6  68c1              LDR      r1,[r0,#0xc]          ;3760
0046c8  b111              CBZ      r1,|L1.18128|
0046ca  7888              LDRB     r0,[r1,#2]            ;3761
0046cc  7098              STRB     r0,[r3,#2]            ;3761
0046ce  e003              B        |L1.18136|
                  |L1.18128|
0046d0  6880              LDR      r0,[r0,#8]            ;3762
0046d2  b108              CBZ      r0,|L1.18136|
0046d4  7880              LDRB     r0,[r0,#2]            ;3763
0046d6  7098              STRB     r0,[r3,#2]            ;3763
                  |L1.18136|
0046d8  79f0              LDRB     r0,[r6,#7]            ;3765  ; g_newIntersection
0046da  b100              CBZ      r0,|L1.18142|
0046dc  71f5              STRB     r5,[r6,#7]            ;3766
                  |L1.18142|
0046de  6818              LDR      r0,[r3,#0]            ;3768
0046e0  6430              STR      r0,[r6,#0x40]         ;3768  ; lastData
0046e2  2004              MOVS     r0,#4                 ;3771
0046e4  bd70              POP      {r4-r6,pc}
;;;3773   
                          ENDP

                  __sti___8_line_cpp_5416574d PROC
0046e6  b510              PUSH     {r4,lr}               ;0
0046e8  4824              LDR      r0,|L1.18300|
0046ea  3824              SUBS     r0,r0,#0x24           ;0
0046ec  2400              MOVS     r4,#0                 ;0
0046ee  6044              STR      r4,[r0,#4]            ;0
0046f0  6004              STR      r4,[r0,#0]            ;0
0046f2  8104              STRH     r4,[r0,#8]            ;0
0046f4  4a23              LDR      r2,|L1.18308|
0046f6  4924              LDR      r1,|L1.18312|
0046f8  f7fffffe          BL       __aeabi_atexit
0046fc  481f              LDR      r0,|L1.18300|
0046fe  3818              SUBS     r0,r0,#0x18           ;0
004700  6044              STR      r4,[r0,#4]            ;0
004702  6004              STR      r4,[r0,#0]            ;0
004704  8104              STRH     r4,[r0,#8]            ;0
004706  4a1f              LDR      r2,|L1.18308|
004708  4920              LDR      r1,|L1.18316|
00470a  f7fffffe          BL       __aeabi_atexit
00470e  481b              LDR      r0,|L1.18300|
004710  380c              SUBS     r0,r0,#0xc            ;0
004712  6044              STR      r4,[r0,#4]            ;0
004714  6004              STR      r4,[r0,#0]            ;0
004716  8104              STRH     r4,[r0,#8]            ;0
004718  4a1a              LDR      r2,|L1.18308|
00471a  491d              LDR      r1,|L1.18320|
00471c  f7fffffe          BL       __aeabi_atexit
004720  4816              LDR      r0,|L1.18300|
004722  6044              STR      r4,[r0,#4]            ;0
004724  6004              STR      r4,[r0,#0]            ;0
004726  8104              STRH     r4,[r0,#8]            ;0
004728  4a16              LDR      r2,|L1.18308|
00472a  491a              LDR      r1,|L1.18324|
00472c  f7fffffe          BL       __aeabi_atexit
004730  4812              LDR      r0,|L1.18300|
004732  300c              ADDS     r0,r0,#0xc            ;0
004734  6044              STR      r4,[r0,#4]            ;0
004736  6004              STR      r4,[r0,#0]            ;0
004738  8104              STRH     r4,[r0,#8]            ;0
00473a  4a12              LDR      r2,|L1.18308|
00473c  4916              LDR      r1,|L1.18328|
00473e  f7fffffe          BL       __aeabi_atexit
004742  480e              LDR      r0,|L1.18300|
004744  f44f71fa          MOV      r1,#0x1f4             ;0
004748  3018              ADDS     r0,r0,#0x18           ;0
00474a  80c1              STRH     r1,[r0,#6]            ;0
00474c  8101              STRH     r1,[r0,#8]            ;0
00474e  2102              MOVS     r1,#2                 ;0
004750  7001              STRB     r1,[r0,#0]            ;0
004752  1ec9              SUBS     r1,r1,#3              ;0
004754  60c1              STR      r1,[r0,#0xc]          ;0
004756  6104              STR      r4,[r0,#0x10]         ;0
004758  7084              STRB     r4,[r0,#2]            ;0
00475a  70c4              STRB     r4,[r0,#3]            ;0
00475c  7284              STRB     r4,[r0,#0xa]          ;0
00475e  1d00              ADDS     r0,r0,#4              ;0
004760  f7fffffe          BL       setTimerMs
004764  4805              LDR      r0,|L1.18300|
004766  3048              ADDS     r0,r0,#0x48           ;0
004768  6044              STR      r4,[r0,#4]            ;0
00476a  6004              STR      r4,[r0,#0]            ;0
00476c  8104              STRH     r4,[r0,#8]            ;0
00476e  e8bd4010          POP      {r4,lr}               ;0
004772  4a04              LDR      r2,|L1.18308|
004774  4909              LDR      r1,|L1.18332|
004776  f7ffbffe          B.W      __aeabi_atexit
                          ENDP

00477a  0000              DCW      0x0000
                  |L1.18300|
                          DCD      ||.bss||+0x30
                  |L1.18304|
                          DCD      ||.data||
                  |L1.18308|
                          DCD      __dso_handle
                  |L1.18312|
                          DCD      _ZN10SimpleListI5Line2ED1Ev ; SimpleList<Line2>::~SimpleList()
                  |L1.18316|
                          DCD      _ZN10SimpleListI5PointED1Ev ; SimpleList<Point>::~SimpleList()
                  |L1.18320|
                          DCD      _ZN10SimpleListI5NadirED1Ev ; SimpleList<Nadir>::~SimpleList()
                  |L1.18324|
                          DCD      _ZN10SimpleListI12IntersectionED1Ev ; SimpleList<Intersection>::~SimpleList()
                  |L1.18328|
                          DCD      _ZN10SimpleListI7TrackerI5Line2EED1Ev ; SimpleList<Tracker<Line2>>::~SimpleList()
                  |L1.18332|
                          DCD      _ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev ; SimpleList<Tracker<DecodedBarCode>>::~SimpleList()

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_savedEqueue
                          %        12
                  g_linesList
                          %        12
                  g_nodesList
                          %        12
                  g_nadirsList
                          %        12
                  g_intersectionsList
                          %        12
                  g_lineTrackersList
                          %        12
                  g_primaryIntersection
                          %        48
                  g_barCodeTrackersList
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_module
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  40632045          DCB      "@c Expert @m 1 @M 15 Sets the distance between pixels w"
000004  78706572
000008  7420406d
00000c  20312040
000010  4d203135
000014  20536574
000018  73207468
00001c  65206469
000020  7374616e
000024  63652062
000028  65747765
00002c  656e2070
000030  6978656c
000034  732077  
000037  68656e20          DCB      "hen computing edges (default 4)",0
00003b  636f6d70
00003f  7574696e
000043  67206564
000047  67657320
00004b  28646566
00004f  61756c74
000053  20342900
000057  00                DCB      0
000058  40632054          DCB      "@c Tuning @m 1 @M 150 Sets edge detection threshold (de"
00005c  756e696e
000060  6720406d
000064  20312040
000068  4d203135
00006c  30205365
000070  74732065
000074  64676520
000078  64657465
00007c  6374696f
000080  6e207468
000084  72657368
000088  6f6c6420
00008c  286465  
00008f  6661756c          DCB      "fault 35)",0
000093  74203335
000097  2900    
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
00009c  40632045          DCB      "@c Expert @m 1 @M 25 Sets the distance to search when e"
0000a0  78706572
0000a4  7420406d
0000a8  20312040
0000ac  4d203235
0000b0  20536574
0000b4  73207468
0000b8  65206469
0000bc  7374616e
0000c0  63652074
0000c4  6f207365
0000c8  61726368
0000cc  20776865
0000d0  6e2065  
0000d3  78747261          DCB      "xtracting lines (default 13)",0
0000d7  6374696e
0000db  67206c69
0000df  6e657320
0000e3  28646566
0000e7  61756c74
0000eb  20313329
0000ef  00      
0000f0  40632045          DCB      "@c Expert @m 0 @M 25 Sets the search distance for mergi"
0000f4  78706572
0000f8  7420406d
0000fc  20302040
000100  4d203235
000104  20536574
000108  73207468
00010c  65207365
000110  61726368
000114  20646973
000118  74616e63
00011c  6520666f
000120  72206d65
000124  726769  
000127  6e67206c          DCB      "ng lines (default 6)",0
00012b  696e6573
00012f  20286465
000133  6661756c
000137  74203629
00013b  00      
00013c  40632045          DCB      "@c Expert @m 1 @M 10000 Sets the maximum distance betwe"
000140  78706572
000144  7420406d
000148  20312040
00014c  4d203130
000150  30303020
000154  53657473
000158  20746865
00015c  206d6178
000160  696d756d
000164  20646973
000168  74616e63
00016c  65206265
000170  747765  
000173  656e206c          DCB      "en lines for them to be considered the same line betwee"
000177  696e6573
00017b  20666f72
00017f  20746865
000183  6d20746f
000187  20626520
00018b  636f6e73
00018f  69646572
000193  65642074
000197  68652073
00019b  616d6520
00019f  6c696e65
0001a3  20626574
0001a7  776565  
0001aa  6e206672          DCB      "n frames (default 5000)",0
0001ae  616d6573
0001b2  20286465
0001b6  6661756c
0001ba  74203530
0001be  30302900
0001c2  00                DCB      0
0001c3  00                DCB      0
0001c4  40632054          DCB      "@c Tuning If this is set, Pixy will look for light line"
0001c8  756e696e
0001cc  67204966
0001d0  20746869
0001d4  73206973
0001d8  20736574
0001dc  2c205069
0001e0  78792077
0001e4  696c6c20
0001e8  6c6f6f6b
0001ec  20666f72
0001f0  206c6967
0001f4  6874206c
0001f8  696e65  
0001fb  73206f6e          DCB      "s on dark background.  If this is not set, Pixy will lo"
0001ff  20646172
000203  6b206261
000207  636b6772
00020b  6f756e64
00020f  2e202049
000213  66207468
000217  69732069
00021b  73206e6f
00021f  74207365
000223  742c2050
000227  69787920
00022b  77696c6c
00022f  206c6f  
000232  6f6b2066          DCB      "ok for dark lines on light background (default false)",0
000236  6f722064
00023a  61726b20
00023e  6c696e65
000242  73206f6e
000246  206c6967
00024a  68742062
00024e  61636b67
000252  726f756e
000256  64202864
00025a  65666175
00025e  6c742066
000262  616c7365
000266  2900    
000268  40632045          DCB      "@c Expert @m 0 @M 30 Sets the amount of noise filtering"
00026c  78706572
000270  7420406d
000274  20302040
000278  4d203330
00027c  20536574
000280  73207468
000284  6520616d
000288  6f756e74
00028c  206f6620
000290  6e6f6973
000294  65206669
000298  6c746572
00029c  696e67  
00029f  20666f72          DCB      " for line detection (default 1)",0
0002a3  206c696e
0002a7  65206465
0002ab  74656374
0002af  696f6e20
0002b3  28646566
0002b7  61756c74
0002bb  20312900
0002bf  00                DCB      0
0002c0  40632045          DCB      "@c Expert @m 0 @M 30 Sets the amount of noise filtering"
0002c4  78706572
0002c8  7420406d
0002cc  20302040
0002d0  4d203330
0002d4  20536574
0002d8  73207468
0002dc  6520616d
0002e0  6f756e74
0002e4  206f6620
0002e8  6e6f6973
0002ec  65206669
0002f0  6c746572
0002f4  696e67  
0002f7  20666f72          DCB      " for intersection detection (default 1)",0
0002fb  20696e74
0002ff  65727365
000303  6374696f
000307  6e206465
00030b  74656374
00030f  696f6e20
000313  28646566
000317  61756c74
00031b  20312900
00031f  00                DCB      0
000320  40632045          DCB      "@c Expert @m 0 @M 30 Sets the amount of noise filtering"
000324  78706572
000328  7420406d
00032c  20302040
000330  4d203330
000334  20536574
000338  73207468
00033c  6520616d
000340  6f756e74
000344  206f6620
000348  6e6f6973
00034c  65206669
000350  6c746572
000354  696e67  
000357  20666f72          DCB      " for barcode detection (default 1)",0
00035b  20626172
00035f  636f6465
000363  20646574
000367  65637469
00036b  6f6e2028
00036f  64656661
000373  756c7420
000377  312900  
00037a  00                DCB      0
00037b  00                DCB      0
00037c  40632045          DCB      "@c Expert Sets the turn angle that Pixy chooses by defa"
000380  78706572
000384  74205365
000388  74732074
00038c  68652074
000390  75726e20
000394  616e676c
000398  65207468
00039c  61742050
0003a0  69787920
0003a4  63686f6f
0003a8  73657320
0003ac  62792064
0003b0  656661  
0003b3  756c7420          DCB      "ult if next turn angle is not set.  Does not apply if D"
0003b7  6966206e
0003bb  65787420
0003bf  7475726e
0003c3  20616e67
0003c7  6c652069
0003cb  73206e6f
0003cf  74207365
0003d3  742e2020
0003d7  446f6573
0003db  206e6f74
0003df  20617070
0003e3  6c792069
0003e7  662044  
0003ea  656c6179          DCB      "elayed turn is set (default 0)",0
0003ee  65642074
0003f2  75726e20
0003f6  69732073
0003fa  65742028
0003fe  64656661
000402  756c7420
000406  302900  
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0
00040c  40632045          DCB      "@c Expert If true, Pixy will wait for client to choose "
000410  78706572
000414  74204966
000418  20747275
00041c  652c2050
000420  69787920
000424  77696c6c
000428  20776169
00042c  7420666f
000430  7220636c
000434  69656e74
000438  20746f20
00043c  63686f6f
000440  736520  
000443  7475726e          DCB      "turn direction after detecting intersection, otherwise "
000447  20646972
00044b  65637469
00044f  6f6e2061
000453  66746572
000457  20646574
00045b  65637469
00045f  6e672069
000463  6e746572
000467  73656374
00046b  696f6e2c
00046f  206f7468
000473  65727769
000477  736520  
00047a  50697879          DCB      "Pixy will choose default turn angle or next turn angle "
00047e  2077696c
000482  6c206368
000486  6f6f7365
00048a  20646566
00048e  61756c74
000492  20747572
000496  6e20616e
00049a  676c6520
00049e  6f72206e
0004a2  65787420
0004a6  7475726e
0004aa  20616e67
0004ae  6c6520  
0004b1  61667465          DCB      "after detecting intersection. (default false)",0
0004b5  72206465
0004b9  74656374
0004bd  696e6720
0004c1  696e7465
0004c5  72736563
0004c9  74696f6e
0004cd  2e202864
0004d1  65666175
0004d5  6c742066
0004d9  616c7365
0004dd  2900    
0004df  00                DCB      0
0004e0  40632045          DCB      "@c Expert If false, Pixy will automatically choose the "
0004e4  78706572
0004e8  74204966
0004ec  2066616c
0004f0  73652c20
0004f4  50697879
0004f8  2077696c
0004fc  6c206175
000500  746f6d61
000504  74696361
000508  6c6c7920
00050c  63686f6f
000510  73652074
000514  686520  
000517  7072696d          DCB      "primary vector for tracking. If true, the user selects "
00051b  61727920
00051f  76656374
000523  6f722066
000527  6f722074
00052b  7261636b
00052f  696e672e
000533  20496620
000537  74727565
00053b  2c207468
00053f  65207573
000543  65722073
000547  656c6563
00054b  747320  
00054e  74686520          DCB      "the primary vectory by calling SelectVector (default fa"
000552  7072696d
000556  61727920
00055a  76656374
00055e  6f727920
000562  62792063
000566  616c6c69
00056a  6e672053
00056e  656c6563
000572  74566563
000576  746f7220
00057a  28646566
00057e  61756c74
000582  206661  
000585  6c736529          DCB      "lse)",0
000589  00      
00058a  00                DCB      0
00058b  00                DCB      0
00058c  40632042          DCB      "@c Barcode_Labels Sets the label for barcodes that matc"
000590  6172636f
000594  64655f4c
000598  6162656c
00059c  73205365
0005a0  74732074
0005a4  6865206c
0005a8  6162656c
0005ac  20666f72
0005b0  20626172
0005b4  636f6465
0005b8  73207468
0005bc  6174206d
0005c0  617463  
0005c3  68206261          DCB      "h barcode pattern %d.",0
0005c7  72636f64
0005cb  65207061
0005cf  74746572
0005d3  6e202564
0005d7  2e00    

                          AREA ||.data||, DATA, ALIGN=2

                  g_whiteLine
000000  00                DCB      0x00
                  g_go
000001  00                DCB      0x00
                  g_repeat
000002  00                DCB      0x00
                  g_pointsPerSeg
000003  00                DCB      0x00
                  g_lineIndex
000004  00                DCB      0x00
                  g_barcodeIndex
000005  00                DCB      0x00
                  g_votedBarcodeIndex
000006  00                DCB      0x00
                  g_newIntersection
000007  00                DCB      0x00
                  g_barCodeTrackerIndex
000008  00                DCB      0x00
                  g_lineTrackerIndex
000009  00                DCB      0x00
                  g_primaryLineIndex
00000a  00                DCB      0x00
                  g_primaryPointMap
00000b  00                DCB      0x00
                  g_primaryActive
00000c  00                DCB      0x00
                  g_lineState
00000d  00                DCB      0x00
                  g_renderMode
00000e  00                DCB      0x00
                  g_lineFiltering
00000f  00                DCB      0x00
                  g_barcodeFiltering
000010  00                DCB      0x00
                  g_frameFlag
000011  00                DCB      0x00
                  g_primaryMutex
000012  00                DCB      0x00
                  g_allMutex
000013  00                DCB      0x00
                  g_delayedTurn
000014  00                DCB      0x00
                  g_newTurnAngle
000015  00                DCB      0x00
                  g_manualVectorSelect
000016  00                DCB      0x00
                  g_manualVectorSelecIndextActive
000017  00                DCB      0x00
                  g_manualVectorSelectIndex
000018  00                DCB      0x00
                  g_reversePrimary
000019  00                DCB      0x00
                  g_getEdgesM0
00001a  ffff              DCW      0xffff
                  g_setEdgeParamsM0
00001c  ffff              DCW      0xffff
                  g_minLineWidth
00001e  0000              DCB      0x00,0x00
                  g_maxLineWidth
000020  0000              DCB      0x00,0x00
                  g_maxMergeDist
000022  0000              DCB      0x00,0x00
                  g_extractionDist
000024  0000              DCB      0x00,0x00
                  g_dist
000026  0000              DCB      0x00,0x00
                  g_thresh
000028  0000              DCB      0x00,0x00
                  g_hThresh
00002a  0000              DCB      0x00,0x00
                  g_lineSegIndex
00002c  0000              DCB      0x00,0x00
                  g_maxCodeDist
00002e  0000              DCB      0x00,0x00
                  g_minVotingThreshold
000030  0000              DCB      0x00,0x00
                  g_goalPoint
000032  0000              DCB      0x00,0x00
                  g_primaryPoint
000034  0000              DCB      0x00,0x00
                  g_nextTurnAngle
000036  0000              DCB      0x00,0x00
                  g_defaultTurnAngle
000038  00000000          DCB      0x00,0x00,0x00,0x00
                  n
                          DCD      0x00000000
                  lastData
                          DCD      0x00000000
                  g_equeue
                          DCD      0x00000000
                  g_lineBuf
                          DCD      0x00000000
                  g_minLineLength2
                          DCD      0x00000000
                  g_minLineLength
                          DCD      0x00000000
                  g_lineGrid
                          DCD      0x00000000
                  g_lineGridMem
                          DCD      0x00000000
                  g_lineSegs
                          DCD      0x00000000
                  g_lineSegsMem
                          DCD      0x00000000
                  g_maxError
                          DCD      0x00000000
                  g_lines
                          DCD      0x00000000
                  g_maxSegTanAngle
                          DCD      0x00000000
                  g_maxEquivTanAngle
                          DCD      0x00000000
                  g_maxTrackingTanAngle
                          DCD      0x00000000
                  g_candidateBarcodes
                          DCD      0x00000000
                  g_votedBarcodes
                          DCD      0x00000000
                  g_votedBarcodesMem
                          DCD      0x00000000
                  g_maxLineCompare
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_line_cpp_5416574d

                          AREA ||t._ZN10SimpleListI5PointE3addERKS0_||, COMGROUP=_ZN10SimpleListI5PointE3addERKS0_, CODE, READONLY, ALIGN=2

                  _ZN10SimpleListI5PointE3addERKS0_ PROC ; SimpleList<Point>::add(const Point&)
;;;50     	
;;;51     	SimpleListNode<Object> *add(const Object &object)
000000  b570              PUSH     {r4-r6,lr}
;;;52     	{
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;53     		SimpleListNode<Object> *node = new (std::nothrow) SimpleListNode<Object>;
000006  490b              LDR      r1,|L21.52|
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
00000e  b108              CBZ      r0,|L21.20|
000010  2100              MOVS     r1,#0
000012  6041              STR      r1,[r0,#4]
                  |L21.20|
;;;54     
;;;55     		if (node==NULL)
000014  b150              CBZ      r0,|L21.44|
;;;56     			return NULL;
;;;57     		
;;;58     		node->m_object = object;
000016  8829              LDRH     r1,[r5,#0]
000018  8001              STRH     r1,[r0,#0]
00001a  8921              LDRH     r1,[r4,#8]
00001c  1c49              ADDS     r1,r1,#1
00001e  8121              STRH     r1,[r4,#8]
000020  6821              LDR      r1,[r4,#0]
000022  b129              CBZ      r1,|L21.48|
000024  6862              LDR      r2,[r4,#4]
000026  6050              STR      r0,[r2,#4]
                  |L21.40|
000028  6060              STR      r0,[r4,#4]
;;;59     		add(node);	
;;;60     
;;;61     		return node;
;;;62     	}
00002a  bd70              POP      {r4-r6,pc}
                  |L21.44|
00002c  2000              MOVS     r0,#0                 ;56
00002e  bd70              POP      {r4-r6,pc}
                  |L21.48|
000030  6020              STR      r0,[r4,#0]
000032  e7f9              B        |L21.40|
;;;63     	
                          ENDP

                  |L21.52|
                          DCD      _ZSt7nothrow ; std::nothrow

                          AREA ||area_number.22||, COMGROUP=_ZN10SimpleListI5PointE3addERKS0_, LINKORDER=||t._ZN10SimpleListI5PointE3addERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5PointE3addERKS0_||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5Line2E3addERKS0_||, COMGROUP=_ZN10SimpleListI5Line2E3addERKS0_, CODE, READONLY, ALIGN=2

                  _ZN10SimpleListI5Line2E3addERKS0_ PROC ; SimpleList<Line2>::add(const Line2&)
;;;50     	
;;;51     	SimpleListNode<Object> *add(const Object &object)
000000  b570              PUSH     {r4-r6,lr}
;;;52     	{
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;53     		SimpleListNode<Object> *node = new (std::nothrow) SimpleListNode<Object>;
000006  490f              LDR      r1,|L28.68|
000008  2018              MOVS     r0,#0x18
00000a  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
00000e  b118              CBZ      r0,|L28.24|
000010  f7fffffe          BL       _ZN5Line2C1Ev ; Line2::Line2()
000014  2100              MOVS     r1,#0
000016  6141              STR      r1,[r0,#0x14]
                  |L28.24|
000018  4605              MOV      r5,r0
;;;54     
;;;55     		if (node==NULL)
00001a  b175              CBZ      r5,|L28.58|
;;;56     			return NULL;
;;;57     		
;;;58     		node->m_object = object;
00001c  2214              MOVS     r2,#0x14
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       __aeabi_memcpy4
000026  8920              LDRH     r0,[r4,#8]
000028  1c40              ADDS     r0,r0,#1
00002a  8120              STRH     r0,[r4,#8]
00002c  6820              LDR      r0,[r4,#0]
00002e  b130              CBZ      r0,|L28.62|
000030  6861              LDR      r1,[r4,#4]
000032  614d              STR      r5,[r1,#0x14]
                  |L28.52|
000034  6065              STR      r5,[r4,#4]
;;;59     		add(node);	
;;;60     
;;;61     		return node;
000036  4628              MOV      r0,r5
;;;62     	}
000038  bd70              POP      {r4-r6,pc}
                  |L28.58|
00003a  2000              MOVS     r0,#0                 ;56
00003c  bd70              POP      {r4-r6,pc}
                  |L28.62|
00003e  6025              STR      r5,[r4,#0]
000040  e7f8              B        |L28.52|
;;;63     	
                          ENDP

000042  0000              DCW      0x0000
                  |L28.68|
                          DCD      _ZSt7nothrow ; std::nothrow

                          AREA ||area_number.29||, COMGROUP=_ZN10SimpleListI5Line2E3addERKS0_, LINKORDER=||t._ZN10SimpleListI5Line2E3addERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5Line2E3addERKS0_||
                          DCD      0x00000001

                          AREA ||i._ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh||, COMGROUP=_ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh, CODE, READONLY, ALIGN=1

                  _ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh PROC ; Intersection::addLine(SimpleListNode<Line2>*, SimpleListNode<Intersection>*, unsigned char)
;;;260    	
;;;261    	bool addLine(SimpleListNode<Line2> *linen, SimpleListNode<Intersection> *intern, uint8_t pi)
000000  b570              PUSH     {r4-r6,lr}
;;;262    	{
;;;263    		uint8_t i;
;;;264    		
;;;265    		if (linen==NULL || intern==NULL || m_n>=LINE_MAX_INTERSECTION_LINES)
000002  2900              CMP      r1,#0
000004  d003              BEQ      |L35.14|
000006  b112              CBZ      r2,|L35.14|
000008  7885              LDRB     r5,[r0,#2]
00000a  2d08              CMP      r5,#8
00000c  d301              BCC      |L35.18|
                  |L35.14|
;;;266    			return false;
00000e  2000              MOVS     r0,#0
;;;267    		for (i=0; i<m_n; i++)
;;;268    		{
;;;269    			if (m_lines[i]==linen)
;;;270    				return false;
;;;271    		}
;;;272    		m_lines[m_n++] = linen;
;;;273    		if (pi==0)
;;;274    			linen->m_object.m_i0 = intern;
;;;275    		else
;;;276    			linen->m_object.m_i1 = intern;
;;;277    		return true;
;;;278    	}
000010  bd70              POP      {r4-r6,pc}
                  |L35.18|
000012  2400              MOVS     r4,#0                 ;267
000014  e008              B        |L35.40|
                  |L35.22|
000016  eb000684          ADD      r6,r0,r4,LSL #2       ;269
00001a  6876              LDR      r6,[r6,#4]            ;269
00001c  428e              CMP      r6,r1                 ;269
00001e  d101              BNE      |L35.36|
000020  2000              MOVS     r0,#0                 ;270
000022  bd70              POP      {r4-r6,pc}
                  |L35.36|
000024  1c64              ADDS     r4,r4,#1              ;267
000026  b2e4              UXTB     r4,r4                 ;267
                  |L35.40|
000028  42a5              CMP      r5,r4                 ;267
00002a  d8f4              BHI      |L35.22|
00002c  1c6c              ADDS     r4,r5,#1              ;272
00002e  7084              STRB     r4,[r0,#2]            ;272
000030  eb000085          ADD      r0,r0,r5,LSL #2       ;272
000034  6041              STR      r1,[r0,#4]            ;272
000036  b113              CBZ      r3,|L35.62|
000038  60ca              STR      r2,[r1,#0xc]          ;276
                  |L35.58|
00003a  2001              MOVS     r0,#1                 ;277
00003c  bd70              POP      {r4-r6,pc}
                  |L35.62|
00003e  608a              STR      r2,[r1,#8]            ;274
000040  e7fb              B        |L35.58|
;;;279    	
                          ENDP


                          AREA ||area_number.36||, COMGROUP=_ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh, LINKORDER=||i._ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12Intersection7addLineEP14SimpleListNodeI5Line2EPS0_IS_Eh||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E||, COMGROUP=_ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E PROC ; SimpleList<Line2>::remove(SimpleListNode<Line2>*)
;;;73     	
;;;74     	bool remove(SimpleListNode<Object> *node)
000000  b570              PUSH     {r4-r6,lr}
;;;75     	{
000002  4604              MOV      r4,r0
;;;76     		SimpleListNode<Object> *n, *nprev=NULL;
000004  2200              MOVS     r2,#0
;;;77     		bool result = false;
000006  2300              MOVS     r3,#0
;;;78     		n = m_first;
000008  6820              LDR      r0,[r4,#0]
00000a  4605              MOV      r5,r0
00000c  e015              B        |L42.58|
                  |L42.14|
;;;79     		while(n)
;;;80     		{
;;;81     			if (n==node)
00000e  4288              CMP      r0,r1
000010  d111              BNE      |L42.54|
;;;82     			{
;;;83     				if (node==m_first)
000012  428d              CMP      r5,r1
000014  d101              BNE      |L42.26|
;;;84     					m_first = node->m_next;
000016  694b              LDR      r3,[r1,#0x14]
000018  6023              STR      r3,[r4,#0]
                  |L42.26|
;;;85     				if (node==m_last)
00001a  6863              LDR      r3,[r4,#4]
00001c  428b              CMP      r3,r1
00001e  d100              BNE      |L42.34|
;;;86     					m_last = nprev;
000020  6062              STR      r2,[r4,#4]
                  |L42.34|
;;;87     				if (nprev)
000022  b10a              CBZ      r2,|L42.40|
;;;88     					nprev->m_next = n->m_next;
000024  6941              LDR      r1,[r0,#0x14]
000026  6151              STR      r1,[r2,#0x14]
                  |L42.40|
;;;89     				delete n;
000028  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;90     				result = true;
00002c  2301              MOVS     r3,#1
;;;91     				m_size--;
00002e  8920              LDRH     r0,[r4,#8]
000030  1e40              SUBS     r0,r0,#1
000032  8120              STRH     r0,[r4,#8]
;;;92     				break;
000034  e003              B        |L42.62|
                  |L42.54|
;;;93     			}
;;;94     			nprev = n;
000036  4602              MOV      r2,r0
;;;95     			n = n->m_next;
000038  6940              LDR      r0,[r0,#0x14]
                  |L42.58|
00003a  2800              CMP      r0,#0                 ;79
00003c  d1e7              BNE      |L42.14|
                  |L42.62|
;;;96     		}
;;;97     		return result;
00003e  4618              MOV      r0,r3
;;;98     	}
000040  bd70              POP      {r4-r6,pc}
;;;99     	
                          ENDP


                          AREA ||area_number.43||, COMGROUP=_ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E, LINKORDER=||t._ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5Line2E6removeEP14SimpleListNodeIS0_E||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E||, COMGROUP=_ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E PROC ; SimpleList<Intersection>::remove(SimpleListNode<Intersection>*)
;;;73     	
;;;74     	bool remove(SimpleListNode<Object> *node)
000000  b570              PUSH     {r4-r6,lr}
;;;75     	{
000002  4604              MOV      r4,r0
;;;76     		SimpleListNode<Object> *n, *nprev=NULL;
000004  2200              MOVS     r2,#0
;;;77     		bool result = false;
000006  2300              MOVS     r3,#0
;;;78     		n = m_first;
000008  6820              LDR      r0,[r4,#0]
00000a  4605              MOV      r5,r0
00000c  e015              B        |L49.58|
                  |L49.14|
;;;79     		while(n)
;;;80     		{
;;;81     			if (n==node)
00000e  4288              CMP      r0,r1
000010  d111              BNE      |L49.54|
;;;82     			{
;;;83     				if (node==m_first)
000012  428d              CMP      r5,r1
000014  d101              BNE      |L49.26|
;;;84     					m_first = node->m_next;
000016  6a4b              LDR      r3,[r1,#0x24]
000018  6023              STR      r3,[r4,#0]
                  |L49.26|
;;;85     				if (node==m_last)
00001a  6863              LDR      r3,[r4,#4]
00001c  428b              CMP      r3,r1
00001e  d100              BNE      |L49.34|
;;;86     					m_last = nprev;
000020  6062              STR      r2,[r4,#4]
                  |L49.34|
;;;87     				if (nprev)
000022  b10a              CBZ      r2,|L49.40|
;;;88     					nprev->m_next = n->m_next;
000024  6a41              LDR      r1,[r0,#0x24]
000026  6251              STR      r1,[r2,#0x24]
                  |L49.40|
;;;89     				delete n;
000028  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;90     				result = true;
00002c  2301              MOVS     r3,#1
;;;91     				m_size--;
00002e  8920              LDRH     r0,[r4,#8]
000030  1e40              SUBS     r0,r0,#1
000032  8120              STRH     r0,[r4,#8]
;;;92     				break;
000034  e003              B        |L49.62|
                  |L49.54|
;;;93     			}
;;;94     			nprev = n;
000036  4602              MOV      r2,r0
;;;95     			n = n->m_next;
000038  6a40              LDR      r0,[r0,#0x24]
                  |L49.58|
00003a  2800              CMP      r0,#0                 ;79
00003c  d1e7              BNE      |L49.14|
                  |L49.62|
;;;96     		}
;;;97     		return result;
00003e  4618              MOV      r0,r3
;;;98     	}
000040  bd70              POP      {r4-r6,pc}
;;;99     	
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E, LINKORDER=||t._ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI12IntersectionE6removeEP14SimpleListNodeIS0_E||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5Line2E6updateEv||, COMGROUP=_ZN7TrackerI5Line2E6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5Line2E6updateEv PROC ; Tracker<Line2>::update()
;;;94     	
;;;95     	uint8_t update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96     	{	
000004  4604              MOV      r4,r0
;;;97     		uint8_t events = 0;
000006  2500              MOVS     r5,#0
;;;98     		bool success = m_minVal!=TR_MAXVAL;
000008  68e0              LDR      r0,[r4,#0xc]
00000a  1c40              ADDS     r0,r0,#1
00000c  d001              BEQ      |L56.18|
00000e  2601              MOVS     r6,#1
000010  e000              B        |L56.20|
                  |L56.18|
000012  2600              MOVS     r6,#0
                  |L56.20|
;;;99     
;;;100    		if (success)
000014  b12e              CBZ      r6,|L56.34|
;;;101    			m_object = *m_minObject;
000016  2214              MOVS     r2,#0x14
000018  f1040014          ADD      r0,r4,#0x14
00001c  6921              LDR      r1,[r4,#0x10]
00001e  f7fffffe          BL       __aeabi_memcpy4
                  |L56.34|
;;;102    		switch(m_state)
000022  7820              LDRB     r0,[r4,#0]
000024  2703              MOVS     r7,#3
000026  b388              CBZ      r0,|L56.140|
000028  f04f0800          MOV      r8,#0
00002c  2801              CMP      r0,#1
00002e  d04a              BEQ      |L56.198|
000030  2802              CMP      r0,#2
000032  d01c              BEQ      |L56.110|
000034  2803              CMP      r0,#3
000036  d008              BEQ      |L56.74|
;;;103    		{
;;;104    			case TR_INVALID:
;;;105    				if (success)
;;;106    				{
;;;107    					if (m_leadingThresh==0)
;;;108    					{
;;;109    						m_state = TR_VALID;
;;;110    						events |= TR_EVENT_VALIDATED;
;;;111    						m_events |= TR_EVENT_VALIDATED;
;;;112    					}
;;;113    					else
;;;114    					{
;;;115    						setTimerMs(&m_timer);
;;;116    						m_state = TR_LEADING;
;;;117    					}
;;;118    				}
;;;119    				break;
;;;120    			
;;;121    			case TR_LEADING:
;;;122    				if (success)
;;;123    				{
;;;124    					if (getTimerMs(m_timer)>=m_leadingThresh)
;;;125    					{
;;;126    						m_state = TR_VALID;
;;;127    						events |= TR_EVENT_VALIDATED;
;;;128    						m_events |= TR_EVENT_VALIDATED;
;;;129    					}
;;;130    				}
;;;131    				else
;;;132    				{
;;;133    					m_state = TR_INVALID;
;;;134    					events |= TR_EVENT_INVALIDATED;
;;;135    					m_events |= TR_EVENT_INVALIDATED;
;;;136    				}
;;;137    				break;
;;;138    			
;;;139    			case TR_VALID:
;;;140    				if (!success)
;;;141    				{
;;;142    					if (m_trailingThresh==0)
;;;143    					{
;;;144    						m_state = TR_INVALID;
;;;145    						events |= TR_EVENT_INVALIDATED;
;;;146    						m_events |= TR_EVENT_INVALIDATED;
;;;147    					}
;;;148    					else
;;;149    					{
;;;150    						setTimerMs(&m_timer);
;;;151    						m_state = TR_TRAILING;
;;;152    					}
;;;153    				}
;;;154    				if (m_age<TR_MAXAGE)
;;;155    					m_age++;				
;;;156    				break;
;;;157    			
;;;158    			case TR_TRAILING:
;;;159    				if (success)
;;;160    				{
;;;161    					m_state = TR_VALID;
;;;162    					events |= TR_EVENT_VALIDATED;
;;;163    					m_events |= TR_EVENT_VALIDATED;
;;;164    				}
;;;165    				else
;;;166    				{
;;;167    					if (getTimerMs(m_timer)>=m_trailingThresh)
;;;168    					{
;;;169    						m_state = TR_INVALID;
;;;170    						events |= TR_EVENT_INVALIDATED;
;;;171    						m_events |= TR_EVENT_INVALIDATED;
;;;172    					}
;;;173    				}
;;;174    				if (m_age<TR_MAXAGE)
;;;175    					m_age++;
;;;176    				break;
;;;177    			
;;;178    			default:
;;;179    				m_state = TR_INVALID;
000038  7027              STRB     r7,[r4,#0]
;;;180    				events |= TR_EVENT_INVALIDATED;
00003a  2501              MOVS     r5,#1
;;;181    				m_events |= TR_EVENT_INVALIDATED;
00003c  78a0              LDRB     r0,[r4,#2]
00003e  f0400001          ORR      r0,r0,#1
000042  70a0              STRB     r0,[r4,#2]
                  |L56.68|
;;;182    		}
;;;183    		return events;
000044  4628              MOV      r0,r5
;;;184    	}
000046  e8bd81f0          POP      {r4-r8,pc}
                  |L56.74|
00004a  2e00              CMP      r6,#0                 ;105
00004c  d0fa              BEQ      |L56.68|
00004e  88e0              LDRH     r0,[r4,#6]            ;107
000050  b128              CBZ      r0,|L56.94|
000052  1d20              ADDS     r0,r4,#4              ;115
000054  f7fffffe          BL       setTimerMs
000058  2002              MOVS     r0,#2                 ;116
00005a  7020              STRB     r0,[r4,#0]            ;116
00005c  e7f2              B        |L56.68|
                  |L56.94|
00005e  f8848000          STRB     r8,[r4,#0]            ;109
000062  2502              MOVS     r5,#2                 ;110
000064  78a0              LDRB     r0,[r4,#2]            ;111
000066  f0400002          ORR      r0,r0,#2              ;111
00006a  70a0              STRB     r0,[r4,#2]            ;111
00006c  e7ea              B        |L56.68|
                  |L56.110|
00006e  b176              CBZ      r6,|L56.142|
000070  88a0              LDRH     r0,[r4,#4]            ;124
000072  f7fffffe          BL       getTimerMs
000076  88e1              LDRH     r1,[r4,#6]            ;124
000078  4288              CMP      r0,r1                 ;124
00007a  d3e3              BCC      |L56.68|
00007c  f8848000          STRB     r8,[r4,#0]            ;126
000080  2502              MOVS     r5,#2                 ;127
000082  78a0              LDRB     r0,[r4,#2]            ;128
000084  f0400002          ORR      r0,r0,#2              ;128
000088  70a0              STRB     r0,[r4,#2]            ;128
00008a  e7db              B        |L56.68|
                  |L56.140|
00008c  e006              B        |L56.156|
                  |L56.142|
00008e  7027              STRB     r7,[r4,#0]            ;133
000090  2501              MOVS     r5,#1                 ;134
000092  78a0              LDRB     r0,[r4,#2]            ;135
000094  f0400001          ORR      r0,r0,#1              ;135
000098  70a0              STRB     r0,[r4,#2]            ;135
00009a  e7d3              B        |L56.68|
                  |L56.156|
00009c  b936              CBNZ     r6,|L56.172|
00009e  8920              LDRH     r0,[r4,#8]            ;142
0000a0  b150              CBZ      r0,|L56.184|
0000a2  1d20              ADDS     r0,r4,#4              ;150
0000a4  f7fffffe          BL       setTimerMs
0000a8  2001              MOVS     r0,#1                 ;151
0000aa  7020              STRB     r0,[r4,#0]            ;151
                  |L56.172|
0000ac  7aa0              LDRB     r0,[r4,#0xa]          ;154
0000ae  28ff              CMP      r0,#0xff              ;154
0000b0  d2c8              BCS      |L56.68|
0000b2  1c40              ADDS     r0,r0,#1              ;155
0000b4  72a0              STRB     r0,[r4,#0xa]          ;155
0000b6  e7c5              B        |L56.68|
                  |L56.184|
0000b8  7027              STRB     r7,[r4,#0]            ;144
0000ba  2501              MOVS     r5,#1                 ;145
0000bc  78a0              LDRB     r0,[r4,#2]            ;146
0000be  f0400001          ORR      r0,r0,#1              ;146
0000c2  70a0              STRB     r0,[r4,#2]            ;146
0000c4  e7f2              B        |L56.172|
                  |L56.198|
0000c6  b13e              CBZ      r6,|L56.216|
0000c8  f8848000          STRB     r8,[r4,#0]            ;161
0000cc  2502              MOVS     r5,#2                 ;162
0000ce  78a0              LDRB     r0,[r4,#2]            ;163
0000d0  f0400002          ORR      r0,r0,#2              ;163
0000d4  70a0              STRB     r0,[r4,#2]            ;163
0000d6  e00b              B        |L56.240|
                  |L56.216|
0000d8  88a0              LDRH     r0,[r4,#4]            ;167
0000da  f7fffffe          BL       getTimerMs
0000de  8921              LDRH     r1,[r4,#8]            ;167
0000e0  4288              CMP      r0,r1                 ;167
0000e2  d305              BCC      |L56.240|
0000e4  7027              STRB     r7,[r4,#0]            ;169
0000e6  2501              MOVS     r5,#1                 ;170
0000e8  78a0              LDRB     r0,[r4,#2]            ;171
0000ea  f0400001          ORR      r0,r0,#1              ;171
0000ee  70a0              STRB     r0,[r4,#2]            ;171
                  |L56.240|
0000f0  7aa0              LDRB     r0,[r4,#0xa]          ;174
0000f2  28ff              CMP      r0,#0xff              ;174
0000f4  d2a6              BCS      |L56.68|
0000f6  1c40              ADDS     r0,r0,#1              ;175
0000f8  72a0              STRB     r0,[r4,#0xa]          ;175
0000fa  e7a3              B        |L56.68|
;;;185    	
                          ENDP


                          AREA ||area_number.57||, COMGROUP=_ZN7TrackerI5Line2E6updateEv, LINKORDER=||t._ZN7TrackerI5Line2E6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5Line2E6updateEv||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI14DecodedBarCodeE6updateEv||, COMGROUP=_ZN7TrackerI14DecodedBarCodeE6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI14DecodedBarCodeE6updateEv PROC ; Tracker<DecodedBarCode>::update()
;;;94     	
;;;95     	uint8_t update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96     	{	
000004  4604              MOV      r4,r0
;;;97     		uint8_t events = 0;
000006  2500              MOVS     r5,#0
;;;98     		bool success = m_minVal!=TR_MAXVAL;
000008  68e0              LDR      r0,[r4,#0xc]
00000a  1c40              ADDS     r0,r0,#1
00000c  d001              BEQ      |L63.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L63.20|
                  |L63.18|
000012  2000              MOVS     r0,#0
                  |L63.20|
;;;99     
;;;100    		if (success)
000014  b138              CBZ      r0,|L63.38|
;;;101    			m_object = *m_minObject;
000016  6921              LDR      r1,[r4,#0x10]
000018  e891004c          LDM      r1,{r2,r3,r6}
00001c  68c9              LDR      r1,[r1,#0xc]
00001e  e9c43606          STRD     r3,r6,[r4,#0x18]
000022  6162              STR      r2,[r4,#0x14]
000024  6221              STR      r1,[r4,#0x20]
                  |L63.38|
;;;102    		switch(m_state)
000026  7821              LDRB     r1,[r4,#0]
000028  2603              MOVS     r6,#3
00002a  b371              CBZ      r1,|L63.138|
00002c  2700              MOVS     r7,#0
00002e  2901              CMP      r1,#1
000030  d048              BEQ      |L63.196|
000032  2902              CMP      r1,#2
000034  d01b              BEQ      |L63.110|
000036  2903              CMP      r1,#3
000038  d008              BEQ      |L63.76|
;;;103    		{
;;;104    			case TR_INVALID:
;;;105    				if (success)
;;;106    				{
;;;107    					if (m_leadingThresh==0)
;;;108    					{
;;;109    						m_state = TR_VALID;
;;;110    						events |= TR_EVENT_VALIDATED;
;;;111    						m_events |= TR_EVENT_VALIDATED;
;;;112    					}
;;;113    					else
;;;114    					{
;;;115    						setTimerMs(&m_timer);
;;;116    						m_state = TR_LEADING;
;;;117    					}
;;;118    				}
;;;119    				break;
;;;120    			
;;;121    			case TR_LEADING:
;;;122    				if (success)
;;;123    				{
;;;124    					if (getTimerMs(m_timer)>=m_leadingThresh)
;;;125    					{
;;;126    						m_state = TR_VALID;
;;;127    						events |= TR_EVENT_VALIDATED;
;;;128    						m_events |= TR_EVENT_VALIDATED;
;;;129    					}
;;;130    				}
;;;131    				else
;;;132    				{
;;;133    					m_state = TR_INVALID;
;;;134    					events |= TR_EVENT_INVALIDATED;
;;;135    					m_events |= TR_EVENT_INVALIDATED;
;;;136    				}
;;;137    				break;
;;;138    			
;;;139    			case TR_VALID:
;;;140    				if (!success)
;;;141    				{
;;;142    					if (m_trailingThresh==0)
;;;143    					{
;;;144    						m_state = TR_INVALID;
;;;145    						events |= TR_EVENT_INVALIDATED;
;;;146    						m_events |= TR_EVENT_INVALIDATED;
;;;147    					}
;;;148    					else
;;;149    					{
;;;150    						setTimerMs(&m_timer);
;;;151    						m_state = TR_TRAILING;
;;;152    					}
;;;153    				}
;;;154    				if (m_age<TR_MAXAGE)
;;;155    					m_age++;				
;;;156    				break;
;;;157    			
;;;158    			case TR_TRAILING:
;;;159    				if (success)
;;;160    				{
;;;161    					m_state = TR_VALID;
;;;162    					events |= TR_EVENT_VALIDATED;
;;;163    					m_events |= TR_EVENT_VALIDATED;
;;;164    				}
;;;165    				else
;;;166    				{
;;;167    					if (getTimerMs(m_timer)>=m_trailingThresh)
;;;168    					{
;;;169    						m_state = TR_INVALID;
;;;170    						events |= TR_EVENT_INVALIDATED;
;;;171    						m_events |= TR_EVENT_INVALIDATED;
;;;172    					}
;;;173    				}
;;;174    				if (m_age<TR_MAXAGE)
;;;175    					m_age++;
;;;176    				break;
;;;177    			
;;;178    			default:
;;;179    				m_state = TR_INVALID;
00003a  7026              STRB     r6,[r4,#0]
;;;180    				events |= TR_EVENT_INVALIDATED;
00003c  2501              MOVS     r5,#1
;;;181    				m_events |= TR_EVENT_INVALIDATED;
00003e  78a0              LDRB     r0,[r4,#2]
000040  f0400001          ORR      r0,r0,#1
000044  70a0              STRB     r0,[r4,#2]
                  |L63.70|
;;;182    		}
;;;183    		return events;
000046  4628              MOV      r0,r5
;;;184    	}
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L63.76|
00004c  2800              CMP      r0,#0                 ;105
00004e  d0fa              BEQ      |L63.70|
000050  88e0              LDRH     r0,[r4,#6]            ;107
000052  b128              CBZ      r0,|L63.96|
000054  1d20              ADDS     r0,r4,#4              ;115
000056  f7fffffe          BL       setTimerMs
00005a  2002              MOVS     r0,#2                 ;116
00005c  7020              STRB     r0,[r4,#0]            ;116
00005e  e7f2              B        |L63.70|
                  |L63.96|
000060  7027              STRB     r7,[r4,#0]            ;109
000062  2502              MOVS     r5,#2                 ;110
000064  78a0              LDRB     r0,[r4,#2]            ;111
000066  f0400002          ORR      r0,r0,#2              ;111
00006a  70a0              STRB     r0,[r4,#2]            ;111
00006c  e7eb              B        |L63.70|
                  |L63.110|
00006e  b168              CBZ      r0,|L63.140|
000070  88a0              LDRH     r0,[r4,#4]            ;124
000072  f7fffffe          BL       getTimerMs
000076  88e1              LDRH     r1,[r4,#6]            ;124
000078  4288              CMP      r0,r1                 ;124
00007a  d3e4              BCC      |L63.70|
00007c  7027              STRB     r7,[r4,#0]            ;126
00007e  2502              MOVS     r5,#2                 ;127
000080  78a0              LDRB     r0,[r4,#2]            ;128
000082  f0400002          ORR      r0,r0,#2              ;128
000086  70a0              STRB     r0,[r4,#2]            ;128
000088  e7dd              B        |L63.70|
                  |L63.138|
00008a  e006              B        |L63.154|
                  |L63.140|
00008c  7026              STRB     r6,[r4,#0]            ;133
00008e  2501              MOVS     r5,#1                 ;134
000090  78a0              LDRB     r0,[r4,#2]            ;135
000092  f0400001          ORR      r0,r0,#1              ;135
000096  70a0              STRB     r0,[r4,#2]            ;135
000098  e7d5              B        |L63.70|
                  |L63.154|
00009a  b930              CBNZ     r0,|L63.170|
00009c  8920              LDRH     r0,[r4,#8]            ;142
00009e  b150              CBZ      r0,|L63.182|
0000a0  1d20              ADDS     r0,r4,#4              ;150
0000a2  f7fffffe          BL       setTimerMs
0000a6  2001              MOVS     r0,#1                 ;151
0000a8  7020              STRB     r0,[r4,#0]            ;151
                  |L63.170|
0000aa  7aa0              LDRB     r0,[r4,#0xa]          ;154
0000ac  28ff              CMP      r0,#0xff              ;154
0000ae  d2ca              BCS      |L63.70|
0000b0  1c40              ADDS     r0,r0,#1              ;155
0000b2  72a0              STRB     r0,[r4,#0xa]          ;155
0000b4  e7c7              B        |L63.70|
                  |L63.182|
0000b6  7026              STRB     r6,[r4,#0]            ;144
0000b8  2501              MOVS     r5,#1                 ;145
0000ba  78a0              LDRB     r0,[r4,#2]            ;146
0000bc  f0400001          ORR      r0,r0,#1              ;146
0000c0  70a0              STRB     r0,[r4,#2]            ;146
0000c2  e7f2              B        |L63.170|
                  |L63.196|
0000c4  b130              CBZ      r0,|L63.212|
0000c6  7027              STRB     r7,[r4,#0]            ;161
0000c8  2502              MOVS     r5,#2                 ;162
0000ca  78a0              LDRB     r0,[r4,#2]            ;163
0000cc  f0400002          ORR      r0,r0,#2              ;163
0000d0  70a0              STRB     r0,[r4,#2]            ;163
0000d2  e00b              B        |L63.236|
                  |L63.212|
0000d4  88a0              LDRH     r0,[r4,#4]            ;167
0000d6  f7fffffe          BL       getTimerMs
0000da  8921              LDRH     r1,[r4,#8]            ;167
0000dc  4288              CMP      r0,r1                 ;167
0000de  d305              BCC      |L63.236|
0000e0  7026              STRB     r6,[r4,#0]            ;169
0000e2  2501              MOVS     r5,#1                 ;170
0000e4  78a0              LDRB     r0,[r4,#2]            ;171
0000e6  f0400001          ORR      r0,r0,#1              ;171
0000ea  70a0              STRB     r0,[r4,#2]            ;171
                  |L63.236|
0000ec  7aa0              LDRB     r0,[r4,#0xa]          ;174
0000ee  28ff              CMP      r0,#0xff              ;174
0000f0  d2a9              BCS      |L63.70|
0000f2  1c40              ADDS     r0,r0,#1              ;175
0000f4  72a0              STRB     r0,[r4,#0xa]          ;175
0000f6  e7a6              B        |L63.70|
;;;185    	
                          ENDP


                          AREA ||area_number.64||, COMGROUP=_ZN7TrackerI14DecodedBarCodeE6updateEv, LINKORDER=||t._ZN7TrackerI14DecodedBarCodeE6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI14DecodedBarCodeE6updateEv||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI17FrameIntersectionE6updateEv||, COMGROUP=_ZN7TrackerI17FrameIntersectionE6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI17FrameIntersectionE6updateEv PROC ; Tracker<FrameIntersection>::update()
;;;94     	
;;;95     	uint8_t update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96     	{	
000004  4604              MOV      r4,r0
;;;97     		uint8_t events = 0;
000006  2500              MOVS     r5,#0
;;;98     		bool success = m_minVal!=TR_MAXVAL;
000008  68e0              LDR      r0,[r4,#0xc]
00000a  1c40              ADDS     r0,r0,#1
00000c  d001              BEQ      |L70.18|
00000e  2601              MOVS     r6,#1
000010  e000              B        |L70.20|
                  |L70.18|
000012  2600              MOVS     r6,#0
                  |L70.20|
;;;99     
;;;100    		if (success)
000014  b12e              CBZ      r6,|L70.34|
;;;101    			m_object = *m_minObject;
000016  221c              MOVS     r2,#0x1c
000018  f1040014          ADD      r0,r4,#0x14
00001c  6921              LDR      r1,[r4,#0x10]
00001e  f7fffffe          BL       __aeabi_memcpy
                  |L70.34|
;;;102    		switch(m_state)
000022  7820              LDRB     r0,[r4,#0]
000024  2703              MOVS     r7,#3
000026  b388              CBZ      r0,|L70.140|
000028  f04f0800          MOV      r8,#0
00002c  2801              CMP      r0,#1
00002e  d04a              BEQ      |L70.198|
000030  2802              CMP      r0,#2
000032  d01c              BEQ      |L70.110|
000034  2803              CMP      r0,#3
000036  d008              BEQ      |L70.74|
;;;103    		{
;;;104    			case TR_INVALID:
;;;105    				if (success)
;;;106    				{
;;;107    					if (m_leadingThresh==0)
;;;108    					{
;;;109    						m_state = TR_VALID;
;;;110    						events |= TR_EVENT_VALIDATED;
;;;111    						m_events |= TR_EVENT_VALIDATED;
;;;112    					}
;;;113    					else
;;;114    					{
;;;115    						setTimerMs(&m_timer);
;;;116    						m_state = TR_LEADING;
;;;117    					}
;;;118    				}
;;;119    				break;
;;;120    			
;;;121    			case TR_LEADING:
;;;122    				if (success)
;;;123    				{
;;;124    					if (getTimerMs(m_timer)>=m_leadingThresh)
;;;125    					{
;;;126    						m_state = TR_VALID;
;;;127    						events |= TR_EVENT_VALIDATED;
;;;128    						m_events |= TR_EVENT_VALIDATED;
;;;129    					}
;;;130    				}
;;;131    				else
;;;132    				{
;;;133    					m_state = TR_INVALID;
;;;134    					events |= TR_EVENT_INVALIDATED;
;;;135    					m_events |= TR_EVENT_INVALIDATED;
;;;136    				}
;;;137    				break;
;;;138    			
;;;139    			case TR_VALID:
;;;140    				if (!success)
;;;141    				{
;;;142    					if (m_trailingThresh==0)
;;;143    					{
;;;144    						m_state = TR_INVALID;
;;;145    						events |= TR_EVENT_INVALIDATED;
;;;146    						m_events |= TR_EVENT_INVALIDATED;
;;;147    					}
;;;148    					else
;;;149    					{
;;;150    						setTimerMs(&m_timer);
;;;151    						m_state = TR_TRAILING;
;;;152    					}
;;;153    				}
;;;154    				if (m_age<TR_MAXAGE)
;;;155    					m_age++;				
;;;156    				break;
;;;157    			
;;;158    			case TR_TRAILING:
;;;159    				if (success)
;;;160    				{
;;;161    					m_state = TR_VALID;
;;;162    					events |= TR_EVENT_VALIDATED;
;;;163    					m_events |= TR_EVENT_VALIDATED;
;;;164    				}
;;;165    				else
;;;166    				{
;;;167    					if (getTimerMs(m_timer)>=m_trailingThresh)
;;;168    					{
;;;169    						m_state = TR_INVALID;
;;;170    						events |= TR_EVENT_INVALIDATED;
;;;171    						m_events |= TR_EVENT_INVALIDATED;
;;;172    					}
;;;173    				}
;;;174    				if (m_age<TR_MAXAGE)
;;;175    					m_age++;
;;;176    				break;
;;;177    			
;;;178    			default:
;;;179    				m_state = TR_INVALID;
000038  7027              STRB     r7,[r4,#0]
;;;180    				events |= TR_EVENT_INVALIDATED;
00003a  2501              MOVS     r5,#1
;;;181    				m_events |= TR_EVENT_INVALIDATED;
00003c  78a0              LDRB     r0,[r4,#2]
00003e  f0400001          ORR      r0,r0,#1
000042  70a0              STRB     r0,[r4,#2]
                  |L70.68|
;;;182    		}
;;;183    		return events;
000044  4628              MOV      r0,r5
;;;184    	}
000046  e8bd81f0          POP      {r4-r8,pc}
                  |L70.74|
00004a  2e00              CMP      r6,#0                 ;105
00004c  d0fa              BEQ      |L70.68|
00004e  88e0              LDRH     r0,[r4,#6]            ;107
000050  b128              CBZ      r0,|L70.94|
000052  1d20              ADDS     r0,r4,#4              ;115
000054  f7fffffe          BL       setTimerMs
000058  2002              MOVS     r0,#2                 ;116
00005a  7020              STRB     r0,[r4,#0]            ;116
00005c  e7f2              B        |L70.68|
                  |L70.94|
00005e  f8848000          STRB     r8,[r4,#0]            ;109
000062  2502              MOVS     r5,#2                 ;110
000064  78a0              LDRB     r0,[r4,#2]            ;111
000066  f0400002          ORR      r0,r0,#2              ;111
00006a  70a0              STRB     r0,[r4,#2]            ;111
00006c  e7ea              B        |L70.68|
                  |L70.110|
00006e  b176              CBZ      r6,|L70.142|
000070  88a0              LDRH     r0,[r4,#4]            ;124
000072  f7fffffe          BL       getTimerMs
000076  88e1              LDRH     r1,[r4,#6]            ;124
000078  4288              CMP      r0,r1                 ;124
00007a  d3e3              BCC      |L70.68|
00007c  f8848000          STRB     r8,[r4,#0]            ;126
000080  2502              MOVS     r5,#2                 ;127
000082  78a0              LDRB     r0,[r4,#2]            ;128
000084  f0400002          ORR      r0,r0,#2              ;128
000088  70a0              STRB     r0,[r4,#2]            ;128
00008a  e7db              B        |L70.68|
                  |L70.140|
00008c  e006              B        |L70.156|
                  |L70.142|
00008e  7027              STRB     r7,[r4,#0]            ;133
000090  2501              MOVS     r5,#1                 ;134
000092  78a0              LDRB     r0,[r4,#2]            ;135
000094  f0400001          ORR      r0,r0,#1              ;135
000098  70a0              STRB     r0,[r4,#2]            ;135
00009a  e7d3              B        |L70.68|
                  |L70.156|
00009c  b936              CBNZ     r6,|L70.172|
00009e  8920              LDRH     r0,[r4,#8]            ;142
0000a0  b150              CBZ      r0,|L70.184|
0000a2  1d20              ADDS     r0,r4,#4              ;150
0000a4  f7fffffe          BL       setTimerMs
0000a8  2001              MOVS     r0,#1                 ;151
0000aa  7020              STRB     r0,[r4,#0]            ;151
                  |L70.172|
0000ac  7aa0              LDRB     r0,[r4,#0xa]          ;154
0000ae  28ff              CMP      r0,#0xff              ;154
0000b0  d2c8              BCS      |L70.68|
0000b2  1c40              ADDS     r0,r0,#1              ;155
0000b4  72a0              STRB     r0,[r4,#0xa]          ;155
0000b6  e7c5              B        |L70.68|
                  |L70.184|
0000b8  7027              STRB     r7,[r4,#0]            ;144
0000ba  2501              MOVS     r5,#1                 ;145
0000bc  78a0              LDRB     r0,[r4,#2]            ;146
0000be  f0400001          ORR      r0,r0,#1              ;146
0000c2  70a0              STRB     r0,[r4,#2]            ;146
0000c4  e7f2              B        |L70.172|
                  |L70.198|
0000c6  b13e              CBZ      r6,|L70.216|
0000c8  f8848000          STRB     r8,[r4,#0]            ;161
0000cc  2502              MOVS     r5,#2                 ;162
0000ce  78a0              LDRB     r0,[r4,#2]            ;163
0000d0  f0400002          ORR      r0,r0,#2              ;163
0000d4  70a0              STRB     r0,[r4,#2]            ;163
0000d6  e00b              B        |L70.240|
                  |L70.216|
0000d8  88a0              LDRH     r0,[r4,#4]            ;167
0000da  f7fffffe          BL       getTimerMs
0000de  8921              LDRH     r1,[r4,#8]            ;167
0000e0  4288              CMP      r0,r1                 ;167
0000e2  d305              BCC      |L70.240|
0000e4  7027              STRB     r7,[r4,#0]            ;169
0000e6  2501              MOVS     r5,#1                 ;170
0000e8  78a0              LDRB     r0,[r4,#2]            ;171
0000ea  f0400001          ORR      r0,r0,#1              ;171
0000ee  70a0              STRB     r0,[r4,#2]            ;171
                  |L70.240|
0000f0  7aa0              LDRB     r0,[r4,#0xa]          ;174
0000f2  28ff              CMP      r0,#0xff              ;174
0000f4  d2a6              BCS      |L70.68|
0000f6  1c40              ADDS     r0,r0,#1              ;175
0000f8  72a0              STRB     r0,[r4,#0xa]          ;175
0000fa  e7a3              B        |L70.68|
;;;185    	
                          ENDP


                          AREA ||area_number.71||, COMGROUP=_ZN7TrackerI17FrameIntersectionE6updateEv, LINKORDER=||t._ZN7TrackerI17FrameIntersectionE6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI17FrameIntersectionE6updateEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListIjE3addERKj||, COMGROUP=_ZN10SimpleListIjE3addERKj, CODE, READONLY, ALIGN=2

                  _ZN10SimpleListIjE3addERKj PROC ; SimpleList<unsigned>::add(const unsigned&)
;;;50     	
;;;51     	SimpleListNode<Object> *add(const Object &object)
000000  b570              PUSH     {r4-r6,lr}
;;;52     	{
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;53     		SimpleListNode<Object> *node = new (std::nothrow) SimpleListNode<Object>;
000006  490b              LDR      r1,|L77.52|
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
00000e  b108              CBZ      r0,|L77.20|
000010  2100              MOVS     r1,#0
000012  6041              STR      r1,[r0,#4]
                  |L77.20|
;;;54     
;;;55     		if (node==NULL)
000014  b150              CBZ      r0,|L77.44|
;;;56     			return NULL;
;;;57     		
;;;58     		node->m_object = object;
000016  6829              LDR      r1,[r5,#0]
000018  6001              STR      r1,[r0,#0]
00001a  8921              LDRH     r1,[r4,#8]
00001c  1c49              ADDS     r1,r1,#1
00001e  8121              STRH     r1,[r4,#8]
000020  6821              LDR      r1,[r4,#0]
000022  b129              CBZ      r1,|L77.48|
000024  6862              LDR      r2,[r4,#4]
000026  6050              STR      r0,[r2,#4]
                  |L77.40|
000028  6060              STR      r0,[r4,#4]
;;;59     		add(node);	
;;;60     
;;;61     		return node;
;;;62     	}
00002a  bd70              POP      {r4-r6,pc}
                  |L77.44|
00002c  2000              MOVS     r0,#0                 ;56
00002e  bd70              POP      {r4-r6,pc}
                  |L77.48|
000030  6020              STR      r0,[r4,#0]
000032  e7f9              B        |L77.40|
;;;63     	
                          ENDP

                  |L77.52|
                          DCD      _ZSt7nothrow ; std::nothrow

                          AREA ||area_number.78||, COMGROUP=_ZN10SimpleListIjE3addERKj, LINKORDER=||t._ZN10SimpleListIjE3addERKj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.78||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListIjE3addERKj||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv||, COMGROUP=_ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv PROC ; SimpleList<Tracker<DecodedBarCode>>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L84.16|
                  |L84.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6a45              LDR      r5,[r0,#0x24]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L84.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L84.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.85||, COMGROUP=_ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv, LINKORDER=||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.85||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI7TrackerI5Line2EE5clearEv||, COMGROUP=_ZN10SimpleListI7TrackerI5Line2EE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI7TrackerI5Line2EE5clearEv PROC ; SimpleList<Tracker<Line2>>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L91.16|
                  |L91.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6a85              LDR      r5,[r0,#0x28]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L91.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L91.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.92||, COMGROUP=_ZN10SimpleListI7TrackerI5Line2EE5clearEv, LINKORDER=||t._ZN10SimpleListI7TrackerI5Line2EE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.92||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI7TrackerI5Line2EE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI12IntersectionE5clearEv||, COMGROUP=_ZN10SimpleListI12IntersectionE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI12IntersectionE5clearEv PROC ; SimpleList<Intersection>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L98.16|
                  |L98.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6a45              LDR      r5,[r0,#0x24]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L98.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L98.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.99||, COMGROUP=_ZN10SimpleListI12IntersectionE5clearEv, LINKORDER=||t._ZN10SimpleListI12IntersectionE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.99||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI12IntersectionE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5NadirE5clearEv||, COMGROUP=_ZN10SimpleListI5NadirE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5NadirE5clearEv PROC ; SimpleList<Nadir>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L105.16|
                  |L105.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6985              LDR      r5,[r0,#0x18]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L105.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L105.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.106||, COMGROUP=_ZN10SimpleListI5NadirE5clearEv, LINKORDER=||t._ZN10SimpleListI5NadirE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.106||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5NadirE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5PointE5clearEv||, COMGROUP=_ZN10SimpleListI5PointE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5PointE5clearEv PROC ; SimpleList<Point>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L112.16|
                  |L112.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6845              LDR      r5,[r0,#4]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L112.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L112.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.113||, COMGROUP=_ZN10SimpleListI5PointE5clearEv, LINKORDER=||t._ZN10SimpleListI5PointE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.113||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5PointE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5Line2E5clearEv||, COMGROUP=_ZN10SimpleListI5Line2E5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5Line2E5clearEv PROC ; SimpleList<Line2>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L119.16|
                  |L119.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6945              LDR      r5,[r0,#0x14]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L119.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L119.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.120||, COMGROUP=_ZN10SimpleListI5Line2E5clearEv, LINKORDER=||t._ZN10SimpleListI5Line2E5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.120||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5Line2E5clearEv||
                          DCD      0x00000001

                          AREA ||i._ZN5Line2C1Ev||, COMGROUP=_ZN5Line2C1Ev, CODE, READONLY, ALIGN=1

                  _ZN5Line2C2Ev                  ; Alternate entry point ; Line2::Line2__sub_object()
                  _ZN5Line2C1Ev PROC ; Line2::Line2()
;;;223    {
;;;224    	Line2()
;;;225    	{
;;;226    		m_i0 = m_i1 = NULL;
;;;227    		m_tracker = NULL;
;;;228    		m_index = 0;
;;;229    	}
;;;230    
000000  2100              MOVS     r1,#0
000002  60c1              STR      r1,[r0,#0xc]
000004  6081              STR      r1,[r0,#8]
000006  6101              STR      r1,[r0,#0x10]
000008  7101              STRB     r1,[r0,#4]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.127||, COMGROUP=_ZN5Line2C1Ev, LINKORDER=||i._ZN5Line2C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5Line2C1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN5Point3avgERKS_||, COMGROUP=_ZN5Point3avgERKS_, CODE, READONLY, ALIGN=1

                  _ZN5Point3avgERKS_ PROC ; Point::avg(const Point&)
;;;68     	
;;;69     	void avg(const Point &p)
000000  7802              LDRB     r2,[r0,#0]
;;;70     	{
;;;71     		m_x = (m_x+p.m_x)>>1;
000002  780b              LDRB     r3,[r1,#0]
000004  441a              ADD      r2,r2,r3
000006  0852              LSRS     r2,r2,#1
000008  7002              STRB     r2,[r0,#0]
;;;72     		m_y = (m_y+p.m_y)>>1;
00000a  7842              LDRB     r2,[r0,#1]
00000c  7849              LDRB     r1,[r1,#1]
00000e  4411              ADD      r1,r1,r2
000010  0849              LSRS     r1,r1,#1
000012  7041              STRB     r1,[r0,#1]
;;;73     	}
000014  4770              BX       lr
;;;74     	
                          ENDP


                          AREA ||area_number.134||, COMGROUP=_ZN5Point3avgERKS_, LINKORDER=||i._ZN5Point3avgERKS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.134||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5Point3avgERKS_||
                          DCD      0x00000001

                          AREA ||i._ZNK5Point5dist2ERKS_||, COMGROUP=_ZNK5Point5dist2ERKS_, CODE, READONLY, ALIGN=1

                  _ZNK5Point5dist2ERKS_ PROC ; Point::dist2(const Point&) const
;;;58     	
;;;59     	uint16_t dist2(const Point &p) const
000000  780a              LDRB     r2,[r1,#0]
;;;60     	{
;;;61     		int16_t diffx, diffy;
;;;62     		
;;;63     		diffx = p.m_x - m_x;
000002  7803              LDRB     r3,[r0,#0]
000004  1ad2              SUBS     r2,r2,r3
;;;64     		diffy = p.m_y - m_y;
000006  7849              LDRB     r1,[r1,#1]
000008  7840              LDRB     r0,[r0,#1]
00000a  1a08              SUBS     r0,r1,r0
;;;65     		
;;;66     		return diffx*diffx + diffy*diffy;
00000c  fb12f102          SMULBB   r1,r2,r2
000010  fb101000          SMLABB   r0,r0,r0,r1
000014  b280              UXTH     r0,r0
;;;67     	}
000016  4770              BX       lr
;;;68     	
                          ENDP


                          AREA ||area_number.141||, COMGROUP=_ZNK5Point5dist2ERKS_, LINKORDER=||i._ZNK5Point5dist2ERKS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.141||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK5Point5dist2ERKS_||
                          DCD      0x00000001

                          AREA ||i._ZN5Nadir5mergeERKS_||, COMGROUP=_ZN5Nadir5mergeERKS_, CODE, READONLY, ALIGN=2

                  _ZN5Nadir5mergeERKS_ PROC ; Nadir::merge(const Nadir&)
;;;180    	
;;;181    	void merge(const Nadir &n)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;182    	{
;;;183    		uint16_t xavg, yavg;
;;;184    		uint8_t i, j, li, lj;
;;;185    		
;;;186    		// look through list, make sure there are no duplicate lines
;;;187    		for (i=0; i<n.m_n; i++)
000004  2500              MOVS     r5,#0
;;;188    		{
;;;189    			if (m_n>=LINE_MAX_INTERSECTION_LINES)
;;;190    				return;
;;;191    			li = LINE_GRID_LINE_P(n.m_points[i]);
000006  f8dfc0a4          LDR      r12,|L147.172|
00000a  e02e              B        |L147.106|
                  |L147.12|
00000c  7c84              LDRB     r4,[r0,#0x12]         ;189
00000e  2c08              CMP      r4,#8                 ;189
000010  d24a              BCS      |L147.168|
000012  eb010745          ADD      r7,r1,r5,LSL #1
000016  f8dc8054          LDR      r8,[r12,#0x54]  ; g_lineGrid
00001a  787a              LDRB     r2,[r7,#1]
00001c  ebc21302          RSB      r3,r2,r2,LSL #4
000020  eb031282          ADD      r2,r3,r2,LSL #6
000024  f8113015          LDRB     r3,[r1,r5,LSL #1]
000028  441a              ADD      r2,r2,r3
00002a  f8186012          LDRB     r6,[r8,r2,LSL #1]
;;;192    			for (j=0; j<m_n; j++)
00002e  2200              MOVS     r2,#0
000030  e00f              B        |L147.82|
                  |L147.50|
;;;193    			{
;;;194    				lj = LINE_GRID_LINE_P(m_points[j]);
000032  eb000342          ADD      r3,r0,r2,LSL #1
000036  785b              LDRB     r3,[r3,#1]
000038  ebc31903          RSB      r9,r3,r3,LSL #4
00003c  eb091383          ADD      r3,r9,r3,LSL #6
000040  f8109012          LDRB     r9,[r0,r2,LSL #1]
000044  444b              ADD      r3,r3,r9
000046  f8183013          LDRB     r3,[r8,r3,LSL #1]
;;;195    				if (li==lj)
00004a  429e              CMP      r6,r3
00004c  d003              BEQ      |L147.86|
00004e  1c52              ADDS     r2,r2,#1              ;192
000050  b2d2              UXTB     r2,r2                 ;192
                  |L147.82|
000052  4294              CMP      r4,r2                 ;192
000054  d8ed              BHI      |L147.50|
                  |L147.86|
;;;196    					break;
;;;197    			}
;;;198    			if (j==m_n) // we reached end of list
000056  4294              CMP      r4,r2
000058  d105              BNE      |L147.102|
;;;199    				m_points[m_n++] = n.m_points[i];
00005a  1c62              ADDS     r2,r4,#1
00005c  7482              STRB     r2,[r0,#0x12]
00005e  eb000244          ADD      r2,r0,r4,LSL #1
000062  883b              LDRH     r3,[r7,#0]
000064  8013              STRH     r3,[r2,#0]
                  |L147.102|
000066  1c6d              ADDS     r5,r5,#1              ;187
000068  b2ed              UXTB     r5,r5                 ;187
                  |L147.106|
00006a  7c8a              LDRB     r2,[r1,#0x12]         ;187
00006c  42aa              CMP      r2,r5                 ;187
00006e  d8cd              BHI      |L147.12|
;;;200    		}
;;;201    		// average all points
;;;202    		for (i=xavg=yavg=0; i<m_n; i++)
000070  2100              MOVS     r1,#0
000072  460c              MOV      r4,r1
000074  460b              MOV      r3,r1
000076  7c82              LDRB     r2,[r0,#0x12]         ;189
000078  e00a              B        |L147.144|
                  |L147.122|
;;;203    		{
;;;204    			xavg += m_points[i].m_x;
00007a  f8105011          LDRB     r5,[r0,r1,LSL #1]
00007e  442b              ADD      r3,r3,r5
000080  b29b              UXTH     r3,r3
;;;205    			yavg += m_points[i].m_y;
000082  eb000541          ADD      r5,r0,r1,LSL #1
000086  786d              LDRB     r5,[r5,#1]
000088  442c              ADD      r4,r4,r5
00008a  b2a4              UXTH     r4,r4
00008c  1c49              ADDS     r1,r1,#1              ;202
00008e  b2c9              UXTB     r1,r1                 ;202
                  |L147.144|
000090  428a              CMP      r2,r1                 ;202
000092  d8f2              BHI      |L147.122|
;;;206    		}
;;;207    		
;;;208    		m_pavg.m_x = (xavg+(m_n>>1))/m_n;
000094  eb030152          ADD      r1,r3,r2,LSR #1
000098  fbb1f1f2          UDIV     r1,r1,r2
00009c  7401              STRB     r1,[r0,#0x10]
;;;209    		m_pavg.m_y = (yavg+(m_n>>1))/m_n;
00009e  eb040152          ADD      r1,r4,r2,LSR #1
0000a2  fbb1f1f2          UDIV     r1,r1,r2
0000a6  7441              STRB     r1,[r0,#0x11]
                  |L147.168|
;;;210    		
;;;211    	}
0000a8  e8bd83f0          POP      {r4-r9,pc}
;;;212    
                          ENDP

                  |L147.172|
                          DCD      ||.data||

                          AREA ||area_number.148||, COMGROUP=_ZN5Nadir5mergeERKS_, LINKORDER=||i._ZN5Nadir5mergeERKS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.148||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5Nadir5mergeERKS_||
                          DCD      0x00000001

                          AREA ||i._ZNK5Point6equalsERKS_||, COMGROUP=_ZNK5Point6equalsERKS_, CODE, READONLY, ALIGN=1

                  _ZNK5Point6equalsERKS_ PROC ; Point::equals(const Point&) const
;;;53     	
;;;54     	bool equals(const Point &p) const
000000  780a              LDRB     r2,[r1,#0]
;;;55     	{
;;;56     		return p.m_x==m_x && p.m_y==m_y;
000002  7803              LDRB     r3,[r0,#0]
000004  429a              CMP      r2,r3
000006  d105              BNE      |L154.20|
000008  7849              LDRB     r1,[r1,#1]
00000a  7840              LDRB     r0,[r0,#1]
00000c  4281              CMP      r1,r0
00000e  d101              BNE      |L154.20|
000010  2001              MOVS     r0,#1
;;;57     	}
000012  4770              BX       lr
                  |L154.20|
000014  2000              MOVS     r0,#0                 ;56
000016  4770              BX       lr
;;;58     	
                          ENDP


                          AREA ||area_number.155||, COMGROUP=_ZNK5Point6equalsERKS_, LINKORDER=||i._ZNK5Point6equalsERKS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.155||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK5Point6equalsERKS_||
                          DCD      0x00000001

                          AREA ||i._ZNK5Line27length2Ev||, COMGROUP=_ZNK5Line27length2Ev, CODE, READONLY, ALIGN=1

                  _ZNK5Line27length2Ev PROC ; Line2::length2() const
;;;230    
;;;231    	uint16_t length2() const
000000  7881              LDRB     r1,[r0,#2]
;;;232    	{
;;;233    		int16_t diffx, diffy;
;;;234    		
;;;235    		diffx = m_p1.m_x - m_p0.m_x;
000002  7802              LDRB     r2,[r0,#0]
000004  1a89              SUBS     r1,r1,r2
;;;236    		diffy = m_p1.m_y - m_p0.m_y;
000006  78c2              LDRB     r2,[r0,#3]
000008  7840              LDRB     r0,[r0,#1]
00000a  1a10              SUBS     r0,r2,r0
;;;237    		
;;;238    		return diffx*diffx + diffy*diffy;
00000c  fb11f101          SMULBB   r1,r1,r1
000010  fb101000          SMLABB   r0,r0,r0,r1
000014  b280              UXTH     r0,r0
;;;239    	}
000016  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||area_number.162||, COMGROUP=_ZNK5Line27length2Ev, LINKORDER=||i._ZNK5Line27length2Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.162||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZNK5Line27length2Ev||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5Line2E3getEv||, COMGROUP=_ZN7TrackerI5Line2E3getEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5Line2E3getEv PROC ; Tracker<Line2>::get()
;;;185    	
;;;186    	Object *get()
000000  7801              LDRB     r1,[r0,#0]
;;;187    	{
;;;188    		if (m_state==TR_INVALID || m_state==TR_LEADING)
000002  2903              CMP      r1,#3
000004  d003              BEQ      |L168.14|
000006  2902              CMP      r1,#2
000008  d001              BEQ      |L168.14|
;;;189    			return NULL;
;;;190    		else
;;;191    			return &m_object;
00000a  3014              ADDS     r0,r0,#0x14
;;;192    	}
00000c  4770              BX       lr
                  |L168.14|
00000e  2000              MOVS     r0,#0                 ;189
000010  4770              BX       lr
;;;193    	
                          ENDP


                          AREA ||area_number.169||, COMGROUP=_ZN7TrackerI5Line2E3getEv, LINKORDER=||t._ZN7TrackerI5Line2E3getEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.169||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5Line2E3getEv||
                          DCD      0x00000001

                          AREA ||i._ZSt5qsortPvjjPFiPKvS1_E||, COMGROUP=_ZSt5qsortPvjjPFiPKvS1_E, CODE, READONLY, ALIGN=1

                  _ZSt5qsortPvjjPFiPKvS1_E PROC ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
;;;547        extern "C++"
;;;548        inline void qsort(void * __base, size_t __nmemb, size_t __size,
000000  f7ffbffe          B.W      qsort
;;;549                          int (* __compar)(const void *, const void *)) {
;;;550          qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
;;;551        }
;;;552    #endif
                          ENDP


                          AREA ||area_number.176||, COMGROUP=_ZSt5qsortPvjjPFiPKvS1_E, LINKORDER=||i._ZSt5qsortPvjjPFiPKvS1_E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.176||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt5qsortPvjjPFiPKvS1_E||
                          DCD      0x00000001

                          AREA ||i._ZN7BarCodeC1Ev||, COMGROUP=_ZN7BarCodeC1Ev, CODE, READONLY, ALIGN=1

                  _ZN7BarCodeC2Ev                  ; Alternate entry point ; BarCode::BarCode__sub_object()
                  _ZN7BarCodeC1Ev PROC ; BarCode::BarCode()
;;;147    {
;;;148        BarCode()
;;;149        {
;;;150            m_n = 0;
;;;151        }
;;;152    
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  7701              STRB     r1,[r0,#0x1c]
000008  4770              BX       lr
                          ENDP


                          AREA ||area_number.183||, COMGROUP=_ZN7BarCodeC1Ev, LINKORDER=||i._ZN7BarCodeC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.183||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7BarCodeC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5Line2E5resetEv||, COMGROUP=_ZN7TrackerI5Line2E5resetEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5Line2E5resetEv PROC ; Tracker<Line2>::reset()
;;;54     	
;;;55     	void reset()
000000  2102              MOVS     r1,#2
;;;56     	{
;;;57     		m_state = TR_LEADING; // start in leading state
000002  7001              STRB     r1,[r0,#0]
;;;58     		m_minVal = TR_MAXVAL;
000004  1ec9              SUBS     r1,r1,#3
000006  60c1              STR      r1,[r0,#0xc]
;;;59     		m_minObject = NULL;
000008  2100              MOVS     r1,#0
00000a  6101              STR      r1,[r0,#0x10]
;;;60     		m_events = 0;
00000c  7081              STRB     r1,[r0,#2]
;;;61     		m_eventsShadow = 0;
00000e  70c1              STRB     r1,[r0,#3]
;;;62     		m_age = 0;
000010  7281              STRB     r1,[r0,#0xa]
;;;63     		setTimerMs(&m_timer);
000012  1d00              ADDS     r0,r0,#4
000014  f7ffbffe          B.W      setTimerMs
;;;64     	}
;;;65     	
                          ENDP


                          AREA ||area_number.190||, COMGROUP=_ZN7TrackerI5Line2E5resetEv, LINKORDER=||t._ZN7TrackerI5Line2E5resetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.190||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5Line2E5resetEv||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI14DecodedBarCodeE5resetEv||, COMGROUP=_ZN7TrackerI14DecodedBarCodeE5resetEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI14DecodedBarCodeE5resetEv PROC ; Tracker<DecodedBarCode>::reset()
;;;54     	
;;;55     	void reset()
000000  2102              MOVS     r1,#2
;;;56     	{
;;;57     		m_state = TR_LEADING; // start in leading state
000002  7001              STRB     r1,[r0,#0]
;;;58     		m_minVal = TR_MAXVAL;
000004  1ec9              SUBS     r1,r1,#3
000006  60c1              STR      r1,[r0,#0xc]
;;;59     		m_minObject = NULL;
000008  2100              MOVS     r1,#0
00000a  6101              STR      r1,[r0,#0x10]
;;;60     		m_events = 0;
00000c  7081              STRB     r1,[r0,#2]
;;;61     		m_eventsShadow = 0;
00000e  70c1              STRB     r1,[r0,#3]
;;;62     		m_age = 0;
000010  7281              STRB     r1,[r0,#0xa]
;;;63     		setTimerMs(&m_timer);
000012  1d00              ADDS     r0,r0,#4
000014  f7ffbffe          B.W      setTimerMs
;;;64     	}
;;;65     	
                          ENDP


                          AREA ||area_number.197||, COMGROUP=_ZN7TrackerI14DecodedBarCodeE5resetEv, LINKORDER=||t._ZN7TrackerI14DecodedBarCodeE5resetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.197||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI14DecodedBarCodeE5resetEv||
                          DCD      0x00000001

                          AREA ||i._ZN14DecodedBarCodeC1Ev||, COMGROUP=_ZN14DecodedBarCodeC1Ev, CODE, READONLY, ALIGN=1

                  _ZN14DecodedBarCodeC2Ev                  ; Alternate entry point ; DecodedBarCode::DecodedBarCode__sub_object()
                  _ZN14DecodedBarCodeC1Ev PROC ; DecodedBarCode::DecodedBarCode()
000000  2100              MOVS     r1,#0
000002  80c1              STRH     r1,[r0,#6]
000004  8081              STRH     r1,[r0,#4]
000006  8041              STRH     r1,[r0,#2]
000008  8001              STRH     r1,[r0,#0]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.204||, COMGROUP=_ZN14DecodedBarCodeC1Ev, LINKORDER=||i._ZN14DecodedBarCodeC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.204||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN14DecodedBarCodeC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListIjE5clearEv||, COMGROUP=_ZN10SimpleListIjE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListIjE5clearEv PROC ; SimpleList<unsigned>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L207.16|
                  |L207.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6845              LDR      r5,[r0,#4]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L207.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L207.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.208||, COMGROUP=_ZN10SimpleListIjE5clearEv, LINKORDER=||t._ZN10SimpleListIjE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.208||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListIjE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5Line2ED1Ev||, COMGROUP=_ZN10SimpleListI5Line2ED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5Line2ED2Ev                  ; Alternate entry point ; SimpleList<Line2>::~SimpleList__sub_object()
                  _ZN10SimpleListI5Line2ED1Ev PROC ; SimpleList<Line2>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI5Line2E5clearEv ; SimpleList<Line2>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.215||, COMGROUP=_ZN10SimpleListI5Line2ED1Ev, LINKORDER=||t._ZN10SimpleListI5Line2ED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.215||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5Line2ED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5PointED1Ev||, COMGROUP=_ZN10SimpleListI5PointED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5PointED2Ev                  ; Alternate entry point ; SimpleList<Point>::~SimpleList__sub_object()
                  _ZN10SimpleListI5PointED1Ev PROC ; SimpleList<Point>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI5PointE5clearEv ; SimpleList<Point>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.222||, COMGROUP=_ZN10SimpleListI5PointED1Ev, LINKORDER=||t._ZN10SimpleListI5PointED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.222||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5PointED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI5NadirED1Ev||, COMGROUP=_ZN10SimpleListI5NadirED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI5NadirED2Ev                  ; Alternate entry point ; SimpleList<Nadir>::~SimpleList__sub_object()
                  _ZN10SimpleListI5NadirED1Ev PROC ; SimpleList<Nadir>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI5NadirE5clearEv ; SimpleList<Nadir>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.229||, COMGROUP=_ZN10SimpleListI5NadirED1Ev, LINKORDER=||t._ZN10SimpleListI5NadirED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.229||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI5NadirED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI12IntersectionED1Ev||, COMGROUP=_ZN10SimpleListI12IntersectionED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI12IntersectionED2Ev                  ; Alternate entry point ; SimpleList<Intersection>::~SimpleList__sub_object()
                  _ZN10SimpleListI12IntersectionED1Ev PROC ; SimpleList<Intersection>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI12IntersectionE5clearEv ; SimpleList<Intersection>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.236||, COMGROUP=_ZN10SimpleListI12IntersectionED1Ev, LINKORDER=||t._ZN10SimpleListI12IntersectionED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.236||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI12IntersectionED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI7TrackerI5Line2EED1Ev||, COMGROUP=_ZN10SimpleListI7TrackerI5Line2EED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI7TrackerI5Line2EED2Ev                  ; Alternate entry point ; SimpleList<Tracker<Line2>>::~SimpleList__sub_object()
                  _ZN10SimpleListI7TrackerI5Line2EED1Ev PROC ; SimpleList<Tracker<Line2>>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI7TrackerI5Line2EE5clearEv ; SimpleList<Tracker<Line2>>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.243||, COMGROUP=_ZN10SimpleListI7TrackerI5Line2EED1Ev, LINKORDER=||t._ZN10SimpleListI7TrackerI5Line2EED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.243||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI7TrackerI5Line2EED1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev||, COMGROUP=_ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI7TrackerI14DecodedBarCodeEED2Ev                  ; Alternate entry point ; SimpleList<Tracker<DecodedBarCode>>::~SimpleList__sub_object()
                  _ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev PROC ; SimpleList<Tracker<DecodedBarCode>>::~SimpleList()
;;;30     	}
;;;31     	~SimpleList()
;;;32     	{
;;;33     		clear();
;;;34     	}
;;;35     	
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN10SimpleListI7TrackerI14DecodedBarCodeEE5clearEv ; SimpleList<Tracker<DecodedBarCode>>::clear()
00000a  4620              MOV      r0,r4
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.250||, COMGROUP=_ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev, LINKORDER=||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.250||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI7TrackerI14DecodedBarCodeEED1Ev||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\line.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_line_cpp_5416574d___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___8_line_cpp_5416574d___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_line_cpp_5416574d___Z7__REVSHi|
#line 144
|__asm___8_line_cpp_5416574d___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
