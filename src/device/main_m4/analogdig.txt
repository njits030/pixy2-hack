; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\analogdig.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\analogdig.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\analogdig.crf src\analogdig.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9AnalogDigC2Ev                  ; Alternate entry point ; AnalogDig::AnalogDig__sub_object()
                  _ZN9AnalogDigC1Ev PROC ; AnalogDig::AnalogDig()
;;;24     
;;;25     AnalogDig::AnalogDig()
;;;26     {
;;;27     	m_x = true;
;;;28     	m_lastDetect = false;
;;;29     }
;;;30     
000000  4938              LDR      r1,|L1.228|
000002  6001              STR      r1,[r0,#0]
000004  2101              MOVS     r1,#1
000006  7101              STRB     r1,[r0,#4]
000008  2100              MOVS     r1,#0
00000a  7141              STRB     r1,[r0,#5]
00000c  4770              BX       lr
                          ENDP

                  _Z7ad_initv PROC ; ad_init()
;;;99     
;;;100    void ad_init()
00000e  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	g_ad = new AnalogDig;
000010  2008              MOVS     r0,#8
000012  f7fffffe          BL       _Znwj ; operator new(unsigned)
000016  b108              CBZ      r0,|L1.28|
000018  f7fffffe          BL       _ZN9AnalogDigC1Ev ; AnalogDig::AnalogDig()
                  |L1.28|
00001c  4932              LDR      r1,|L1.232|
00001e  6008              STR      r0,[r1,#0]  ; g_ad
;;;103    }
000020  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  _ZN9AnalogDig12setDirectionEb PROC ; AnalogDig::setDirection(bool)
;;;30     
;;;31     void AnalogDig:: setDirection(bool x)
000022  7101              STRB     r1,[r0,#4]
;;;32     {
;;;33     	m_x = x;
;;;34     }
000024  4770              BX       lr
;;;35     
                          ENDP

                  _ZN9AnalogDig4openEv PROC ; AnalogDig::open()
;;;36     int AnalogDig::open()
000026  b510              PUSH     {r4,lr}
;;;37     {
;;;38     	// set pin 1 on I/O connector to output	(Use SGPIO because GPIO interferes with pixel sync)
;;;39     	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC2); //SGPIO10
000028  2302              MOVS     r3,#2
00002a  22f0              MOVS     r2,#0xf0
00002c  2103              MOVS     r1,#3
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       scu_pinmux
;;;40     	LPC_SGPIO->OUT_MUX_CFG10 = 4;
000034  482d              LDR      r0,|L1.236|
000036  2104              MOVS     r1,#4
000038  6281              STR      r1,[r0,#0x28]
;;;41     	LPC_SGPIO->GPIO_OENREG = 1<<10;
00003a  0209              LSLS     r1,r1,#8
00003c  f8c01218          STR      r1,[r0,#0x218]
;;;42     	LPC_DAC->CTRL =	(1<<3); // enable dac output
000040  492b              LDR      r1,|L1.240|
000042  2008              MOVS     r0,#8
000044  6048              STR      r0,[r1,#4]
;;;43     
;;;44     	return 0;	
000046  2000              MOVS     r0,#0
;;;45     }
000048  bd10              POP      {r4,pc}
;;;46     
                          ENDP

                  _ZN9AnalogDig5closeEv PROC ; AnalogDig::close()
;;;47     int AnalogDig::close()
00004a  b510              PUSH     {r4,lr}
;;;48     {
;;;49     	LPC_DAC->CTRL = 0; // disable dac output	
00004c  4928              LDR      r1,|L1.240|
00004e  2000              MOVS     r0,#0
000050  6048              STR      r0,[r1,#4]
;;;50     	// set back to MOSI (input)
;;;51     	scu_pinmux(0x1, 3, (MD_PLN | MD_EZI | MD_ZI | MD_EHS), FUNC5); // SSP1_MOSI	 
000052  2305              MOVS     r3,#5
000054  22f0              MOVS     r2,#0xf0
000056  2103              MOVS     r1,#3
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       scu_pinmux
;;;52     
;;;53     	return 0;	
00005e  2000              MOVS     r0,#0
;;;54     }
000060  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  _ZN9AnalogDig6updateEv PROC ; AnalogDig::update()
;;;56     
;;;57     int AnalogDig::update()
000062  b570              PUSH     {r4-r6,lr}
;;;58     {
000064  4605              MOV      r5,r0
;;;59     	uint32_t val;
;;;60     	BlobA *blob;
;;;61     
;;;62     	blob = (BlobA *)g_blobs->getMaxBlob();
000066  4823              LDR      r0,|L1.244|
000068  2200              MOVS     r2,#0
00006a  4611              MOV      r1,r2
00006c  6800              LDR      r0,[r0,#0]  ; g_blobs
00006e  f7fffffe          BL       _ZN5Blobs10getMaxBlobEtPt ; Blobs::getMaxBlob(unsigned short, unsigned short*)
000072  4604              MOV      r4,r0
;;;63     	if (blob)
;;;64     	{
;;;65     		if (m_x)
;;;66     		{
;;;67     			val = blob->m_left+(blob->m_right-blob->m_left)/2;
;;;68     			val *= (1<<16);
;;;69     			val /= CAM_RES2_WIDTH;
;;;70     		}
;;;71     		else
;;;72     		{
;;;73     			val = CAM_RES2_HEIGHT-(blob->m_top+(blob->m_bottom-blob->m_top)/2);
;;;74     			val *= (1<<16);
;;;75     			val /= CAM_RES2_HEIGHT;
;;;76     		}
;;;77     		val &= 0x0000ffc0; // mask other bits (because datasheet instructs us to do so)
;;;78     
;;;79     		// write dac val
;;;80     		LPC_DAC->CR = val;
000074  4a1e              LDR      r2,|L1.240|
;;;81     
;;;82     		// delay to let DAC settle before asserting pin 1
;;;83     		if (m_lastDetect==false)
;;;84     			delayus(100);
;;;85     		// assert digital output
;;;86     		LPC_SGPIO->GPIO_OUTREG = 1<<10;
000076  4e1d              LDR      r6,|L1.236|
000078  b34c              CBZ      r4,|L1.206|
00007a  7928              LDRB     r0,[r5,#4]            ;65
00007c  b160              CBZ      r0,|L1.152|
00007e  88a1              LDRH     r1,[r4,#4]            ;67
000080  8860              LDRH     r0,[r4,#2]            ;67
000082  1a09              SUBS     r1,r1,r0              ;67
000084  eb0171d1          ADD      r1,r1,r1,LSR #31      ;67
000088  eb000061          ADD      r0,r0,r1,ASR #1       ;67
00008c  0400              LSLS     r0,r0,#16             ;68
00008e  f44f719e          MOV      r1,#0x13c             ;69
000092  fbb0f0f1          UDIV     r0,r0,r1              ;69
000096  e00c              B        |L1.178|
                  |L1.152|
000098  8921              LDRH     r1,[r4,#8]            ;73
00009a  88e0              LDRH     r0,[r4,#6]            ;73
00009c  1a09              SUBS     r1,r1,r0              ;73
00009e  eb0171d1          ADD      r1,r1,r1,LSR #31      ;73
0000a2  eb000061          ADD      r0,r0,r1,ASR #1       ;73
0000a6  f1c000d0          RSB      r0,r0,#0xd0           ;73
0000aa  0400              LSLS     r0,r0,#16             ;74
0000ac  21d0              MOVS     r1,#0xd0              ;75
0000ae  fbb0f0f1          UDIV     r0,r0,r1              ;75
                  |L1.178|
0000b2  f64f71c0          MOV      r1,#0xffc0            ;77
0000b6  4008              ANDS     r0,r0,r1              ;77
0000b8  6010              STR      r0,[r2,#0]            ;80
0000ba  7968              LDRB     r0,[r5,#5]            ;83
0000bc  b910              CBNZ     r0,|L1.196|
0000be  2064              MOVS     r0,#0x64              ;84
0000c0  f7fffffe          BL       delayus
                  |L1.196|
0000c4  f44f6080          MOV      r0,#0x400
0000c8  f8c60214          STR      r0,[r6,#0x214]
0000cc  e003              B        |L1.214|
                  |L1.206|
;;;87     
;;;88     	}
;;;89     	else // negate digital output
;;;90     	{
;;;91     		LPC_SGPIO->GPIO_OUTREG = 0;
0000ce  2000              MOVS     r0,#0
0000d0  f8c60214          STR      r0,[r6,#0x214]
;;;92     		// zero dac output
;;;93     		LPC_DAC->CR = 0;
0000d4  6010              STR      r0,[r2,#0]
                  |L1.214|
;;;94     	}
;;;95     
;;;96     	m_lastDetect = blob!=0;
0000d6  b10c              CBZ      r4,|L1.220|
0000d8  2001              MOVS     r0,#1
0000da  e000              B        |L1.222|
                  |L1.220|
0000dc  2000              MOVS     r0,#0
                  |L1.222|
0000de  7168              STRB     r0,[r5,#5]
;;;97     	return 0;
0000e0  2000              MOVS     r0,#0
;;;98     }
0000e2  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP

                  |L1.228|
                          DCD      _ZTV9AnalogDig+0x8 ; vtable for AnalogDig
                  |L1.232|
                          DCD      ||.data||
                  |L1.236|
                          DCD      0x40101000
                  |L1.240|
                          DCD      0x400e1000
                  |L1.244|
                          DCD      g_blobs

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  g_ad
                          DCD      0x00000000

                          AREA ||.constdata__ZTV9AnalogDig||, COMGROUP=_ZTV9AnalogDig, DATA, READONLY, ALIGN=2

                  _ZTV9AnalogDig ; vtable for AnalogDig
                          DCD      0x00000000
                          DCD      _ZTI9AnalogDig ; typeinfo for AnalogDig
                          DCD      _ZN9AnalogDig4openEv ; AnalogDig::open()
                          DCD      _ZN9AnalogDig5closeEv ; AnalogDig::close()
                          DCD      _ZN7Iserial7receiveEPhj ; Iserial::receive(unsigned char*, unsigned)
                          DCD      _ZN7Iserial10receiveLenEv ; Iserial::receiveLen()
                          DCD      _ZN9AnalogDig6updateEv ; AnalogDig::update()
                          DCD      _ZN7Iserial13startTransmitEv ; Iserial::startTransmit()

                          AREA ||i._ZN7Iserial7receiveEPhj||, COMGROUP=_ZN7Iserial7receiveEPhj, CODE, READONLY, ALIGN=1

                  _ZN7Iserial7receiveEPhj PROC ; Iserial::receive(unsigned char*, unsigned)
;;;156    	}
;;;157    	virtual int receive(uint8_t *buf, uint32_t len)
000000  2000              MOVS     r0,#0
;;;158    	{
;;;159    		return 0;
;;;160    	}
000002  4770              BX       lr
;;;161    	virtual int receiveLen()
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN7Iserial7receiveEPhj, LINKORDER=||i._ZN7Iserial7receiveEPhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial7receiveEPhj||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial10receiveLenEv||, COMGROUP=_ZN7Iserial10receiveLenEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial10receiveLenEv PROC ; Iserial::receiveLen()
;;;160    	}
;;;161    	virtual int receiveLen()
000000  2000              MOVS     r0,#0
;;;162    	{
;;;163    		return 0;
;;;164    	}
000002  4770              BX       lr
;;;165    	virtual int update() // called roughly once per frame to do maintenance tasks
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN7Iserial10receiveLenEv, LINKORDER=||i._ZN7Iserial10receiveLenEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial10receiveLenEv||
                          DCD      0x00000001

                          AREA ||i._ZN7Iserial13startTransmitEv||, COMGROUP=_ZN7Iserial13startTransmitEv, CODE, READONLY, ALIGN=1

                  _ZN7Iserial13startTransmitEv PROC ; Iserial::startTransmit()
;;;168    	}
;;;169    	virtual int startTransmit() // called to kick off transmit, e.g. UART
000000  2000              MOVS     r0,#0
;;;170    	{
;;;171    		return 0;
;;;172    	}
000002  4770              BX       lr
;;;173    };
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN7Iserial13startTransmitEv, LINKORDER=||i._ZN7Iserial13startTransmitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Iserial13startTransmitEv||
                          DCD      0x00000001

                          AREA ||.constdata__ZTI9AnalogDig||, COMGROUP=_ZTI9AnalogDig, DATA, READONLY, ALIGN=2

                  _ZTI9AnalogDig ; typeinfo for AnalogDig
                          DCD      _ZTVN10__cxxabiv120__si_class_type_infoE+0x8 ; vtable for __cxxabiv1::__si_class_type_info
                          DCD      _ZTS9AnalogDig ; typeinfo name for AnalogDig
                          DCD      _ZTI7Iserial ; typeinfo for Iserial

                          AREA ||.constdata__ZTI7Iserial||, COMGROUP=_ZTI7Iserial, DATA, READONLY, ALIGN=2

                  _ZTI7Iserial ; typeinfo for Iserial
                          DCD      _ZTVN10__cxxabiv117__class_type_infoE+0x8 ; vtable for __cxxabiv1::__class_type_info
                          DCD      _ZTS7Iserial ; typeinfo name for Iserial

                          AREA ||.constdata__ZTS9AnalogDig||, COMGROUP=_ZTS9AnalogDig, DATA, READONLY, ALIGN=0

                  _ZTS9AnalogDig ; typeinfo name for AnalogDig
000000  39416e61          DCB      0x39,0x41,0x6e,0x61
000004  6c6f6744          DCB      0x6c,0x6f,0x67,0x44
000008  696700            DCB      0x69,0x67,0x00

                          AREA ||.constdata__ZTS7Iserial||, COMGROUP=_ZTS7Iserial, DATA, READONLY, ALIGN=0

                  _ZTS7Iserial ; typeinfo name for Iserial
000000  37497365          DCB      0x37,0x49,0x73,0x65
000004  7269616c          DCB      0x72,0x69,0x61,0x6c
000008  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "src\\analogdig.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_analogdig_cpp_g_ad___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___13_analogdig_cpp_g_ad___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___13_analogdig_cpp_g_ad___Z7__REVSHi|
#line 144
|__asm___13_analogdig_cpp_g_ad___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
