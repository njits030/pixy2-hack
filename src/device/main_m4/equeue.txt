; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\equeue.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\equeue.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\equeue.crf src\equeue.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN6Equeue5resetEv PROC ; Equeue::reset()
;;;30     
;;;31     void Equeue::reset()
000000  6800              LDR      r0,[r0,#0]
;;;32     {
;;;33         memset((void *)m_fields, 0, sizeof(EqueueFields));
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
000006  6041              STR      r1,[r0,#4]
000008  8101              STRH     r1,[r0,#8]
;;;34     }
00000a  4770              BX       lr
;;;35     
                          ENDP

                  _ZN6EqueueC2Ev                  ; Alternate entry point ; Equeue::Equeue__sub_object()
                  _ZN6EqueueC1Ev PROC ; Equeue::Equeue()
;;;20     
;;;21     Equeue::Equeue()
;;;22     {
;;;23         m_fields = (EqueueFields *)EQ_LOC;
;;;24         reset();
;;;25     }
;;;26     
00000c  b500              PUSH     {lr}
00000e  4602              MOV      r2,r0
000010  484d              LDR      r0,|L1.328|
000012  6010              STR      r0,[r2,#0]
000014  4610              MOV      r0,r2
000016  f7fffffe          BL       _ZN6Equeue5resetEv ; Equeue::reset()
00001a  4610              MOV      r0,r2
00001c  bd00              POP      {pc}
                          ENDP

                  _ZN6EqueueD2Ev                  ; Alternate entry point ; Equeue::~Equeue__sub_object()
                  _ZN6EqueueD1Ev PROC ; Equeue::~Equeue()
;;;27     Equeue::~Equeue()
;;;28     {
;;;29     }
;;;30     
00001e  4770              BX       lr
                          ENDP

                  _ZN6Equeue7dequeueEPt PROC ; Equeue::dequeue(unsigned short*)
;;;35     
;;;36     uint32_t Equeue::dequeue(uint16_t *val)
000020  b510              PUSH     {r4,lr}
;;;37     {
;;;38         uint16_t len = m_fields->produced - m_fields->consumed;
000022  6802              LDR      r2,[r0,#0]
000024  8893              LDRH     r3,[r2,#4]
000026  88d4              LDRH     r4,[r2,#6]
000028  1b1b              SUBS     r3,r3,r4
00002a  b29b              UXTH     r3,r3
;;;39         if (len)
00002c  2b00              CMP      r3,#0
00002e  d015              BEQ      |L1.92|
;;;40         {
;;;41             *val = m_fields->data[m_fields->readIndex++];
000030  8813              LDRH     r3,[r2,#0]
000032  1c5c              ADDS     r4,r3,#1
000034  8014              STRH     r4,[r2,#0]
000036  005a              LSLS     r2,r3,#1
000038  6803              LDR      r3,[r0,#0]
00003a  3208              ADDS     r2,r2,#8
00003c  5a9a              LDRH     r2,[r3,r2]
00003e  800a              STRH     r2,[r1,#0]
;;;42             m_fields->consumed++;
000040  6801              LDR      r1,[r0,#0]
000042  88ca              LDRH     r2,[r1,#6]
000044  1c52              ADDS     r2,r2,#1
000046  80ca              STRH     r2,[r1,#6]
;;;43             if (m_fields->readIndex==EQ_MEM_SIZE)
000048  6800              LDR      r0,[r0,#0]
00004a  8801              LDRH     r1,[r0,#0]
00004c  f5a152e8          SUB      r2,r1,#0x1d00
000050  3afc              SUBS     r2,r2,#0xfc
000052  d101              BNE      |L1.88|
;;;44                 m_fields->readIndex = 0;
000054  2100              MOVS     r1,#0
000056  8001              STRH     r1,[r0,#0]
                  |L1.88|
;;;45             return 1;
000058  2001              MOVS     r0,#1
;;;46         }
;;;47         return 0;
;;;48     }
00005a  bd10              POP      {r4,pc}
                  |L1.92|
00005c  2000              MOVS     r0,#0                 ;47
00005e  bd10              POP      {r4,pc}
;;;49     
                          ENDP

                  _ZN6Equeue8readLineEPtjPbS1_ PROC ; Equeue::readLine(unsigned short*, unsigned, bool*, bool*)
;;;53     // if we run out of data, we return 0
;;;54     uint32_t Equeue::readLine(uint16_t *mem, uint32_t size, bool *eof, bool *error)
000060  e92d4ff0          PUSH     {r4-r11,lr}
;;;55     {
000064  4605              MOV      r5,r0
000066  f8dda024          LDR      r10,[sp,#0x24]
;;;56     	uint16_t len = m_fields->produced - m_fields->consumed;
00006a  682c              LDR      r4,[r5,#0]
00006c  88a0              LDRH     r0,[r4,#4]
00006e  88e6              LDRH     r6,[r4,#6]
000070  1b80              SUBS     r0,r0,r6
000072  fa1ff880          UXTH     r8,r0
;;;57     	uint16_t i, j;
;;;58     	uint8_t codes;
;;;59     	
;;;60     	for (i=0, j=m_fields->readIndex, codes=0, *eof=false, *error=false; true; i++)
000076  2000              MOVS     r0,#0
000078  8824              LDRH     r4,[r4,#0]
00007a  2600              MOVS     r6,#0
00007c  2700              MOVS     r7,#0
00007e  701f              STRB     r7,[r3,#0]
000080  f88a7000          STRB     r7,[r10,#0]
;;;61     	{
;;;62     		if (i>=len || i>=size)
;;;63     			return 0;
;;;64     		
;;;65     		mem[i] = m_fields->data[j];
;;;66     		
;;;67     		if (m_fields->data[j]>=EQ_HSCAN_LINE_START)
;;;68     		{
;;;69     			if (m_fields->data[j]==EQ_ERROR)
;;;70     			{
;;;71     				i++; // return and eat error code
;;;72     				*error = true;
000084  f04f0b01          MOV      r11,#1
000088  f04f0e08          MOV      lr,#8                 ;65
;;;73     				break;
;;;74     			}
;;;75     			else if (m_fields->data[j]==EQ_FRAME_END)
;;;76     			{
;;;77     				i++; // return and eat eof code
;;;78     				*eof = true;
;;;79     				break;
;;;80     			}
;;;81     			codes++;
;;;82     			if (codes>=2)
;;;83     				// don't return code
;;;84     				break;
;;;85     		}
;;;86     		j++;
;;;87     		if (j==EQ_MEM_SIZE)
00008c  f64159fc          MOV      r9,#0x1dfc
                  |L1.144|
000090  4540              CMP      r0,r8                 ;62
000092  d201              BCS      |L1.152|
000094  4290              CMP      r0,r2                 ;62
000096  d302              BCC      |L1.158|
                  |L1.152|
000098  2000              MOVS     r0,#0                 ;63
                  |L1.154|
;;;88     			j = 0;
;;;89     	}
;;;90     		
;;;91     	// flush what we read
;;;92     	m_fields->consumed += i;
;;;93     	m_fields->readIndex += i;
;;;94     	if (m_fields->readIndex>=EQ_MEM_SIZE)	
;;;95     		m_fields->readIndex -= EQ_MEM_SIZE;
;;;96     
;;;97     	return i;
;;;98     }
00009a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.158|
00009e  f8d5c000          LDR      r12,[r5,#0]           ;65
0000a2  eb0e0744          ADD      r7,lr,r4,LSL #1       ;65
0000a6  f83cc007          LDRH     r12,[r12,r7]          ;65
0000aa  f821c010          STRH     r12,[r1,r0,LSL #1]    ;65
0000ae  f8d5c000          LDR      r12,[r5,#0]           ;67
0000b2  f83c7007          LDRH     r7,[r12,r7]           ;67
0000b6  f5b74f7f          CMP      r7,#0xff00            ;67
0000ba  d30d              BCC      |L1.216|
0000bc  f5a74c7e          SUB      r12,r7,#0xfe00        ;69
0000c0  f5bc7cff          SUBS     r12,r12,#0x1fe        ;69
0000c4  d010              BEQ      |L1.232|
0000c6  f5a74c7f          SUB      r12,r7,#0xff00        ;75
0000ca  f1bc0cff          SUBS     r12,r12,#0xff         ;75
0000ce  d010              BEQ      |L1.242|
0000d0  1c76              ADDS     r6,r6,#1              ;81
0000d2  b2f6              UXTB     r6,r6                 ;81
0000d4  2e02              CMP      r6,#2                 ;82
0000d6  d210              BCS      |L1.250|
                  |L1.216|
0000d8  1c64              ADDS     r4,r4,#1              ;86
0000da  b2a4              UXTH     r4,r4                 ;86
0000dc  454c              CMP      r4,r9                 ;87
0000de  d100              BNE      |L1.226|
0000e0  2400              MOVS     r4,#0                 ;88
                  |L1.226|
0000e2  1c40              ADDS     r0,r0,#1              ;60
0000e4  b280              UXTH     r0,r0                 ;60
0000e6  e7d3              B        |L1.144|
                  |L1.232|
0000e8  1c40              ADDS     r0,r0,#1              ;71
0000ea  b280              UXTH     r0,r0                 ;71
0000ec  f88ab000          STRB     r11,[r10,#0]          ;72
0000f0  e003              B        |L1.250|
                  |L1.242|
0000f2  1c40              ADDS     r0,r0,#1              ;77
0000f4  b280              UXTH     r0,r0                 ;77
0000f6  f883b000          STRB     r11,[r3,#0]           ;78
                  |L1.250|
0000fa  6829              LDR      r1,[r5,#0]            ;92
0000fc  88ca              LDRH     r2,[r1,#6]            ;92
0000fe  4402              ADD      r2,r2,r0              ;92
000100  80ca              STRH     r2,[r1,#6]            ;92
000102  6829              LDR      r1,[r5,#0]            ;93
000104  880a              LDRH     r2,[r1,#0]            ;93
000106  4402              ADD      r2,r2,r0              ;93
000108  800a              STRH     r2,[r1,#0]            ;93
00010a  6829              LDR      r1,[r5,#0]            ;94
00010c  880a              LDRH     r2,[r1,#0]            ;94
00010e  454a              CMP      r2,r9                 ;94
000110  d3c3              BCC      |L1.154|
000112  880a              LDRH     r2,[r1,#0]            ;95
000114  f5a252e8          SUB      r2,r2,#0x1d00         ;95
000118  3afc              SUBS     r2,r2,#0xfc           ;95
00011a  800a              STRH     r2,[r1,#0]            ;95
00011c  e7bd              B        |L1.154|
;;;99     
                          ENDP

                  _ZN6Equeue5flushEv PROC ; Equeue::flush()
;;;100    void Equeue::flush()
00011e  6801              LDR      r1,[r0,#0]
;;;101    {
;;;102        uint16_t len = m_fields->produced - m_fields->consumed;
000120  888a              LDRH     r2,[r1,#4]
000122  88cb              LDRH     r3,[r1,#6]
000124  1ad2              SUBS     r2,r2,r3
;;;103    
;;;104        m_fields->consumed += len;
000126  88cb              LDRH     r3,[r1,#6]
000128  4413              ADD      r3,r3,r2
00012a  80cb              STRH     r3,[r1,#6]
;;;105        m_fields->readIndex += len;
00012c  6801              LDR      r1,[r0,#0]
00012e  880b              LDRH     r3,[r1,#0]
000130  441a              ADD      r2,r2,r3
000132  800a              STRH     r2,[r1,#0]
;;;106        if (m_fields->readIndex>=EQ_MEM_SIZE)
000134  6800              LDR      r0,[r0,#0]
000136  8801              LDRH     r1,[r0,#0]
000138  f64152fc          MOV      r2,#0x1dfc
00013c  4291              CMP      r1,r2
00013e  d302              BCC      |L1.326|
;;;107            m_fields->readIndex -= EQ_MEM_SIZE;
000140  8801              LDRH     r1,[r0,#0]
000142  1a89              SUBS     r1,r1,r2
000144  8001              STRH     r1,[r0,#0]
                  |L1.326|
;;;108    }
000146  4770              BX       lr
;;;109    
                          ENDP

                  |L1.328|
                          DCD      0x2000c000

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "src\\equeue.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_equeue_cpp_ba5426fc___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___10_equeue_cpp_ba5426fc___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_equeue_cpp_ba5426fc___Z7__REVSHi|
#line 144
|__asm___10_equeue_cpp_ba5426fc___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
