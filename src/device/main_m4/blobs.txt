; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\blobs.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\blobs.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\blobs.crf ..\..\common\src\blobs.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _Z13compAreaBlobCPKvS0_ PROC ; compAreaBlobC(const void*, const void*)
;;;493    
;;;494    int compAreaBlobC(const void *a, const void *b)
000000  88ca              LDRH     r2,[r1,#6]
;;;495    {
;;;496    	BlobC *ba=(BlobC *)a, *bb=(BlobC *)b;
;;;497    	// calc area of both blobs, return difference
;;;498    	return bb->m_width*bb->m_height - ba->m_width*ba->m_height;
000002  8909              LDRH     r1,[r1,#8]
000004  434a              MULS     r2,r1,r2
000006  88c1              LDRH     r1,[r0,#6]
000008  8900              LDRH     r0,[r0,#8]
00000a  fb012010          MLS      r0,r1,r0,r2
;;;499    }
00000e  4770              BX       lr
;;;500    
                          ENDP

                  _Z13compAreaBlobAPKvS0_ PROC ; compAreaBlobA(const void*, const void*)
;;;1305   
;;;1306   int compAreaBlobA(const void *a, const void *b)
000010  888a              LDRH     r2,[r1,#4]
;;;1307   {
;;;1308   	BlobA *ba=(BlobA *)a, *bb=(BlobA *)b;
;;;1309   	// calc area of both blobs, return difference
;;;1310   	return (bb->m_right - bb->m_left)*(bb->m_bottom - bb->m_top) - (ba->m_right - ba->m_left)*(ba->m_bottom - ba->m_top);
000012  884b              LDRH     r3,[r1,#2]
000014  1ad2              SUBS     r2,r2,r3
000016  890b              LDRH     r3,[r1,#8]
000018  88c9              LDRH     r1,[r1,#6]
00001a  1a59              SUBS     r1,r3,r1
00001c  434a              MULS     r2,r1,r2
00001e  8841              LDRH     r1,[r0,#2]
000020  8883              LDRH     r3,[r0,#4]
000022  1ac9              SUBS     r1,r1,r3
000024  8903              LDRH     r3,[r0,#8]
000026  88c0              LDRH     r0,[r0,#6]
000028  1a18              SUBS     r0,r3,r0
00002a  fb012000          MLA      r0,r1,r0,r2
;;;1311   }
00002e  4770              BX       lr
;;;1312   
                          ENDP

                  _ZN5Blobs18setMaxBlobVelocityEt PROC ; Blobs::setMaxBlobVelocity(unsigned short)
;;;1352   
;;;1353   void Blobs::setMaxBlobVelocity(uint16_t maxVel)
000030  4349              MULS     r1,r1,r1
;;;1354   {
;;;1355   	m_maxTrackingVel2 = maxVel*maxVel;	
000032  f8c012ac          STR      r1,[r0,#0x2ac]
;;;1356   }
000036  4770              BX       lr
;;;1357   
                          ENDP

                  _ZN5Blobs16setBlobFilteringEh PROC ; Blobs::setBlobFiltering(unsigned char)
;;;1347   
;;;1348   void Blobs::setBlobFiltering(uint8_t filtering)
000038  f88012a9          STRB     r1,[r0,#0x2a9]
;;;1349   {
;;;1350   	m_blobFiltering = filtering;	
;;;1351   }
00003c  4770              BX       lr
;;;1352   
                          ENDP

                  _ZN5BlobsC2EP6QqueuePh                  ; Alternate entry point ; Blobs::Blobs__sub_object(Qqueue*, unsigned char*)
                  _ZN5BlobsC1EP6QqueuePh PROC ; Blobs::Blobs(Qqueue*, unsigned char*)
;;;25     
;;;26     Blobs::Blobs(Qqueue *qq, uint8_t *lut) : m_clut(lut)
;;;27     {
;;;28         int i;
;;;29     
;;;30         m_mutex = false;
;;;31         m_minArea = MIN_AREA;
;;;32         m_maxBlobs = MAX_BLOBS;
;;;33         m_maxBlobsPerModel = MAX_BLOBS_PER_MODEL;  
;;;34         m_maxBlob = NULL;
;;;35     
;;;36     	m_qq = qq;
;;;37         m_maxCodedDist = MAX_CODED_DIST;
;;;38         m_mergeDist = MAX_MERGE_DIST;
;;;39     	m_qvals = NULL;
;;;40     
;;;41         m_ccMode = DISABLED;
;;;42     
;;;43         m_blobs = new (std::nothrow) BlobA[MAX_BLOBS];
;;;44         m_numBlobs = 0;
;;;45     	m_numCCBlobs = 0;
;;;46         m_blobReadIndex = 0;
;;;47     	m_timer = 0;
;;;48     	
;;;49     	m_sendDetectedPixels = false;
;;;50     
;;;51     	m_blobTrackerIndex = 0;
;;;52     	setBlobFiltering(BL_BLOB_FILTERING);
;;;53     	setMaxBlobVelocity(BL_MAX_TRACKING_DIST);
;;;54     	
;;;55         // reset blob assemblers
;;;56         for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;57             m_assembler[i].Reset();
;;;58     }
;;;59     
00003e  b570              PUSH     {r4-r6,lr}
000040  460e              MOV      r6,r1
000042  4611              MOV      r1,r2
000044  f7fffffe          BL       _ZN8ColorLUTC1EPh ; ColorLUT::ColorLUT(unsigned char*)
000048  2307              MOVS     r3,#7
00004a  221c              MOVS     r2,#0x1c
00004c  49f9              LDR      r1,|L1.1076|
00004e  f50070d2          ADD      r0,r0,#0x1a4
000052  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
000056  f5a074d2          SUB      r4,r0,#0x1a4
00005a  f5047027          ADD      r0,r4,#0x29c
00005e  2500              MOVS     r5,#0
000060  6045              STR      r5,[r0,#4]
000062  6005              STR      r5,[r0,#0]
000064  8105              STRH     r5,[r0,#8]
000066  f504741b          ADD      r4,r4,#0x26c
00006a  72a5              STRB     r5,[r4,#0xa]
00006c  2114              MOVS     r1,#0x14
00006e  6161              STR      r1,[r4,#0x14]
000070  2064              MOVS     r0,#0x64
000072  81a0              STRH     r0,[r4,#0xc]
000074  81e1              STRH     r1,[r4,#0xe]
000076  6225              STR      r5,[r4,#0x20]
000078  f8446ccc          STR      r6,[r4,#-0xcc]
00007c  2008              MOVS     r0,#8
00007e  8360              STRH     r0,[r4,#0x1a]
000080  2007              MOVS     r0,#7
000082  8320              STRH     r0,[r4,#0x18]
000084  62a5              STR      r5,[r4,#0x28]
000086  7725              STRB     r5,[r4,#0x1c]
000088  f5a4741b          SUB      r4,r4,#0x26c
00008c  49ea              LDR      r1,|L1.1080|
00008e  f44f60c8          MOV      r0,#0x640
000092  f7fffffe          BL       _ZnajRKSt9nothrow_t ; operator new[] (unsigned, const std::nothrow_t&)
000096  b120              CBZ      r0,|L1.162|
000098  2364              MOVS     r3,#0x64
00009a  2210              MOVS     r2,#0x10
00009c  49e7              LDR      r1,|L1.1084|
00009e  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
                  |L1.162|
0000a2  f504741a          ADD      r4,r4,#0x268
0000a6  6020              STR      r0,[r4,#0]
0000a8  80a5              STRH     r5,[r4,#4]
0000aa  81a5              STRH     r5,[r4,#0xc]
0000ac  82a5              STRH     r5,[r4,#0x14]
0000ae  64a5              STR      r5,[r4,#0x48]
0000b0  f8845030          STRB     r5,[r4,#0x30]
0000b4  f8845040          STRB     r5,[r4,#0x40]
0000b8  f5a4741a          SUB      r4,r4,#0x268
0000bc  2103              MOVS     r1,#3
0000be  4620              MOV      r0,r4
0000c0  f7fffffe          BL       _ZN5Blobs16setBlobFilteringEh ; Blobs::setBlobFiltering(unsigned char)
0000c4  2141              MOVS     r1,#0x41
0000c6  4620              MOV      r0,r4
0000c8  f7fffffe          BL       _ZN5Blobs18setMaxBlobVelocityEt ; Blobs::setMaxBlobVelocity(unsigned short)
0000cc  2500              MOVS     r5,#0
                  |L1.206|
0000ce  ebc500c5          RSB      r0,r5,r5,LSL #3
0000d2  eb040080          ADD      r0,r4,r0,LSL #2
0000d6  f50070d2          ADD      r0,r0,#0x1a4
0000da  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
0000de  1c6d              ADDS     r5,r5,#1
0000e0  2d07              CMP      r5,#7
0000e2  dbf4              BLT      |L1.206|
0000e4  4620              MOV      r0,r4
0000e6  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN5BlobsD2Ev                  ; Alternate entry point ; Blobs::~Blobs__sub_object()
                  _ZN5BlobsD1Ev PROC ; Blobs::~Blobs()
;;;98     
;;;99     Blobs::~Blobs()
;;;100    {
;;;101        delete [] m_blobs;
;;;102    }
;;;103    
0000e8  b510              PUSH     {r4,lr}
0000ea  4604              MOV      r4,r0
0000ec  f8d40268          LDR      r0,[r4,#0x268]
0000f0  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
0000f4  f5047027          ADD      r0,r4,#0x29c
0000f8  f7fffffe          BL       _ZN10SimpleListI7TrackerI5BlobAEE5clearEv ; SimpleList<Tracker<BlobA>>::clear()
0000fc  2307              MOVS     r3,#7
0000fe  221c              MOVS     r2,#0x1c
000100  49cf              LDR      r1,|L1.1088|
000102  f50470d2          ADD      r0,r4,#0x1a4
000106  f7fffffe          BL       __aeabi_vec_dtor
00010a  4620              MOV      r0,r4
00010c  e8bd4010          POP      {r4,lr}
000110  f7ffbffe          B.W      _ZN8ColorLUTD1Ev ; ColorLUT::~ColorLUT()
                          ENDP

                  _ZN5Blobs5resetEv PROC ; Blobs::reset()
;;;59     
;;;60     void Blobs::reset()
000114  b510              PUSH     {r4,lr}
;;;61     {
000116  4604              MOV      r4,r0
;;;62     	m_blobTrackersList.clear();
000118  f5047027          ADD      r0,r4,#0x29c
00011c  f7fffffe          BL       _ZN10SimpleListI7TrackerI5BlobAEE5clearEv ; SimpleList<Tracker<BlobA>>::clear()
;;;63     	m_timer = 0;
000120  2000              MOVS     r0,#0
000122  f8c402b0          STR      r0,[r4,#0x2b0]
;;;64     }
000126  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  _ZN5Blobs12compareBlobsERK5BlobAS2_ PROC ; Blobs::compareBlobs(const BlobA&, const BlobA&)
;;;1176   
;;;1177   uint32_t Blobs::compareBlobs(const BlobA &b0, const BlobA &b1)
000128  e92d4ff0          PUSH     {r4-r11,lr}
;;;1178   {
;;;1179   	int32_t xcenter, ycenter, left, right, top, bottom, vel2;
;;;1180   	
;;;1181   	// different values are different
;;;1182   	if (b0.m_model!=b1.m_model)
00012c  880b              LDRH     r3,[r1,#0]
00012e  8814              LDRH     r4,[r2,#0]
;;;1183   		return TR_MAXVAL;
000130  f04f3bff          MOV      r11,#0xffffffff
000134  42a3              CMP      r3,r4                 ;1182
000136  d002              BEQ      |L1.318|
000138  4658              MOV      r0,r11
                  |L1.314|
;;;1184   	
;;;1185   	xcenter = (b0.m_left+b0.m_right)>>1;
;;;1186   	ycenter = (b0.m_top+b0.m_bottom)>>1;
;;;1187   	xcenter -= (b1.m_left+b1.m_right)>>1;
;;;1188   	ycenter -= (b1.m_top+b1.m_bottom)>>1;
;;;1189   	
;;;1190   	vel2 = (xcenter*xcenter + ycenter*ycenter)>>1; // calc dist
;;;1191   	vel2 *= BL_PERIOD;
;;;1192   	vel2 /= m_timer; // normalize with how much time has passed to get velocity
;;;1193   	
;;;1194   	if (vel2>m_maxTrackingVel2)
;;;1195   		return TR_MAXVAL; 
;;;1196   	
;;;1197   	// find distance between 
;;;1198   	left = b0.m_left - b1.m_left;
;;;1199   	right = b0.m_right - b1.m_right;
;;;1200   	top = b0.m_top - b1.m_top;
;;;1201   	bottom = b0.m_bottom - b1.m_bottom;
;;;1202   	
;;;1203   	return (left*left + right*right + top*top + bottom*bottom)>>2;
;;;1204   }
00013a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.318|
00013e  f8b18002          LDRH     r8,[r1,#2]            ;1185
000142  888e              LDRH     r6,[r1,#4]            ;1185
000144  eb080306          ADD      r3,r8,r6              ;1185
000148  085b              LSRS     r3,r3,#1              ;1185
00014a  88cc              LDRH     r4,[r1,#6]            ;1186
00014c  890d              LDRH     r5,[r1,#8]            ;1186
00014e  1961              ADDS     r1,r4,r5              ;1186
000150  0849              LSRS     r1,r1,#1              ;1186
000152  f8b2a002          LDRH     r10,[r2,#2]           ;1187
000156  f8b29004          LDRH     r9,[r2,#4]            ;1187
00015a  eb0a0709          ADD      r7,r10,r9             ;1187
00015e  eba30357          SUB      r3,r3,r7,LSR #1       ;1187
000162  88d7              LDRH     r7,[r2,#6]            ;1188
000164  f8b2c008          LDRH     r12,[r2,#8]           ;1188
000168  eb07020c          ADD      r2,r7,r12             ;1188
00016c  eba10152          SUB      r1,r1,r2,LSR #1       ;1188
000170  435b              MULS     r3,r3,r3              ;1190
000172  fb013101          MLA      r1,r1,r1,r3           ;1190
000176  1049              ASRS     r1,r1,#1              ;1190
000178  f6437248          MOV      r2,#0x3f48            ;1191
00017c  4351              MULS     r1,r2,r1              ;1191
00017e  f8d022b0          LDR      r2,[r0,#0x2b0]        ;1192
000182  fbb1f1f2          UDIV     r1,r1,r2              ;1192
000186  f8d002ac          LDR      r0,[r0,#0x2ac]        ;1194
00018a  4288              CMP      r0,r1                 ;1194
00018c  d201              BCS      |L1.402|
00018e  4658              MOV      r0,r11                ;1195
000190  e7d3              B        |L1.314|
                  |L1.402|
000192  eba8020a          SUB      r2,r8,r10             ;1198
000196  eba60009          SUB      r0,r6,r9              ;1199
00019a  1be3              SUBS     r3,r4,r7              ;1200
00019c  eba5010c          SUB      r1,r5,r12             ;1201
0001a0  4352              MULS     r2,r2,r2              ;1203
0001a2  435b              MULS     r3,r3,r3              ;1203
0001a4  fb002000          MLA      r0,r0,r0,r2           ;1203
0001a8  fb013101          MLA      r1,r1,r1,r3           ;1203
0001ac  4408              ADD      r0,r0,r1              ;1203
0001ae  1080              ASRS     r0,r0,#2              ;1203
0001b0  e7c3              B        |L1.314|
;;;1205   
                          ENDP

                  _ZN5Blobs19handleBlobTracking2Ev PROC ; Blobs::handleBlobTracking2()
;;;1206   
;;;1207   uint16_t Blobs::handleBlobTracking2()
0001b2  e92d47f0          PUSH     {r4-r10,lr}
;;;1208   {
0001b6  4607              MOV      r7,r0
;;;1209   	uint32_t val, min;
;;;1210   	uint16_t n=0;
0001b8  f04f0900          MOV      r9,#0
;;;1211   	SimpleListNode<Tracker<BlobA> > *i;
;;;1212   	uint8_t j;
;;;1213   	BlobA *minBlob;
;;;1214   	
;;;1215   	// go through list, find best candidates
;;;1216   	for (i=m_blobTrackersList.m_first; i!=NULL; i=i->m_next)
0001bc  f8d7429c          LDR      r4,[r7,#0x29c]
;;;1217   	{
;;;1218   		// already found minimum, continue
;;;1219   		if (i->m_object.m_minVal!=TR_MAXVAL)
0001c0  f04f3aff          MOV      r10,#0xffffffff
0001c4  e050              B        |L1.616|
                  |L1.454|
0001c6  68e0              LDR      r0,[r4,#0xc]
0001c8  1c40              ADDS     r0,r0,#1
0001ca  d14c              BNE      |L1.614|
;;;1220   			continue;
;;;1221   		
;;;1222   		// find min
;;;1223   		for (j=0, min=TR_MAXVAL, minBlob=NULL; j<m_numBlobs+m_numCCBlobs; j++)
0001cc  2600              MOVS     r6,#0
0001ce  46d0              MOV      r8,r10
0001d0  2500              MOVS     r5,#0
0001d2  e027              B        |L1.548|
                  |L1.468|
;;;1224   		{
;;;1225   			val = compareBlobs(i->m_object.m_object, m_blobs[j]);
0001d4  f8d70268          LDR      r0,[r7,#0x268]
0001d8  f1040114          ADD      r1,r4,#0x14
0001dc  eb001206          ADD      r2,r0,r6,LSL #4
0001e0  4638              MOV      r0,r7
0001e2  f7fffffe          BL       _ZN5Blobs12compareBlobsERK5BlobAS2_ ; Blobs::compareBlobs(const BlobA&, const BlobA&)
;;;1226   			// find minimum, but if line is already chosen, make sure we're a better match
;;;1227   			if (val<min && i->m_object.swappable(val, &m_blobs[j]))  
0001e6  4540              CMP      r0,r8
0001e8  d21a              BCS      |L1.544|
0001ea  f8d71268          LDR      r1,[r7,#0x268]
0001ee  eb011206          ADD      r2,r1,r6,LSL #4
0001f2  68d1              LDR      r1,[r2,#0xc]
0001f4  b129              CBZ      r1,|L1.514|
0001f6  f8d1c00c          LDR      r12,[r1,#0xc]
0001fa  4584              CMP      r12,r0
0001fc  d803              BHI      |L1.518|
0001fe  2100              MOVS     r1,#0
000200  e00b              B        |L1.538|
                  |L1.514|
000202  2101              MOVS     r1,#1
000204  e009              B        |L1.538|
                  |L1.518|
000206  7823              LDRB     r3,[r4,#0]
000208  b30b              CBZ      r3,|L1.590|
00020a  2b01              CMP      r3,#1
00020c  d01f              BEQ      |L1.590|
00020e  7809              LDRB     r1,[r1,#0]
000210  2902              CMP      r1,#2
000212  d01e              BEQ      |L1.594|
000214  2903              CMP      r1,#3
000216  d01c              BEQ      |L1.594|
000218  2100              MOVS     r1,#0
                  |L1.538|
00021a  b109              CBZ      r1,|L1.544|
;;;1228   			{
;;;1229   				min = val;
00021c  4680              MOV      r8,r0
;;;1230   				minBlob = &m_blobs[j];
00021e  4615              MOV      r5,r2
                  |L1.544|
000220  1c76              ADDS     r6,r6,#1              ;1223
000222  b2f6              UXTB     r6,r6                 ;1223
                  |L1.548|
000224  f8b7026c          LDRH     r0,[r7,#0x26c]        ;1223
000228  f8b71274          LDRH     r1,[r7,#0x274]        ;1223
00022c  4408              ADD      r0,r0,r1              ;1223
00022e  42b0              CMP      r0,r6                 ;1223
000230  d8d0              BHI      |L1.468|
;;;1231   			}
;;;1232   		}
;;;1233   		if (minBlob)
000232  b1c5              CBZ      r5,|L1.614|
;;;1234   		{
;;;1235   			// if this minimum line already has a tracker, see which is better
;;;1236   			if (minBlob->m_tracker)
000234  68e8              LDR      r0,[r5,#0xc]
000236  b170              CBZ      r0,|L1.598|
000238  f8c0a00c          STR      r10,[r0,#0xc]
;;;1237   			{
;;;1238   				minBlob->m_tracker->resetMin(); // reset tracker pointed to by current minline
;;;1239   				minBlob->m_tracker = &i->m_object; 
00023c  60ec              STR      r4,[r5,#0xc]
00023e  6125              STR      r5,[r4,#0x10]
000240  f8c4800c          STR      r8,[r4,#0xc]
;;;1240   				i->m_object.setMin(minBlob, min);
;;;1241   				n++;
000244  f1090901          ADD      r9,r9,#1
000248  fa1ff989          UXTH     r9,r9
00024c  e00b              B        |L1.614|
                  |L1.590|
00024e  2101              MOVS     r1,#1
000250  e7e3              B        |L1.538|
                  |L1.594|
000252  2101              MOVS     r1,#1
000254  e7e1              B        |L1.538|
                  |L1.598|
;;;1242   			}
;;;1243   			else
;;;1244   			{
;;;1245   				minBlob->m_tracker = &i->m_object; // update tracker pointer			
000256  60ec              STR      r4,[r5,#0xc]
000258  6125              STR      r5,[r4,#0x10]
00025a  f8c4800c          STR      r8,[r4,#0xc]
;;;1246   				i->m_object.setMin(minBlob, min);
;;;1247   				n++;
00025e  f1090901          ADD      r9,r9,#1
000262  fa1ff989          UXTH     r9,r9
                  |L1.614|
000266  6a64              LDR      r4,[r4,#0x24]         ;1216
                  |L1.616|
000268  2c00              CMP      r4,#0                 ;1216
00026a  d1ac              BNE      |L1.454|
;;;1248   			}
;;;1249   		}
;;;1250   	}
;;;1251   	return n;
00026c  4648              MOV      r0,r9
                  |L1.622|
;;;1252   }
00026e  e8bd87f0          POP      {r4-r10,pc}
;;;1253   
                          ENDP

                  _ZN5Blobs18handleBlobTrackingEv PROC ; Blobs::handleBlobTracking()
;;;1254   void Blobs::handleBlobTracking()
000272  e92d4ff0          PUSH     {r4-r11,lr}
;;;1255   {
000276  b08d              SUB      sp,sp,#0x34
000278  4604              MOV      r4,r0
;;;1256   	SimpleListNode<Tracker<BlobA> > *i, *inext;
;;;1257   	uint16_t j;
;;;1258   	
;;;1259   	if (m_timer==0)
00027a  f8d402b0          LDR      r0,[r4,#0x2b0]
00027e  2800              CMP      r0,#0
000280  d005              BEQ      |L1.654|
;;;1260   		m_timer = BL_PERIOD;
;;;1261   	else
;;;1262   		m_timer = getTimer(m_timer);
000282  f7fffffe          BL       getTimer
000286  f8c402b0          STR      r0,[r4,#0x2b0]
                  |L1.650|
;;;1263   	
;;;1264   	for (j=0; j<m_numBlobs+m_numCCBlobs; j++)
00028a  2000              MOVS     r0,#0
00028c  e00d              B        |L1.682|
                  |L1.654|
00028e  f6437048          MOV      r0,#0x3f48            ;1260
000292  f8c402b0          STR      r0,[r4,#0x2b0]        ;1260
000296  e7f8              B        |L1.650|
                  |L1.664|
;;;1265   		m_blobs[j].m_tracker = NULL;
000298  2100              MOVS     r1,#0
00029a  220c              MOVS     r2,#0xc
00029c  f8d43268          LDR      r3,[r4,#0x268]
0002a0  eb021200          ADD      r2,r2,r0,LSL #4
0002a4  5099              STR      r1,[r3,r2]
0002a6  1c40              ADDS     r0,r0,#1              ;1264
0002a8  b280              UXTH     r0,r0                 ;1264
                  |L1.682|
0002aa  f8b4126c          LDRH     r1,[r4,#0x26c]        ;1264
0002ae  f8b42274          LDRH     r2,[r4,#0x274]        ;1264
0002b2  4411              ADD      r1,r1,r2              ;1264
0002b4  4281              CMP      r1,r0                 ;1264
0002b6  d8ef              BHI      |L1.664|
;;;1266   	
;;;1267   	// reset tracking table
;;;1268   	// Note, we don't need to reset g_linesList entries (e.g. m_tracker) because these are renewed  
;;;1269   	for (i=m_blobTrackersList.m_first; i!=NULL; i=i->m_next) 
0002b8  f8d4029c          LDR      r0,[r4,#0x29c]
0002bc  f04f31ff          MOV      r1,#0xffffffff
0002c0  e001              B        |L1.710|
                  |L1.706|
0002c2  60c1              STR      r1,[r0,#0xc]
0002c4  6a40              LDR      r0,[r0,#0x24]
                  |L1.710|
0002c6  2800              CMP      r0,#0
0002c8  d1fb              BNE      |L1.706|
                  |L1.714|
;;;1270   		i->m_object.resetMin();
;;;1271   	
;;;1272   	// do search, find minimums
;;;1273   	while(handleBlobTracking2());
0002ca  4620              MOV      r0,r4
0002cc  f7fffffe          BL       _ZN5Blobs19handleBlobTracking2Ev ; Blobs::handleBlobTracking2()
0002d0  2800              CMP      r0,#0
0002d2  d1fa              BNE      |L1.714|
;;;1274   	
;;;1275   	// go through, update tracker, remove entries that are no longer valid
;;;1276   	for (i=m_blobTrackersList.m_first; i!=NULL; i=inext)
0002d4  f8d4529c          LDR      r5,[r4,#0x29c]
;;;1277   	{
;;;1278   		inext = i->m_next;
;;;1279   		
;;;1280   		if (i->m_object.update()&TR_EVENT_INVALIDATED)
;;;1281   			m_blobTrackersList.remove(i); // no longer valid?  remove from tracker list
0002d8  f5047727          ADD      r7,r4,#0x29c
0002dc  e021              B        |L1.802|
                  |L1.734|
0002de  6a6e              LDR      r6,[r5,#0x24]         ;1278
0002e0  4628              MOV      r0,r5                 ;1280
0002e2  f7fffffe          BL       _ZN7TrackerI5BlobAE6updateEv ; Tracker<BlobA>::update()
0002e6  07c0              LSLS     r0,r0,#31             ;1280
0002e8  d01a              BEQ      |L1.800|
0002ea  2100              MOVS     r1,#0                 ;1280
0002ec  6838              LDR      r0,[r7,#0]            ;1280
0002ee  4602              MOV      r2,r0                 ;1280
0002f0  e014              B        |L1.796|
                  |L1.754|
0002f2  42a8              CMP      r0,r5
0002f4  d110              BNE      |L1.792|
0002f6  42aa              CMP      r2,r5
0002f8  d101              BNE      |L1.766|
0002fa  6a6b              LDR      r3,[r5,#0x24]
0002fc  603b              STR      r3,[r7,#0]
                  |L1.766|
0002fe  687a              LDR      r2,[r7,#4]
000300  42aa              CMP      r2,r5
000302  d100              BNE      |L1.774|
000304  6079              STR      r1,[r7,#4]
                  |L1.774|
000306  b109              CBZ      r1,|L1.780|
000308  6a42              LDR      r2,[r0,#0x24]
00030a  624a              STR      r2,[r1,#0x24]
                  |L1.780|
00030c  f7fffffe          BL       _ZdlPv ; operator delete (void*)
000310  8938              LDRH     r0,[r7,#8]
000312  1e40              SUBS     r0,r0,#1
000314  8138              STRH     r0,[r7,#8]
000316  e003              B        |L1.800|
                  |L1.792|
000318  4601              MOV      r1,r0
00031a  6a40              LDR      r0,[r0,#0x24]
                  |L1.796|
00031c  2800              CMP      r0,#0
00031e  d1e8              BNE      |L1.754|
                  |L1.800|
000320  4635              MOV      r5,r6                 ;1276
                  |L1.802|
000322  2d00              CMP      r5,#0                 ;1276
000324  d1db              BNE      |L1.734|
;;;1282   	}	
;;;1283   	
;;;1284   	// find new candidates
;;;1285   	for (j=0; j<m_numBlobs+m_numCCBlobs; j++)
000326  e06b              B        |L1.1024|
                  |L1.808|
;;;1286   	{
;;;1287   		if (m_blobs[j].m_tracker==NULL)
000328  200c              MOVS     r0,#0xc
00032a  f8d41268          LDR      r1,[r4,#0x268]
00032e  eb001b05          ADD      r11,r0,r5,LSL #4
000332  f851000b          LDR      r0,[r1,r11]
000336  bbe8              CBNZ     r0,|L1.948|
;;;1288   		{
;;;1289   			SimpleListNode<Tracker<BlobA> > *n;
;;;1290   			uint16_t leading, trailing;
;;;1291   			leading = m_blobFiltering*BL_FILTERING_MULTIPLIER;
000338  f89402a9          LDRB     r0,[r4,#0x2a9]
00033c  ea4f1800          LSL      r8,r0,#4
;;;1292   			trailing = (leading+1)>>1;
000340  f1080001          ADD      r0,r8,#1
000344  ea4f0a50          LSR      r10,r0,#1
;;;1293   			n = m_blobTrackersList.add(Tracker<BlobA>(m_blobs[j], m_blobTrackerIndex++, leading, trailing));
000348  f8d40268          LDR      r0,[r4,#0x268]
00034c  a904              ADD      r1,sp,#0x10
00034e  eb001005          ADD      r0,r0,r5,LSL #4
000352  e890004c          LDM      r0,{r2,r3,r6}
000356  68c0              LDR      r0,[r0,#0xc]
000358  e88d004c          STM      sp,{r2,r3,r6}
00035c  9003              STR      r0,[sp,#0xc]
00035e  f89492a8          LDRB     r9,[r4,#0x2a8]
000362  f1090001          ADD      r0,r9,#1
000366  f88402a8          STRB     r0,[r4,#0x2a8]
00036a  f1010014          ADD      r0,r1,#0x14
00036e  f7fffffe          BL       _ZN5BlobAC1Ev ; BlobA::BlobA()
000372  f1a00614          SUB      r6,r0,#0x14
000376  e89d000f          LDM      sp,{r0-r3}
00037a  3614              ADDS     r6,r6,#0x14
00037c  c60f              STM      r6!,{r0-r3}
00037e  3e24              SUBS     r6,r6,#0x24
000380  f8869001          STRB     r9,[r6,#1]
000384  f8a68006          STRH     r8,[r6,#6]
000388  f8a6a008          STRH     r10,[r6,#8]
00038c  4630              MOV      r0,r6
00038e  f7fffffe          BL       _ZN7TrackerI5BlobAE5resetEv ; Tracker<BlobA>::reset()
000392  4929              LDR      r1,|L1.1080|
000394  2028              MOVS     r0,#0x28
000396  f7fffffe          BL       _ZnwjRKSt9nothrow_t ; operator new(unsigned, const std::nothrow_t&)
00039a  b198              CBZ      r0,|L1.964|
00039c  f44f79fa          MOV      r9,#0x1f4
0003a0  3014              ADDS     r0,r0,#0x14
0003a2  f7fffffe          BL       _ZN5BlobAC1Ev ; BlobA::BlobA()
0003a6  f1a00814          SUB      r8,r0,#0x14
0003aa  f8a89006          STRH     r9,[r8,#6]
0003ae  f8a89008          STRH     r9,[r8,#8]
0003b2  e000              B        |L1.950|
                  |L1.948|
0003b4  e022              B        |L1.1020|
                  |L1.950|
0003b6  4640              MOV      r0,r8
0003b8  f7fffffe          BL       _ZN7TrackerI5BlobAE5resetEv ; Tracker<BlobA>::reset()
0003bc  2000              MOVS     r0,#0
0003be  f8c80024          STR      r0,[r8,#0x24]
0003c2  e001              B        |L1.968|
                  |L1.964|
0003c4  f04f0800          MOV      r8,#0
                  |L1.968|
0003c8  f1b80f00          CMP      r8,#0
0003cc  d026              BEQ      |L1.1052|
0003ce  2224              MOVS     r2,#0x24
0003d0  4631              MOV      r1,r6
0003d2  4640              MOV      r0,r8
0003d4  f7fffffe          BL       __aeabi_memcpy4
0003d8  4638              MOV      r0,r7
0003da  8901              LDRH     r1,[r0,#8]
0003dc  1c49              ADDS     r1,r1,#1
0003de  8101              STRH     r1,[r0,#8]
0003e0  6801              LDR      r1,[r0,#0]
0003e2  b1f1              CBZ      r1,|L1.1058|
0003e4  6842              LDR      r2,[r0,#4]
0003e6  f8c28024          STR      r8,[r2,#0x24]
                  |L1.1002|
0003ea  f8c08004          STR      r8,[r0,#4]
                  |L1.1006|
;;;1294   			if (n==NULL)
0003ee  f1b80f00          CMP      r8,#0
0003f2  d019              BEQ      |L1.1064|
;;;1295   			{
;;;1296   				cprintf(0, "hlt\n");
;;;1297   				break;
;;;1298   			}
;;;1299   			m_blobs[j].m_tracker = &n->m_object; // point back to tracker
0003f4  f8d40268          LDR      r0,[r4,#0x268]
0003f8  f840800b          STR      r8,[r0,r11]
                  |L1.1020|
0003fc  1c6d              ADDS     r5,r5,#1              ;1285
0003fe  b2ad              UXTH     r5,r5                 ;1285
                  |L1.1024|
000400  f8b4026c          LDRH     r0,[r4,#0x26c]        ;1285
000404  f8b41274          LDRH     r1,[r4,#0x274]        ;1285
000408  4408              ADD      r0,r0,r1              ;1285
00040a  42a8              CMP      r0,r5                 ;1285
00040c  d88c              BHI      |L1.808|
                  |L1.1038|
;;;1300   		}
;;;1301   	}
;;;1302   	
;;;1303   	setTimer(&m_timer);
00040e  b00d              ADD      sp,sp,#0x34
000410  f504702c          ADD      r0,r4,#0x2b0
000414  e8bd4ff0          POP      {r4-r11,lr}
000418  f7ffbffe          B.W      setTimer
                  |L1.1052|
00041c  f04f0800          MOV      r8,#0
000420  e7e5              B        |L1.1006|
                  |L1.1058|
000422  f8c08000          STR      r8,[r0,#0]
000426  e7e0              B        |L1.1002|
                  |L1.1064|
000428  a106              ADR      r1,|L1.1092|
00042a  2000              MOVS     r0,#0                 ;1296
00042c  f7fffffe          BL       _Z7cprintfjPKcz ; cprintf(unsigned, const char*, ...)
000430  e7ed              B        |L1.1038|
000432  0000              DCW      0x0000
                  |L1.1076|
                          DCD      _ZN14CBlobAssemblerC1Ev ; CBlobAssembler::CBlobAssembler()
                  |L1.1080|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L1.1084|
                          DCD      _ZN5BlobAC1Ev ; BlobA::BlobA()
                  |L1.1088|
                          DCD      _ZN14CBlobAssemblerD1Ev ; CBlobAssembler::~CBlobAssembler()
                  |L1.1092|
000444  686c740a          DCB      "hlt\n",0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                          ENDP

                  _ZN5Blobs5shiftEv PROC ; Blobs::shift()
;;;572    
;;;573    void Blobs::shift()
00044c  b570              PUSH     {r4-r6,lr}
;;;574    {
;;;575    	uint16_t i;
;;;576    	
;;;577    	if (m_numCCBlobs==0 || m_blobs+m_numBlobs==m_ccBlobs)
00044e  f8b01274          LDRH     r1,[r0,#0x274]
000452  2900              CMP      r1,#0
000454  d029              BEQ      |L1.1194|
000456  f8b0226c          LDRH     r2,[r0,#0x26c]
00045a  f8d01268          LDR      r1,[r0,#0x268]
00045e  eb011102          ADD      r1,r1,r2,LSL #4
000462  f8d02270          LDR      r2,[r0,#0x270]
000466  4291              CMP      r1,r2
000468  d01f              BEQ      |L1.1194|
;;;578    		return;
;;;579    	
;;;580    	for (i=0; i<m_numCCBlobs; i++)
00046a  2100              MOVS     r1,#0
00046c  e012              B        |L1.1172|
                  |L1.1134|
;;;581    		m_blobs[m_numBlobs+i] = m_ccBlobs[i];
00046e  f8b0326c          LDRH     r3,[r0,#0x26c]
000472  f8d02268          LDR      r2,[r0,#0x268]
000476  440b              ADD      r3,r3,r1
000478  eb021203          ADD      r2,r2,r3,LSL #4
00047c  f8d03270          LDR      r3,[r0,#0x270]
000480  eb031301          ADD      r3,r3,r1,LSL #4
000484  e8930070          LDM      r3,{r4-r6}
000488  68db              LDR      r3,[r3,#0xc]
00048a  e8820070          STM      r2,{r4-r6}
00048e  60d3              STR      r3,[r2,#0xc]
000490  1c49              ADDS     r1,r1,#1              ;580
000492  b289              UXTH     r1,r1                 ;580
                  |L1.1172|
000494  f8b02274          LDRH     r2,[r0,#0x274]        ;580
000498  428a              CMP      r2,r1                 ;580
00049a  d8e8              BHI      |L1.1134|
;;;582    	
;;;583    	m_ccBlobs = m_blobs+m_numBlobs;
00049c  f500701a          ADD      r0,r0,#0x268
0004a0  8882              LDRH     r2,[r0,#4]
0004a2  6801              LDR      r1,[r0,#0]
0004a4  eb011102          ADD      r1,r1,r2,LSL #4
0004a8  6081              STR      r1,[r0,#8]
                  |L1.1194|
;;;584    }
0004aa  bd70              POP      {r4-r6,pc}
;;;585    
                          ENDP

                  _ZN5Blobs8compressEP5BlobAt PROC ; Blobs::compress(BlobA*, unsigned short)
;;;548    
;;;549    uint16_t Blobs::compress(BlobA *blobs, uint16_t numBlobs)
0004ac  b5f0              PUSH     {r4-r7,lr}
;;;550    {
;;;551        uint16_t i, invalid;
;;;552        BlobA *destination;
;;;553    
;;;554        // compress list
;;;555        for (i=0, destination=NULL, invalid=0; i<numBlobs; i++)
0004ae  2500              MOVS     r5,#0
0004b0  2300              MOVS     r3,#0
0004b2  2000              MOVS     r0,#0
0004b4  e00d              B        |L1.1234|
                  |L1.1206|
;;;556        {
;;;557            if (blobs[i].m_model==0)
0004b6  eb011405          ADD      r4,r1,r5,LSL #4
0004ba  8826              LDRH     r6,[r4,#0]
0004bc  b166              CBZ      r6,|L1.1240|
;;;558            {
;;;559                if (destination==NULL)
;;;560                    destination = blobs+i;
;;;561                invalid++;
;;;562                continue;
;;;563            }
;;;564            if (destination)
0004be  b133              CBZ      r3,|L1.1230|
;;;565    		{
;;;566    			*destination = blobs[i];
0004c0  e89410c0          LDM      r4,{r6,r7,r12}
0004c4  68e4              LDR      r4,[r4,#0xc]
0004c6  e88310c0          STM      r3,{r6,r7,r12}
0004ca  60dc              STR      r4,[r3,#0xc]
;;;567                destination++;
0004cc  3310              ADDS     r3,r3,#0x10
                  |L1.1230|
0004ce  1c6d              ADDS     r5,r5,#1              ;555
0004d0  b2ad              UXTH     r5,r5                 ;555
                  |L1.1234|
0004d2  4295              CMP      r5,r2                 ;555
0004d4  d3ef              BCC      |L1.1206|
;;;568            }
;;;569        }
;;;570        return invalid;
;;;571    }
0004d6  bdf0              POP      {r4-r7,pc}
                  |L1.1240|
0004d8  b903              CBNZ     r3,|L1.1244|
0004da  4623              MOV      r3,r4                 ;560
                  |L1.1244|
0004dc  1c40              ADDS     r0,r0,#1              ;561
0004de  b280              UXTH     r0,r0                 ;561
0004e0  e7f5              B        |L1.1230|
;;;572    
                          ENDP

                  _ZN5Blobs5angleEP5BlobAS1_ PROC ; Blobs::angle(BlobA*, BlobA*)
;;;809    
;;;810    int16_t Blobs::angle(BlobA *blob0, BlobA *blob1)
0004e2  b510              PUSH     {r4,lr}
;;;811    {
;;;812        int acx, acy, bcx, bcy;
;;;813        float res;
;;;814    
;;;815        acx = (blob0->m_right + blob0->m_left)/2;
0004e4  8888              LDRH     r0,[r1,#4]
0004e6  884b              LDRH     r3,[r1,#2]
0004e8  4418              ADD      r0,r0,r3
0004ea  0840              LSRS     r0,r0,#1
;;;816        acy = (blob0->m_bottom + blob0->m_top)/2;
0004ec  890b              LDRH     r3,[r1,#8]
0004ee  88c9              LDRH     r1,[r1,#6]
0004f0  4419              ADD      r1,r1,r3
0004f2  0849              LSRS     r1,r1,#1
;;;817        bcx = (blob1->m_right + blob1->m_left)/2;
0004f4  8893              LDRH     r3,[r2,#4]
0004f6  8854              LDRH     r4,[r2,#2]
0004f8  4423              ADD      r3,r3,r4
0004fa  085b              LSRS     r3,r3,#1
;;;818        bcy = (blob1->m_bottom + blob1->m_top)/2;
0004fc  8914              LDRH     r4,[r2,#8]
0004fe  88d2              LDRH     r2,[r2,#6]
000500  4422              ADD      r2,r2,r4
000502  0852              LSRS     r2,r2,#1
;;;819    
;;;820        res = atan2((float)(acy-bcy), (float)(bcx-acx))*180/3.1415f;
000504  1a89              SUBS     r1,r1,r2
000506  1a18              SUBS     r0,r3,r0
000508  ee001a10          VMOV     s0,r1
00050c  ee000a90          VMOV     s1,r0
000510  eeb80ac0          VCVT.F32.S32 s0,s0
000514  eef80ae0          VCVT.F32.S32 s1,s1
000518  f7fffffe          BL       __hardfp_atan2f
00051c  eddf0afe          VLDR     s1,|L1.2328|
000520  ee600a20          VMUL.F32 s1,s0,s1
000524  ed9f1afd          VLDR     s2,|L1.2332|
000528  ee800a81          VDIV.F32 s0,s1,s2
;;;821    
;;;822        return (int16_t)res;
00052c  eebd0ac0          VCVT.S32.F32 s0,s0
000530  ee100a10          VMOV     r0,s0
000534  b200              SXTH     r0,r0
;;;823    }
000536  bd10              POP      {r4,pc}
;;;824    
                          ENDP

                  _ZN5Blobs8cleanup2EPP5BlobAPs PROC ; Blobs::cleanup2(BlobA**, short*)
;;;944    // eliminate duplicate and adjacent signatures
;;;945    void Blobs::cleanup2(BlobA *blobs[], int16_t *numBlobs)
000538  e92d41f0          PUSH     {r4-r8,lr}
;;;946    {
00053c  b08a              SUB      sp,sp,#0x28
;;;947        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;948        int i, j;
;;;949        uint16_t numNewBlobs;
;;;950        bool set;
;;;951    
;;;952        for (i=0, numNewBlobs=0, set=false; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i=j)
00053e  2000              MOVS     r0,#0
000540  2300              MOVS     r3,#0
000542  2500              MOVS     r5,#0
;;;953        {
;;;954            newBlobs[numNewBlobs++] = blobs[i];
;;;955            for (j=i+1; j<*numBlobs; j++)
000544  f9b24000          LDRSH    r4,[r2,#0]
000548  466e              MOV      r6,sp                 ;947
00054a  e018              B        |L1.1406|
                  |L1.1356|
00054c  469c              MOV      r12,r3                ;954
00054e  f8517020          LDR      r7,[r1,r0,LSL #2]     ;954
000552  1c5b              ADDS     r3,r3,#1              ;954
000554  b29b              UXTH     r3,r3                 ;954
000556  f846702c          STR      r7,[r6,r12,LSL #2]    ;954
00055a  1c40              ADDS     r0,r0,#1
00055c  e00d              B        |L1.1402|
                  |L1.1374|
;;;956            {
;;;957                if ((blobs[j]->m_model&0x07)==(blobs[i]->m_model&0x07))
00055e  f851c020          LDR      r12,[r1,r0,LSL #2]
000562  f8978000          LDRB     r8,[r7,#0]
000566  f89cc000          LDRB     r12,[r12,#0]
00056a  f0080807          AND      r8,r8,#7
00056e  f00c0c07          AND      r12,r12,#7
000572  45c4              CMP      r12,r8
000574  d103              BNE      |L1.1406|
;;;958                    set = true;
000576  2501              MOVS     r5,#1
000578  1c40              ADDS     r0,r0,#1              ;955
                  |L1.1402|
00057a  4284              CMP      r4,r0                 ;955
00057c  dcef              BGT      |L1.1374|
                  |L1.1406|
00057e  4284              CMP      r4,r0                 ;952
000580  dd01              BLE      |L1.1414|
000582  2b0a              CMP      r3,#0xa               ;952
000584  d3e2              BCC      |L1.1356|
                  |L1.1414|
;;;959                else
;;;960                    break;
;;;961            }
;;;962        }
;;;963        if (set)
000586  2d00              CMP      r5,#0
000588  d009              BEQ      |L1.1438|
;;;964        {
;;;965            // copy new blobs over
;;;966            for (i=0; i<numNewBlobs; i++)
00058a  2000              MOVS     r0,#0
00058c  e004              B        |L1.1432|
                  |L1.1422|
;;;967                blobs[i] = newBlobs[i];
00058e  f8564020          LDR      r4,[r6,r0,LSL #2]
000592  f8414020          STR      r4,[r1,r0,LSL #2]
000596  1c40              ADDS     r0,r0,#1              ;966
                  |L1.1432|
000598  4298              CMP      r0,r3                 ;966
00059a  dbf8              BLT      |L1.1422|
;;;968            *numBlobs = numNewBlobs;
00059c  8013              STRH     r3,[r2,#0]
                  |L1.1438|
;;;969        }
;;;970    }
00059e  b00a              ADD      sp,sp,#0x28
0005a0  e8bd81f0          POP      {r4-r8,pc}
;;;971    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_b PROC ; Blobs::distance(BlobA*, BlobA*, bool)
;;;794    
;;;795    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1, bool horiz)
0005a4  2b00              CMP      r3,#0
;;;796    {
0005a6  d00a              BEQ      |L1.1470|
;;;797        int16_t dist;
;;;798    
;;;799        if (horiz)
;;;800            dist = (blob0->m_right+blob0->m_left)/2 - (blob1->m_right+blob1->m_left)/2;
0005a8  8888              LDRH     r0,[r1,#4]
0005aa  8849              LDRH     r1,[r1,#2]
0005ac  4408              ADD      r0,r0,r1
0005ae  8891              LDRH     r1,[r2,#4]
0005b0  8852              LDRH     r2,[r2,#2]
0005b2  0840              LSRS     r0,r0,#1
0005b4  4411              ADD      r1,r1,r2
0005b6  eba00051          SUB      r0,r0,r1,LSR #1
0005ba  b200              SXTH     r0,r0
0005bc  e009              B        |L1.1490|
                  |L1.1470|
;;;801        else
;;;802            dist = (blob0->m_bottom+blob0->m_top)/2 - (blob1->m_bottom+blob1->m_top)/2;
0005be  8908              LDRH     r0,[r1,#8]
0005c0  88c9              LDRH     r1,[r1,#6]
0005c2  4408              ADD      r0,r0,r1
0005c4  8911              LDRH     r1,[r2,#8]
0005c6  88d2              LDRH     r2,[r2,#6]
0005c8  0840              LSRS     r0,r0,#1
0005ca  4411              ADD      r1,r1,r2
0005cc  eba00051          SUB      r0,r0,r1,LSR #1
0005d0  b200              SXTH     r0,r0
                  |L1.1490|
;;;803    
;;;804        if (dist<0)
0005d2  2800              CMP      r0,#0
0005d4  da01              BGE      |L1.1498|
;;;805            return -dist;
0005d6  4240              RSBS     r0,r0,#0
0005d8  b200              SXTH     r0,r0
                  |L1.1498|
;;;806        else
;;;807            return dist;
;;;808    }
0005da  4770              BX       lr
;;;809    
                          ENDP

                  _ZN5Blobs4sortEPP5BlobAtS1_b PROC ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
;;;824    
;;;825    void Blobs::sort(BlobA *blobs[], uint16_t len, BlobA *firstBlob, bool horiz)
0005dc  e92d47f0          PUSH     {r4-r10,lr}
;;;826    {
0005e0  b085              SUB      sp,sp,#0x14
0005e2  4681              MOV      r9,r0
0005e4  f8dda034          LDR      r10,[sp,#0x34]
0005e8  460c              MOV      r4,r1
0005ea  4616              MOV      r6,r2
0005ec  4698              MOV      r8,r3
;;;827        uint16_t i, td, distances[MAX_COLOR_CODE_MODELS*2];
;;;828        bool done;
;;;829        BlobA *tb;
;;;830    
;;;831        // create list of distances
;;;832        for (i=0; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
0005ee  2500              MOVS     r5,#0
0005f0  466f              MOV      r7,sp                 ;827
0005f2  e00a              B        |L1.1546|
                  |L1.1524|
;;;833            distances[i] = distance(firstBlob, blobs[i], horiz);
0005f4  f8542025          LDR      r2,[r4,r5,LSL #2]
0005f8  4653              MOV      r3,r10
0005fa  4641              MOV      r1,r8
0005fc  4648              MOV      r0,r9
0005fe  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_b ; Blobs::distance(BlobA*, BlobA*, bool)
000602  f8270015          STRH     r0,[r7,r5,LSL #1]
000606  1c6d              ADDS     r5,r5,#1              ;832
000608  b2ad              UXTH     r5,r5                 ;832
                  |L1.1546|
00060a  42b5              CMP      r5,r6                 ;832
00060c  d21e              BCS      |L1.1612|
00060e  2d0a              CMP      r5,#0xa               ;832
000610  d3f0              BCC      |L1.1524|
000612  e01b              B        |L1.1612|
                  |L1.1556|
;;;834    
;;;835        // sort -- note, we only have 5 maximum to sort, so no worries about efficiency
;;;836        while(1)
;;;837        {
;;;838            for (i=1, done=true; i<len && i<MAX_COLOR_CODE_MODELS*2; i++)
;;;839            {
;;;840                if (distances[i-1]>distances[i])
000614  1e41              SUBS     r1,r0,#1
000616  f8372010          LDRH     r2,[r7,r0,LSL #1]
00061a  f8373011          LDRH     r3,[r7,r1,LSL #1]
00061e  4293              CMP      r3,r2
000620  d90c              BLS      |L1.1596|
;;;841                {
;;;842                    // swap distances
;;;843                    td = distances[i];
;;;844                    distances[i] = distances[i-1];
000622  f8273010          STRH     r3,[r7,r0,LSL #1]
;;;845                    distances[i-1] = td;
000626  f8272011          STRH     r2,[r7,r1,LSL #1]
;;;846                    // swap blobs
;;;847                    tb = blobs[i];
00062a  f8542020          LDR      r2,[r4,r0,LSL #2]
;;;848                    blobs[i] = blobs[i-1];
00062e  f8543021          LDR      r3,[r4,r1,LSL #2]
000632  f8443020          STR      r3,[r4,r0,LSL #2]
;;;849                    blobs[i-1] = tb;
000636  f8442021          STR      r2,[r4,r1,LSL #2]
;;;850    
;;;851                    done = false;
00063a  2500              MOVS     r5,#0
                  |L1.1596|
00063c  1c40              ADDS     r0,r0,#1              ;838
00063e  b280              UXTH     r0,r0                 ;838
                  |L1.1600|
000640  42b0              CMP      r0,r6                 ;838
000642  d201              BCS      |L1.1608|
000644  280a              CMP      r0,#0xa               ;838
000646  d3e5              BCC      |L1.1556|
                  |L1.1608|
;;;852                }
;;;853            }
;;;854            if (done)
000648  2d00              CMP      r5,#0
00064a  d102              BNE      |L1.1618|
                  |L1.1612|
00064c  2001              MOVS     r0,#1                 ;838
00064e  2501              MOVS     r5,#1                 ;838
000650  e7f6              B        |L1.1600|
                  |L1.1618|
;;;855                break;
;;;856        }
;;;857    }
000652  b005              ADD      sp,sp,#0x14
000654  e60b              B        |L1.622|
;;;858    
                          ENDP

                  _ZN5Blobs7cleanupEPP5BlobAPs PROC ; Blobs::cleanup(BlobA**, short*)
;;;894    // impose weak size constraint
;;;895    void Blobs::cleanup(BlobA *blobs[], int16_t *numBlobs)
000656  e92d4ff0          PUSH     {r4-r11,lr}
;;;896    {
00065a  b08b              SUB      sp,sp,#0x2c
;;;897        int i, j;
;;;898        bool set;
;;;899        uint16_t maxEqual, numEqual, numNewBlobs;
;;;900        BlobA *newBlobs[MAX_COLOR_CODE_MODELS*2];
;;;901        uint32_t area0, area1, lowerArea, upperArea, maxEqualArea;
;;;902    
;;;903        for (i=0, maxEqual=0, set=false; i<*numBlobs; i++)
00065c  2400              MOVS     r4,#0
00065e  46a1              MOV      r9,r4
000660  2000              MOVS     r0,#0
000662  900a              STR      r0,[sp,#0x28]
;;;904        {
;;;905            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
;;;906            lowerArea = (area0*100)/(100+TOL);
;;;907            upperArea = area0 + (area0*TOL)/100;
;;;908    
;;;909            for (j=0, numEqual=0; j<*numBlobs; j++)
000664  f9b28000          LDRSH    r8,[r2,#0]
000668  e038              B        |L1.1756|
                  |L1.1642|
00066a  f8510024          LDR      r0,[r1,r4,LSL #2]     ;905
00066e  8883              LDRH     r3,[r0,#4]            ;905
000670  8845              LDRH     r5,[r0,#2]            ;905
000672  1b5e              SUBS     r6,r3,r5              ;905
000674  8903              LDRH     r3,[r0,#8]            ;905
000676  88c0              LDRH     r0,[r0,#6]            ;905
000678  1a18              SUBS     r0,r3,r0              ;905
00067a  4346              MULS     r6,r0,r6              ;905
00067c  2064              MOVS     r0,#0x64              ;906
00067e  4370              MULS     r0,r6,r0              ;906
000680  f44f7361          MOV      r3,#0x384             ;906
000684  fbb0faf3          UDIV     r10,r0,r3             ;906
000688  f44f7048          MOV      r0,#0x320             ;907
00068c  4370              MULS     r0,r6,r0              ;907
00068e  2364              MOVS     r3,#0x64              ;907
000690  fbb0f0f3          UDIV     r0,r0,r3              ;907
000694  eb000b06          ADD      r11,r0,r6             ;907
000698  2000              MOVS     r0,#0
00069a  2300              MOVS     r3,#0
00069c  e015              B        |L1.1738|
                  |L1.1694|
;;;910            {
;;;911                if (i==j)
00069e  4284              CMP      r4,r0
0006a0  d012              BEQ      |L1.1736|
;;;912                    continue;
;;;913                area1 = (blobs[j]->m_right-blobs[j]->m_left) * (blobs[j]->m_bottom-blobs[j]->m_top);
0006a2  f8515020          LDR      r5,[r1,r0,LSL #2]
0006a6  88af              LDRH     r7,[r5,#4]
0006a8  f8b5e002          LDRH     lr,[r5,#2]
0006ac  eba7070e          SUB      r7,r7,lr
0006b0  f8b5e008          LDRH     lr,[r5,#8]
0006b4  88ed              LDRH     r5,[r5,#6]
0006b6  ebae0505          SUB      r5,lr,r5
0006ba  436f              MULS     r7,r5,r7
;;;914                if (lowerArea<=area1 && area1<=upperArea)
0006bc  45ba              CMP      r10,r7
0006be  d803              BHI      |L1.1736|
0006c0  455f              CMP      r7,r11
0006c2  d801              BHI      |L1.1736|
;;;915                    numEqual++;
0006c4  1c5b              ADDS     r3,r3,#1
0006c6  b29b              UXTH     r3,r3
                  |L1.1736|
0006c8  1c40              ADDS     r0,r0,#1              ;909
                  |L1.1738|
0006ca  4580              CMP      r8,r0                 ;909
0006cc  dce7              BGT      |L1.1694|
;;;916            }
;;;917            if (numEqual>maxEqual)
0006ce  454b              CMP      r3,r9
0006d0  d903              BLS      |L1.1754|
;;;918            {
;;;919                maxEqual = numEqual;
0006d2  4699              MOV      r9,r3
;;;920                maxEqualArea = area0;
0006d4  46b4              MOV      r12,r6
;;;921                set = true;
0006d6  2001              MOVS     r0,#1
0006d8  900a              STR      r0,[sp,#0x28]
                  |L1.1754|
0006da  1c64              ADDS     r4,r4,#1              ;903
                  |L1.1756|
0006dc  45a0              CMP      r8,r4                 ;903
0006de  dcc4              BGT      |L1.1642|
;;;922            }
;;;923        }
;;;924    
;;;925        if (!set)
0006e0  980a              LDR      r0,[sp,#0x28]
0006e2  b908              CBNZ     r0,|L1.1768|
;;;926            *numBlobs = 0;
0006e4  2000              MOVS     r0,#0
0006e6  8010              STRH     r0,[r2,#0]
                  |L1.1768|
;;;927    
;;;928        for (i=0, numNewBlobs=0; i<*numBlobs && numNewBlobs<MAX_COLOR_CODE_MODELS*2; i++)
0006e8  2300              MOVS     r3,#0
0006ea  2000              MOVS     r0,#0
0006ec  466f              MOV      r7,sp                 ;900
0006ee  f9b28000          LDRSH    r8,[r2,#0]            ;909
0006f2  e023              B        |L1.1852|
                  |L1.1780|
;;;929        {
;;;930            area0 = (blobs[i]->m_right-blobs[i]->m_left) * (blobs[i]->m_bottom-blobs[i]->m_top);
0006f4  f8515023          LDR      r5,[r1,r3,LSL #2]
0006f8  88ac              LDRH     r4,[r5,#4]
0006fa  886e              LDRH     r6,[r5,#2]
0006fc  f8b59006          LDRH     r9,[r5,#6]
000700  1ba4              SUBS     r4,r4,r6
000702  892e              LDRH     r6,[r5,#8]
000704  eba60609          SUB      r6,r6,r9
000708  4374              MULS     r4,r6,r4
;;;931            lowerArea = (area0*100)/(100+TOL);
00070a  2664              MOVS     r6,#0x64
00070c  4366              MULS     r6,r4,r6
00070e  f44f7961          MOV      r9,#0x384
000712  fbb6f6f9          UDIV     r6,r6,r9
;;;932            upperArea = area0 + (area0*TOL)/100;
000716  f44f7948          MOV      r9,#0x320
00071a  fb04f909          MUL      r9,r4,r9
00071e  f04f0a64          MOV      r10,#0x64
000722  fbb9f9fa          UDIV     r9,r9,r10
000726  444c              ADD      r4,r4,r9
;;;933            if (lowerArea<=maxEqualArea && maxEqualArea<=upperArea)
000728  4566              CMP      r6,r12
00072a  d806              BHI      |L1.1850|
00072c  45a4              CMP      r12,r4
00072e  d804              BHI      |L1.1850|
;;;934                newBlobs[numNewBlobs++] = blobs[i];
000730  4604              MOV      r4,r0
000732  1c40              ADDS     r0,r0,#1
000734  b280              UXTH     r0,r0
000736  f8475024          STR      r5,[r7,r4,LSL #2]
                  |L1.1850|
00073a  1c5b              ADDS     r3,r3,#1              ;928
                  |L1.1852|
00073c  4598              CMP      r8,r3                 ;928
00073e  dd01              BLE      |L1.1860|
000740  280a              CMP      r0,#0xa               ;928
000742  d3d7              BCC      |L1.1780|
                  |L1.1860|
;;;935        }
;;;936    
;;;937        // copy new blobs over
;;;938        for (i=0; i<numNewBlobs; i++)
000744  2300              MOVS     r3,#0
000746  e004              B        |L1.1874|
                  |L1.1864|
;;;939            blobs[i] = newBlobs[i];
000748  f8574023          LDR      r4,[r7,r3,LSL #2]
00074c  f8414023          STR      r4,[r1,r3,LSL #2]
000750  1c5b              ADDS     r3,r3,#1              ;938
                  |L1.1874|
000752  4283              CMP      r3,r0                 ;938
000754  dbf8              BLT      |L1.1864|
;;;940        *numBlobs = numNewBlobs;
000756  8010              STRH     r0,[r2,#0]
;;;941    }
000758  b00b              ADD      sp,sp,#0x2c
00075a  e4ee              B        |L1.314|
;;;942    
                          ENDP

                  _ZN5Blobs11mergeClumpsEtt PROC ; Blobs::mergeClumps(unsigned short, unsigned short)
;;;971    
;;;972    void Blobs::mergeClumps(uint16_t scount0, uint16_t scount1)
00075c  b5f0              PUSH     {r4-r7,lr}
;;;973    {
;;;974        int i;
;;;975        BlobA *blobs = (BlobA *)m_blobs;
00075e  f8d06268          LDR      r6,[r0,#0x268]
;;;976        for (i=0; i<m_numBlobs; i++)
000762  2300              MOVS     r3,#0
000764  e00b              B        |L1.1918|
                  |L1.1894|
;;;977        {
;;;978            if ((blobs[i].m_model&~0x07)==scount1)
000766  eb061503          ADD      r5,r6,r3,LSL #4
00076a  882c              LDRH     r4,[r5,#0]
00076c  f0240707          BIC      r7,r4,#7
000770  4297              CMP      r7,r2
000772  d103              BNE      |L1.1916|
;;;979                blobs[i].m_model = (blobs[i].m_model&0x07) | scount0;
000774  f0040407          AND      r4,r4,#7
000778  430c              ORRS     r4,r4,r1
00077a  802c              STRH     r4,[r5,#0]
                  |L1.1916|
00077c  1c5b              ADDS     r3,r3,#1              ;976
                  |L1.1918|
00077e  f8b0426c          LDRH     r4,[r0,#0x26c]        ;976
000782  429c              CMP      r4,r3                 ;976
000784  dcef              BGT      |L1.1894|
;;;980        }
;;;981    }
000786  bdf0              POP      {r4-r7,pc}
;;;982    
                          ENDP

                  _ZN5Blobs8distanceEP5BlobAS1_ PROC ; Blobs::distance(BlobA*, BlobA*)
;;;752    
;;;753    int16_t Blobs::distance(BlobA *blob0, BlobA *blob1)
000788  b5f0              PUSH     {r4-r7,lr}
;;;754    {
;;;755        int16_t left0, right0, top0, bottom0;
;;;756        int16_t left1, right1, top1, bottom1;
;;;757    
;;;758        left0 = blob0->m_left;
00078a  f9b10002          LDRSH    r0,[r1,#2]
;;;759        right0 = blob0->m_right;
00078e  f9b15004          LDRSH    r5,[r1,#4]
;;;760        top0 = blob0->m_top;
000792  f9b13006          LDRSH    r3,[r1,#6]
;;;761        bottom0 = blob0->m_bottom;
000796  f9b16008          LDRSH    r6,[r1,#8]
;;;762        left1 = blob1->m_left;
00079a  f9b21002          LDRSH    r1,[r2,#2]
;;;763        right1 = blob1->m_right;
00079e  f9b27004          LDRSH    r7,[r2,#4]
;;;764        top1 = blob1->m_top;
0007a2  f9b24006          LDRSH    r4,[r2,#6]
;;;765        bottom1 = blob1->m_bottom;
0007a6  f9b22008          LDRSH    r2,[r2,#8]
;;;766    
;;;767        if (left0>=left1 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
0007aa  4288              CMP      r0,r1
0007ac  db0c              BLT      |L1.1992|
0007ae  42a3              CMP      r3,r4
0007b0  dc01              BGT      |L1.1974|
0007b2  42b4              CMP      r4,r6
0007b4  dd05              BLE      |L1.1986|
                  |L1.1974|
0007b6  4293              CMP      r3,r2
0007b8  dc06              BGT      |L1.1992|
0007ba  42b2              CMP      r2,r6
0007bc  dd01              BLE      |L1.1986|
0007be  429c              CMP      r4,r3
0007c0  dc02              BGT      |L1.1992|
                  |L1.1986|
;;;768            return left0-right1;
0007c2  1bc0              SUBS     r0,r0,r7
0007c4  b200              SXTH     r0,r0
;;;769    
;;;770        if (left1>=left0 && ((top0<=top1 && top1<=bottom0) || (top0<=bottom1 && (bottom1<=bottom0 || top1<=top0))))
;;;771            return left1-right0;
;;;772    
;;;773        if (top0>=top1 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;774            return top0-bottom1;
;;;775    
;;;776        if (top1>=top0 && ((left0<=left1 && left1<=right0) || (left0<=right1 && (right1<=right0 || left1<=left0))))
;;;777            return top1-bottom0;
;;;778    
;;;779        return 0x7fff; // return a large number
;;;780    }
0007c6  bdf0              POP      {r4-r7,pc}
                  |L1.1992|
0007c8  4281              CMP      r1,r0                 ;770
0007ca  db0c              BLT      |L1.2022|
0007cc  42a3              CMP      r3,r4                 ;770
0007ce  dc01              BGT      |L1.2004|
0007d0  42b4              CMP      r4,r6                 ;770
0007d2  dd05              BLE      |L1.2016|
                  |L1.2004|
0007d4  4293              CMP      r3,r2                 ;770
0007d6  dc06              BGT      |L1.2022|
0007d8  42b2              CMP      r2,r6                 ;770
0007da  dd01              BLE      |L1.2016|
0007dc  429c              CMP      r4,r3                 ;770
0007de  dc02              BGT      |L1.2022|
                  |L1.2016|
0007e0  1b48              SUBS     r0,r1,r5              ;771
0007e2  b200              SXTH     r0,r0                 ;771
0007e4  bdf0              POP      {r4-r7,pc}
                  |L1.2022|
0007e6  42a3              CMP      r3,r4                 ;773
0007e8  db0c              BLT      |L1.2052|
0007ea  4288              CMP      r0,r1                 ;773
0007ec  dc01              BGT      |L1.2034|
0007ee  42a9              CMP      r1,r5                 ;773
0007f0  dd05              BLE      |L1.2046|
                  |L1.2034|
0007f2  42b8              CMP      r0,r7                 ;773
0007f4  dc06              BGT      |L1.2052|
0007f6  42af              CMP      r7,r5                 ;773
0007f8  dd01              BLE      |L1.2046|
0007fa  4281              CMP      r1,r0                 ;773
0007fc  dc02              BGT      |L1.2052|
                  |L1.2046|
0007fe  1a98              SUBS     r0,r3,r2              ;774
000800  b200              SXTH     r0,r0                 ;774
000802  bdf0              POP      {r4-r7,pc}
                  |L1.2052|
000804  429c              CMP      r4,r3                 ;776
000806  db0c              BLT      |L1.2082|
000808  4288              CMP      r0,r1                 ;776
00080a  dc01              BGT      |L1.2064|
00080c  42a9              CMP      r1,r5                 ;776
00080e  dd05              BLE      |L1.2076|
                  |L1.2064|
000810  42b8              CMP      r0,r7                 ;776
000812  dc06              BGT      |L1.2082|
000814  42af              CMP      r7,r5                 ;776
000816  dd01              BLE      |L1.2076|
000818  4281              CMP      r1,r0                 ;776
00081a  dc02              BGT      |L1.2082|
                  |L1.2076|
00081c  1ba0              SUBS     r0,r4,r6              ;777
00081e  b200              SXTH     r0,r0                 ;777
000820  bdf0              POP      {r4-r7,pc}
                  |L1.2082|
000822  f64770ff          MOV      r0,#0x7fff            ;779
000826  bdf0              POP      {r4-r7,pc}
;;;781    
                          ENDP

                  _ZN5Blobs7closebyEP5BlobAS1_ PROC ; Blobs::closeby(BlobA*, BlobA*)
;;;782    bool Blobs::closeby(BlobA *blob0, BlobA *blob1)
000828  b570              PUSH     {r4-r6,lr}
;;;783    {
00082a  4604              MOV      r4,r0
00082c  460e              MOV      r6,r1
00082e  4615              MOV      r5,r2
;;;784        // check to see if blobs are invalid or equal
;;;785        if (blob0->m_model==0 || blob1->m_model==0 || blob0->m_model==blob1->m_model)
000830  8830              LDRH     r0,[r6,#0]
000832  2800              CMP      r0,#0
000834  d003              BEQ      |L1.2110|
000836  8829              LDRH     r1,[r5,#0]
000838  b109              CBZ      r1,|L1.2110|
00083a  4288              CMP      r0,r1
00083c  d101              BNE      |L1.2114|
                  |L1.2110|
;;;786            return false;
00083e  2000              MOVS     r0,#0
;;;787        // check to see that the blobs are from color code models.  If they aren't both
;;;788        // color code blobs, we return false
;;;789        if (!CC_SIGNATURE(blob0->m_model&0x07) || !CC_SIGNATURE(blob1->m_model&0x07))
;;;790            return false;
;;;791    
;;;792        return distance(blob0, blob1)<=m_maxCodedDist;
;;;793    }
000840  bd70              POP      {r4-r6,pc}
                  |L1.2114|
000842  f8941288          LDRB     r1,[r4,#0x288]        ;789
000846  2902              CMP      r1,#2                 ;789
000848  d006              BEQ      |L1.2136|
00084a  f0000107          AND      r1,r0,#7              ;789
00084e  4620              MOV      r0,r4                 ;789
000850  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
000854  2801              CMP      r0,#1                 ;789
000856  d10b              BNE      |L1.2160|
                  |L1.2136|
000858  f8940288          LDRB     r0,[r4,#0x288]        ;789
00085c  2802              CMP      r0,#2                 ;789
00085e  d009              BEQ      |L1.2164|
000860  7828              LDRB     r0,[r5,#0]            ;789
000862  f0000107          AND      r1,r0,#7              ;789
000866  4620              MOV      r0,r4                 ;789
000868  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
00086c  2801              CMP      r0,#1                 ;789
00086e  d001              BEQ      |L1.2164|
                  |L1.2160|
000870  2000              MOVS     r0,#0                 ;790
000872  bd70              POP      {r4-r6,pc}
                  |L1.2164|
000874  462a              MOV      r2,r5                 ;792
000876  4631              MOV      r1,r6                 ;792
000878  4620              MOV      r0,r4                 ;792
00087a  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
00087e  f8b41286          LDRH     r1,[r4,#0x286]        ;792
000882  4288              CMP      r0,r1                 ;792
000884  dc01              BGT      |L1.2186|
000886  2001              MOVS     r0,#1                 ;792
000888  bd70              POP      {r4-r6,pc}
                  |L1.2186|
00088a  2000              MOVS     r0,#0                 ;792
00088c  bd70              POP      {r4-r6,pc}
;;;794    
                          ENDP

                  _ZN5Blobs9processCCEv PROC ; Blobs::processCC()
;;;982    
;;;983    void Blobs::processCC()
00088e  e92d4ff0          PUSH     {r4-r11,lr}
;;;984    {
000892  b091              SUB      sp,sp,#0x44
000894  4606              MOV      r6,r0
;;;985        int16_t i, j, k;
;;;986        uint16_t scount, scount1, count = 0;
000896  2700              MOVS     r7,#0
;;;987        int16_t left, right, top, bottom;
;;;988        uint16_t codedModel0, codedModel;
;;;989        int32_t width, height, avgWidth, avgHeight;
;;;990        BlobA *codedBlob, *endBlobCC;
;;;991        BlobA *blob0, *blob1, *endBlob;
;;;992        BlobA *blobs[MAX_COLOR_CODE_MODELS*2];
;;;993    
;;;994    #if 0
;;;995        BlobA b0(1, 1, 20, 40, 50);
;;;996        BlobA b1(1, 1, 20, 52, 60);
;;;997        BlobA b2(1, 1, 20, 62, 70);
;;;998        BlobA b3(2, 22, 30, 40, 50);
;;;999        BlobA b4(2, 22, 30, 52, 60);
;;;1000       BlobA b5(3, 32, 40, 40, 50);
;;;1001       BlobA b6(4, 42, 50, 40, 50);
;;;1002       BlobA b7(4, 42, 50, 52, 60);
;;;1003       BlobA b8(6, 22, 30, 52, 60);
;;;1004       BlobA b9(6, 22, 30, 52, 60);
;;;1005       BlobA b10(7, 22, 30, 52, 60);
;;;1006   
;;;1007       BlobA *testBlobs[] =
;;;1008       {
;;;1009           &b0, &b1, &b2, &b3, &b4, &b5, &b6, &b7 //, &b8, &b9, &b10
;;;1010       };
;;;1011       int16_t ntb = 8;
;;;1012       cleanup(testBlobs, &ntb);
;;;1013   #endif
;;;1014   
;;;1015       endBlob = (BlobA *)m_blobs + m_numBlobs;
000898  f8b6026c          LDRH     r0,[r6,#0x26c]
00089c  f8d68268          LDR      r8,[r6,#0x268]
0008a0  eb081500          ADD      r5,r8,r0,LSL #4
0008a4  e035              B        |L1.2322|
                  |L1.2214|
;;;1016   
;;;1017       // 1st pass: mark all closeby blobs
;;;1018       for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
;;;1019       {
;;;1020           for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
0008a6  f1080410          ADD      r4,r8,#0x10
0008aa  46a1              MOV      r9,r4
0008ac  e02e              B        |L1.2316|
                  |L1.2222|
;;;1021           {
;;;1022               if (closeby(blob0, blob1))
0008ae  4622              MOV      r2,r4
0008b0  4641              MOV      r1,r8
0008b2  4630              MOV      r0,r6
0008b4  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
0008b8  b338              CBZ      r0,|L1.2314|
;;;1023               {
;;;1024                   if (blob0->m_model<=CL_NUM_SIGNATURES && blob1->m_model<=CL_NUM_SIGNATURES)
0008ba  f8b81000          LDRH     r1,[r8,#0]
0008be  2907              CMP      r1,#7
0008c0  d80f              BHI      |L1.2274|
0008c2  8820              LDRH     r0,[r4,#0]
0008c4  2807              CMP      r0,#7
0008c6  d80c              BHI      |L1.2274|
;;;1025                   {
;;;1026                       count++;
0008c8  1c7f              ADDS     r7,r7,#1
0008ca  b2bf              UXTH     r7,r7
;;;1027                       scount = count<<3;
0008cc  f64f70ff          MOV      r0,#0xffff
0008d0  ea0000c7          AND      r0,r0,r7,LSL #3
;;;1028                       blob0->m_model |= scount;
0008d4  4301              ORRS     r1,r1,r0
0008d6  f8a81000          STRH     r1,[r8,#0]
;;;1029                       blob1->m_model |= scount;
0008da  8821              LDRH     r1,[r4,#0]
0008dc  4301              ORRS     r1,r1,r0
0008de  8021              STRH     r1,[r4,#0]
0008e0  e013              B        |L1.2314|
                  |L1.2274|
;;;1030                   }
;;;1031                   else if (blob0->m_model>CL_NUM_SIGNATURES && blob1->m_model<=CL_NUM_SIGNATURES)
0008e2  2907              CMP      r1,#7
0008e4  d907              BLS      |L1.2294|
0008e6  8820              LDRH     r0,[r4,#0]
0008e8  2807              CMP      r0,#7
0008ea  d804              BHI      |L1.2294|
;;;1032                   {
;;;1033                       scount = blob0->m_model & ~0x07;
0008ec  f0210107          BIC      r1,r1,#7
;;;1034                       blob1->m_model |= scount;
0008f0  4308              ORRS     r0,r0,r1
0008f2  8020              STRH     r0,[r4,#0]
0008f4  e009              B        |L1.2314|
                  |L1.2294|
;;;1035                   }
;;;1036                   else if (blob1->m_model>CL_NUM_SIGNATURES && blob0->m_model<=CL_NUM_SIGNATURES)
0008f6  8820              LDRH     r0,[r4,#0]
0008f8  2807              CMP      r0,#7
0008fa  d906              BLS      |L1.2314|
0008fc  2907              CMP      r1,#7
0008fe  d804              BHI      |L1.2314|
;;;1037                   {
;;;1038                       scount = blob1->m_model & ~0x07;
000900  f0200007          BIC      r0,r0,#7
;;;1039                       blob0->m_model |= scount;
000904  4301              ORRS     r1,r1,r0
000906  f8a81000          STRH     r1,[r8,#0]
                  |L1.2314|
00090a  3410              ADDS     r4,r4,#0x10           ;1020
                  |L1.2316|
00090c  42ac              CMP      r4,r5                 ;1020
00090e  d3ce              BCC      |L1.2222|
000910  46c8              MOV      r8,r9                 ;1018
                  |L1.2322|
000912  45a8              CMP      r8,r5                 ;1018
000914  d3c7              BCC      |L1.2214|
;;;1040                   }
;;;1041               }
;;;1042           }
;;;1043       }
;;;1044   
;;;1045   #if 1
;;;1046       // 2nd pass: merge blob clumps
;;;1047       for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
000916  e003              B        |L1.2336|
                  |L1.2328|
000918  43340000          DCFS     0x43340000 ; 180
                  |L1.2332|
00091c  40490e56          DCFS     0x40490e56 ; 3.1414999961853027
                  |L1.2336|
000920  f8d68268          LDR      r8,[r6,#0x268]
000924  e01f              B        |L1.2406|
                  |L1.2342|
;;;1048       {
;;;1049           if (blob0->m_model<=CL_NUM_SIGNATURES) // skip normal blobs
000926  f8b80000          LDRH     r0,[r8,#0]
00092a  2807              CMP      r0,#7
00092c  d919              BLS      |L1.2402|
;;;1050               continue;
;;;1051           scount = blob0->m_model&~0x07;
00092e  f0200a07          BIC      r10,r0,#7
;;;1052           for (blob1=(BlobA *)blob0+1; blob1<endBlob; blob1++)
000932  f1080410          ADD      r4,r8,#0x10
000936  e012              B        |L1.2398|
                  |L1.2360|
;;;1053           {
;;;1054               if (blob1->m_model<=CL_NUM_SIGNATURES)
000938  8820              LDRH     r0,[r4,#0]
00093a  2807              CMP      r0,#7
00093c  d90e              BLS      |L1.2396|
;;;1055                   continue;
;;;1056   
;;;1057               scount1 = blob1->m_model&~0x07;
00093e  f0200907          BIC      r9,r0,#7
;;;1058               if (scount!=scount1 && closeby(blob0, blob1))
000942  45ca              CMP      r10,r9
000944  d00a              BEQ      |L1.2396|
000946  4622              MOV      r2,r4
000948  4641              MOV      r1,r8
00094a  4630              MOV      r0,r6
00094c  f7fffffe          BL       _ZN5Blobs7closebyEP5BlobAS1_ ; Blobs::closeby(BlobA*, BlobA*)
000950  b120              CBZ      r0,|L1.2396|
;;;1059                   mergeClumps(scount, scount1);
000952  464a              MOV      r2,r9
000954  4651              MOV      r1,r10
000956  4630              MOV      r0,r6
000958  f7fffffe          BL       _ZN5Blobs11mergeClumpsEtt ; Blobs::mergeClumps(unsigned short, unsigned short)
                  |L1.2396|
00095c  3410              ADDS     r4,r4,#0x10           ;1052
                  |L1.2398|
00095e  42ac              CMP      r4,r5                 ;1052
000960  d3ea              BCC      |L1.2360|
                  |L1.2402|
000962  f1080810          ADD      r8,r8,#0x10           ;1047
                  |L1.2406|
000966  45a8              CMP      r8,r5                 ;1047
000968  d3dd              BCC      |L1.2342|
;;;1060           }
;;;1061       }
;;;1062   #endif
;;;1063   
;;;1064       // 3rd and final pass, find each blob clean it up and add it to the table
;;;1065       endBlobCC = m_blobs + MAX_BLOBS;
00096a  f8d60268          LDR      r0,[r6,#0x268]
00096e  f50060c8          ADD      r0,r0,#0x640
000972  900b              STR      r0,[sp,#0x2c]
;;;1066       for (i=1, codedBlob = m_ccBlobs, m_numCCBlobs=0; i<=count && codedBlob<endBlobCC; i++)
000974  2001              MOVS     r0,#1
000976  900e              STR      r0,[sp,#0x38]
000978  f8d64270          LDR      r4,[r6,#0x270]
00097c  2000              MOVS     r0,#0
00097e  f8a60274          STRH     r0,[r6,#0x274]
000982  e11a              B        |L1.3002|
                  |L1.2436|
;;;1067       {
;;;1068           scount = i<<3;
000984  980e              LDR      r0,[sp,#0x38]
000986  f64f71ff          MOV      r1,#0xffff
00098a  ea0103c0          AND      r3,r1,r0,LSL #3
;;;1069           // find all blobs with index i
;;;1070           for (j=0, blob0=(BlobA *)m_blobs; blob0<endBlob && j<MAX_COLOR_CODE_MODELS*2; blob0++)
00098e  2000              MOVS     r0,#0
000990  900d              STR      r0,[sp,#0x34]
000992  f8d61268          LDR      r1,[r6,#0x268]
000996  f10d0804          ADD      r8,sp,#4              ;992
00099a  e009              B        |L1.2480|
                  |L1.2460|
;;;1071           {
;;;1072               if ((blob0->m_model&~0x07)==scount)
00099c  880a              LDRH     r2,[r1,#0]
00099e  f0220207          BIC      r2,r2,#7
0009a2  429a              CMP      r2,r3
0009a4  d103              BNE      |L1.2478|
;;;1073                   blobs[j++] = blob0;
0009a6  1c42              ADDS     r2,r0,#1
0009a8  920d              STR      r2,[sp,#0x34]
0009aa  f8481020          STR      r1,[r8,r0,LSL #2]
                  |L1.2478|
0009ae  3110              ADDS     r1,r1,#0x10           ;1070
                  |L1.2480|
0009b0  42a9              CMP      r1,r5                 ;1070
0009b2  d203              BCS      |L1.2492|
0009b4  f9bd0034          LDRSH    r0,[sp,#0x34]         ;1070
0009b8  280a              CMP      r0,#0xa               ;1070
0009ba  dbef              BLT      |L1.2460|
                  |L1.2492|
;;;1074           }
;;;1075   
;;;1076   #if 1
;;;1077           // cleanup blobs, deal with cases where there are more blobs than models
;;;1078           cleanup(blobs, &j);
0009bc  aa0d              ADD      r2,sp,#0x34
0009be  a901              ADD      r1,sp,#4
0009c0  4630              MOV      r0,r6
0009c2  f7fffffe          BL       _ZN5Blobs7cleanupEPP5BlobAPs ; Blobs::cleanup(BlobA**, short*)
;;;1079   #endif
;;;1080   
;;;1081           if (j<2)
0009c6  f9bd2034          LDRSH    r2,[sp,#0x34]
0009ca  2a02              CMP      r2,#2
0009cc  db7e              BLT      |L1.2764|
;;;1082               continue;
;;;1083   
;;;1084           // find left, right, top, bottom of color coded block
;;;1085           for (k=0, left=right=top=bottom=avgWidth=avgHeight=0; k<j; k++)
0009ce  2100              MOVS     r1,#0
0009d0  2000              MOVS     r0,#0
0009d2  4682              MOV      r10,r0
0009d4  4681              MOV      r9,r0
0009d6  4684              MOV      r12,r0
0009d8  4603              MOV      r3,r0
0009da  900c              STR      r0,[sp,#0x30]
0009dc  e041              B        |L1.2658|
                  |L1.2526|
;;;1086           {
;;;1087               //DBG("* cc %x %d i %d: %d %d %d %d %d", blobs[k], m_numCCBlobs, k, blobs[k]->m_model, blobs[k]->m_left, blobs[k]->m_right, blobs[k]->m_top, blobs[k]->m_bottom);
;;;1088               if (blobs[left]->m_left > blobs[k]->m_left)
0009de  f10d0804          ADD      r8,sp,#4
0009e2  f858b020          LDR      r11,[r8,r0,LSL #2]
0009e6  f8588021          LDR      r8,[r8,r1,LSL #2]
0009ea  f8bbe002          LDRH     lr,[r11,#2]
0009ee  f8b8b002          LDRH     r11,[r8,#2]
0009f2  f8cdb040          STR      r11,[sp,#0x40]
0009f6  45de              CMP      lr,r11
0009f8  d900              BLS      |L1.2556|
;;;1089                   left = k;
0009fa  4608              MOV      r0,r1
                  |L1.2556|
;;;1090               if (blobs[top]->m_top > blobs[k]->m_top)
0009fc  f10d0b04          ADD      r11,sp,#4
000a00  f85bb02c          LDR      r11,[r11,r12,LSL #2]
000a04  f8bbe006          LDRH     lr,[r11,#6]
000a08  f8b8b006          LDRH     r11,[r8,#6]
000a0c  f8cdb03c          STR      r11,[sp,#0x3c]
000a10  45de              CMP      lr,r11
000a12  d900              BLS      |L1.2582|
;;;1091                   top = k;
000a14  468c              MOV      r12,r1
                  |L1.2582|
;;;1092               if (blobs[right]->m_right < blobs[k]->m_right)
000a16  f10d0b04          ADD      r11,sp,#4
000a1a  f85bb023          LDR      r11,[r11,r3,LSL #2]
000a1e  f8bbe004          LDRH     lr,[r11,#4]
000a22  f8b8b004          LDRH     r11,[r8,#4]
000a26  45de              CMP      lr,r11
000a28  d200              BCS      |L1.2604|
;;;1093                   right = k;
000a2a  460b              MOV      r3,r1
                  |L1.2604|
;;;1094               if (blobs[bottom]->m_bottom < blobs[k]->m_bottom)
000a2c  f10d0e04          ADD      lr,sp,#4
000a30  f8b88008          LDRH     r8,[r8,#8]
000a34  f85ee029          LDR      lr,[lr,r9,LSL #2]
000a38  f8bee008          LDRH     lr,[lr,#8]
000a3c  45c6              CMP      lr,r8
000a3e  d200              BCS      |L1.2626|
;;;1095                   bottom = k;
000a40  4689              MOV      r9,r1
                  |L1.2626|
;;;1096               avgWidth += blobs[k]->m_right - blobs[k]->m_left;
000a42  f8dde040          LDR      lr,[sp,#0x40]
000a46  ebab0b0e          SUB      r11,r11,lr
000a4a  44da              ADD      r10,r10,r11
;;;1097               avgHeight += blobs[k]->m_bottom - blobs[k]->m_top;
000a4c  f8ddb03c          LDR      r11,[sp,#0x3c]
000a50  eba80b0b          SUB      r11,r8,r11
000a54  f8dd8030          LDR      r8,[sp,#0x30]
000a58  44d8              ADD      r8,r8,r11
000a5a  f8cd8030          STR      r8,[sp,#0x30]
000a5e  1c49              ADDS     r1,r1,#1              ;1085
000a60  b209              SXTH     r1,r1                 ;1085
                  |L1.2658|
000a62  4291              CMP      r1,r2                 ;1085
000a64  dbbb              BLT      |L1.2526|
;;;1098           }
;;;1099           avgWidth /= j;
000a66  fb9afaf2          SDIV     r10,r10,r2
;;;1100           avgHeight /= j;
000a6a  990c              LDR      r1,[sp,#0x30]
000a6c  fb91f1f2          SDIV     r1,r1,r2
;;;1101           codedBlob->m_left = blobs[left]->m_left;
000a70  f10d0804          ADD      r8,sp,#4
000a74  f858b020          LDR      r11,[r8,r0,LSL #2]
000a78  f8bbb002          LDRH     r11,[r11,#2]
000a7c  f8a4b002          STRH     r11,[r4,#2]
;;;1102           codedBlob->m_right = blobs[right]->m_right;
000a80  f858b023          LDR      r11,[r8,r3,LSL #2]
000a84  f8bbb004          LDRH     r11,[r11,#4]
000a88  f8a4b004          STRH     r11,[r4,#4]
;;;1103           codedBlob->m_top = blobs[top]->m_top;
000a8c  f858b02c          LDR      r11,[r8,r12,LSL #2]
000a90  f8bbb006          LDRH     r11,[r11,#6]
000a94  f8a4b006          STRH     r11,[r4,#6]
;;;1104           codedBlob->m_bottom = blobs[bottom]->m_bottom;
000a98  f858b029          LDR      r11,[r8,r9,LSL #2]
000a9c  f8bbb008          LDRH     r11,[r11,#8]
000aa0  f8a4b008          STRH     r11,[r4,#8]
;;;1105   
;;;1106   #if 1
;;;1107           // is it more horizontal than vertical?
;;;1108           width = (blobs[right]->m_right - blobs[left]->m_left)*100;
000aa4  f8583023          LDR      r3,[r8,r3,LSL #2]
000aa8  f8580020          LDR      r0,[r8,r0,LSL #2]
000aac  889b              LDRH     r3,[r3,#4]
000aae  f8b0b002          LDRH     r11,[r0,#2]
000ab2  eba3030b          SUB      r3,r3,r11
000ab6  f04f0b64          MOV      r11,#0x64
000aba  fb03f30b          MUL      r3,r3,r11
;;;1109           width /= avgWidth; // scale by average width because our swatches might not be square
000abe  fb93fafa          SDIV     r10,r3,r10
;;;1110           height = (blobs[bottom]->m_bottom - blobs[top]->m_top)*100;
000ac2  f8583029          LDR      r3,[r8,r9,LSL #2]
000ac6  f8b39008          LDRH     r9,[r3,#8]
000aca  e000              B        |L1.2766|
                  |L1.2764|
000acc  e071              B        |L1.2994|
                  |L1.2766|
000ace  f858302c          LDR      r3,[r8,r12,LSL #2]
000ad2  f8b3c006          LDRH     r12,[r3,#6]
000ad6  eba90c0c          SUB      r12,r9,r12
000ada  46d9              MOV      r9,r11
000adc  fb0cfc09          MUL      r12,r12,r9
;;;1111           height /= avgHeight; // scale by average height because our swatches might not be square
000ae0  fb9cf1f1          SDIV     r1,r12,r1
;;;1112   
;;;1113           if (width > height)
000ae4  458a              CMP      r10,r1
000ae6  dd08              BLE      |L1.2810|
;;;1114               sort(blobs, j, blobs[left], true);
000ae8  2101              MOVS     r1,#1
000aea  4603              MOV      r3,r0
000aec  9100              STR      r1,[sp,#0]
000aee  b292              UXTH     r2,r2
000af0  a901              ADD      r1,sp,#4
000af2  4630              MOV      r0,r6
000af4  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
000af8  e006              B        |L1.2824|
                  |L1.2810|
;;;1115           else
;;;1116               sort(blobs, j, blobs[top], false);
000afa  2000              MOVS     r0,#0
000afc  9000              STR      r0,[sp,#0]
000afe  b292              UXTH     r2,r2
000b00  a901              ADD      r1,sp,#4
000b02  4630              MOV      r0,r6
000b04  f7fffffe          BL       _ZN5Blobs4sortEPP5BlobAtS1_b ; Blobs::sort(BlobA**, unsigned short, BlobA*, bool)
                  |L1.2824|
;;;1117   
;;;1118   #if 1
;;;1119           cleanup2(blobs, &j);
000b08  aa0d              ADD      r2,sp,#0x34
000b0a  a901              ADD      r1,sp,#4
000b0c  4630              MOV      r0,r6
000b0e  f7fffffe          BL       _ZN5Blobs8cleanup2EPP5BlobAPs ; Blobs::cleanup2(BlobA**, short*)
;;;1120           if (j<2)
000b12  f9bd0034          LDRSH    r0,[sp,#0x34]
000b16  2802              CMP      r0,#2
000b18  db4b              BLT      |L1.2994|
;;;1121               continue;
;;;1122           else if (j>5)
000b1a  2805              CMP      r0,#5
000b1c  dd01              BLE      |L1.2850|
;;;1123               j = 5;
000b1e  2005              MOVS     r0,#5
000b20  900d              STR      r0,[sp,#0x34]
                  |L1.2850|
;;;1124   #endif
;;;1125           // create new blob, compare the coded models, pick the smaller one
;;;1126           for (k=0, codedModel0=0; k<j; k++)
000b22  2000              MOVS     r0,#0
000b24  2100              MOVS     r1,#0
000b26  f64f79ff          MOV      r9,#0xffff            ;1027
000b2a  e009              B        |L1.2880|
                  |L1.2860|
;;;1127           {
;;;1128               codedModel0 <<= 3;
000b2c  ea0902c1          AND      r2,r9,r1,LSL #3
;;;1129               codedModel0 |= blobs[k]->m_model&0x07;
000b30  f8581020          LDR      r1,[r8,r0,LSL #2]
000b34  7809              LDRB     r1,[r1,#0]
000b36  f0010107          AND      r1,r1,#7
000b3a  4311              ORRS     r1,r1,r2
000b3c  1c40              ADDS     r0,r0,#1              ;1126
000b3e  b200              SXTH     r0,r0                 ;1126
                  |L1.2880|
000b40  f9bd2034          LDRSH    r2,[sp,#0x34]         ;1126
000b44  4290              CMP      r0,r2                 ;1126
000b46  dbf1              BLT      |L1.2860|
;;;1130           }
;;;1131           for (k=j-1, codedModel=0; k>=0; k--)
000b48  f8bd0034          LDRH     r0,[sp,#0x34]
000b4c  1e40              SUBS     r0,r0,#1
000b4e  b200              SXTH     r0,r0
000b50  2200              MOVS     r2,#0
000b52  4692              MOV      r10,r2
000b54  e00c              B        |L1.2928|
                  |L1.2902|
;;;1132           {
;;;1133               codedModel <<= 3;
000b56  ea090cc2          AND      r12,r9,r2,LSL #3
;;;1134               codedModel |= blobs[k]->m_model&0x07;
000b5a  f8583020          LDR      r3,[r8,r0,LSL #2]
000b5e  781a              LDRB     r2,[r3,#0]
000b60  f0020207          AND      r2,r2,#7
000b64  ea42020c          ORR      r2,r2,r12
;;;1135               blobs[k]->m_model = 0; // invalidate
000b68  f8a3a000          STRH     r10,[r3,#0]
000b6c  1e40              SUBS     r0,r0,#1              ;1131
000b6e  b200              SXTH     r0,r0                 ;1131
                  |L1.2928|
000b70  2800              CMP      r0,#0                 ;1131
000b72  daf0              BGE      |L1.2902|
;;;1136           }
;;;1137   
;;;1138           if (codedModel0<codedModel)
000b74  4291              CMP      r1,r2
000b76  d20b              BCS      |L1.2960|
;;;1139           {
;;;1140               codedBlob->m_model = codedModel0;
000b78  8021              STRH     r1,[r4,#0]
;;;1141               codedBlob->m_angle = angle(blobs[0], blobs[j-1]);
000b7a  f9bd0034          LDRSH    r0,[sp,#0x34]
000b7e  9901              LDR      r1,[sp,#4]
000b80  1e40              SUBS     r0,r0,#1
000b82  f8582020          LDR      r2,[r8,r0,LSL #2]
000b86  4630              MOV      r0,r6
000b88  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
000b8c  8160              STRH     r0,[r4,#0xa]
000b8e  e00a              B        |L1.2982|
                  |L1.2960|
;;;1142           }
;;;1143           else
;;;1144           {
;;;1145               codedBlob->m_model = codedModel;
000b90  8022              STRH     r2,[r4,#0]
;;;1146               codedBlob->m_angle = angle(blobs[j-1], blobs[0]);
000b92  f9bd0034          LDRSH    r0,[sp,#0x34]
000b96  9a01              LDR      r2,[sp,#4]
000b98  1e40              SUBS     r0,r0,#1
000b9a  f8581020          LDR      r1,[r8,r0,LSL #2]
000b9e  4630              MOV      r0,r6
000ba0  f7fffffe          BL       _ZN5Blobs5angleEP5BlobAS1_ ; Blobs::angle(BlobA*, BlobA*)
000ba4  8160              STRH     r0,[r4,#0xa]
                  |L1.2982|
;;;1147           }
;;;1148   #endif
;;;1149           //DBG("cc %d %d %d %d %d", m_numCCBlobs, codedBlob->m_left, codedBlob->m_right, codedBlob->m_top, codedBlob->m_bottom);
;;;1150           codedBlob++;
000ba6  3410              ADDS     r4,r4,#0x10
;;;1151           m_numCCBlobs++;
000ba8  f8b60274          LDRH     r0,[r6,#0x274]
000bac  1c40              ADDS     r0,r0,#1
000bae  f8a60274          STRH     r0,[r6,#0x274]
                  |L1.2994|
000bb2  980e              LDR      r0,[sp,#0x38]         ;1066
000bb4  1c40              ADDS     r0,r0,#1              ;1066
000bb6  b200              SXTH     r0,r0                 ;1066
000bb8  900e              STR      r0,[sp,#0x38]         ;1066
                  |L1.3002|
000bba  980e              LDR      r0,[sp,#0x38]         ;1066
000bbc  42b8              CMP      r0,r7                 ;1066
000bbe  dc03              BGT      |L1.3016|
000bc0  980b              LDR      r0,[sp,#0x2c]         ;1066
000bc2  4284              CMP      r4,r0                 ;1066
000bc4  f4ffaede          BCC      |L1.2436|
                  |L1.3016|
;;;1152       }
;;;1153   
;;;1154       // 3rd pass, invalidate blobs
;;;1155       for (blob0=(BlobA *)m_blobs; blob0<endBlob; blob0++)
000bc8  f8d64268          LDR      r4,[r6,#0x268]
000bcc  2700              MOVS     r7,#0
000bce  e016              B        |L1.3070|
                  |L1.3024|
;;;1156       {
;;;1157           if (m_ccMode==MIXED)
000bd0  f8960288          LDRB     r0,[r6,#0x288]
000bd4  2803              CMP      r0,#3
000bd6  d00b              BEQ      |L1.3056|
;;;1158           {
;;;1159               if (blob0->m_model>CL_NUM_SIGNATURES)
;;;1160                   blob0->m_model = 0;
;;;1161           }
;;;1162           else if (blob0->m_model>CL_NUM_SIGNATURES || CC_SIGNATURE(blob0->m_model))
000bd8  8821              LDRH     r1,[r4,#0]
000bda  2907              CMP      r1,#7
000bdc  d80d              BHI      |L1.3066|
000bde  2802              CMP      r0,#2
000be0  d00b              BEQ      |L1.3066|
000be2  b2c9              UXTB     r1,r1
000be4  4630              MOV      r0,r6
000be6  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
000bea  2801              CMP      r0,#1
000bec  d005              BEQ      |L1.3066|
000bee  e005              B        |L1.3068|
                  |L1.3056|
000bf0  8820              LDRH     r0,[r4,#0]            ;1159
000bf2  2807              CMP      r0,#7                 ;1159
000bf4  d902              BLS      |L1.3068|
000bf6  8027              STRH     r7,[r4,#0]            ;1160
000bf8  e000              B        |L1.3068|
                  |L1.3066|
;;;1163               blob0->m_model = 0; // invalidate-- not part of a color code
000bfa  8027              STRH     r7,[r4,#0]
                  |L1.3068|
000bfc  3410              ADDS     r4,r4,#0x10           ;1155
                  |L1.3070|
000bfe  42ac              CMP      r4,r5                 ;1155
000c00  d3e6              BCC      |L1.3024|
;;;1164       }
;;;1165   }
000c02  b011              ADD      sp,sp,#0x44
                  |L1.3076|
000c04  e8bd8ff0          POP      {r4-r11,pc}
;;;1166   
                          ENDP

                  _ZN5Blobs7combineEP5BlobAt PROC ; Blobs::combine(BlobA*, unsigned short)
;;;586    
;;;587    uint16_t Blobs::combine(BlobA *blobs, uint16_t numBlobs)
000c08  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;588    {
;;;589        uint16_t i, j, left0, right0, top0, bottom0;
;;;590        uint16_t left, right, top, bottom;
;;;591        uint16_t invalid;
;;;592    
;;;593        // delete blobs that are fully enclosed by larger blobs
;;;594        for (i=0, invalid=0; i<numBlobs; i++)
000c0c  2500              MOVS     r5,#0
000c0e  2000              MOVS     r0,#0
000c10  e039              B        |L1.3206|
                  |L1.3090|
;;;595        {
;;;596            if (blobs[i].m_model==0)
000c12  9901              LDR      r1,[sp,#4]
000c14  eb011405          ADD      r4,r1,r5,LSL #4
000c18  8821              LDRH     r1,[r4,#0]
000c1a  b391              CBZ      r1,|L1.3202|
;;;597                continue;
;;;598            left0 = blobs[i].m_left;
000c1c  f8b49002          LDRH     r9,[r4,#2]
;;;599            right0 = blobs[i].m_right;
000c20  f8b4a004          LDRH     r10,[r4,#4]
;;;600            top0 = blobs[i].m_top;
000c24  f8b4b006          LDRH     r11,[r4,#6]
;;;601            bottom0 = blobs[i].m_bottom;
000c28  f8b4e008          LDRH     lr,[r4,#8]
;;;602    
;;;603            for (j=i+1; j<numBlobs; j++)
000c2c  1c69              ADDS     r1,r5,#1
000c2e  b28b              UXTH     r3,r1
000c30  e025              B        |L1.3198|
                  |L1.3122|
;;;604            {
;;;605                if (blobs[j].m_model==0)
000c32  9901              LDR      r1,[sp,#4]
000c34  eb011103          ADD      r1,r1,r3,LSL #4
000c38  880e              LDRH     r6,[r1,#0]
000c3a  b1f6              CBZ      r6,|L1.3194|
;;;606                    continue;
;;;607                left = blobs[j].m_left;
000c3c  884e              LDRH     r6,[r1,#2]
;;;608                right = blobs[j].m_right;
000c3e  888f              LDRH     r7,[r1,#4]
;;;609                top = blobs[j].m_top;
000c40  f8b1c006          LDRH     r12,[r1,#6]
;;;610                bottom = blobs[j].m_bottom;
000c44  f8b18008          LDRH     r8,[r1,#8]
;;;611    
;;;612                if (left0<=left && right0>=right && top0<=top && bottom0>=bottom)
000c48  45b1              CMP      r9,r6
000c4a  d80a              BHI      |L1.3170|
000c4c  45ba              CMP      r10,r7
000c4e  d308              BCC      |L1.3170|
000c50  45e3              CMP      r11,r12
000c52  d806              BHI      |L1.3170|
000c54  45c6              CMP      lr,r8
000c56  d304              BCC      |L1.3170|
;;;613                {
;;;614                    blobs[j].m_model = 0; // invalidate
000c58  2600              MOVS     r6,#0
000c5a  800e              STRH     r6,[r1,#0]
;;;615                    invalid++;
000c5c  1c40              ADDS     r0,r0,#1
000c5e  b280              UXTH     r0,r0
000c60  e00b              B        |L1.3194|
                  |L1.3170|
;;;616                }
;;;617                else if (left<=left0 && right>=right0 && top<=top0 && bottom>=bottom0)
000c62  454e              CMP      r6,r9
000c64  d809              BHI      |L1.3194|
000c66  4557              CMP      r7,r10
000c68  d307              BCC      |L1.3194|
000c6a  45dc              CMP      r12,r11
000c6c  d805              BHI      |L1.3194|
000c6e  45f0              CMP      r8,lr
000c70  d303              BCC      |L1.3194|
;;;618                {
;;;619                    blobs[i].m_model = 0; // invalidate
000c72  2100              MOVS     r1,#0
000c74  8021              STRH     r1,[r4,#0]
;;;620                    invalid++;
000c76  1c40              ADDS     r0,r0,#1
000c78  b280              UXTH     r0,r0
                  |L1.3194|
000c7a  1c5b              ADDS     r3,r3,#1              ;603
000c7c  b29b              UXTH     r3,r3                 ;603
                  |L1.3198|
000c7e  4293              CMP      r3,r2                 ;603
000c80  d3d7              BCC      |L1.3122|
                  |L1.3202|
000c82  1c6d              ADDS     r5,r5,#1              ;594
000c84  b2ad              UXTH     r5,r5                 ;594
                  |L1.3206|
000c86  4295              CMP      r5,r2                 ;594
000c88  d3c3              BCC      |L1.3090|
;;;621                }
;;;622            }
;;;623        }
;;;624    
;;;625        return invalid;
;;;626    }
000c8a  e8bd8ffe          POP      {r1-r11,pc}
;;;627    
                          ENDP

                  _ZN5Blobs5mergeEPtS0_S0_S0_S0_S0_S0_S0_S0_ PROC ; Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
;;;628    uint16_t Blobs::merge(uint16_t *M1, uint16_t *A0, uint16_t *B0, uint16_t *C0, uint16_t *D0,
000c8e  e92d4ffc          PUSH     {r2-r11,lr}
;;;629               uint16_t *A1, uint16_t *B1, uint16_t *C1, uint16_t *D1)
;;;630    {
000c92  4681              MOV      r9,r0
000c94  e9ddc60b          LDRD     r12,r6,[sp,#0x2c]
000c98  e9dd870f          LDRD     r8,r7,[sp,#0x3c]
000c9c  e9dd540d          LDRD     r5,r4,[sp,#0x34]
;;;631        bool c0, c1, c2, c3;
;;;632        uint16_t invalid = 0;
000ca0  2000              MOVS     r0,#0
;;;633    
;;;634        c0 = (*A0 <= *B1 && *B1 <= *B0) || (*A0 >= *B1 && *A0 - *B1 <= m_mergeDist);
000ca2  f8b2a000          LDRH     r10,[r2,#0]
000ca6  8824              LDRH     r4,[r4,#0]
000ca8  45a2              CMP      r10,r4
000caa  d803              BHI      |L1.3252|
000cac  f8b3b000          LDRH     r11,[r3,#0]
000cb0  455c              CMP      r4,r11
000cb2  d907              BLS      |L1.3268|
                  |L1.3252|
000cb4  45a2              CMP      r10,r4
000cb6  d308              BCC      |L1.3274|
000cb8  f8b9e284          LDRH     lr,[r9,#0x284]
000cbc  ebaa0b04          SUB      r11,r10,r4
000cc0  45f3              CMP      r11,lr
000cc2  dc02              BGT      |L1.3274|
                  |L1.3268|
000cc4  f04f0e01          MOV      lr,#1
000cc8  e001              B        |L1.3278|
                  |L1.3274|
000cca  f04f0e00          MOV      lr,#0
                  |L1.3278|
;;;635        c1 = *A0 >= *A1;
000cce  882d              LDRH     r5,[r5,#0]
000cd0  45aa              CMP      r10,r5
000cd2  d302              BCC      |L1.3290|
000cd4  f04f0b01          MOV      r11,#1
000cd8  e001              B        |L1.3294|
                  |L1.3290|
000cda  f04f0b00          MOV      r11,#0
                  |L1.3294|
;;;636        if (c0 && c1)
000cde  ea1e0f0b          TST      lr,r11
000ce2  f04f0b00          MOV      r11,#0
000ce6  d05b              BEQ      |L1.3488|
;;;637        {
;;;638            c2 = *C0 <= *C1 && *C1 <= *D0;
000ce8  f8bc4000          LDRH     r4,[r12,#0]
000cec  f8b89000          LDRH     r9,[r8,#0]
000cf0  454c              CMP      r4,r9
000cf2  d804              BHI      |L1.3326|
000cf4  8833              LDRH     r3,[r6,#0]
000cf6  4599              CMP      r9,r3
000cf8  d801              BHI      |L1.3326|
000cfa  2301              MOVS     r3,#1
000cfc  e000              B        |L1.3328|
                  |L1.3326|
000cfe  2300              MOVS     r3,#0
                  |L1.3328|
;;;639            c3 = *C0 <= *D1 && *D1 <= *D0;
000d00  f8b7a000          LDRH     r10,[r7,#0]
000d04  4554              CMP      r4,r10
000d06  d806              BHI      |L1.3350|
000d08  f8b6e000          LDRH     lr,[r6,#0]
000d0c  45f2              CMP      r10,lr
000d0e  d802              BHI      |L1.3350|
000d10  f04f0e01          MOV      lr,#1
000d14  e001              B        |L1.3354|
                  |L1.3350|
000d16  f04f0e00          MOV      lr,#0
                  |L1.3354|
000d1a  f8cde000          STR      lr,[sp,#0]
;;;640            if (c2 && !c3)
000d1e  f8dde000          LDR      lr,[sp,#0]
000d22  ea330e0e          BICS     lr,r3,lr
000d26  d007              BEQ      |L1.3384|
;;;641            {
;;;642                *A0 = *A1;
000d28  8015              STRH     r5,[r2,#0]
;;;643                *D0 = *D1;
000d2a  8838              LDRH     r0,[r7,#0]
000d2c  8030              STRH     r0,[r6,#0]
;;;644                *M1 = 0;  /* invalidate */
000d2e  f8a1b000          STRH     r11,[r1,#0]
;;;645                invalid++;
000d32  2001              MOVS     r0,#1
                  |L1.3380|
;;;646            }
;;;647            else if (!c2 && c3)
;;;648            {
;;;649                *A0 = *A1;
;;;650                *C0 = *C1;
;;;651                *M1 = 0;  /* invalidate */
;;;652                invalid++;
;;;653            }
;;;654            else if (c2 && c3)
;;;655            {
;;;656                *A0 = *A1;
;;;657                *M1 = 0;  /* invalidate */
;;;658                invalid++;
;;;659            }
;;;660            else
;;;661            {
;;;662                c2 = *C1 <= *C0 && *C0 <= *D1;
;;;663                c3 = *C1 <= *D0 && *D0 <= *D1;
;;;664                if (c2 && c3)
;;;665                {
;;;666                    *A0 = *A1;
;;;667                    *C0 = *C1;
;;;668                    *D0 = *D1;
;;;669                    *M1 = 0;  /* invalidate */
;;;670                    invalid++;
;;;671                }
;;;672            }
;;;673        }
;;;674        else
;;;675        {
;;;676            c0 = (*A1 <= *B0 && *B0 <= *B1) || (*A1 >= *B0 && *A1 - *B0 <= m_mergeDist);
;;;677            c1 = *A1 >= *A0;
;;;678            if (c0 && c1)
;;;679            {
;;;680                c2 = *C1 <= *C0 && *C0 <= *D1;
;;;681                c3 = *C1 <= *D0 && *D0 <= *D1;
;;;682                if (c2 && !c3)
;;;683                {
;;;684                    *B0 = *B1;
;;;685                    *C0 = *C1;
;;;686                    *M1 = 0;  /* invalidate */
;;;687                    invalid++;
;;;688                }
;;;689                else if (!c2 && c3)
;;;690                {
;;;691                    *B0 = *B1;
;;;692                    *D0 = *D1;
;;;693                    *M1 = 0;  /* invalidate */
;;;694                    invalid++;
;;;695                }
;;;696                else if (c2 && c3)
;;;697                {
;;;698                    *B0 = *B1;
;;;699                    *C0 = *C1;
;;;700                    *D0 = *D1;
;;;701                    *M1 = 0;  /* invalidate */
;;;702                    invalid++;
;;;703                }
;;;704                else
;;;705                {
;;;706                    c2 = *C0 <= *C1 && *C1 <= *D0;
;;;707                    c3 = *C0 <= *D1 && *D1 <= *D0;
;;;708                    if (c2 && c3)
;;;709                    {
;;;710                        *B0 = *B1;
;;;711                        *M1 = 0;  /* invalidate */
;;;712                        invalid++;
;;;713                    }
;;;714                }
;;;715            }
;;;716        }
;;;717        return invalid;
;;;718    }
000d34  e8bd8ffc          POP      {r2-r11,pc}
                  |L1.3384|
000d38  f8dde000          LDR      lr,[sp,#0]            ;647
000d3c  ea3e0e03          BICS     lr,lr,r3              ;647
000d40  d008              BEQ      |L1.3412|
000d42  8015              STRH     r5,[r2,#0]            ;649
000d44  f8b80000          LDRH     r0,[r8,#0]            ;650
000d48  f8ac0000          STRH     r0,[r12,#0]           ;650
000d4c  f8a1b000          STRH     r11,[r1,#0]           ;651
000d50  2001              MOVS     r0,#1                 ;652
000d52  e7ef              B        |L1.3380|
                  |L1.3412|
000d54  f8dde000          LDR      lr,[sp,#0]            ;654
000d58  ea130f0e          TST      r3,lr                 ;654
000d5c  d004              BEQ      |L1.3432|
000d5e  8015              STRH     r5,[r2,#0]            ;656
000d60  f8a1b000          STRH     r11,[r1,#0]           ;657
000d64  2001              MOVS     r0,#1                 ;658
000d66  e7e5              B        |L1.3380|
                  |L1.3432|
000d68  45a1              CMP      r9,r4                 ;662
000d6a  d803              BHI      |L1.3444|
000d6c  4554              CMP      r4,r10                ;662
000d6e  d801              BHI      |L1.3444|
000d70  2301              MOVS     r3,#1                 ;662
000d72  e000              B        |L1.3446|
                  |L1.3444|
000d74  2300              MOVS     r3,#0                 ;662
                  |L1.3446|
000d76  8834              LDRH     r4,[r6,#0]            ;663
000d78  45a1              CMP      r9,r4                 ;663
000d7a  d803              BHI      |L1.3460|
000d7c  4554              CMP      r4,r10                ;663
000d7e  d801              BHI      |L1.3460|
000d80  2401              MOVS     r4,#1                 ;663
000d82  e000              B        |L1.3462|
                  |L1.3460|
000d84  2400              MOVS     r4,#0                 ;663
                  |L1.3462|
000d86  4223              TST      r3,r4                 ;664
000d88  d0d4              BEQ      |L1.3380|
000d8a  8015              STRH     r5,[r2,#0]            ;666
000d8c  f8b80000          LDRH     r0,[r8,#0]            ;667
000d90  f8ac0000          STRH     r0,[r12,#0]           ;667
000d94  8838              LDRH     r0,[r7,#0]            ;668
000d96  8030              STRH     r0,[r6,#0]            ;668
000d98  f8a1b000          STRH     r11,[r1,#0]           ;669
000d9c  2001              MOVS     r0,#1                 ;670
                  |L1.3486|
000d9e  e7c9              B        |L1.3380|
                  |L1.3488|
000da0  881a              LDRH     r2,[r3,#0]            ;676
000da2  4295              CMP      r5,r2                 ;676
000da4  d801              BHI      |L1.3498|
000da6  42a2              CMP      r2,r4                 ;676
000da8  d906              BLS      |L1.3512|
                  |L1.3498|
000daa  4295              CMP      r5,r2                 ;676
000dac  d306              BCC      |L1.3516|
000dae  f8b99284          LDRH     r9,[r9,#0x284]        ;676
000db2  1aaa              SUBS     r2,r5,r2              ;676
000db4  454a              CMP      r2,r9                 ;676
000db6  dc01              BGT      |L1.3516|
                  |L1.3512|
000db8  2201              MOVS     r2,#1                 ;676
000dba  e000              B        |L1.3518|
                  |L1.3516|
000dbc  2200              MOVS     r2,#0                 ;676
                  |L1.3518|
000dbe  4555              CMP      r5,r10                ;677
000dc0  d301              BCC      |L1.3526|
000dc2  2501              MOVS     r5,#1                 ;677
000dc4  e000              B        |L1.3528|
                  |L1.3526|
000dc6  2500              MOVS     r5,#0                 ;677
                  |L1.3528|
000dc8  422a              TST      r2,r5                 ;678
000dca  d0b3              BEQ      |L1.3380|
000dcc  f8b89000          LDRH     r9,[r8,#0]            ;680
000dd0  f8bc2000          LDRH     r2,[r12,#0]           ;680
000dd4  9201              STR      r2,[sp,#4]            ;680
000dd6  4591              CMP      r9,r2                 ;680
000dd8  d805              BHI      |L1.3558|
000dda  883d              LDRH     r5,[r7,#0]            ;680
000ddc  9a01              LDR      r2,[sp,#4]            ;680
000dde  42aa              CMP      r2,r5                 ;680
000de0  d801              BHI      |L1.3558|
000de2  2201              MOVS     r2,#1                 ;680
000de4  e000              B        |L1.3560|
                  |L1.3558|
000de6  2200              MOVS     r2,#0                 ;680
                  |L1.3560|
000de8  f8b6a000          LDRH     r10,[r6,#0]           ;681
000dec  45d1              CMP      r9,r10                ;681
000dee  d804              BHI      |L1.3578|
000df0  883d              LDRH     r5,[r7,#0]            ;681
000df2  45aa              CMP      r10,r5                ;681
000df4  d801              BHI      |L1.3578|
000df6  2501              MOVS     r5,#1                 ;681
000df8  e000              B        |L1.3580|
                  |L1.3578|
000dfa  2500              MOVS     r5,#0                 ;681
                  |L1.3580|
000dfc  ea320e05          BICS     lr,r2,r5              ;682
000e00  d008              BEQ      |L1.3604|
000e02  801c              STRH     r4,[r3,#0]            ;684
000e04  f8b80000          LDRH     r0,[r8,#0]            ;685
000e08  f8ac0000          STRH     r0,[r12,#0]           ;685
000e0c  f8a1b000          STRH     r11,[r1,#0]           ;686
000e10  2001              MOVS     r0,#1                 ;687
000e12  e78f              B        |L1.3380|
                  |L1.3604|
000e14  ea350e02          BICS     lr,r5,r2              ;689
000e18  d006              BEQ      |L1.3624|
000e1a  801c              STRH     r4,[r3,#0]            ;691
000e1c  8838              LDRH     r0,[r7,#0]            ;692
000e1e  8030              STRH     r0,[r6,#0]            ;692
000e20  f8a1b000          STRH     r11,[r1,#0]           ;693
000e24  2001              MOVS     r0,#1                 ;694
000e26  e785              B        |L1.3380|
                  |L1.3624|
000e28  422a              TST      r2,r5                 ;696
000e2a  d00a              BEQ      |L1.3650|
000e2c  801c              STRH     r4,[r3,#0]            ;698
000e2e  f8b80000          LDRH     r0,[r8,#0]            ;699
000e32  f8ac0000          STRH     r0,[r12,#0]           ;699
000e36  8838              LDRH     r0,[r7,#0]            ;700
000e38  8030              STRH     r0,[r6,#0]            ;700
000e3a  f8a1b000          STRH     r11,[r1,#0]           ;701
000e3e  2001              MOVS     r0,#1                 ;702
000e40  e778              B        |L1.3380|
                  |L1.3650|
000e42  9a01              LDR      r2,[sp,#4]            ;706
000e44  454a              CMP      r2,r9                 ;706
000e46  d803              BHI      |L1.3664|
000e48  45d1              CMP      r9,r10                ;706
000e4a  d801              BHI      |L1.3664|
000e4c  2201              MOVS     r2,#1                 ;706
000e4e  e000              B        |L1.3666|
                  |L1.3664|
000e50  2200              MOVS     r2,#0                 ;706
                  |L1.3666|
000e52  883d              LDRH     r5,[r7,#0]            ;707
000e54  9e01              LDR      r6,[sp,#4]            ;707
000e56  42ae              CMP      r6,r5                 ;707
000e58  d803              BHI      |L1.3682|
000e5a  4555              CMP      r5,r10                ;707
000e5c  d801              BHI      |L1.3682|
000e5e  2501              MOVS     r5,#1                 ;707
000e60  e000              B        |L1.3684|
                  |L1.3682|
000e62  2500              MOVS     r5,#0                 ;707
                  |L1.3684|
000e64  422a              TST      r2,r5                 ;708
000e66  d09a              BEQ      |L1.3486|
000e68  801c              STRH     r4,[r3,#0]            ;710
000e6a  f8a1b000          STRH     r11,[r1,#0]           ;711
000e6e  2001              MOVS     r0,#1                 ;712
000e70  e760              B        |L1.3380|
;;;719    
                          ENDP

                  _ZN5Blobs8combine2EP5BlobAt PROC ; Blobs::combine2(BlobA*, unsigned short)
;;;720    uint16_t Blobs::combine2(BlobA *blobs, uint16_t numBlobs)
000e72  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;721    {
000e76  b08a              SUB      sp,sp,#0x28
;;;722        uint16_t i, j, *left0, *right0, *top0, *bottom0;
;;;723        uint16_t *left1, *right1, *top1, *bottom1, *m1;
;;;724        uint16_t invalid;
;;;725    
;;;726        for (i=0, invalid=0; i<numBlobs; i++)
000e78  2500              MOVS     r5,#0
000e7a  46a9              MOV      r9,r5
000e7c  e042              B        |L1.3844|
                  |L1.3710|
;;;727        {
;;;728            if (blobs[i].m_model==0)
000e7e  980b              LDR      r0,[sp,#0x2c]
000e80  eb001105          ADD      r1,r0,r5,LSL #4
000e84  8808              LDRH     r0,[r1,#0]
000e86  b3d8              CBZ      r0,|L1.3840|
;;;729                continue;
;;;730            left0 = &blobs[i].m_left;
000e88  1c88              ADDS     r0,r1,#2
000e8a  9009              STR      r0,[sp,#0x24]
;;;731            right0 = &blobs[i].m_right;
000e8c  1d08              ADDS     r0,r1,#4
000e8e  9008              STR      r0,[sp,#0x20]
;;;732            top0 = &blobs[i].m_top;
000e90  1d88              ADDS     r0,r1,#6
000e92  9007              STR      r0,[sp,#0x1c]
;;;733            bottom0 = &blobs[i].m_bottom;
000e94  3108              ADDS     r1,r1,#8
000e96  9106              STR      r1,[sp,#0x18]
;;;734    
;;;735            for (j=i+1; j<numBlobs; j++)
000e98  1c68              ADDS     r0,r5,#1
000e9a  b284              UXTH     r4,r0
000e9c  e02d              B        |L1.3834|
                  |L1.3742|
;;;736            {
;;;737                m1 = &blobs[j].m_model;
000e9e  980b              LDR      r0,[sp,#0x2c]
000ea0  eb001b04          ADD      r11,r0,r4,LSL #4
;;;738                if (*m1==0)
000ea4  4659              MOV      r1,r11
000ea6  f8bb0000          LDRH     r0,[r11,#0]
000eaa  b320              CBZ      r0,|L1.3830|
;;;739                    continue;
;;;740                left1 = &blobs[j].m_left;
000eac  1c8e              ADDS     r6,r1,#2
;;;741                right1 = &blobs[j].m_right;
000eae  1d0f              ADDS     r7,r1,#4
;;;742                top1 = &blobs[j].m_top;
000eb0  f1010806          ADD      r8,r1,#6
;;;743                bottom1 = &blobs[j].m_bottom;
000eb4  f1010a08          ADD      r10,r1,#8
;;;744    
;;;745                invalid += merge(m1, left0, right0, top0, bottom0, left1, right1, top1, bottom1);
000eb8  a802              ADD      r0,sp,#8
000eba  e8a005c0          STM      r0!,{r6-r8,r10}
000ebe  e9dd1006          LDRD     r1,r0,[sp,#0x18]
000ec2  e9cd0100          STRD     r0,r1,[sp,#0]
000ec6  e9dd3208          LDRD     r3,r2,[sp,#0x20]
000eca  4659              MOV      r1,r11
000ecc  980a              LDR      r0,[sp,#0x28]
000ece  f7fffffe          BL       _ZN5Blobs5mergeEPtS0_S0_S0_S0_S0_S0_S0_S0_ ; Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
000ed2  4481              ADD      r9,r9,r0
;;;746                invalid += merge(m1, top0, bottom0, left0, right0, top1, bottom1, left1, right1);
000ed4  e9cd8a02          STRD     r8,r10,[sp,#8]
000ed8  e9cd6704          STRD     r6,r7,[sp,#0x10]
000edc  e9dd1008          LDRD     r1,r0,[sp,#0x20]
000ee0  e9cd0100          STRD     r0,r1,[sp,#0]
000ee4  e9dd3206          LDRD     r3,r2,[sp,#0x18]
000ee8  4659              MOV      r1,r11
000eea  980a              LDR      r0,[sp,#0x28]
000eec  f7fffffe          BL       _ZN5Blobs5mergeEPtS0_S0_S0_S0_S0_S0_S0_S0_ ; Blobs::merge(unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
000ef0  4448              ADD      r0,r0,r9
000ef2  fa1ff980          UXTH     r9,r0
                  |L1.3830|
000ef6  1c64              ADDS     r4,r4,#1              ;735
000ef8  b2a4              UXTH     r4,r4                 ;735
                  |L1.3834|
000efa  980c              LDR      r0,[sp,#0x30]         ;735
000efc  4284              CMP      r4,r0                 ;735
000efe  d3ce              BCC      |L1.3742|
                  |L1.3840|
000f00  1c6d              ADDS     r5,r5,#1              ;726
000f02  b2ad              UXTH     r5,r5                 ;726
                  |L1.3844|
000f04  980c              LDR      r0,[sp,#0x30]         ;726
000f06  4285              CMP      r5,r0                 ;726
000f08  d3b9              BCC      |L1.3710|
;;;747            }
;;;748        }
;;;749    
;;;750        return invalid;
000f0a  4648              MOV      r0,r9
                  |L1.3852|
;;;751    }
000f0c  b00d              ADD      sp,sp,#0x34
000f0e  e679              B        |L1.3076|
;;;752    
                          ENDP

                  _ZN5Blobs8endFrameEv PROC ; Blobs::endFrame()
;;;1166   
;;;1167   void Blobs::endFrame()
000f10  b570              PUSH     {r4-r6,lr}
;;;1168   {
000f12  4606              MOV      r6,r0
;;;1169       int i;
;;;1170       for (i=0; i<CL_NUM_SIGNATURES; i++)
000f14  2400              MOVS     r4,#0
                  |L1.3862|
;;;1171       {
;;;1172           m_assembler[i].EndFrame();
000f16  ebc400c4          RSB      r0,r4,r4,LSL #3
000f1a  eb060080          ADD      r0,r6,r0,LSL #2
000f1e  f50070d2          ADD      r0,r0,#0x1a4
000f22  4605              MOV      r5,r0
000f24  f7fffffe          BL       _ZN14CBlobAssembler8EndFrameEv ; CBlobAssembler::EndFrame()
;;;1173           m_assembler[i].SortFinished();
000f28  4628              MOV      r0,r5
000f2a  f7fffffe          BL       _ZN14CBlobAssembler12SortFinishedEv ; CBlobAssembler::SortFinished()
000f2e  1c64              ADDS     r4,r4,#1              ;1170
000f30  2c07              CMP      r4,#7                 ;1170
000f32  dbf0              BLT      |L1.3862|
;;;1174       }
;;;1175   }
000f34  bd70              POP      {r4-r6,pc}
;;;1176   
                          ENDP

                  _ZN5Blobs9sendQvalsEv PROC ; Blobs::sendQvals()
;;;103    
;;;104    void Blobs::sendQvals()
000f36  b530              PUSH     {r4,r5,lr}
;;;105    {
000f38  b085              SUB      sp,sp,#0x14
000f3a  4604              MOV      r4,r0
;;;106    	CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('C','C','Q','S')), UINTS32(m_numQvals, m_qvals), END);
000f3c  f5047424          ADD      r4,r4,#0x290
000f40  aa01              ADD      r2,sp,#4
000f42  e9d40100          LDRD     r0,r1,[r4,#0]
000f46  2500              MOVS     r5,#0
000f48  c223              STM      r2!,{r0,r1,r5}
000f4a  2084              MOVS     r0,#0x84
000f4c  9000              STR      r0,[sp,#0]
000f4e  48fe              LDR      r0,|L1.4936|
000f50  9504              STR      r5,[sp,#0x10]
000f52  4bfc              LDR      r3,|L1.4932|
000f54  2264              MOVS     r2,#0x64
000f56  2118              MOVS     r1,#0x18
000f58  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
000f5a  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
;;;107    	m_numQvals = 0;
000f5e  6025              STR      r5,[r4,#0]
;;;108    }
000f60  b005              ADD      sp,sp,#0x14
000f62  bd30              POP      {r4,r5,pc}
;;;109    
                          ENDP

                  _ZN5Blobs7addQvalEj PROC ; Blobs::addQval(unsigned)
;;;110    void Blobs::addQval(uint32_t qval)
000f64  b430              PUSH     {r4,r5}
;;;111    {
;;;112    	if (m_sendDetectedPixels && m_qvals)
000f66  f8902298          LDRB     r2,[r0,#0x298]
000f6a  2a00              CMP      r2,#0
000f6c  d010              BEQ      |L1.3984|
000f6e  f8d03294          LDR      r3,[r0,#0x294]
000f72  2b00              CMP      r3,#0
000f74  d00c              BEQ      |L1.3984|
;;;113    	{
;;;114    		m_qvals[m_numQvals++] = qval;
000f76  f8d02290          LDR      r2,[r0,#0x290]
000f7a  1c54              ADDS     r4,r2,#1
000f7c  f8c04290          STR      r4,[r0,#0x290]
000f80  f8431022          STR      r1,[r3,r2,LSL #2]
;;;115    		if (m_numQvals>=TEMP_QVAL_ARRAY_SIZE)
000f84  f8d01290          LDR      r1,[r0,#0x290]
000f88  29ff              CMP      r1,#0xff
000f8a  d901              BLS      |L1.3984|
;;;116    			sendQvals();
000f8c  bc30              POP      {r4,r5}
000f8e  e7fe              B        _ZN5Blobs9sendQvalsEv ; Blobs::sendQvals()
                  |L1.3984|
;;;117    	}
;;;118    }
000f90  bc30              POP      {r4,r5}
000f92  4770              BX       lr
;;;119    
                          ENDP

                  _ZN5Blobs13handleSegmentEhttt PROC ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
;;;120    int Blobs::handleSegment(uint8_t signature, uint16_t row, uint16_t startCol, uint16_t length)
000f94  b57c              PUSH     {r2-r6,lr}
;;;121    {
000f96  460c              MOV      r4,r1
000f98  9906              LDR      r1,[sp,#0x18]
000f9a  4605              MOV      r5,r0
;;;122    	SSegment s;
;;;123    
;;;124        s.model = signature;
000f9c  f89d0000          LDRB     r0,[sp,#0]
000fa0  f3640002          BFI      r0,r4,#0,#3
000fa4  f88d0000          STRB     r0,[sp,#0]
;;;125        s.row = row;
000fa8  f8bd0000          LDRH     r0,[sp,#0]
000fac  f36200cb          BFI      r0,r2,#3,#9
000fb0  f8ad0000          STRH     r0,[sp,#0]
;;;126        s.startCol = startCol;
000fb4  f8ad3002          STRH     r3,[sp,#2]
;;;127        s.endCol = startCol+length;
000fb8  1858              ADDS     r0,r3,r1
000fba  f8ad0004          STRH     r0,[sp,#4]
;;;128    
;;;129        uint32_t qval;
;;;130    
;;;131        qval = signature;
;;;132        qval |= startCol<<3;
000fbe  ea4402c3          ORR      r2,r4,r3,LSL #3
;;;133        qval |= length<<12;
000fc2  ea423101          ORR      r1,r2,r1,LSL #12
;;;134    
;;;135    	addQval(qval);
000fc6  4628              MOV      r0,r5
000fc8  f7fffffe          BL       _ZN5Blobs7addQvalEj ; Blobs::addQval(unsigned)
;;;136        return m_assembler[signature-1].Add(s);
000fcc  1e64              SUBS     r4,r4,#1
000fce  ebc400c4          RSB      r0,r4,r4,LSL #3
000fd2  eb050080          ADD      r0,r5,r0,LSL #2
000fd6  f50070d2          ADD      r0,r0,#0x1a4
000fda  4669              MOV      r1,sp
000fdc  f7fffffe          BL       _ZN14CBlobAssembler3AddERK8SSegment ; CBlobAssembler::Add(const SSegment&)
;;;137    }
000fe0  bd7c              POP      {r2-r6,pc}
;;;138    
                          ENDP

                  _ZN5Blobs17runlengthAnalysisEv PROC ; Blobs::runlengthAnalysis()
;;;144    // 4: bottom Y edge
;;;145    int Blobs::runlengthAnalysis()
000fe2  e92d4ff0          PUSH     {r4-r11,lr}
;;;146    {
000fe6  b08d              SUB      sp,sp,#0x34
000fe8  4680              MOV      r8,r0
;;;147    	uint32_t timer;
;;;148        int32_t row=-1, icount=0;
000fea  f04f39ff          MOV      r9,#0xffffffff
000fee  2000              MOVS     r0,#0
000ff0  900b              STR      r0,[sp,#0x2c]
;;;149        uint32_t startCol, sig, segmentStartCol, segmentEndCol, segmentSig=0;
000ff2  2600              MOVS     r6,#0
000ff4  2400              MOVS     r4,#0
000ff6  f8ad4024          STRH     r4,[sp,#0x24]
000ffa  f8ad402a          STRH     r4,[sp,#0x2a]
000ffe  f8ad4026          STRH     r4,[sp,#0x26]
001002  f8ad4028          STRH     r4,[sp,#0x28]
;;;150        Qval qval;
;;;151    	register int32_t u, v, c;
;;;152    	int res=0, res2=0;
001006  4683              MOV      r11,r0
001008  9008              STR      r0,[sp,#0x20]
;;;153    
;;;154    	if (m_sendDetectedPixels)
00100a  f8980298          LDRB     r0,[r8,#0x298]
00100e  2800              CMP      r0,#0
001010  d019              BEQ      |L1.4166|
;;;155    	{
;;;156    		m_qvals = (uint32_t *)malloc(TEMP_QVAL_ARRAY_SIZE*sizeof(uint32_t));
001012  f44f6080          MOV      r0,#0x400
001016  f7fffffe          BL       malloc
00101a  f8c80294          STR      r0,[r8,#0x294]
;;;157    		if (m_qvals==NULL)
00101e  b1d0              CBZ      r0,|L1.4182|
;;;158    			return -3; // out of memory
;;;159    		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('C','C','Q','F')), INT8(RENDER_FLAG_START), UINT16(CAM_RES2_WIDTH/2), UINT16(CAM_RES2_HEIGHT), END);
001020  aa04              ADD      r2,sp,#0x10
001022  21d0              MOVS     r1,#0xd0
001024  2002              MOVS     r0,#2
001026  c213              STM      r2!,{r0,r1,r4}
001028  219e              MOVS     r1,#0x9e
00102a  9407              STR      r4,[sp,#0x1c]
00102c  2304              MOVS     r3,#4
00102e  2201              MOVS     r2,#1
001030  e9cd0102          STRD     r0,r1,[sp,#8]
001034  e9cd2300          STRD     r2,r3,[sp,#0]
001038  48c3              LDR      r0,|L1.4936|
00103a  4bc4              LDR      r3,|L1.4940|
00103c  2264              MOVS     r2,#0x64
00103e  2118              MOVS     r1,#0x18
001040  6800              LDR      r0,[r0,#0]  ; g_chirpUsb
001042  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
                  |L1.4166|
;;;160    	}
;;;161    
;;;162        m_numQvals = 0;
001046  2000              MOVS     r0,#0
001048  f8c80290          STR      r0,[r8,#0x290]
;;;163    
;;;164    	setTimer(&timer);
00104c  a80c              ADD      r0,sp,#0x30
00104e  f7fffffe          BL       setTimer
                  |L1.4178|
;;;165    	
;;;166        while(1)
;;;167        {
;;;168            while (m_qq->dequeue(&qval)==0)
;;;169    		{
;;;170    			if (getTimer(timer)>100000) // shouldn't take more than 100ms
001052  4cbf              LDR      r4,|L1.4944|
001054  e00e              B        |L1.4212|
                  |L1.4182|
001056  f06f0002          MVN      r0,#2                 ;158
;;;171    			{
;;;172    				printf("to\n");
;;;173    				res2 = -2; // timeout
;;;174    				goto end;
;;;175    			}
;;;176    		}
;;;177            if (qval.m_col>=0xfffe)
;;;178    		{
;;;179    			if (qval.m_col==0xfffe) // error code, queue overrun
;;;180    				res2 = -1; // queue overrun 
;;;181                goto end;
;;;182    		}
;;;183    		if (res<0)
;;;184    			continue;
;;;185            if (qval.m_col==0)
;;;186            {
;;;187                if (segmentSig)
;;;188                {
;;;189                    res = handleSegment(segmentSig, row, segmentStartCol-1, segmentEndCol - segmentStartCol+1);
;;;190                    segmentSig = 0;
;;;191                }
;;;192                row++;
;;;193    			addQval(0);
;;;194    			if (icount++==5) // an interleave of every 5 lines or about every 175us seems good
;;;195    			{
;;;196    				g_chirpUsb->service();
;;;197    				icount = 0;
;;;198    			}
;;;199                continue;
;;;200            }
;;;201    
;;;202            sig = qval.m_col&0x07;
;;;203    
;;;204            u = qval.m_u;
;;;205            v = qval.m_v;
;;;206    
;;;207            u <<= CL_LUT_ENTRY_SCALE;
;;;208            v <<= CL_LUT_ENTRY_SCALE;
;;;209            c = qval.m_y;
;;;210            if (c==0)
;;;211                c = 1;
;;;212            u /= c;
;;;213            v /= c;
;;;214    
;;;215            if (m_clut.m_runtimeSigs[sig-1].m_uMin<u && u<m_clut.m_runtimeSigs[sig-1].m_uMax &&
;;;216                    m_clut.m_runtimeSigs[sig-1].m_vMin<v && v<m_clut.m_runtimeSigs[sig-1].m_vMax && c>=(int32_t)m_clut.m_miny)
;;;217            {
;;;218             	qval.m_col >>= 3;
;;;219            	startCol = qval.m_col;
;;;220    
;;;221    			if (segmentSig==0)
;;;222                {
;;;223                    segmentSig = sig;
;;;224                    segmentStartCol = startCol;
;;;225    				segmentEndCol = startCol+1;
;;;226                }
;;;227    			else if (segmentSig==sig)
;;;228    			{
;;;229    				if (startCol-segmentEndCol<=5)
;;;230    					segmentEndCol = startCol+1;
;;;231    				else
;;;232    				{
;;;233    					res = handleSegment(segmentSig, row, segmentStartCol, segmentEndCol - segmentStartCol);
;;;234    					segmentStartCol = startCol;
;;;235    					segmentEndCol = startCol+1;
;;;236    				}
;;;237    			}		
;;;238    			else // segmentSig!=sig
;;;239    			{
;;;240    				if (startCol-segmentEndCol<=5)
;;;241    					segmentEndCol = startCol;
;;;242                    res = handleSegment(segmentSig, row, segmentStartCol, segmentEndCol - segmentStartCol);
;;;243                    segmentSig = sig;
;;;244                    segmentStartCol = startCol;
;;;245    				segmentEndCol = startCol+1;
;;;246    			}
;;;247            }
;;;248        }
;;;249    	end:
;;;250    	if (m_sendDetectedPixels)
;;;251    	{
;;;252    		sendQvals();
;;;253    		CRP_SEND_XDATA(g_chirpUsb, HTYPE(FOURCC('C','C','Q','F')), INT8(RENDER_FLAG_BLEND), UINT16(CAM_RES2_WIDTH/2), UINT16(CAM_RES2_HEIGHT), END);
;;;254    		free(m_qvals);
;;;255    		m_qvals = NULL;
;;;256    	}
;;;257    	endFrame();
;;;258    	
;;;259    	return res2;
;;;260    }
00105a  e757              B        |L1.3852|
                  |L1.4188|
00105c  980c              LDR      r0,[sp,#0x30]         ;170
00105e  f7fffffe          BL       getTimer
001062  42a0              CMP      r0,r4                 ;170
001064  d906              BLS      |L1.4212|
001066  a0bb              ADR      r0,|L1.4948|
001068  f7fffffe          BL       lpc_printf
00106c  f06f0001          MVN      r0,#1                 ;173
001070  9008              STR      r0,[sp,#0x20]         ;173
001072  e012              B        |L1.4250|
                  |L1.4212|
001074  a909              ADD      r1,sp,#0x24           ;168
001076  f8d801a0          LDR      r0,[r8,#0x1a0]        ;168
00107a  f7fffffe          BL       _ZN6Qqueue7dequeueEP4Qval ; Qqueue::dequeue(Qval*)
00107e  2800              CMP      r0,#0                 ;168
001080  d0ec              BEQ      |L1.4188|
001082  f8bd1024          LDRH     r1,[sp,#0x24]         ;177
001086  f64f70fe          MOV      r0,#0xfffe            ;177
00108a  4281              CMP      r1,r0                 ;177
00108c  d329              BCC      |L1.4322|
00108e  f8bd1024          LDRH     r1,[sp,#0x24]         ;179
001092  1a08              SUBS     r0,r1,r0              ;179
001094  d101              BNE      |L1.4250|
001096  1e40              SUBS     r0,r0,#1              ;180
001098  9008              STR      r0,[sp,#0x20]         ;180
                  |L1.4250|
00109a  f8980298          LDRB     r0,[r8,#0x298]        ;250
00109e  b1d8              CBZ      r0,|L1.4312|
0010a0  4640              MOV      r0,r8                 ;252
0010a2  f7fffffe          BL       _ZN5Blobs9sendQvalsEv ; Blobs::sendQvals()
0010a6  aa04              ADD      r2,sp,#0x10           ;253
0010a8  2400              MOVS     r4,#0                 ;253
0010aa  21d0              MOVS     r1,#0xd0              ;253
0010ac  2002              MOVS     r0,#2                 ;253
0010ae  c213              STM      r2!,{r0,r1,r4}        ;253
0010b0  2201              MOVS     r2,#1                 ;253
0010b2  e9cd2000          STRD     r2,r0,[sp,#0]         ;253
0010b6  219e              MOVS     r1,#0x9e              ;253
0010b8  9407              STR      r4,[sp,#0x1c]         ;253
0010ba  e9cd0102          STRD     r0,r1,[sp,#8]         ;253
0010be  48a2              LDR      r0,|L1.4936|
0010c0  4ba2              LDR      r3,|L1.4940|
0010c2  2264              MOVS     r2,#0x64              ;253
0010c4  2118              MOVS     r1,#0x18              ;253
0010c6  6800              LDR      r0,[r0,#0]            ;253  ; g_chirpUsb
0010c8  f7fffffe          BL       _ZN5Chirp8assembleEhz ; Chirp::assemble(unsigned char, ...)
0010cc  f8d80294          LDR      r0,[r8,#0x294]        ;254
0010d0  f7fffffe          BL       free
0010d4  f8c84294          STR      r4,[r8,#0x294]        ;255
                  |L1.4312|
0010d8  4640              MOV      r0,r8                 ;257
0010da  f7fffffe          BL       _ZN5Blobs8endFrameEv ; Blobs::endFrame()
0010de  9808              LDR      r0,[sp,#0x20]         ;259
0010e0  e714              B        |L1.3852|
                  |L1.4322|
0010e2  f1bb0f00          CMP      r11,#0                ;183
0010e6  dbb4              BLT      |L1.4178|
0010e8  b159              CBZ      r1,|L1.4354|
0010ea  f0010a07          AND      r10,r1,#7             ;202
0010ee  f9bd2028          LDRSH    r2,[sp,#0x28]         ;204
0010f2  f9bd0026          LDRSH    r0,[sp,#0x26]         ;205
0010f6  03d2              LSLS     r2,r2,#15             ;207
0010f8  03c4              LSLS     r4,r0,#15             ;208
0010fa  f8bd002a          LDRH     r0,[sp,#0x2a]         ;209
0010fe  b310              CBZ      r0,|L1.4422|
001100  e022              B        |L1.4424|
                  |L1.4354|
001102  b16e              CBZ      r6,|L1.4384|
001104  1be8              SUBS     r0,r5,r7              ;189
001106  1c40              ADDS     r0,r0,#1              ;189
001108  b280              UXTH     r0,r0                 ;189
00110a  9000              STR      r0,[sp,#0]            ;189
00110c  1e78              SUBS     r0,r7,#1              ;189
00110e  b283              UXTH     r3,r0                 ;189
001110  fa1ff289          UXTH     r2,r9                 ;189
001114  b2f1              UXTB     r1,r6                 ;189
001116  4640              MOV      r0,r8                 ;189
001118  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
00111c  4683              MOV      r11,r0                ;189
00111e  2600              MOVS     r6,#0                 ;190
                  |L1.4384|
001120  f1090901          ADD      r9,r9,#1              ;192
001124  2100              MOVS     r1,#0                 ;193
001126  4640              MOV      r0,r8                 ;193
001128  f7fffffe          BL       _ZN5Blobs7addQvalEj ; Blobs::addQval(unsigned)
00112c  980b              LDR      r0,[sp,#0x2c]         ;194
00112e  1c40              ADDS     r0,r0,#1              ;194
001130  900b              STR      r0,[sp,#0x2c]         ;194
001132  2806              CMP      r0,#6                 ;194
001134  d18d              BNE      |L1.4178|
001136  4884              LDR      r0,|L1.4936|
001138  2101              MOVS     r1,#1                 ;196
00113a  6800              LDR      r0,[r0,#0]            ;196  ; g_chirpUsb
00113c  f7fffffe          BL       _ZN5Chirp7serviceEb ; Chirp::service(bool)
001140  2000              MOVS     r0,#0                 ;197
001142  900b              STR      r0,[sp,#0x2c]         ;197
                  |L1.4420|
001144  e785              B        |L1.4178|
                  |L1.4422|
001146  2001              MOVS     r0,#1                 ;211
                  |L1.4424|
001148  fb92f3f0          SDIV     r3,r2,r0              ;212
00114c  fb94f4f0          SDIV     r4,r4,r0              ;213
001150  f1aa0201          SUB      r2,r10,#1             ;215
001154  eb020282          ADD      r2,r2,r2,LSL #2       ;215
001158  eb080282          ADD      r2,r8,r2,LSL #2       ;215
00115c  f8d2c0e0          LDR      r12,[r2,#0xe0]        ;215
001160  459c              CMP      r12,r3                ;215
001162  daef              BGE      |L1.4420|
001164  f8d2c0e4          LDR      r12,[r2,#0xe4]        ;215
001168  459c              CMP      r12,r3                ;215
00116a  ddeb              BLE      |L1.4420|
00116c  f8d230e8          LDR      r3,[r2,#0xe8]         ;216
001170  42a3              CMP      r3,r4                 ;216
001172  dae7              BGE      |L1.4420|
001174  f8d220ec          LDR      r2,[r2,#0xec]         ;216
001178  42a2              CMP      r2,r4                 ;216
00117a  dde3              BLE      |L1.4420|
00117c  f8d8216c          LDR      r2,[r8,#0x16c]        ;216
001180  4282              CMP      r2,r0                 ;216
001182  dcdf              BGT      |L1.4420|
001184  08cc              LSRS     r4,r1,#3              ;218
001186  f8ad4024          STRH     r4,[sp,#0x24]         ;218
00118a  b136              CBZ      r6,|L1.4506|
00118c  4556              CMP      r6,r10                ;227
00118e  d116              BNE      |L1.4542|
001190  1b60              SUBS     r0,r4,r5              ;229
001192  2805              CMP      r0,#5                 ;229
001194  d805              BHI      |L1.4514|
001196  1c65              ADDS     r5,r4,#1              ;230
001198  e75b              B        |L1.4178|
                  |L1.4506|
00119a  4656              MOV      r6,r10                ;223
00119c  4627              MOV      r7,r4                 ;224
00119e  1c65              ADDS     r5,r4,#1              ;225
0011a0  e757              B        |L1.4178|
                  |L1.4514|
0011a2  1be8              SUBS     r0,r5,r7              ;233
0011a4  b280              UXTH     r0,r0                 ;233
0011a6  9000              STR      r0,[sp,#0]            ;233
0011a8  b2bb              UXTH     r3,r7                 ;233
0011aa  fa1ff289          UXTH     r2,r9                 ;233
0011ae  b2f1              UXTB     r1,r6                 ;233
0011b0  4640              MOV      r0,r8                 ;233
0011b2  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
0011b6  4683              MOV      r11,r0                ;233
0011b8  4627              MOV      r7,r4                 ;234
0011ba  1c65              ADDS     r5,r4,#1              ;235
0011bc  e749              B        |L1.4178|
                  |L1.4542|
0011be  1b60              SUBS     r0,r4,r5              ;240
0011c0  2805              CMP      r0,#5                 ;240
0011c2  d800              BHI      |L1.4550|
0011c4  4625              MOV      r5,r4                 ;241
                  |L1.4550|
0011c6  1be8              SUBS     r0,r5,r7              ;242
0011c8  b280              UXTH     r0,r0                 ;242
0011ca  9000              STR      r0,[sp,#0]            ;242
0011cc  b2bb              UXTH     r3,r7                 ;242
0011ce  fa1ff289          UXTH     r2,r9                 ;242
0011d2  b2f1              UXTB     r1,r6                 ;242
0011d4  4640              MOV      r0,r8                 ;242
0011d6  f7fffffe          BL       _ZN5Blobs13handleSegmentEhttt ; Blobs::handleSegment(unsigned char, unsigned short, unsigned short, unsigned short)
0011da  4683              MOV      r11,r0                ;242
0011dc  4656              MOV      r6,r10                ;243
0011de  4627              MOV      r7,r4                 ;244
0011e0  1c65              ADDS     r5,r4,#1              ;245
0011e2  e736              B        |L1.4178|
;;;261    
                          ENDP

                  _ZN5Blobs7blobifyEv PROC ; Blobs::blobify()
;;;262    int Blobs::blobify()
0011e4  e92d5fff          PUSH     {r0-r12,lr}
;;;263    {
0011e8  4604              MOV      r4,r0
;;;264        uint32_t i, k;
;;;265        bool colorCode;
;;;266        CBlob *blob;
;;;267        BlobA *blobsStart;
;;;268        uint16_t numBlobsStart, invalid, invalid2;
;;;269        uint16_t left, top, right, bottom;
;;;270        //uint32_t timer, timer2=0;
;;;271    
;;;272    	if (runlengthAnalysis()<0)
0011ea  4620              MOV      r0,r4
0011ec  f7fffffe          BL       _ZN5Blobs17runlengthAnalysisEv ; Blobs::runlengthAnalysis()
0011f0  2700              MOVS     r7,#0
0011f2  2800              CMP      r0,#0
0011f4  da14              BGE      |L1.4640|
;;;273    	{
;;;274       	 	for (i=0; i<CL_NUM_SIGNATURES; i++)
0011f6  2500              MOVS     r5,#0
                  |L1.4600|
;;;275            	m_assembler[i].Reset();
0011f8  ebc500c5          RSB      r0,r5,r5,LSL #3
0011fc  eb040080          ADD      r0,r4,r0,LSL #2
001200  f50070d2          ADD      r0,r0,#0x1a4
001204  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
001208  1c6d              ADDS     r5,r5,#1              ;274
00120a  2d07              CMP      r5,#7                 ;274
00120c  d3f4              BCC      |L1.4600|
;;;276        	m_numBlobs = 0;
00120e  f8a4726c          STRH     r7,[r4,#0x26c]
;;;277    		m_numCCBlobs = 0;
001212  f8a47274          STRH     r7,[r4,#0x274]
;;;278    		return -1;
001216  f04f30ff          MOV      r0,#0xffffffff
                  |L1.4634|
;;;279    	}
;;;280    
;;;281        // copy blobs into memory
;;;282        invalid = 0;
;;;283        // mutex keeps interrupt routine from stepping on us
;;;284        m_mutex = true;
;;;285    
;;;286        m_maxBlob = NULL;
;;;287    
;;;288        for (i=0, m_numBlobs=0, m_numCCBlobs=0; i<CL_NUM_SIGNATURES; i++)
;;;289        {
;;;290            colorCode = CC_SIGNATURE(i+1);
;;;291    
;;;292            for (k=0, blobsStart=m_blobs+m_numBlobs, numBlobsStart=m_numBlobs, blob=m_assembler[i].finishedBlobs;
;;;293                 blob && m_numBlobs<m_maxBlobs && k<m_maxBlobsPerModel; blob=blob->next, k++)
;;;294            {
;;;295                if ((colorCode && blob->GetArea()<MIN_COLOR_CODE_AREA) ||
;;;296                    (!colorCode && blob->GetArea()<(int)m_minArea))
;;;297                    continue;
;;;298                blob->getBBox((short &)left, (short &)top, (short &)right, (short &)bottom);
;;;299                if (bottom-top<=1) // blobs that are 1 line tall
;;;300                    continue;
;;;301                m_blobs[m_numBlobs].m_model = i+1;
;;;302                m_blobs[m_numBlobs].m_left = left<<1;
;;;303                m_blobs[m_numBlobs].m_right = right<<1;
;;;304                m_blobs[m_numBlobs].m_top = top;
;;;305                m_blobs[m_numBlobs].m_bottom = bottom;
;;;306                m_numBlobs++;
;;;307            }
;;;308            //setTimer(&timer);
;;;309            if (!colorCode) // do not combine color code models
;;;310            {
;;;311                while(1)
;;;312                {
;;;313                    invalid2 = combine2(blobsStart, m_numBlobs-numBlobsStart);
;;;314                    if (invalid2==0)
;;;315                        break;
;;;316                    invalid += invalid2;
;;;317                }
;;;318            }
;;;319            //timer2 += getTimer(timer);
;;;320        }
;;;321        //setTimer(&timer);
;;;322        invalid += combine(m_blobs, m_numBlobs);
;;;323        if (m_ccMode!=DISABLED)
;;;324        {
;;;325            m_ccBlobs = m_blobs + m_numBlobs;
;;;326            // calculate number of codedblobs left
;;;327            processCC();
;;;328        }
;;;329    	// remove empty blobs -- note blobs can be made empty by CC algorithm
;;;330        if (invalid || m_ccMode!=DISABLED)
;;;331        {
;;;332            invalid2 = compress(m_blobs, m_numBlobs);
;;;333            m_numBlobs -= invalid2;
;;;334    		// shift cc blobs down
;;;335    		shift();
;;;336       }
;;;337        //timer2 += getTimer(timer);
;;;338        //cprintf("time=%d\n", timer2); // never seen this greater than 200us.  or 1% of frame period
;;;339    
;;;340        // reset read index-- new frame
;;;341        m_blobReadIndex = 0;
;;;342    
;;;343    	handleBlobTracking();
;;;344        m_mutex = false;
;;;345    
;;;346        // free memory
;;;347        for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;348            m_assembler[i].Reset();
;;;349    
;;;350    #if 0
;;;351        static int frame = 0;
;;;352        if (m_numBlobs>0)
;;;353            cprintf("%d: blobs %d %d %d %d %d\n", frame, m_numBlobs, m_blobs[1], m_blobs[2], m_blobs[3], m_blobs[4]);
;;;354        else
;;;355            cprintf("%d: blobs 0\n", frame);
;;;356        frame++;
;;;357    #endif
;;;358    	return 0;
;;;359    }
00121a  b004              ADD      sp,sp,#0x10
00121c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4640|
001220  2600              MOVS     r6,#0                 ;282
001222  2001              MOVS     r0,#1                 ;284
001224  f8840276          STRB     r0,[r4,#0x276]        ;284
001228  2000              MOVS     r0,#0                 ;286
00122a  f8c4028c          STR      r0,[r4,#0x28c]        ;286
00122e  2500              MOVS     r5,#0                 ;288
001230  f8a4026c          STRH     r0,[r4,#0x26c]        ;288
001234  f8a40274          STRH     r0,[r4,#0x274]        ;288
001238  e09b              B        |L1.4978|
                  |L1.4666|
00123a  f8940288          LDRB     r0,[r4,#0x288]        ;290
00123e  2802              CMP      r0,#2                 ;290
001240  d015              BEQ      |L1.4718|
001242  1c68              ADDS     r0,r5,#1              ;290
001244  b2c1              UXTB     r1,r0                 ;290
001246  4620              MOV      r0,r4                 ;290
001248  f7fffffe          BL       _ZN8ColorLUT7getTypeEh ; ColorLUT::getType(unsigned char)
00124c  2801              CMP      r0,#1                 ;290
00124e  d00e              BEQ      |L1.4718|
001250  2300              MOVS     r3,#0                 ;290
                  |L1.4690|
001252  2200              MOVS     r2,#0                 ;292
001254  f8b4726c          LDRH     r7,[r4,#0x26c]        ;292
001258  f8d40268          LDR      r0,[r4,#0x268]        ;292
00125c  eb001807          ADD      r8,r0,r7,LSL #4       ;292
001260  ebc500c5          RSB      r0,r5,r5,LSL #3       ;292
001264  eb040080          ADD      r0,r4,r0,LSL #2       ;292
001268  f8d001b4          LDR      r0,[r0,#0x1b4]        ;292
00126c  e05d              B        |L1.4906|
                  |L1.4718|
00126e  2301              MOVS     r3,#1                 ;290
001270  e7ef              B        |L1.4690|
                  |L1.4722|
001272  b113              CBZ      r3,|L1.4730|
001274  6a01              LDR      r1,[r0,#0x20]         ;295
001276  290a              CMP      r1,#0xa               ;295
001278  db55              BLT      |L1.4902|
                  |L1.4730|
00127a  b923              CBNZ     r3,|L1.4742|
00127c  6a01              LDR      r1,[r0,#0x20]         ;296
00127e  f8d4c280          LDR      r12,[r4,#0x280]       ;296
001282  4561              CMP      r1,r12                ;296
001284  db4f              BLT      |L1.4902|
                  |L1.4742|
001286  8a01              LDRH     r1,[r0,#0x10]         ;296
001288  9103              STR      r1,[sp,#0xc]          ;296
00128a  8a41              LDRH     r1,[r0,#0x12]         ;296
00128c  9102              STR      r1,[sp,#8]            ;296
00128e  8a81              LDRH     r1,[r0,#0x14]         ;296
001290  9101              STR      r1,[sp,#4]            ;296
001292  8881              LDRH     r1,[r0,#4]            ;296
001294  f3c101c8          UBFX     r1,r1,#3,#9           ;296
001298  9100              STR      r1,[sp,#0]            ;296
00129a  f8bdc008          LDRH     r12,[sp,#8]           ;299
00129e  eba1010c          SUB      r1,r1,r12             ;299
0012a2  2901              CMP      r1,#1                 ;299
0012a4  dd3f              BLE      |L1.4902|
0012a6  f8d4a268          LDR      r10,[r4,#0x268]       ;301
0012aa  1c69              ADDS     r1,r5,#1              ;301
0012ac  eb0a1909          ADD      r9,r10,r9,LSL #4      ;301
0012b0  f8a91000          STRH     r1,[r9,#0]            ;301
0012b4  f8bd900c          LDRH     r9,[sp,#0xc]          ;302
0012b8  f8b4b26c          LDRH     r11,[r4,#0x26c]       ;302
0012bc  f8d4a268          LDR      r10,[r4,#0x268]       ;302
0012c0  f64f71ff          MOV      r1,#0xffff            ;302
0012c4  f04f0e02          MOV      lr,#2                 ;302
0012c8  ea010949          AND      r9,r1,r9,LSL #1       ;302
0012cc  eb0e1b0b          ADD      r11,lr,r11,LSL #4     ;302
0012d0  f82a900b          STRH     r9,[r10,r11]          ;302
0012d4  f8bd9004          LDRH     r9,[sp,#4]            ;303
0012d8  f8b4a26c          LDRH     r10,[r4,#0x26c]       ;303
0012dc  ea010149          AND      r1,r1,r9,LSL #1       ;303
0012e0  f8d49268          LDR      r9,[r4,#0x268]        ;303
0012e4  f04f0b04          MOV      r11,#4                ;303
0012e8  eb0b1a0a          ADD      r10,r11,r10,LSL #4    ;303
0012ec  f829100a          STRH     r1,[r9,r10]           ;303
0012f0  f8b4926c          LDRH     r9,[r4,#0x26c]        ;304
0012f4  f8d41268          LDR      r1,[r4,#0x268]        ;304
0012f8  f04f0a06          MOV      r10,#6                ;304
0012fc  eb0a1909          ADD      r9,r10,r9,LSL #4      ;304
001300  f821c009          STRH     r12,[r1,r9]           ;304
001304  f8b4926c          LDRH     r9,[r4,#0x26c]        ;305
001308  f8d4c268          LDR      r12,[r4,#0x268]       ;305
00130c  f04f0a08          MOV      r10,#8                ;305
001310  f8bd1000          LDRH     r1,[sp,#0]            ;305
001314  eb0a1909          ADD      r9,r10,r9,LSL #4      ;305
001318  f82c1009          STRH     r1,[r12,r9]           ;305
00131c  f8b4126c          LDRH     r1,[r4,#0x26c]        ;306
001320  1c49              ADDS     r1,r1,#1              ;306
001322  f8a4126c          STRH     r1,[r4,#0x26c]        ;306
                  |L1.4902|
001326  6800              LDR      r0,[r0,#0]            ;293
001328  1c52              ADDS     r2,r2,#1              ;293
                  |L1.4906|
00132a  b148              CBZ      r0,|L1.4928|
00132c  f8b4926c          LDRH     r9,[r4,#0x26c]        ;293
001330  f8b41278          LDRH     r1,[r4,#0x278]        ;293
001334  4589              CMP      r9,r1                 ;293
001336  d203              BCS      |L1.4928|
001338  f8b4127a          LDRH     r1,[r4,#0x27a]        ;293
00133c  4291              CMP      r1,r2                 ;293
00133e  d898              BHI      |L1.4722|
                  |L1.4928|
001340  b163              CBZ      r3,|L1.4956|
001342  e015              B        |L1.4976|
                  |L1.4932|
                          DCD      0x53514343
                  |L1.4936|
                          DCD      g_chirpUsb
                  |L1.4940|
                          DCD      0x46514343
                  |L1.4944|
                          DCD      0x000186a0
                  |L1.4948|
001354  746f0a00          DCB      "to\n",0
                  |L1.4952|
001358  4430              ADD      r0,r0,r6              ;316
00135a  b286              UXTH     r6,r0                 ;316
                  |L1.4956|
00135c  f8b4026c          LDRH     r0,[r4,#0x26c]        ;313
001360  4641              MOV      r1,r8                 ;313
001362  1bc0              SUBS     r0,r0,r7              ;313
001364  b282              UXTH     r2,r0                 ;313
001366  4620              MOV      r0,r4                 ;313
001368  f7fffffe          BL       _ZN5Blobs8combine2EP5BlobAt ; Blobs::combine2(BlobA*, unsigned short)
00136c  2800              CMP      r0,#0                 ;311
00136e  d1f3              BNE      |L1.4952|
                  |L1.4976|
001370  1c6d              ADDS     r5,r5,#1              ;288
                  |L1.4978|
001372  2d07              CMP      r5,#7                 ;288
001374  f4ffaf61          BCC      |L1.4666|
001378  f8b4226c          LDRH     r2,[r4,#0x26c]        ;322
00137c  4620              MOV      r0,r4                 ;322
00137e  f8d41268          LDR      r1,[r4,#0x268]        ;322
001382  f7fffffe          BL       _ZN5Blobs7combineEP5BlobAt ; Blobs::combine(BlobA*, unsigned short)
001386  4430              ADD      r0,r0,r6              ;322
001388  b285              UXTH     r5,r0                 ;322
00138a  f8940288          LDRB     r0,[r4,#0x288]        ;323
00138e  b150              CBZ      r0,|L1.5030|
001390  f8b4126c          LDRH     r1,[r4,#0x26c]        ;325
001394  f8d40268          LDR      r0,[r4,#0x268]        ;325
001398  eb001001          ADD      r0,r0,r1,LSL #4       ;325
00139c  f8c40270          STR      r0,[r4,#0x270]        ;325
0013a0  4620              MOV      r0,r4                 ;327
0013a2  f7fffffe          BL       _ZN5Blobs9processCCEv ; Blobs::processCC()
                  |L1.5030|
0013a6  b915              CBNZ     r5,|L1.5038|
0013a8  f8940288          LDRB     r0,[r4,#0x288]        ;330
0013ac  b170              CBZ      r0,|L1.5068|
                  |L1.5038|
0013ae  f8b4226c          LDRH     r2,[r4,#0x26c]        ;332
0013b2  4620              MOV      r0,r4                 ;332
0013b4  f8d41268          LDR      r1,[r4,#0x268]        ;332
0013b8  f7fffffe          BL       _ZN5Blobs8compressEP5BlobAt ; Blobs::compress(BlobA*, unsigned short)
0013bc  f8b4126c          LDRH     r1,[r4,#0x26c]        ;333
0013c0  1a08              SUBS     r0,r1,r0              ;333
0013c2  f8a4026c          STRH     r0,[r4,#0x26c]        ;333
0013c6  4620              MOV      r0,r4                 ;335
0013c8  f7fffffe          BL       _ZN5Blobs5shiftEv ; Blobs::shift()
                  |L1.5068|
0013cc  2500              MOVS     r5,#0                 ;341
0013ce  f8a4527c          STRH     r5,[r4,#0x27c]        ;341
0013d2  4620              MOV      r0,r4                 ;343
0013d4  f7fffffe          BL       _ZN5Blobs18handleBlobTrackingEv ; Blobs::handleBlobTracking()
0013d8  f8845276          STRB     r5,[r4,#0x276]        ;344
                  |L1.5084|
0013dc  ebc500c5          RSB      r0,r5,r5,LSL #3       ;348
0013e0  eb040080          ADD      r0,r4,r0,LSL #2       ;348
0013e4  f50070d2          ADD      r0,r0,#0x1a4          ;348
0013e8  f7fffffe          BL       _ZN14CBlobAssembler5ResetEv ; CBlobAssembler::Reset()
0013ec  1c6d              ADDS     r5,r5,#1              ;347
0013ee  2d07              CMP      r5,#7                 ;347
0013f0  d3f4              BCC      |L1.5084|
0013f2  2000              MOVS     r0,#0                 ;358
0013f4  e711              B        |L1.4634|
;;;360    
                          ENDP

                  _ZN5Blobs18sendDetectedPixelsEb PROC ; Blobs::sendDetectedPixels(bool)
;;;65     
;;;66     void Blobs::sendDetectedPixels(bool send)
0013f6  f8801298          STRB     r1,[r0,#0x298]
;;;67     {
;;;68     	m_sendDetectedPixels = send;
;;;69     }
0013fa  4770              BX       lr
;;;70     
                          ENDP

                  _ZN5Blobs11reloadBlobsEv PROC ; Blobs::reloadBlobs()
;;;1312   
;;;1313   void Blobs::reloadBlobs()
0013fc  e92d47f0          PUSH     {r4-r10,lr}
;;;1314   {
001400  4681              MOV      r9,r0
;;;1315   	BlobA *blob;
;;;1316   	uint8_t sig;
;;;1317   	uint16_t n; // number of *valid* blocks m_blobTrackersList
;;;1318   	uint16_t bi; // current index into m_blocks
;;;1319   	uint16_t si; // number of blocks for current signature
;;;1320   	SimpleListNode<Tracker<BlobA> > *i;
;;;1321   	
;;;1322   	for (sig=1, bi=0; sig<=CL_NUM_SIGNATURES+1 && bi<MAX_BLOBS; sig++)
001402  2501              MOVS     r5,#1
001404  2400              MOVS     r4,#0
001406  e034              B        |L1.5234|
                  |L1.5128|
;;;1323   	{
;;;1324   		// look through m_blobTrackersList for signature==sig, copy into m_blocks
;;;1325   		for (i=m_blobTrackersList.m_first, n=0, si=0; i!=NULL; i=i->m_next)
001408  f8d9729c          LDR      r7,[r9,#0x29c]
00140c  2600              MOVS     r6,#0
00140e  46b0              MOV      r8,r6
001410  e01e              B        |L1.5200|
                  |L1.5138|
;;;1326   		{
;;;1327   			blob = i->m_object.get();
001412  4638              MOV      r0,r7
001414  f7fffffe          BL       _ZN7TrackerI5BlobAE3getEv ; Tracker<BlobA>::get()
;;;1328   			if (blob)
001418  b1c8              CBZ      r0,|L1.5198|
;;;1329   			{
;;;1330   				n++;
00141a  1c76              ADDS     r6,r6,#1
00141c  b2b6              UXTH     r6,r6
;;;1331   				if (blob->m_model==sig || /*sig==8 is color code case */ (sig==CL_NUM_SIGNATURES+1 && blob->m_model>CL_NUM_SIGNATURES))
00141e  8801              LDRH     r1,[r0,#0]
001420  42a9              CMP      r1,r5
001422  d003              BEQ      |L1.5164|
001424  2d08              CMP      r5,#8
001426  d112              BNE      |L1.5198|
001428  2907              CMP      r1,#7
00142a  d910              BLS      |L1.5198|
                  |L1.5164|
;;;1332   				{
;;;1333   					m_blobs[bi++] = *blob;
00142c  4621              MOV      r1,r4
00142e  f8d92268          LDR      r2,[r9,#0x268]
001432  1c64              ADDS     r4,r4,#1
001434  eb021201          ADD      r2,r2,r1,LSL #4
001438  e890100a          LDM      r0,{r1,r3,r12}
00143c  68c0              LDR      r0,[r0,#0xc]
00143e  e882100a          STM      r2,{r1,r3,r12}
001442  b2a4              UXTH     r4,r4
001444  60d0              STR      r0,[r2,#0xc]
;;;1334   					si++;
001446  f1080801          ADD      r8,r8,#1
00144a  fa1ff888          UXTH     r8,r8
                  |L1.5198|
00144e  6a7f              LDR      r7,[r7,#0x24]         ;1325
                  |L1.5200|
001450  2f00              CMP      r7,#0                 ;1325
001452  d1de              BNE      |L1.5138|
;;;1335   				}
;;;1336   			}
;;;1337   		}
;;;1338   		// sort blocks for that signature, or CC
;;;1339   		qsort(&m_blobs[bi-si], si, sizeof(BlobA), compAreaBlobA);
001454  f8d90268          LDR      r0,[r9,#0x268]
001458  eba40108          SUB      r1,r4,r8
00145c  eb001001          ADD      r0,r0,r1,LSL #4
001460  4bd8              LDR      r3,|L1.6084|
001462  2210              MOVS     r2,#0x10
001464  4641              MOV      r1,r8
001466  f7fffffe          BL       _ZSt5qsortPvjjPFiPKvS1_E ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
;;;1340   
;;;1341   		// exit early?
;;;1342   		if (bi>=n)
00146a  42b4              CMP      r4,r6
00146c  d205              BCS      |L1.5242|
00146e  1c6d              ADDS     r5,r5,#1              ;1322
001470  b2ed              UXTB     r5,r5                 ;1322
                  |L1.5234|
001472  2d08              CMP      r5,#8                 ;1322
001474  d801              BHI      |L1.5242|
001476  2c64              CMP      r4,#0x64              ;1322
001478  d3c6              BCC      |L1.5128|
                  |L1.5242|
;;;1343   			break;  // we're done
;;;1344   	}
;;;1345   	m_numBlobs = n;
00147a  f8a9626c          STRH     r6,[r9,#0x26c]
                  |L1.5246|
;;;1346   }
00147e  e8bd87f0          POP      {r4-r10,pc}
;;;1347   
                          ENDP

                  _ZN5Blobs8getBlockEPhj PROC ; Blobs::getBlock(unsigned char*, unsigned)
;;;361    
;;;362    uint16_t Blobs::getBlock(uint8_t *buf, uint32_t buflen)
001482  e92d41f0          PUSH     {r4-r8,lr}
;;;363    {
001486  4604              MOV      r4,r0
001488  460d              MOV      r5,r1
;;;364        uint16_t *buf16 = (uint16_t *)buf;
;;;365        uint16_t temp, width, height;
;;;366        uint16_t checksum;
;;;367        uint16_t len = 7;  // default
00148a  2007              MOVS     r0,#7
;;;368    	
;;;369        if (buflen<9*sizeof(uint16_t))
00148c  2a12              CMP      r2,#0x12
00148e  d202              BCS      |L1.5270|
;;;370            return 0;
001490  2000              MOVS     r0,#0
                  |L1.5266|
;;;371    
;;;372        if (m_mutex) // we're copying, so no blocks for now....
;;;373    		return 0;
;;;374    
;;;375        if (m_blobReadIndex==0)	// beginning of frame, mark it with empty block
;;;376        {
;;;377    		reloadBlobs();
;;;378            buf16[0] = BL_BEGIN_MARKER;
;;;379            len++;
;;;380            buf16++;
;;;381        }
;;;382    
;;;383    	if (m_blobReadIndex>=m_numBlobs)
;;;384    		return 0;
;;;385    	
;;;386    	buf16[0] = BL_BEGIN_MARKER;
;;;387    		
;;;388        // model
;;;389        temp = m_blobs[m_blobReadIndex].m_model;
;;;390        checksum = temp;
;;;391        buf16[2] = temp;
;;;392    
;;;393        // width
;;;394        width = m_blobs[m_blobReadIndex].m_right - m_blobs[m_blobReadIndex].m_left;
;;;395        checksum += width;
;;;396        buf16[5] = width;
;;;397    
;;;398        // height
;;;399        height = m_blobs[m_blobReadIndex].m_bottom - m_blobs[m_blobReadIndex].m_top;
;;;400        checksum += height;
;;;401        buf16[6] = height;
;;;402    
;;;403        // x center
;;;404        temp = m_blobs[m_blobReadIndex].m_left + width/2;
;;;405        checksum += temp;
;;;406        buf16[3] = temp;
;;;407    
;;;408        // y center
;;;409        temp = m_blobs[m_blobReadIndex].m_top + height/2;
;;;410        checksum += temp;
;;;411        buf16[4] = temp;
;;;412    
;;;413    	// deal with color code
;;;414    	if (m_blobs[m_blobReadIndex].m_model>CL_NUM_SIGNATURES)
;;;415    	{
;;;416    		buf16[0] = BL_BEGIN_MARKER_CC; // use color code start code instead
;;;417    		temp = m_ccBlobs[m_blobReadIndex].m_angle;
;;;418    		checksum += temp;
;;;419    		buf16[7] = temp;
;;;420    		len++; // extend length to include angle
;;;421    	}
;;;422    	
;;;423        buf16[1] = checksum;
;;;424    
;;;425        // next blob
;;;426        m_blobReadIndex++;
;;;427    
;;;428        return len*sizeof(uint16_t);
;;;429    }
001492  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5270|
001496  f8941276          LDRB     r1,[r4,#0x276]        ;372
00149a  b109              CBZ      r1,|L1.5280|
00149c  2000              MOVS     r0,#0                 ;373
00149e  e7f8              B        |L1.5266|
                  |L1.5280|
0014a0  f8b4127c          LDRH     r1,[r4,#0x27c]        ;375
0014a4  f64a2755          MOV      r7,#0xaa55            ;378
0014a8  2608              MOVS     r6,#8                 ;379
0014aa  b929              CBNZ     r1,|L1.5304|
0014ac  4620              MOV      r0,r4                 ;377
0014ae  f7fffffe          BL       _ZN5Blobs11reloadBlobsEv ; Blobs::reloadBlobs()
0014b2  f8257b02          STRH     r7,[r5],#2            ;378
0014b6  2008              MOVS     r0,#8                 ;379
                  |L1.5304|
0014b8  f8b4127c          LDRH     r1,[r4,#0x27c]        ;383
0014bc  f8b4226c          LDRH     r2,[r4,#0x26c]        ;383
0014c0  4291              CMP      r1,r2                 ;383
0014c2  d301              BCC      |L1.5320|
0014c4  2000              MOVS     r0,#0                 ;384
0014c6  e7e4              B        |L1.5266|
                  |L1.5320|
0014c8  802f              STRH     r7,[r5,#0]            ;386
0014ca  f504741a          ADD      r4,r4,#0x268          ;389
0014ce  8aa2              LDRH     r2,[r4,#0x14]         ;389
0014d0  6821              LDR      r1,[r4,#0]            ;389
0014d2  eb011102          ADD      r1,r1,r2,LSL #4       ;389
0014d6  880a              LDRH     r2,[r1,#0]            ;389
0014d8  80aa              STRH     r2,[r5,#4]            ;391
0014da  8aa3              LDRH     r3,[r4,#0x14]         ;394
0014dc  2704              MOVS     r7,#4                 ;394
0014de  6821              LDR      r1,[r4,#0]            ;394
0014e0  eb071703          ADD      r7,r7,r3,LSL #4       ;394
0014e4  f04f0c02          MOV      r12,#2                ;394
0014e8  5bcf              LDRH     r7,[r1,r7]            ;394
0014ea  eb0c1303          ADD      r3,r12,r3,LSL #4      ;394
0014ee  5ac9              LDRH     r1,[r1,r3]            ;394
0014f0  1a79              SUBS     r1,r7,r1              ;394
0014f2  b289              UXTH     r1,r1                 ;394
0014f4  1857              ADDS     r7,r2,r1              ;395
0014f6  8169              STRH     r1,[r5,#0xa]          ;396
0014f8  8aa3              LDRH     r3,[r4,#0x14]         ;399
0014fa  6822              LDR      r2,[r4,#0]            ;399
0014fc  eb061603          ADD      r6,r6,r3,LSL #4       ;399
001500  f8328006          LDRH     r8,[r2,r6]            ;399
001504  2606              MOVS     r6,#6                 ;399
001506  eb061303          ADD      r3,r6,r3,LSL #4       ;399
00150a  5ad2              LDRH     r2,[r2,r3]            ;399
00150c  eba80202          SUB      r2,r8,r2              ;399
001510  b292              UXTH     r2,r2                 ;399
001512  18bb              ADDS     r3,r7,r2              ;400
001514  81aa              STRH     r2,[r5,#0xc]          ;401
001516  f8b48014          LDRH     r8,[r4,#0x14]         ;404
00151a  6827              LDR      r7,[r4,#0]            ;404
00151c  eb0c1c08          ADD      r12,r12,r8,LSL #4     ;404
001520  f837700c          LDRH     r7,[r7,r12]           ;404
001524  eb070151          ADD      r1,r7,r1,LSR #1       ;404
001528  440b              ADD      r3,r3,r1              ;405
00152a  80e9              STRH     r1,[r5,#6]            ;406
00152c  8aa7              LDRH     r7,[r4,#0x14]         ;409
00152e  6821              LDR      r1,[r4,#0]            ;409
001530  eb061607          ADD      r6,r6,r7,LSL #4       ;409
001534  5b89              LDRH     r1,[r1,r6]            ;409
001536  eb010252          ADD      r2,r1,r2,LSR #1       ;409
00153a  1899              ADDS     r1,r3,r2              ;410
00153c  b289              UXTH     r1,r1                 ;410
00153e  812a              STRH     r2,[r5,#8]            ;411
001540  8aa3              LDRH     r3,[r4,#0x14]         ;414
001542  6822              LDR      r2,[r4,#0]            ;414
001544  f5a4741a          SUB      r4,r4,#0x268          ;414
001548  eb021203          ADD      r2,r2,r3,LSL #4       ;414
00154c  8812              LDRH     r2,[r2,#0]            ;414
00154e  2a07              CMP      r2,#7                 ;414
001550  d90f              BLS      |L1.5490|
001552  f64a2256          MOV      r2,#0xaa56            ;416
001556  802a              STRH     r2,[r5,#0]            ;416
001558  f8b4327c          LDRH     r3,[r4,#0x27c]        ;417
00155c  f8d42270          LDR      r2,[r4,#0x270]        ;417
001560  260a              MOVS     r6,#0xa               ;417
001562  eb061303          ADD      r3,r6,r3,LSL #4       ;417
001566  5ad2              LDRH     r2,[r2,r3]            ;417
001568  4411              ADD      r1,r1,r2              ;418
00156a  b289              UXTH     r1,r1                 ;418
00156c  81ea              STRH     r2,[r5,#0xe]          ;419
00156e  1c40              ADDS     r0,r0,#1              ;420
001570  b280              UXTH     r0,r0                 ;420
                  |L1.5490|
001572  8069              STRH     r1,[r5,#2]            ;423
001574  f8b4127c          LDRH     r1,[r4,#0x27c]        ;426
001578  1c49              ADDS     r1,r1,#1              ;426
00157a  f8a4127c          STRH     r1,[r4,#0x27c]        ;426
00157e  f64f71ff          MOV      r1,#0xffff            ;428
001582  ea010040          AND      r0,r1,r0,LSL #1       ;428
001586  e784              B        |L1.5266|
;;;430    
                          ENDP

                  _ZN5Blobs10getMaxBlobEtPt PROC ; Blobs::getMaxBlob(unsigned short, unsigned short*)
;;;431    
;;;432    BlobA *Blobs::getMaxBlob(uint16_t signature, uint16_t *numBlobs)
001588  e92d47f0          PUSH     {r4-r10,lr}
;;;433    {
00158c  4604              MOV      r4,r0
00158e  4689              MOV      r9,r1
001590  4690              MOV      r8,r2
;;;434    	SimpleListNode<Tracker<BlobA> > *i;
;;;435    	
;;;436    	uint16_t blobs;
;;;437        uint32_t area, maxArea;
;;;438        BlobA *blob, *maxBlob;
;;;439    
;;;440    	if (m_mutex)
001592  f8940276          LDRB     r0,[r4,#0x276]
001596  2800              CMP      r0,#0
001598  d002              BEQ      |L1.5536|
;;;441    		return (BlobA *)-1;	 // busy!
00159a  f04f30ff          MOV      r0,#0xffffffff
                  |L1.5534|
;;;442    
;;;443        if (signature==0) // 0 means return the biggest regardless of signature number
;;;444        {
;;;445    		if (numBlobs)
;;;446    			*numBlobs = 1; // not really used in this mode, so return 1
;;;447    
;;;448            // if we've already found it, return it
;;;449            if (m_maxBlob)
;;;450                return m_maxBlob;
;;;451    
;;;452            // look through all blobs looking for the blob with the biggest area
;;;453            for (i=m_blobTrackersList.m_first, maxArea=0; i!=NULL; i=i->m_next)
;;;454            {
;;;455    			blob = i->m_object.get();
;;;456    			if (blob)
;;;457    			{
;;;458    				area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
;;;459    				if (area>maxArea)
;;;460    				{
;;;461    					maxArea = area;
;;;462    					m_maxBlob = blob;
;;;463    				}
;;;464    			}
;;;465            }
;;;466    		return m_maxBlob;
;;;467        }
;;;468    	// look for a specific signature
;;;469        else
;;;470        {
;;;471    		for (i=m_blobTrackersList.m_first, blobs=0, maxArea=0, maxBlob=NULL; i!=NULL; i=i->m_next)
;;;472    		{
;;;473    			blob = i->m_object.get();
;;;474    			if (blob && blob->m_model==signature)
;;;475    			{
;;;476    				area = (blob->m_right - blob->m_left)*(blob->m_bottom - blob->m_top);
;;;477    				if (area>maxArea)
;;;478    				{
;;;479    					maxArea = area;
;;;480                    	maxBlob = blob;
;;;481    					blobs++;
;;;482    				}
;;;483    			}
;;;484    		}
;;;485    		// return number of counted blobs that match signature
;;;486    		if (numBlobs)
;;;487    			*numBlobs = blobs;
;;;488    		
;;;489    		return maxBlob;
;;;490        }
;;;491    }
00159e  e76e              B        |L1.5246|
                  |L1.5536|
0015a0  f1b90f00          CMP      r9,#0                 ;443
0015a4  d005              BEQ      |L1.5554|
0015a6  f8d4429c          LDR      r4,[r4,#0x29c]        ;471
0015aa  2500              MOVS     r5,#0                 ;471
0015ac  2700              MOVS     r7,#0                 ;471
0015ae  46aa              MOV      r10,r5                ;471
0015b0  e038              B        |L1.5668|
                  |L1.5554|
0015b2  f1b80f00          CMP      r8,#0                 ;445
0015b6  d002              BEQ      |L1.5566|
0015b8  2001              MOVS     r0,#1                 ;446
0015ba  f8a80000          STRH     r0,[r8,#0]            ;446
                  |L1.5566|
0015be  f8d4028c          LDR      r0,[r4,#0x28c]        ;449
0015c2  2800              CMP      r0,#0                 ;449
0015c4  d1eb              BNE      |L1.5534|
0015c6  f8d4529c          LDR      r5,[r4,#0x29c]        ;453
0015ca  2700              MOVS     r7,#0                 ;453
0015cc  e010              B        |L1.5616|
                  |L1.5582|
0015ce  4628              MOV      r0,r5                 ;455
0015d0  f7fffffe          BL       _ZN7TrackerI5BlobAE3getEv ; Tracker<BlobA>::get()
0015d4  b158              CBZ      r0,|L1.5614|
0015d6  8881              LDRH     r1,[r0,#4]            ;458
0015d8  8842              LDRH     r2,[r0,#2]            ;458
0015da  1a8e              SUBS     r6,r1,r2              ;458
0015dc  8901              LDRH     r1,[r0,#8]            ;458
0015de  88c2              LDRH     r2,[r0,#6]            ;458
0015e0  1a89              SUBS     r1,r1,r2              ;458
0015e2  434e              MULS     r6,r1,r6              ;458
0015e4  42be              CMP      r6,r7                 ;459
0015e6  d902              BLS      |L1.5614|
0015e8  4637              MOV      r7,r6                 ;461
0015ea  f8c4028c          STR      r0,[r4,#0x28c]        ;462
                  |L1.5614|
0015ee  6a6d              LDR      r5,[r5,#0x24]         ;453
                  |L1.5616|
0015f0  2d00              CMP      r5,#0                 ;453
0015f2  d1ec              BNE      |L1.5582|
0015f4  f8d4028c          LDR      r0,[r4,#0x28c]        ;466
0015f8  e741              B        |L1.5246|
                  |L1.5626|
0015fa  4620              MOV      r0,r4                 ;473
0015fc  f7fffffe          BL       _ZN7TrackerI5BlobAE3getEv ; Tracker<BlobA>::get()
001600  b178              CBZ      r0,|L1.5666|
001602  8801              LDRH     r1,[r0,#0]            ;474
001604  4549              CMP      r1,r9                 ;474
001606  d10c              BNE      |L1.5666|
001608  8881              LDRH     r1,[r0,#4]            ;476
00160a  8842              LDRH     r2,[r0,#2]            ;476
00160c  1a8e              SUBS     r6,r1,r2              ;476
00160e  8901              LDRH     r1,[r0,#8]            ;476
001610  88c2              LDRH     r2,[r0,#6]            ;476
001612  1a89              SUBS     r1,r1,r2              ;476
001614  434e              MULS     r6,r1,r6              ;476
001616  42be              CMP      r6,r7                 ;477
001618  d903              BLS      |L1.5666|
00161a  4637              MOV      r7,r6                 ;479
00161c  4682              MOV      r10,r0                ;480
00161e  1c6d              ADDS     r5,r5,#1              ;481
001620  b2ad              UXTH     r5,r5                 ;481
                  |L1.5666|
001622  6a64              LDR      r4,[r4,#0x24]         ;471
                  |L1.5668|
001624  2c00              CMP      r4,#0                 ;471
001626  d1e8              BNE      |L1.5626|
001628  f1b80f00          CMP      r8,#0                 ;486
00162c  d001              BEQ      |L1.5682|
00162e  f8a85000          STRH     r5,[r8,#0]            ;487
                  |L1.5682|
001632  4650              MOV      r0,r10                ;489
001634  e723              B        |L1.5246|
;;;492    
                          ENDP

                  _ZN5Blobs11convertBlobEP5BlobCRK5BlobA PROC ; Blobs::convertBlob(BlobC*, const BlobA&)
;;;1358   
;;;1359   void Blobs::convertBlob(BlobC *blobc, const BlobA &bloba)
001636  880a              LDRH     r2,[r1,#0]
;;;1360   {
;;;1361   	blobc->m_model = bloba.m_model;
001638  8002              STRH     r2,[r0,#0]
;;;1362   	blobc->m_x = (bloba.m_right + bloba.m_left)>>1;
00163a  888a              LDRH     r2,[r1,#4]
00163c  884b              LDRH     r3,[r1,#2]
00163e  441a              ADD      r2,r2,r3
001640  0852              LSRS     r2,r2,#1
001642  8042              STRH     r2,[r0,#2]
;;;1363   	blobc->m_y = (bloba.m_bottom + bloba.m_top)>>1;
001644  890a              LDRH     r2,[r1,#8]
001646  88cb              LDRH     r3,[r1,#6]
001648  441a              ADD      r2,r2,r3
00164a  0852              LSRS     r2,r2,#1
00164c  8082              STRH     r2,[r0,#4]
;;;1364   	blobc->m_width = bloba.m_right - bloba.m_left;
00164e  888a              LDRH     r2,[r1,#4]
001650  884b              LDRH     r3,[r1,#2]
001652  1ad2              SUBS     r2,r2,r3
001654  80c2              STRH     r2,[r0,#6]
;;;1365   	blobc->m_height = bloba.m_bottom - bloba.m_top;
001656  890a              LDRH     r2,[r1,#8]
001658  88cb              LDRH     r3,[r1,#6]
00165a  1ad2              SUBS     r2,r2,r3
00165c  8102              STRH     r2,[r0,#8]
;;;1366   	blobc->m_angle = bloba.m_angle;
00165e  8949              LDRH     r1,[r1,#0xa]
001660  8141              STRH     r1,[r0,#0xa]
;;;1367   }
001662  4770              BX       lr
;;;1368   
                          ENDP

                  _ZN5Blobs8getBlobsEhhPht PROC ; Blobs::getBlobs(unsigned char, unsigned char, unsigned char*, unsigned short)
;;;501    
;;;502    int Blobs::getBlobs(uint8_t sigmap, uint8_t n, uint8_t *buf, uint16_t len)
001664  e92d5fff          PUSH     {r0-r12,lr}
;;;503    {
001668  4607              MOV      r7,r0
00166a  980e              LDR      r0,[sp,#0x38]
00166c  4688              MOV      r8,r1
00166e  4699              MOV      r9,r3
;;;504    	BlobC *retBlobs;
;;;505    	BlobA *blob;
;;;506    	uint16_t bi;
;;;507    	uint8_t sigbit;
;;;508    	SimpleListNode<Tracker<BlobA> > *i;
;;;509    	
;;;510    	// if we're copying blobs over (m_mutex!=0), or if we've already "gotBlobs" (m_blobReadIndex!=0), return error
;;;511    	if (m_mutex || m_blobReadIndex)
001670  f8971276          LDRB     r1,[r7,#0x276]
001674  2900              CMP      r1,#0
001676  d102              BNE      |L1.5758|
001678  f8b7127c          LDRH     r1,[r7,#0x27c]
00167c  b111              CBZ      r1,|L1.5764|
                  |L1.5758|
;;;512    		return -1;
00167e  f04f30ff          MOV      r0,#0xffffffff
;;;513    	
;;;514    	retBlobs = (BlobC *)buf;
;;;515    	len /= sizeof(BlobC);
;;;516    	for (i=m_blobTrackersList.m_first, bi=0; i!=NULL && bi<len; i=i->m_next)
;;;517    	{
;;;518    		blob = i->m_object.get();
;;;519    		if (blob)
;;;520    		{
;;;521    			sigbit = (1<<(blob->m_model-1));
;;;522    			if ((blob->m_model>CL_NUM_SIGNATURES && sigmap&0x80) || sigbit&sigmap)
;;;523    			{
;;;524    				convertBlob(&retBlobs[bi], *blob);
;;;525    				retBlobs[bi].m_index = i->m_object.m_index;
;;;526    				retBlobs[bi].m_age = i->m_object.m_age;
;;;527    				bi++;
;;;528    			}
;;;529    		}
;;;530    	}
;;;531    
;;;532    	// sort blobs by area
;;;533    	qsort(retBlobs, bi, sizeof(BlobC), compAreaBlobC);
;;;534    	m_blobReadIndex = 1; // flag that we "gotBlobs"
;;;535    	
;;;536    	// note, we need to create a decently-long list so we can sort (above) and then return the n biggest
;;;537    	// entries which will be at the top of the list
;;;538    	if (n<bi)
;;;539    		return n*sizeof(BlobC);
;;;540    	else
;;;541    		return bi*sizeof(BlobC);		
;;;542    }
001682  e5ca              B        |L1.4634|
                  |L1.5764|
001684  210e              MOVS     r1,#0xe               ;515
001686  fbb0faf1          UDIV     r10,r0,r1             ;515
00168a  f8d7529c          LDR      r5,[r7,#0x29c]        ;516
00168e  2400              MOVS     r4,#0                 ;516
001690  f04f0b01          MOV      r11,#1                ;521
001694  e020              B        |L1.5848|
                  |L1.5782|
001696  4628              MOV      r0,r5                 ;518
001698  f7fffffe          BL       _ZN7TrackerI5BlobAE3getEv ; Tracker<BlobA>::get()
00169c  4601              MOV      r1,r0                 ;518
00169e  0008              MOVS     r0,r1                 ;519
0016a0  d019              BEQ      |L1.5846|
0016a2  8808              LDRH     r0,[r1,#0]            ;521
0016a4  1e42              SUBS     r2,r0,#1              ;521
0016a6  fa0bf202          LSL      r2,r11,r2             ;521
0016aa  b2d2              UXTB     r2,r2                 ;521
0016ac  2807              CMP      r0,#7                 ;522
0016ae  d902              BLS      |L1.5814|
0016b0  ea5f6008          LSLS     r0,r8,#24             ;522
0016b4  d402              BMI      |L1.5820|
                  |L1.5814|
0016b6  ea120f08          TST      r2,r8                 ;522
0016ba  d00c              BEQ      |L1.5846|
                  |L1.5820|
0016bc  ebc400c4          RSB      r0,r4,r4,LSL #3       ;524
0016c0  eb090640          ADD      r6,r9,r0,LSL #1       ;524
0016c4  4630              MOV      r0,r6                 ;524
0016c6  f7fffffe          BL       _ZN5Blobs11convertBlobEP5BlobCRK5BlobA ; Blobs::convertBlob(BlobC*, const BlobA&)
0016ca  7868              LDRB     r0,[r5,#1]            ;525
0016cc  7330              STRB     r0,[r6,#0xc]          ;525
0016ce  7aa8              LDRB     r0,[r5,#0xa]          ;526
0016d0  7370              STRB     r0,[r6,#0xd]          ;526
0016d2  1c64              ADDS     r4,r4,#1              ;527
0016d4  b2a4              UXTH     r4,r4                 ;527
                  |L1.5846|
0016d6  6a6d              LDR      r5,[r5,#0x24]         ;516
                  |L1.5848|
0016d8  b10d              CBZ      r5,|L1.5854|
0016da  4554              CMP      r4,r10                ;516
0016dc  d3db              BCC      |L1.5782|
                  |L1.5854|
0016de  4b3a              LDR      r3,|L1.6088|
0016e0  220e              MOVS     r2,#0xe               ;533
0016e2  4621              MOV      r1,r4                 ;533
0016e4  4648              MOV      r0,r9                 ;533
0016e6  f7fffffe          BL       _ZSt5qsortPvjjPFiPKvS1_E ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
0016ea  f8a7b27c          STRH     r11,[r7,#0x27c]       ;534
0016ee  9802              LDR      r0,[sp,#8]            ;538
0016f0  42a0              CMP      r0,r4                 ;538
0016f2  d204              BCS      |L1.5886|
0016f4  9802              LDR      r0,[sp,#8]            ;539
0016f6  ebc000c0          RSB      r0,r0,r0,LSL #3       ;539
0016fa  0040              LSLS     r0,r0,#1              ;539
0016fc  e58d              B        |L1.4634|
                  |L1.5886|
0016fe  ebc400c4          RSB      r0,r4,r4,LSL #3       ;541
001702  0040              LSLS     r0,r0,#1              ;541
001704  e589              B        |L1.4634|
;;;543    
                          ENDP

                  _ZN5Blobs8getBlobsEv PROC ; Blobs::getBlobs()
;;;544    SimpleList<Tracker<BlobA> > *Blobs::getBlobs()
001706  f5007027          ADD      r0,r0,#0x29c
;;;545    {
;;;546    	return &m_blobTrackersList;
;;;547    }
00170a  4770              BX       lr
;;;548    
                          ENDP

                  _ZN5Blobs11setMaxBlobsEt PROC ; Blobs::setMaxBlobs(unsigned short)
;;;70     
;;;71     void Blobs::setMaxBlobs(uint16_t maxBlobs)
00170c  2964              CMP      r1,#0x64
;;;72     {
00170e  d802              BHI      |L1.5910|
;;;73         if (maxBlobs<=MAX_BLOBS)
;;;74             m_maxBlobs = maxBlobs;
001710  f8a01278          STRH     r1,[r0,#0x278]
;;;75         else
;;;76             m_maxBlobs = MAX_BLOBS;
;;;77     }
001714  4770              BX       lr
                  |L1.5910|
001716  2164              MOVS     r1,#0x64              ;76
001718  f8a01278          STRH     r1,[r0,#0x278]        ;76
00171c  4770              BX       lr
;;;78     
                          ENDP

                  _ZN5Blobs19setMaxBlobsPerModelEt PROC ; Blobs::setMaxBlobsPerModel(unsigned short)
;;;79     void Blobs::setMaxBlobsPerModel(uint16_t maxBlobsPerModel)
00171e  f8a0127a          STRH     r1,[r0,#0x27a]
;;;80     {
;;;81         m_maxBlobsPerModel = maxBlobsPerModel;
;;;82     }
001722  4770              BX       lr
;;;83     
                          ENDP

                  _ZN5Blobs10setMinAreaEj PROC ; Blobs::setMinArea(unsigned)
;;;84     void Blobs::setMinArea(uint32_t minArea)
001724  f8c01280          STR      r1,[r0,#0x280]
;;;85     {
;;;86         m_minArea = minArea;
;;;87     }
001728  4770              BX       lr
;;;88     
                          ENDP

                  _ZN5Blobs16setColorCodeModeE13ColorCodeMode PROC ; Blobs::setColorCodeMode(ColorCodeMode)
;;;89     void Blobs::setColorCodeMode(ColorCodeMode ccMode)
00172a  f8801288          STRB     r1,[r0,#0x288]
;;;90     {
;;;91         m_ccMode = ccMode;
;;;92     }
00172e  4770              BX       lr
;;;93     
                          ENDP

                  _ZN5Blobs15setMaxMergeDistEt PROC ; Blobs::setMaxMergeDist(unsigned short)
;;;94     void Blobs::setMaxMergeDist(uint16_t maxMergeDist)
001730  f8a01284          STRH     r1,[r0,#0x284]
;;;95     {
;;;96     	m_mergeDist = maxMergeDist;
;;;97     }
001734  4770              BX       lr
;;;98     
                          ENDP

                  _ZN5Blobs16analyzeDistancesEPP5BlobAsS2_sS2_S2_ PROC ; Blobs::analyzeDistances(BlobA**, short, BlobA**, short, BlobA**, BlobA**)
;;;858    
;;;859    bool Blobs::analyzeDistances(BlobA *blobs0[], int16_t numBlobs0, BlobA *blobs[], int16_t numBlobs, BlobA **blobA, BlobA **blobB)
001736  e92d4fff          PUSH     {r0-r11,lr}
;;;860    {
00173a  460e              MOV      r6,r1
00173c  f8ddb034          LDR      r11,[sp,#0x34]
001740  4691              MOV      r9,r2
001742  461f              MOV      r7,r3
;;;861        bool skip;
;;;862        bool result = false;
001744  f04f0a00          MOV      r10,#0
;;;863        int16_t dist, minDist, i, j, k;
;;;864    
;;;865        for (i=0, minDist=0x7fff; i<numBlobs0; i++)
001748  2500              MOVS     r5,#0
00174a  f64778ff          MOV      r8,#0x7fff
00174e  e033              B        |L1.6072|
                  |L1.5968|
;;;866        {
;;;867            for (j=0; j<numBlobs; j++)
001750  2400              MOVS     r4,#0
001752  e02d              B        |L1.6064|
                  |L1.5972|
;;;868            {
;;;869                for (k=0, skip=false; k<numBlobs0; k++)
001754  2000              MOVS     r0,#0
001756  2300              MOVS     r3,#0
001758  e011              B        |L1.6014|
                  |L1.5978|
;;;870                {
;;;871                    if (blobs0[k]==blobs[j] || (blobs0[k]->m_model&0x07)==(blobs[j]->m_model&0x07))
00175a  f8561020          LDR      r1,[r6,r0,LSL #2]
00175e  f8572024          LDR      r2,[r7,r4,LSL #2]
001762  4291              CMP      r1,r2
001764  d007              BEQ      |L1.6006|
001766  7809              LDRB     r1,[r1,#0]
001768  7812              LDRB     r2,[r2,#0]
00176a  f0010107          AND      r1,r1,#7
00176e  f0020207          AND      r2,r2,#7
001772  4291              CMP      r1,r2
001774  d101              BNE      |L1.6010|
                  |L1.6006|
;;;872                    {
;;;873                        skip = true;
001776  2301              MOVS     r3,#1
;;;874                        break;
001778  e003              B        |L1.6018|
                  |L1.6010|
00177a  1c40              ADDS     r0,r0,#1              ;869
00177c  b200              SXTH     r0,r0                 ;869
                  |L1.6014|
00177e  4548              CMP      r0,r9                 ;869
001780  dbeb              BLT      |L1.5978|
                  |L1.6018|
;;;875                    }
;;;876                }
;;;877                if (skip)
001782  b99b              CBNZ     r3,|L1.6060|
;;;878                    continue;
;;;879                dist = distance(blobs0[i], blobs[j]);
001784  f8572024          LDR      r2,[r7,r4,LSL #2]
001788  f8561025          LDR      r1,[r6,r5,LSL #2]
00178c  9800              LDR      r0,[sp,#0]
00178e  f7fffffe          BL       _ZN5Blobs8distanceEP5BlobAS1_ ; Blobs::distance(BlobA*, BlobA*)
;;;880                if (dist<minDist)
001792  4540              CMP      r0,r8
001794  da0a              BGE      |L1.6060|
;;;881                {
;;;882                    minDist = dist;
001796  4680              MOV      r8,r0
;;;883                    *blobA = blobs0[i];
001798  980e              LDR      r0,[sp,#0x38]
00179a  f8561025          LDR      r1,[r6,r5,LSL #2]
00179e  6001              STR      r1,[r0,#0]
;;;884                    *blobB = blobs[j];
0017a0  980f              LDR      r0,[sp,#0x3c]
0017a2  f8571024          LDR      r1,[r7,r4,LSL #2]
0017a6  6001              STR      r1,[r0,#0]
;;;885                    result = true;
0017a8  f04f0a01          MOV      r10,#1
                  |L1.6060|
0017ac  1c64              ADDS     r4,r4,#1              ;867
0017ae  b224              SXTH     r4,r4                 ;867
                  |L1.6064|
0017b0  455c              CMP      r4,r11                ;867
0017b2  dbcf              BLT      |L1.5972|
0017b4  1c6d              ADDS     r5,r5,#1              ;865
0017b6  b22d              SXTH     r5,r5                 ;865
                  |L1.6072|
0017b8  454d              CMP      r5,r9                 ;865
0017ba  dbc9              BLT      |L1.5968|
;;;886                }
;;;887            }
;;;888        }
;;;889        return result;
;;;890    }
0017bc  b004              ADD      sp,sp,#0x10
0017be  4650              MOV      r0,r10                ;889
0017c0  e8bd8ff0          POP      {r4-r11,pc}
;;;891    
                          ENDP

                  |L1.6084|
                          DCD      _Z13compAreaBlobAPKvS0_ ; compAreaBlobA(const void*, const void*)
                  |L1.6088|
                          DCD      _Z13compAreaBlobCPKvS0_ ; compAreaBlobC(const void*, const void*)

                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5BlobAE6updateEv||, COMGROUP=_ZN7TrackerI5BlobAE6updateEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5BlobAE6updateEv PROC ; Tracker<BlobA>::update()
;;;94     	
;;;95     	uint8_t update()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96     	{	
000004  4604              MOV      r4,r0
;;;97     		uint8_t events = 0;
000006  2500              MOVS     r5,#0
;;;98     		bool success = m_minVal!=TR_MAXVAL;
000008  68e0              LDR      r0,[r4,#0xc]
00000a  1c40              ADDS     r0,r0,#1
00000c  d001              BEQ      |L14.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L14.20|
                  |L14.18|
000012  2000              MOVS     r0,#0
                  |L14.20|
;;;99     
;;;100    		if (success)
000014  b138              CBZ      r0,|L14.38|
;;;101    			m_object = *m_minObject;
000016  6921              LDR      r1,[r4,#0x10]
000018  e891004c          LDM      r1,{r2,r3,r6}
00001c  68c9              LDR      r1,[r1,#0xc]
00001e  e9c43606          STRD     r3,r6,[r4,#0x18]
000022  6162              STR      r2,[r4,#0x14]
000024  6221              STR      r1,[r4,#0x20]
                  |L14.38|
;;;102    		switch(m_state)
000026  7821              LDRB     r1,[r4,#0]
000028  2603              MOVS     r6,#3
00002a  b371              CBZ      r1,|L14.138|
00002c  2700              MOVS     r7,#0
00002e  2901              CMP      r1,#1
000030  d048              BEQ      |L14.196|
000032  2902              CMP      r1,#2
000034  d01b              BEQ      |L14.110|
000036  2903              CMP      r1,#3
000038  d008              BEQ      |L14.76|
;;;103    		{
;;;104    			case TR_INVALID:
;;;105    				if (success)
;;;106    				{
;;;107    					if (m_leadingThresh==0)
;;;108    					{
;;;109    						m_state = TR_VALID;
;;;110    						events |= TR_EVENT_VALIDATED;
;;;111    						m_events |= TR_EVENT_VALIDATED;
;;;112    					}
;;;113    					else
;;;114    					{
;;;115    						setTimerMs(&m_timer);
;;;116    						m_state = TR_LEADING;
;;;117    					}
;;;118    				}
;;;119    				break;
;;;120    			
;;;121    			case TR_LEADING:
;;;122    				if (success)
;;;123    				{
;;;124    					if (getTimerMs(m_timer)>=m_leadingThresh)
;;;125    					{
;;;126    						m_state = TR_VALID;
;;;127    						events |= TR_EVENT_VALIDATED;
;;;128    						m_events |= TR_EVENT_VALIDATED;
;;;129    					}
;;;130    				}
;;;131    				else
;;;132    				{
;;;133    					m_state = TR_INVALID;
;;;134    					events |= TR_EVENT_INVALIDATED;
;;;135    					m_events |= TR_EVENT_INVALIDATED;
;;;136    				}
;;;137    				break;
;;;138    			
;;;139    			case TR_VALID:
;;;140    				if (!success)
;;;141    				{
;;;142    					if (m_trailingThresh==0)
;;;143    					{
;;;144    						m_state = TR_INVALID;
;;;145    						events |= TR_EVENT_INVALIDATED;
;;;146    						m_events |= TR_EVENT_INVALIDATED;
;;;147    					}
;;;148    					else
;;;149    					{
;;;150    						setTimerMs(&m_timer);
;;;151    						m_state = TR_TRAILING;
;;;152    					}
;;;153    				}
;;;154    				if (m_age<TR_MAXAGE)
;;;155    					m_age++;				
;;;156    				break;
;;;157    			
;;;158    			case TR_TRAILING:
;;;159    				if (success)
;;;160    				{
;;;161    					m_state = TR_VALID;
;;;162    					events |= TR_EVENT_VALIDATED;
;;;163    					m_events |= TR_EVENT_VALIDATED;
;;;164    				}
;;;165    				else
;;;166    				{
;;;167    					if (getTimerMs(m_timer)>=m_trailingThresh)
;;;168    					{
;;;169    						m_state = TR_INVALID;
;;;170    						events |= TR_EVENT_INVALIDATED;
;;;171    						m_events |= TR_EVENT_INVALIDATED;
;;;172    					}
;;;173    				}
;;;174    				if (m_age<TR_MAXAGE)
;;;175    					m_age++;
;;;176    				break;
;;;177    			
;;;178    			default:
;;;179    				m_state = TR_INVALID;
00003a  7026              STRB     r6,[r4,#0]
;;;180    				events |= TR_EVENT_INVALIDATED;
00003c  2501              MOVS     r5,#1
;;;181    				m_events |= TR_EVENT_INVALIDATED;
00003e  78a0              LDRB     r0,[r4,#2]
000040  f0400001          ORR      r0,r0,#1
000044  70a0              STRB     r0,[r4,#2]
                  |L14.70|
;;;182    		}
;;;183    		return events;
000046  4628              MOV      r0,r5
;;;184    	}
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L14.76|
00004c  2800              CMP      r0,#0                 ;105
00004e  d0fa              BEQ      |L14.70|
000050  88e0              LDRH     r0,[r4,#6]            ;107
000052  b128              CBZ      r0,|L14.96|
000054  1d20              ADDS     r0,r4,#4              ;115
000056  f7fffffe          BL       setTimerMs
00005a  2002              MOVS     r0,#2                 ;116
00005c  7020              STRB     r0,[r4,#0]            ;116
00005e  e7f2              B        |L14.70|
                  |L14.96|
000060  7027              STRB     r7,[r4,#0]            ;109
000062  2502              MOVS     r5,#2                 ;110
000064  78a0              LDRB     r0,[r4,#2]            ;111
000066  f0400002          ORR      r0,r0,#2              ;111
00006a  70a0              STRB     r0,[r4,#2]            ;111
00006c  e7eb              B        |L14.70|
                  |L14.110|
00006e  b168              CBZ      r0,|L14.140|
000070  88a0              LDRH     r0,[r4,#4]            ;124
000072  f7fffffe          BL       getTimerMs
000076  88e1              LDRH     r1,[r4,#6]            ;124
000078  4288              CMP      r0,r1                 ;124
00007a  d3e4              BCC      |L14.70|
00007c  7027              STRB     r7,[r4,#0]            ;126
00007e  2502              MOVS     r5,#2                 ;127
000080  78a0              LDRB     r0,[r4,#2]            ;128
000082  f0400002          ORR      r0,r0,#2              ;128
000086  70a0              STRB     r0,[r4,#2]            ;128
000088  e7dd              B        |L14.70|
                  |L14.138|
00008a  e006              B        |L14.154|
                  |L14.140|
00008c  7026              STRB     r6,[r4,#0]            ;133
00008e  2501              MOVS     r5,#1                 ;134
000090  78a0              LDRB     r0,[r4,#2]            ;135
000092  f0400001          ORR      r0,r0,#1              ;135
000096  70a0              STRB     r0,[r4,#2]            ;135
000098  e7d5              B        |L14.70|
                  |L14.154|
00009a  b930              CBNZ     r0,|L14.170|
00009c  8920              LDRH     r0,[r4,#8]            ;142
00009e  b150              CBZ      r0,|L14.182|
0000a0  1d20              ADDS     r0,r4,#4              ;150
0000a2  f7fffffe          BL       setTimerMs
0000a6  2001              MOVS     r0,#1                 ;151
0000a8  7020              STRB     r0,[r4,#0]            ;151
                  |L14.170|
0000aa  7aa0              LDRB     r0,[r4,#0xa]          ;154
0000ac  28ff              CMP      r0,#0xff              ;154
0000ae  d2ca              BCS      |L14.70|
0000b0  1c40              ADDS     r0,r0,#1              ;155
0000b2  72a0              STRB     r0,[r4,#0xa]          ;155
0000b4  e7c7              B        |L14.70|
                  |L14.182|
0000b6  7026              STRB     r6,[r4,#0]            ;144
0000b8  2501              MOVS     r5,#1                 ;145
0000ba  78a0              LDRB     r0,[r4,#2]            ;146
0000bc  f0400001          ORR      r0,r0,#1              ;146
0000c0  70a0              STRB     r0,[r4,#2]            ;146
0000c2  e7f2              B        |L14.170|
                  |L14.196|
0000c4  b130              CBZ      r0,|L14.212|
0000c6  7027              STRB     r7,[r4,#0]            ;161
0000c8  2502              MOVS     r5,#2                 ;162
0000ca  78a0              LDRB     r0,[r4,#2]            ;163
0000cc  f0400002          ORR      r0,r0,#2              ;163
0000d0  70a0              STRB     r0,[r4,#2]            ;163
0000d2  e00b              B        |L14.236|
                  |L14.212|
0000d4  88a0              LDRH     r0,[r4,#4]            ;167
0000d6  f7fffffe          BL       getTimerMs
0000da  8921              LDRH     r1,[r4,#8]            ;167
0000dc  4288              CMP      r0,r1                 ;167
0000de  d305              BCC      |L14.236|
0000e0  7026              STRB     r6,[r4,#0]            ;169
0000e2  2501              MOVS     r5,#1                 ;170
0000e4  78a0              LDRB     r0,[r4,#2]            ;171
0000e6  f0400001          ORR      r0,r0,#1              ;171
0000ea  70a0              STRB     r0,[r4,#2]            ;171
                  |L14.236|
0000ec  7aa0              LDRB     r0,[r4,#0xa]          ;174
0000ee  28ff              CMP      r0,#0xff              ;174
0000f0  d2a9              BCS      |L14.70|
0000f2  1c40              ADDS     r0,r0,#1              ;175
0000f4  72a0              STRB     r0,[r4,#0xa]          ;175
0000f6  e7a6              B        |L14.70|
;;;185    	
                          ENDP


                          AREA ||area_number.15||, COMGROUP=_ZN7TrackerI5BlobAE6updateEv, LINKORDER=||t._ZN7TrackerI5BlobAE6updateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5BlobAE6updateEv||
                          DCD      0x00000001

                          AREA ||i._ZN5BlobAC1Ev||, COMGROUP=_ZN5BlobAC1Ev, CODE, READONLY, ALIGN=1

                  _ZN5BlobAC2Ev                  ; Alternate entry point ; BlobA::BlobA__sub_object()
                  _ZN5BlobAC1Ev PROC ; BlobA::BlobA()
;;;45     {
;;;46         BlobA()
;;;47         {
;;;48             m_model = m_left = m_right = m_top = m_bottom = 0;
;;;49     		m_tracker = NULL;
;;;50         }
;;;51     
000000  2100              MOVS     r1,#0
000002  8101              STRH     r1,[r0,#8]
000004  80c1              STRH     r1,[r0,#6]
000006  8081              STRH     r1,[r0,#4]
000008  8041              STRH     r1,[r0,#2]
00000a  8001              STRH     r1,[r0,#0]
00000c  60c1              STR      r1,[r0,#0xc]
00000e  4770              BX       lr
                          ENDP


                          AREA ||area_number.22||, COMGROUP=_ZN5BlobAC1Ev, LINKORDER=||i._ZN5BlobAC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5BlobAC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZN10SimpleListI7TrackerI5BlobAEE5clearEv||, COMGROUP=_ZN10SimpleListI7TrackerI5BlobAEE5clearEv, CODE, READONLY, ALIGN=1

                  _ZN10SimpleListI7TrackerI5BlobAEE5clearEv PROC ; SimpleList<Tracker<BlobA>>::clear()
;;;35     	
;;;36     	void clear()
000000  b570              PUSH     {r4-r6,lr}
;;;37     	{
000002  4604              MOV      r4,r0
;;;38     		SimpleListNode<Object> *n, *temp;
;;;39     
;;;40     		n = m_first;
000004  6820              LDR      r0,[r4,#0]
000006  e003              B        |L28.16|
                  |L28.8|
;;;41     		while(n)
;;;42     		{
;;;43     			temp = n->m_next;
000008  6a45              LDR      r5,[r0,#0x24]
;;;44     			delete n;
00000a  f7fffffe          BL       _ZdlPv ; operator delete (void*)
;;;45     			n = temp;
00000e  4628              MOV      r0,r5
                  |L28.16|
000010  2800              CMP      r0,#0                 ;41
000012  d1f9              BNE      |L28.8|
;;;46     		}
;;;47     		m_first = m_last = NULL;
000014  6060              STR      r0,[r4,#4]
000016  6020              STR      r0,[r4,#0]
;;;48     		m_size = 0;
000018  8120              STRH     r0,[r4,#8]
;;;49     	}
00001a  bd70              POP      {r4-r6,pc}
;;;50     	
                          ENDP


                          AREA ||area_number.29||, COMGROUP=_ZN10SimpleListI7TrackerI5BlobAEE5clearEv, LINKORDER=||t._ZN10SimpleListI7TrackerI5BlobAEE5clearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN10SimpleListI7TrackerI5BlobAEE5clearEv||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5BlobAE5resetEv||, COMGROUP=_ZN7TrackerI5BlobAE5resetEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5BlobAE5resetEv PROC ; Tracker<BlobA>::reset()
;;;54     	
;;;55     	void reset()
000000  2102              MOVS     r1,#2
;;;56     	{
;;;57     		m_state = TR_LEADING; // start in leading state
000002  7001              STRB     r1,[r0,#0]
;;;58     		m_minVal = TR_MAXVAL;
000004  1ec9              SUBS     r1,r1,#3
000006  60c1              STR      r1,[r0,#0xc]
;;;59     		m_minObject = NULL;
000008  2100              MOVS     r1,#0
00000a  6101              STR      r1,[r0,#0x10]
;;;60     		m_events = 0;
00000c  7081              STRB     r1,[r0,#2]
;;;61     		m_eventsShadow = 0;
00000e  70c1              STRB     r1,[r0,#3]
;;;62     		m_age = 0;
000010  7281              STRB     r1,[r0,#0xa]
;;;63     		setTimerMs(&m_timer);
000012  1d00              ADDS     r0,r0,#4
000014  f7ffbffe          B.W      setTimerMs
;;;64     	}
;;;65     	
                          ENDP


                          AREA ||area_number.36||, COMGROUP=_ZN7TrackerI5BlobAE5resetEv, LINKORDER=||t._ZN7TrackerI5BlobAE5resetEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5BlobAE5resetEv||
                          DCD      0x00000001

                          AREA ||i._ZSt5qsortPvjjPFiPKvS1_E||, COMGROUP=_ZSt5qsortPvjjPFiPKvS1_E, CODE, READONLY, ALIGN=1

                  _ZSt5qsortPvjjPFiPKvS1_E PROC ; std::qsort(void*, unsigned, unsigned, int(*)(const void*, const void*))
;;;547        extern "C++"
;;;548        inline void qsort(void * __base, size_t __nmemb, size_t __size,
000000  f7ffbffe          B.W      qsort
;;;549                          int (* __compar)(const void *, const void *)) {
;;;550          qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
;;;551        }
;;;552    #endif
                          ENDP


                          AREA ||area_number.43||, COMGROUP=_ZSt5qsortPvjjPFiPKvS1_E, LINKORDER=||i._ZSt5qsortPvjjPFiPKvS1_E||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt5qsortPvjjPFiPKvS1_E||
                          DCD      0x00000001

                          AREA ||t._ZN7TrackerI5BlobAE3getEv||, COMGROUP=_ZN7TrackerI5BlobAE3getEv, CODE, READONLY, ALIGN=1

                  _ZN7TrackerI5BlobAE3getEv PROC ; Tracker<BlobA>::get()
;;;185    	
;;;186    	Object *get()
000000  7801              LDRB     r1,[r0,#0]
;;;187    	{
;;;188    		if (m_state==TR_INVALID || m_state==TR_LEADING)
000002  2903              CMP      r1,#3
000004  d003              BEQ      |L49.14|
000006  2902              CMP      r1,#2
000008  d001              BEQ      |L49.14|
;;;189    			return NULL;
;;;190    		else
;;;191    			return &m_object;
00000a  3014              ADDS     r0,r0,#0x14
;;;192    	}
00000c  4770              BX       lr
                  |L49.14|
00000e  2000              MOVS     r0,#0                 ;189
000010  4770              BX       lr
;;;193    	
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_ZN7TrackerI5BlobAE3getEv, LINKORDER=||t._ZN7TrackerI5BlobAE3getEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN7TrackerI5BlobAE3getEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\common\\src\\blobs.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_22a6bc68___Z7__REV16j|
#line 130 "..\\common\\inc\\core_cmInstr.h"
|__asm___9_blobs_cpp_22a6bc68___Z7__REV16j| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___9_blobs_cpp_22a6bc68___Z7__REVSHi|
#line 144
|__asm___9_blobs_cpp_22a6bc68___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
