; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --debug -c --asm --interleave -o.\spifi\colorlut.o --asm_dir=.\ --list_dir=.\ --depend=.\spifi\colorlut.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I. -Iinc -I..\libpixy_m4\inc -I..\..\common\inc -I..\common\inc -I.\RTE\_Flash -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Stijn\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\Device\ARM\ARMCM4\Include -D__UVISION_VERSION=534 -D_RTE_ -DARMCM4_FP -D_RTE_ -DCORE_M4 -DIPC_MASTER -DPIXY -DKEIL --omf_browse=.\spifi\colorlut.crf ..\..\common\src\colorlut.cpp]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  _ZN9IterPixel5resetEb PROC ; IterPixel::reset(bool)
;;;38     
;;;39     bool IterPixel::reset(bool cleari)
000000  b53e              PUSH     {r1-r5,lr}
;;;40     {
000002  4604              MOV      r4,r0
;;;41         if (cleari)
000004  2500              MOVS     r5,#0
000006  2900              CMP      r1,#0
000008  d000              BEQ      |L1.12|
;;;42             m_i = 0;
00000a  6225              STR      r5,[r4,#0x20]
                  |L1.12|
;;;43         if (m_points)
00000c  69e0              LDR      r0,[r4,#0x1c]
00000e  b1b8              CBZ      r0,|L1.64|
000010  6800              LDR      r0,[r0,#0]
;;;44         {
;;;45             if (m_points->size()>m_i)
000012  6a21              LDR      r1,[r4,#0x20]
000014  4288              CMP      r0,r1
000016  dd24              BLE      |L1.98|
;;;46             {
;;;47                 m_region = RectA((*m_points)[m_i].m_x, (*m_points)[m_i].m_y, CL_GROW_INC, CL_GROW_INC);
000018  e9d40107          LDRD     r0,r1,[r4,#0x1c]
00001c  6880              LDR      r0,[r0,#8]
00001e  eb000081          ADD      r0,r0,r1,LSL #2
000022  8842              LDRH     r2,[r0,#2]
000024  8801              LDRH     r1,[r0,#0]
000026  2004              MOVS     r0,#4
000028  4603              MOV      r3,r0
00002a  9000              STR      r0,[sp,#0]
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       _ZN5RectAC1Etttt ; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
000032  6801              LDR      r1,[r0,#0]
000034  60a1              STR      r1,[r4,#8]
000036  6840              LDR      r0,[r0,#4]
000038  60e0              STR      r0,[r4,#0xc]
;;;48                 m_i++;
00003a  6a20              LDR      r0,[r4,#0x20]
00003c  1c40              ADDS     r0,r0,#1
00003e  6220              STR      r0,[r4,#0x20]
                  |L1.64|
;;;49             }
;;;50             else
;;;51                 return false; // empty!
;;;52         }
;;;53         m_x = m_y = 0;
000040  6165              STR      r5,[r4,#0x14]
000042  6125              STR      r5,[r4,#0x10]
;;;54         m_pixels = m_frame.m_pixels + (m_region.m_yOffset | 1)*m_frame.m_width + (m_region.m_xOffset | 1);
000044  8961              LDRH     r1,[r4,#0xa]
000046  f9b42004          LDRSH    r2,[r4,#4]
00004a  6820              LDR      r0,[r4,#0]
00004c  f0410101          ORR      r1,r1,#1
000050  fb010002          MLA      r0,r1,r2,r0
000054  8921              LDRH     r1,[r4,#8]
000056  f0410101          ORR      r1,r1,#1
00005a  4408              ADD      r0,r0,r1
00005c  61a0              STR      r0,[r4,#0x18]
;;;55         return true;
00005e  2001              MOVS     r0,#1
;;;56     }
000060  bd3e              POP      {r1-r5,pc}
                  |L1.98|
000062  2000              MOVS     r0,#0                 ;51
000064  bd3e              POP      {r1-r5,pc}
;;;57     
                          ENDP

                  _ZN9IterPixelC2ERK6Frame8RK5RectA                  ; Alternate entry point ; IterPixel::IterPixel__sub_object(const Frame8&, const RectA&)
                  _ZN9IterPixelC1ERK6Frame8RK5RectA PROC ; IterPixel::IterPixel(const Frame8&, const RectA&)
;;;23     
;;;24     IterPixel::IterPixel(const Frame8 &frame, const RectA &region)
;;;25     {
;;;26         m_frame = frame;
;;;27         m_region = region;
;;;28         m_points = NULL;
;;;29         reset();
;;;30     }
;;;31     
000066  b570              PUSH     {r4-r6,lr}
000068  460e              MOV      r6,r1
00006a  4615              MOV      r5,r2
00006c  f7fffffe          BL       _ZN6Frame8C1Ev ; Frame8::Frame8()
000070  3008              ADDS     r0,r0,#8
000072  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000076  f1a00408          SUB      r4,r0,#8
00007a  ce03              LDM      r6!,{r0,r1}
00007c  e9c40100          STRD     r0,r1,[r4,#0]
000080  6828              LDR      r0,[r5,#0]
000082  60a0              STR      r0,[r4,#8]
000084  6868              LDR      r0,[r5,#4]
000086  60e0              STR      r0,[r4,#0xc]
000088  2000              MOVS     r0,#0
00008a  61e0              STR      r0,[r4,#0x1c]
00008c  2101              MOVS     r1,#1
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
000094  4620              MOV      r0,r4
000096  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN9IterPixelC2ERK6Frame8PK12SimpleVectorI7Point16E                  ; Alternate entry point ; IterPixel::IterPixel__sub_object(const Frame8&, const SimpleVector<Point16>*)
                  _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E PROC ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
;;;32     IterPixel::IterPixel(const Frame8 &frame, const Points *points)
;;;33     {
;;;34         m_frame = frame;
;;;35         m_points = points;
;;;36         reset();
;;;37     }
;;;38     
000098  b570              PUSH     {r4-r6,lr}
00009a  460d              MOV      r5,r1
00009c  4616              MOV      r6,r2
00009e  f7fffffe          BL       _ZN6Frame8C1Ev ; Frame8::Frame8()
0000a2  3008              ADDS     r0,r0,#8
0000a4  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
0000a8  f1a00408          SUB      r4,r0,#8
0000ac  cd03              LDM      r5!,{r0,r1}
0000ae  e9c40100          STRD     r0,r1,[r4,#0]
0000b2  61e6              STR      r6,[r4,#0x1c]
0000b4  2101              MOVS     r1,#1
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
0000bc  4620              MOV      r0,r4
0000be  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel PROC ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
;;;76     
;;;77     bool IterPixel::nextHelper(UVPixel *uv, RGBPixel *rgb)
0000c0  b5f0              PUSH     {r4-r7,lr}
;;;78     {
;;;79         int32_t r, g1, g2, b, u, v, c, miny=CL_MIN_Y;
0000c2  f04f0c26          MOV      r12,#0x26
                  |L1.198|
;;;80     
;;;81         while(1)
;;;82         {
;;;83             if (m_x>=m_region.m_width)
0000c6  8984              LDRH     r4,[r0,#0xc]
0000c8  6903              LDR      r3,[r0,#0x10]
0000ca  42a3              CMP      r3,r4
0000cc  d30a              BCC      |L1.228|
;;;84             {
;;;85                 m_x = 0;
0000ce  2300              MOVS     r3,#0
0000d0  6103              STR      r3,[r0,#0x10]
;;;86                 m_y += 2;
0000d2  6943              LDR      r3,[r0,#0x14]
0000d4  1c9b              ADDS     r3,r3,#2
0000d6  6143              STR      r3,[r0,#0x14]
;;;87                 m_pixels += m_frame.m_width*2;
0000d8  f9b04004          LDRSH    r4,[r0,#4]
0000dc  6983              LDR      r3,[r0,#0x18]
0000de  eb030344          ADD      r3,r3,r4,LSL #1
0000e2  6183              STR      r3,[r0,#0x18]
                  |L1.228|
;;;88             }
;;;89             if (m_y>=m_region.m_height)
0000e4  89c4              LDRH     r4,[r0,#0xe]
0000e6  6943              LDR      r3,[r0,#0x14]
0000e8  42a3              CMP      r3,r4
0000ea  d301              BCC      |L1.240|
;;;90                 return false;
0000ec  2000              MOVS     r0,#0
;;;91     
;;;92             r = m_pixels[m_x];
;;;93             g1 = m_pixels[m_x - 1];
;;;94             g2 = m_pixels[-m_frame.m_width + m_x];
;;;95             b = m_pixels[-m_frame.m_width + m_x - 1];
;;;96     		if (rgb)
;;;97     		{
;;;98     		  	rgb->m_r = r;
;;;99     			rgb->m_g = (g1+g2)/2;
;;;100    			rgb->m_b = b;
;;;101    		}
;;;102    		if (uv)
;;;103    		{
;;;104            	c = r+g1+b;
;;;105                if (c<miny)
;;;106    			{
;;;107    				m_x += 2;
;;;108                	continue;
;;;109    			}
;;;110            	u = ((r-g1)<<CL_LUT_ENTRY_SCALE)/c;
;;;111            	c = r+g2+b;
;;;112                if (c<miny)
;;;113    			{
;;;114    				m_x += 2;
;;;115                	continue;
;;;116    			}
;;;117            	v = ((b-g2)<<CL_LUT_ENTRY_SCALE)/c;
;;;118    
;;;119            	uv->m_u = u;
;;;120            	uv->m_v = v;
;;;121    		}
;;;122    
;;;123    		m_x += 2;
;;;124            return true;
;;;125        }
;;;126    }
0000ee  bdf0              POP      {r4-r7,pc}
                  |L1.240|
0000f0  6906              LDR      r6,[r0,#0x10]         ;92
0000f2  6984              LDR      r4,[r0,#0x18]         ;92
0000f4  5da3              LDRB     r3,[r4,r6]            ;92
0000f6  19a5              ADDS     r5,r4,r6              ;93
0000f8  f8155c01          LDRB     r5,[r5,#-1]           ;93
0000fc  f9b07004          LDRSH    r7,[r0,#4]            ;94
000100  1bf7              SUBS     r7,r6,r7              ;94
000102  5de6              LDRB     r6,[r4,r7]            ;94
000104  1e7f              SUBS     r7,r7,#1              ;95
000106  5de4              LDRB     r4,[r4,r7]            ;95
000108  b132              CBZ      r2,|L1.280|
00010a  7013              STRB     r3,[r2,#0]            ;98
00010c  19af              ADDS     r7,r5,r6              ;99
00010e  eb0777d7          ADD      r7,r7,r7,LSR #31      ;99
000112  087f              LSRS     r7,r7,#1              ;99
000114  7057              STRB     r7,[r2,#1]            ;99
000116  7094              STRB     r4,[r2,#2]            ;100
                  |L1.280|
000118  b1c9              CBZ      r1,|L1.334|
00011a  195f              ADDS     r7,r3,r5              ;104
00011c  4427              ADD      r7,r7,r4              ;104
00011e  4567              CMP      r7,r12                ;105
000120  da03              BGE      |L1.298|
000122  6903              LDR      r3,[r0,#0x10]         ;107
000124  1c9b              ADDS     r3,r3,#2              ;107
000126  6103              STR      r3,[r0,#0x10]         ;107
000128  e7cd              B        |L1.198|
                  |L1.298|
00012a  1b5d              SUBS     r5,r3,r5              ;110
00012c  03ed              LSLS     r5,r5,#15             ;110
00012e  fb95f5f7          SDIV     r5,r5,r7              ;110
000132  4433              ADD      r3,r3,r6              ;111
000134  4423              ADD      r3,r3,r4              ;111
000136  4563              CMP      r3,r12                ;112
000138  da03              BGE      |L1.322|
00013a  6903              LDR      r3,[r0,#0x10]         ;114
00013c  1c9b              ADDS     r3,r3,#2              ;114
00013e  6103              STR      r3,[r0,#0x10]         ;114
000140  e7c1              B        |L1.198|
                  |L1.322|
000142  1ba2              SUBS     r2,r4,r6              ;117
000144  03d2              LSLS     r2,r2,#15             ;117
000146  fb92f2f3          SDIV     r2,r2,r3              ;117
00014a  600d              STR      r5,[r1,#0]            ;119
00014c  604a              STR      r2,[r1,#4]            ;120
                  |L1.334|
00014e  6901              LDR      r1,[r0,#0x10]         ;123
000150  1c89              ADDS     r1,r1,#2              ;123
000152  6101              STR      r1,[r0,#0x10]         ;123
000154  2001              MOVS     r0,#1                 ;124
000156  bdf0              POP      {r4-r7,pc}
;;;127    
                          ENDP

                  _ZN9IterPixel4nextEP7UVPixelP8RGBPixel PROC ; IterPixel::next(UVPixel*, RGBPixel*)
;;;57     
;;;58     bool IterPixel::next(UVPixel *uv, RGBPixel *rgb)
000158  b570              PUSH     {r4-r6,lr}
;;;59     {
00015a  4604              MOV      r4,r0
00015c  460d              MOV      r5,r1
00015e  4616              MOV      r6,r2
;;;60         if (m_points)
000160  69e0              LDR      r0,[r4,#0x1c]
000162  2800              CMP      r0,#0
000164  d014              BEQ      |L1.400|
;;;61         {
;;;62             if (nextHelper(uv, rgb))
000166  4632              MOV      r2,r6
000168  4629              MOV      r1,r5
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
000170  b108              CBZ      r0,|L1.374|
;;;63                 return true; // working on the current block
000172  2001              MOVS     r0,#1
;;;64             else // get new block
;;;65             {
;;;66                 if (reset(false)) // reset indexes, increment m_i, get new block
;;;67                     return nextHelper(uv, rgb);  // we have another block!
;;;68                 else
;;;69                     return false; // blocks are empty
;;;70             }
;;;71         }
;;;72         else
;;;73             return nextHelper(uv, rgb);
;;;74     }
000174  bd70              POP      {r4-r6,pc}
                  |L1.374|
000176  2100              MOVS     r1,#0                 ;66
000178  4620              MOV      r0,r4                 ;66
00017a  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
00017e  b128              CBZ      r0,|L1.396|
000180  4632              MOV      r2,r6                 ;67
000182  4629              MOV      r1,r5                 ;67
000184  4620              MOV      r0,r4                 ;67
000186  e8bd4070          POP      {r4-r6,lr}            ;67
00018a  e7fe              B        _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
                  |L1.396|
00018c  2000              MOVS     r0,#0                 ;69
00018e  bd70              POP      {r4-r6,pc}
                  |L1.400|
000190  4632              MOV      r2,r6                 ;73
000192  4629              MOV      r1,r5                 ;73
000194  4620              MOV      r0,r4                 ;73
000196  e8bd4070          POP      {r4-r6,lr}            ;73
00019a  e7fe              B        _ZN9IterPixel10nextHelperEP7UVPixelP8RGBPixel ; IterPixel::nextHelper(UVPixel*, RGBPixel*)
;;;75     
                          ENDP

                  _ZN9IterPixel10averageRgbEPj PROC ; IterPixel::averageRgb(unsigned*)
;;;127    
;;;128    uint32_t IterPixel::averageRgb(uint32_t *pixels)
00019c  e92d43f8          PUSH     {r3-r9,lr}
;;;129    {
0001a0  4681              MOV      r9,r0
0001a2  4688              MOV      r8,r1
0001a4  2000              MOVS     r0,#0
0001a6  f88d0002          STRB     r0,[sp,#2]
0001aa  f88d0001          STRB     r0,[sp,#1]
0001ae  f88d0000          STRB     r0,[sp,#0]
;;;130    	RGBPixel rgb;
;;;131    	uint32_t r, g, b, n;
;;;132    	reset();
0001b2  2101              MOVS     r1,#1
0001b4  4648              MOV      r0,r9
0001b6  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
;;;133    	for (r=g=b=n=0; next(NULL, &rgb); n++)
0001ba  2400              MOVS     r4,#0
0001bc  4627              MOV      r7,r4
0001be  4626              MOV      r6,r4
0001c0  4625              MOV      r5,r4
0001c2  e009              B        |L1.472|
                  |L1.452|
;;;134    	{
;;;135    		r += rgb.m_r;
0001c4  f89d0000          LDRB     r0,[sp,#0]
0001c8  4405              ADD      r5,r5,r0
;;;136    		g += rgb.m_g;
0001ca  f89d0001          LDRB     r0,[sp,#1]
0001ce  4406              ADD      r6,r6,r0
;;;137    		b += rgb.m_b;		
0001d0  f89d0002          LDRB     r0,[sp,#2]
0001d4  4407              ADD      r7,r7,r0
0001d6  1c64              ADDS     r4,r4,#1              ;133
                  |L1.472|
0001d8  466a              MOV      r2,sp                 ;133
0001da  2100              MOVS     r1,#0                 ;133
0001dc  4648              MOV      r0,r9                 ;133
0001de  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
0001e2  2800              CMP      r0,#0                 ;133
0001e4  d1ee              BNE      |L1.452|
;;;138    	}
;;;139    
;;;140    	r /= n;
0001e6  fbb5f0f4          UDIV     r0,r5,r4
;;;141    	g /= n;
0001ea  fbb6f1f4          UDIV     r1,r6,r4
;;;142    	b /= n;
0001ee  fbb7f2f4          UDIV     r2,r7,r4
;;;143    
;;;144    	if (pixels)
0001f2  f1b80f00          CMP      r8,#0
0001f6  d001              BEQ      |L1.508|
;;;145    		*pixels = n;
0001f8  f8c84000          STR      r4,[r8,#0]
                  |L1.508|
;;;146    	return (r<<16) | (g<<8) | b;
0001fc  0400              LSLS     r0,r0,#16
0001fe  ea402001          ORR      r0,r0,r1,LSL #8
000202  4310              ORRS     r0,r0,r2
;;;147    }
000204  e8bd83f8          POP      {r3-r9,pc}
;;;148    
                          ENDP

                  _ZN8ColorLUT16setMinBrightnessEf PROC ; ColorLUT::setMinBrightness(float)
;;;607    
;;;608    void ColorLUT::setMinBrightness(float miny)
000208  eddf0afd          VLDR     s1,|L1.1536|
;;;609    {
;;;610        m_miny = 3*((1<<8)-1)*miny;
00020c  ee200a20          VMUL.F32 s0,s0,s1
000210  eebc0ac0          VCVT.U32.F32 s0,s0
000214  ee101a10          VMOV     r1,s0
000218  f8c0116c          STR      r1,[r0,#0x16c]
;;;611        if (m_miny==0)
00021c  2900              CMP      r1,#0
00021e  d102              BNE      |L1.550|
;;;612            m_miny = 1;
000220  2101              MOVS     r1,#1
000222  f8c0116c          STR      r1,[r0,#0x16c]
                  |L1.550|
;;;613    
;;;614    }
000226  4770              BX       lr
;;;615    
                          ENDP

                  _ZN8ColorLUT8clearLUTEh PROC ; ColorLUT::clearLUT(unsigned char)
;;;420    
;;;421    void ColorLUT::clearLUT(uint8_t signum)
000228  b570              PUSH     {r4-r6,lr}
;;;422    {
;;;423        int i;
;;;424    
;;;425        for (i=0; i<CL_LUT_SIZE; i++)
00022a  2200              MOVS     r2,#0
00022c  2400              MOVS     r4,#0
00022e  f44f5580          MOV      r5,#0x1000
                  |L1.562|
;;;426        {
;;;427            if (signum==0)
000232  b149              CBZ      r1,|L1.584|
;;;428                m_lut[i] = 0;
;;;429            else if (m_lut[i]==signum)
000234  f8d03170          LDR      r3,[r0,#0x170]
000238  5c9e              LDRB     r6,[r3,r2]
00023a  428e              CMP      r6,r1
00023c  d100              BNE      |L1.576|
;;;430                m_lut[i] = 0;
00023e  549c              STRB     r4,[r3,r2]
                  |L1.576|
000240  1c52              ADDS     r2,r2,#1              ;425
000242  42aa              CMP      r2,r5                 ;425
000244  dbf5              BLT      |L1.562|
;;;431        }
;;;432    }
000246  bd70              POP      {r4-r6,pc}
                  |L1.584|
000248  f8d03170          LDR      r3,[r0,#0x170]        ;428
00024c  549c              STRB     r4,[r3,r2]            ;428
00024e  e7f7              B        |L1.576|
;;;433    
                          ENDP

                  _ZN8ColorLUTC2EPh                  ; Alternate entry point ; ColorLUT::ColorLUT__sub_object(unsigned char*)
                  _ZN8ColorLUTC1EPh PROC ; ColorLUT::ColorLUT(unsigned char*)
;;;148    
;;;149    ColorLUT::ColorLUT(uint8_t *lut)
;;;150    {
;;;151    	int i; 
;;;152        m_lut = lut;
;;;153        memset((void *)m_signatures, 0, sizeof(ColorSignature)*CL_NUM_SIGNATURES);
;;;154        memset((void *)m_runtimeSigs, 0, sizeof(RuntimeSignature)*CL_NUM_SIGNATURES);
;;;155    	clearLUT();
;;;156    
;;;157        setMinBrightness(CL_DEFAULT_MINY);
;;;158        m_minRatio = CL_MIN_RATIO;
;;;159        m_maxDist = CL_MAX_DIST;
;;;160        m_ratio = CL_DEFAULT_TOL;
;;;161        m_ccGain = CL_DEFAULT_CCGAIN;
;;;162    	for (i=0; i<CL_NUM_SIGNATURES; i++)
;;;163    		m_sigRanges[i] = CL_DEFAULT_SIG_RANGE;
;;;164    }
;;;165    
000250  b570              PUSH     {r4-r6,lr}
000252  460d              MOV      r5,r1
000254  2307              MOVS     r3,#7
000256  2220              MOVS     r2,#0x20
000258  49ea              LDR      r1,|L1.1540|
00025a  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
00025e  4604              MOV      r4,r0
000260  f8c45170          STR      r5,[r4,#0x170]
000264  21e0              MOVS     r1,#0xe0
000266  4620              MOV      r0,r4
000268  f7fffffe          BL       __aeabi_memclr4
00026c  218c              MOVS     r1,#0x8c
00026e  f10400e0          ADD      r0,r4,#0xe0
000272  f7fffffe          BL       __aeabi_memclr4
000276  2100              MOVS     r1,#0
000278  4620              MOV      r0,r4
00027a  f7fffffe          BL       _ZN8ColorLUT8clearLUTEh ; ColorLUT::clearLUT(unsigned char)
00027e  ed9f0ae2          VLDR     s0,|L1.1544|
000282  4620              MOV      r0,r4
000284  f7fffffe          BL       _ZN8ColorLUT16setMinBrightnessEf ; ColorLUT::setMinBrightness(float)
000288  eeb50a00          VMOV.F32 s0,#0.25000000
00028c  ed840a5f          VSTR     s0,[r4,#0x17c]
000290  f44f60fa          MOV      r0,#0x7d0
000294  f8c40174          STR      r0,[r4,#0x174]
000298  ed9f0adc          VLDR     s0,|L1.1548|
00029c  ed840a5e          VSTR     s0,[r4,#0x178]
0002a0  eeb70a08          VMOV.F32 s0,#1.50000000
0002a4  ed840a60          VSTR     s0,[r4,#0x180]
0002a8  2100              MOVS     r1,#0
0002aa  eeb00a04          VMOV.F32 s0,#2.50000000
                  |L1.686|
0002ae  eb040081          ADD      r0,r4,r1,LSL #2
0002b2  ed800a61          VSTR     s0,[r0,#0x184]
0002b6  1c49              ADDS     r1,r1,#1
0002b8  2907              CMP      r1,#7
0002ba  dbf8              BLT      |L1.686|
0002bc  4620              MOV      r0,r4
0002be  bd70              POP      {r4-r6,pc}
                          ENDP

                  _ZN8ColorLUTD2Ev                  ; Alternate entry point ; ColorLUT::~ColorLUT__sub_object()
                  _ZN8ColorLUTD1Ev PROC ; ColorLUT::~ColorLUT()
;;;166    
;;;167    ColorLUT::~ColorLUT()
;;;168    {
;;;169    }
;;;170    
0002c0  4770              BX       lr
                          ENDP

                  _ZN8ColorLUT15updateSignatureEh PROC ; ColorLUT::updateSignature(unsigned char)
;;;330    
;;;331    void ColorLUT::updateSignature(uint8_t signum)
0002c2  b510              PUSH     {r4,lr}
;;;332    {
;;;333        float range;
;;;334    
;;;335    	if (signum<1 || signum>CL_NUM_SIGNATURES)
0002c4  1e49              SUBS     r1,r1,#1
0002c6  2907              CMP      r1,#7
0002c8  d256              BCS      |L1.888|
;;;336    		return;
;;;337    	signum--;
0002ca  b2ca              UXTB     r2,r1
;;;338    
;;;339        if (m_signatures[signum].m_type==CL_MODEL_TYPE_COLORCODE)
0002cc  eb001142          ADD      r1,r0,r2,LSL #5
0002d0  69cb              LDR      r3,[r1,#0x1c]
0002d2  2b01              CMP      r3,#1
0002d4  d051              BEQ      |L1.890|
;;;340            range = m_sigRanges[signum]*m_ccGain;
;;;341    	else
;;;342    		range = m_sigRanges[signum];
0002d6  eb000382          ADD      r3,r0,r2,LSL #2
0002da  ed930a61          VLDR     s0,[r3,#0x184]
                  |L1.734|
;;;343        m_runtimeSigs[signum].m_uMin = m_signatures[signum].m_uMean + (m_signatures[signum].m_uMin - m_signatures[signum].m_uMean)*range;
0002de  680c              LDR      r4,[r1,#0]
0002e0  688b              LDR      r3,[r1,#8]
0002e2  eb020282          ADD      r2,r2,r2,LSL #2
0002e6  1ae4              SUBS     r4,r4,r3
0002e8  ee004a90          VMOV     s1,r4
0002ec  eb000482          ADD      r4,r0,r2,LSL #2
0002f0  eeb81ae0          VCVT.F32.S32 s2,s1
0002f4  ee003a90          VMOV     s1,r3
0002f8  eef80ae0          VCVT.F32.S32 s1,s1
0002fc  ee410a00          VMLA.F32 s1,s2,s0
000300  eefd0ae0          VCVT.S32.F32 s1,s1
000304  edc40a38          VSTR     s1,[r4,#0xe0]
;;;344    	m_runtimeSigs[signum].m_uMax = m_signatures[signum].m_uMean + (m_signatures[signum].m_uMax - m_signatures[signum].m_uMean)*range;
000308  e9d12001          LDRD     r2,r0,[r1,#4]
00030c  1a12              SUBS     r2,r2,r0
00030e  ee002a90          VMOV     s1,r2
000312  eeb81ae0          VCVT.F32.S32 s2,s1
000316  ee000a90          VMOV     s1,r0
00031a  eef80ae0          VCVT.F32.S32 s1,s1
00031e  ee410a00          VMLA.F32 s1,s2,s0
000322  eefd0ae0          VCVT.S32.F32 s1,s1
000326  edc40a39          VSTR     s1,[r4,#0xe4]
;;;345    	m_runtimeSigs[signum].m_vMin = m_signatures[signum].m_vMean + (m_signatures[signum].m_vMin - m_signatures[signum].m_vMean)*range;
00032a  68ca              LDR      r2,[r1,#0xc]
00032c  6948              LDR      r0,[r1,#0x14]
00032e  1a12              SUBS     r2,r2,r0
000330  ee002a90          VMOV     s1,r2
000334  eeb81ae0          VCVT.F32.S32 s2,s1
000338  ee000a90          VMOV     s1,r0
00033c  eef80ae0          VCVT.F32.S32 s1,s1
000340  ee410a00          VMLA.F32 s1,s2,s0
000344  eefd0ae0          VCVT.S32.F32 s1,s1
000348  edc40a3a          VSTR     s1,[r4,#0xe8]
;;;346    	m_runtimeSigs[signum].m_vMax = m_signatures[signum].m_vMean + (m_signatures[signum].m_vMax - m_signatures[signum].m_vMean)*range;
00034c  e9d12004          LDRD     r2,r0,[r1,#0x10]
000350  1a12              SUBS     r2,r2,r0
000352  ee002a90          VMOV     s1,r2
000356  eeb81ae0          VCVT.F32.S32 s2,s1
00035a  ee000a90          VMOV     s1,r0
00035e  eef80ae0          VCVT.F32.S32 s1,s1
000362  ee410a00          VMLA.F32 s1,s2,s0
000366  eebd0ae0          VCVT.S32.F32 s0,s1
00036a  ed840a3b          VSTR     s0,[r4,#0xec]
;;;347    
;;;348        m_runtimeSigs[signum].m_rgbSat = saturate(m_signatures[signum].m_rgb);
00036e  6988              LDR      r0,[r1,#0x18]
000370  f7fffffe          BL       _Z8saturatej ; saturate(unsigned)
000374  f8c400f0          STR      r0,[r4,#0xf0]
                  |L1.888|
;;;349    }
000378  bd10              POP      {r4,pc}
                  |L1.890|
00037a  eb000382          ADD      r3,r0,r2,LSL #2       ;340
00037e  edd00a60          VLDR     s1,[r0,#0x180]        ;340
000382  ed930a61          VLDR     s0,[r3,#0x184]        ;340
000386  ee200a20          VMUL.F32 s0,s0,s1              ;340
00038a  e7a8              B        |L1.734|
;;;350    
                          ENDP

                  _ZN8ColorLUT10calcRatiosEP9IterPixelP14ColorSignaturePf PROC ; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
;;;232    
;;;233    void ColorLUT::calcRatios(IterPixel *ip, ColorSignature *sig, float ratios[])
00038c  b5f0              PUSH     {r4-r7,lr}
;;;234    {
00038e  b087              SUB      sp,sp,#0x1c
000390  460f              MOV      r7,r1
000392  4614              MOV      r4,r2
000394  461e              MOV      r6,r3
000396  2200              MOVS     r2,#0
000398  9206              STR      r2,[sp,#0x18]
00039a  9205              STR      r2,[sp,#0x14]
;;;235        UVPixel uv;
;;;236        uint32_t n=0, counts[4];
00039c  2500              MOVS     r5,#0
;;;237        counts[0] = counts[1] = counts[2] = counts[3] = 0;
00039e  9204              STR      r2,[sp,#0x10]
0003a0  9203              STR      r2,[sp,#0xc]
0003a2  9202              STR      r2,[sp,#8]
0003a4  9201              STR      r2,[sp,#4]
;;;238    
;;;239        ip->reset();
0003a6  2101              MOVS     r1,#1
0003a8  4638              MOV      r0,r7
0003aa  f7fffffe          BL       _ZN9IterPixel5resetEb ; IterPixel::reset(bool)
;;;240        while(ip->next(&uv))
0003ae  e01b              B        |L1.1000|
                  |L1.944|
;;;241        {
;;;242            if (uv.m_u>sig->m_uMin)
0003b0  9a05              LDR      r2,[sp,#0x14]
0003b2  6820              LDR      r0,[r4,#0]
0003b4  4282              CMP      r2,r0
0003b6  dd02              BLE      |L1.958|
;;;243                counts[0]++;
0003b8  9801              LDR      r0,[sp,#4]
0003ba  1c40              ADDS     r0,r0,#1
0003bc  9001              STR      r0,[sp,#4]
                  |L1.958|
;;;244    
;;;245            if (uv.m_u<sig->m_uMax)
0003be  6860              LDR      r0,[r4,#4]
0003c0  4282              CMP      r2,r0
0003c2  da02              BGE      |L1.970|
;;;246                counts[1]++;
0003c4  9802              LDR      r0,[sp,#8]
0003c6  1c40              ADDS     r0,r0,#1
0003c8  9002              STR      r0,[sp,#8]
                  |L1.970|
;;;247    
;;;248            if (uv.m_v>sig->m_vMin)
0003ca  9806              LDR      r0,[sp,#0x18]
0003cc  68e1              LDR      r1,[r4,#0xc]
0003ce  4288              CMP      r0,r1
0003d0  dd02              BLE      |L1.984|
;;;249                counts[2]++;
0003d2  9803              LDR      r0,[sp,#0xc]
0003d4  1c40              ADDS     r0,r0,#1
0003d6  9003              STR      r0,[sp,#0xc]
                  |L1.984|
;;;250    
;;;251            if (uv.m_v<sig->m_vMax)
0003d8  9806              LDR      r0,[sp,#0x18]
0003da  6921              LDR      r1,[r4,#0x10]
0003dc  4288              CMP      r0,r1
0003de  da02              BGE      |L1.998|
;;;252                counts[3]++;
0003e0  9804              LDR      r0,[sp,#0x10]
0003e2  1c40              ADDS     r0,r0,#1
0003e4  9004              STR      r0,[sp,#0x10]
                  |L1.998|
;;;253    
;;;254            n++;
0003e6  1c6d              ADDS     r5,r5,#1
                  |L1.1000|
0003e8  2200              MOVS     r2,#0                 ;240
0003ea  a905              ADD      r1,sp,#0x14           ;240
0003ec  4638              MOV      r0,r7                 ;240
0003ee  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
0003f2  2800              CMP      r0,#0                 ;240
0003f4  d1dc              BNE      |L1.944|
;;;255        }
;;;256    
;;;257        // calc ratios
;;;258        ratios[0] = (float)counts[0]/n;
0003f6  ed9d0a01          VLDR     s0,[sp,#4]
0003fa  eef80a40          VCVT.F32.U32 s1,s0
0003fe  ee005a10          VMOV     s0,r5
000402  eeb80a40          VCVT.F32.U32 s0,s0
000406  ee801a80          VDIV.F32 s2,s1,s0
00040a  ed861a00          VSTR     s2,[r6,#0]
;;;259        ratios[1] = (float)counts[1]/n;
00040e  ed9d0a02          VLDR     s0,[sp,#8]
000412  eef80a40          VCVT.F32.U32 s1,s0
000416  ee005a10          VMOV     s0,r5
00041a  eeb80a40          VCVT.F32.U32 s0,s0
00041e  ee801a80          VDIV.F32 s2,s1,s0
000422  ed861a01          VSTR     s2,[r6,#4]
;;;260        ratios[2] = (float)counts[2]/n;
000426  ed9d0a03          VLDR     s0,[sp,#0xc]
00042a  eef80a40          VCVT.F32.U32 s1,s0
00042e  ee005a10          VMOV     s0,r5
000432  eeb80a40          VCVT.F32.U32 s0,s0
000436  ee801a80          VDIV.F32 s2,s1,s0
00043a  ed861a02          VSTR     s2,[r6,#8]
;;;261        ratios[3] = (float)counts[3]/n;
00043e  ed9d0a04          VLDR     s0,[sp,#0x10]
000442  eef80a40          VCVT.F32.U32 s1,s0
000446  ee005a10          VMOV     s0,r5
00044a  eeb80a40          VCVT.F32.U32 s0,s0
00044e  ee801a80          VDIV.F32 s2,s1,s0
000452  ed861a03          VSTR     s2,[r6,#0xc]
;;;262        // calc mean (because it's cheap to do it here)
;;;263        sig->m_uMean = (sig->m_uMin + sig->m_uMax)/2;
000456  e9d40100          LDRD     r0,r1,[r4,#0]
00045a  4408              ADD      r0,r0,r1
00045c  eb0070d0          ADD      r0,r0,r0,LSR #31
000460  1040              ASRS     r0,r0,#1
000462  60a0              STR      r0,[r4,#8]
;;;264        sig->m_vMean = (sig->m_vMin + sig->m_vMax)/2;
000464  e9d40103          LDRD     r0,r1,[r4,#0xc]
000468  4408              ADD      r0,r0,r1
00046a  eb0070d0          ADD      r0,r0,r0,LSR #31
00046e  1040              ASRS     r0,r0,#1
000470  6160              STR      r0,[r4,#0x14]
;;;265    }
000472  b007              ADD      sp,sp,#0x1c
000474  bdf0              POP      {r4-r7,pc}
;;;266    #endif
                          ENDP

                  _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature PROC ; ColorLUT::iterate(IterPixel*, ColorSignature*)
;;;267    
;;;268    void ColorLUT::iterate(IterPixel *ip, ColorSignature *sig)
000476  e92d41ff          PUSH     {r0-r8,lr}
;;;269    {
00047a  4606              MOV      r6,r0
00047c  460f              MOV      r7,r1
00047e  4614              MOV      r4,r2
;;;270        int32_t scale;
;;;271        float ratios[4];
;;;272    
;;;273        // binary search -- this rouine is guaranteed to find the right value +/- 1, which is good enough!
;;;274        // find all four values, umin, umax, vmin, vmax simultaneously
;;;275        for (scale=1<<30, sig->m_uMin=sig->m_uMax=sig->m_vMin=sig->m_vMax=0; scale!=0; scale>>=1)
000480  f04f4580          MOV      r5,#0x40000000
000484  2000              MOVS     r0,#0
000486  6120              STR      r0,[r4,#0x10]
000488  60e0              STR      r0,[r4,#0xc]
00048a  6060              STR      r0,[r4,#4]
00048c  6020              STR      r0,[r4,#0]
00048e  e046              B        |L1.1310|
                  |L1.1168|
;;;276        {
;;;277            calcRatios(ip, sig, ratios);
000490  466b              MOV      r3,sp
000492  4622              MOV      r2,r4
000494  4639              MOV      r1,r7
000496  4630              MOV      r0,r6
000498  f7fffffe          BL       _ZN8ColorLUT10calcRatiosEP9IterPixelP14ColorSignaturePf ; ColorLUT::calcRatios(IterPixel*, ColorSignature*, float*)
;;;278            if (ratios[0]>m_ratio)
00049c  ed9d0a00          VLDR     s0,[sp,#0]
0004a0  edd60a5e          VLDR     s1,[r6,#0x178]
0004a4  eeb40ae0          VCMPE.F32 s0,s1
0004a8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004ac  dd03              BLE      |L1.1206|
;;;279                sig->m_uMin += scale;
0004ae  6820              LDR      r0,[r4,#0]
0004b0  4428              ADD      r0,r0,r5
0004b2  6020              STR      r0,[r4,#0]
0004b4  e002              B        |L1.1212|
                  |L1.1206|
;;;280            else
;;;281                sig->m_uMin -= scale;
0004b6  6820              LDR      r0,[r4,#0]
0004b8  1b40              SUBS     r0,r0,r5
0004ba  6020              STR      r0,[r4,#0]
                  |L1.1212|
;;;282    
;;;283            if (ratios[1]>m_ratio)
0004bc  ed9d0a01          VLDR     s0,[sp,#4]
0004c0  edd60a5e          VLDR     s1,[r6,#0x178]
0004c4  eeb40ae0          VCMPE.F32 s0,s1
0004c8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004cc  dd03              BLE      |L1.1238|
;;;284                sig->m_uMax -= scale;
0004ce  6860              LDR      r0,[r4,#4]
0004d0  1b40              SUBS     r0,r0,r5
0004d2  6060              STR      r0,[r4,#4]
0004d4  e002              B        |L1.1244|
                  |L1.1238|
;;;285            else
;;;286                sig->m_uMax += scale;
0004d6  6860              LDR      r0,[r4,#4]
0004d8  4428              ADD      r0,r0,r5
0004da  6060              STR      r0,[r4,#4]
                  |L1.1244|
;;;287    
;;;288            if (ratios[2]>m_ratio)
0004dc  ed9d0a02          VLDR     s0,[sp,#8]
0004e0  edd60a5e          VLDR     s1,[r6,#0x178]
0004e4  eeb40ae0          VCMPE.F32 s0,s1
0004e8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004ec  dd03              BLE      |L1.1270|
;;;289                sig->m_vMin += scale;
0004ee  68e0              LDR      r0,[r4,#0xc]
0004f0  4428              ADD      r0,r0,r5
0004f2  60e0              STR      r0,[r4,#0xc]
0004f4  e002              B        |L1.1276|
                  |L1.1270|
;;;290            else
;;;291                sig->m_vMin -= scale;
0004f6  68e0              LDR      r0,[r4,#0xc]
0004f8  1b40              SUBS     r0,r0,r5
0004fa  60e0              STR      r0,[r4,#0xc]
                  |L1.1276|
;;;292    
;;;293            if (ratios[3]>m_ratio)
0004fc  ed9d0a03          VLDR     s0,[sp,#0xc]
000500  edd60a5e          VLDR     s1,[r6,#0x178]
000504  eeb40ae0          VCMPE.F32 s0,s1
000508  eef1fa10          VMRS     APSR_nzcv,FPSCR
00050c  dd03              BLE      |L1.1302|
;;;294                sig->m_vMax -= scale;
00050e  6920              LDR      r0,[r4,#0x10]
000510  1b40              SUBS     r0,r0,r5
000512  6120              STR      r0,[r4,#0x10]
000514  e002              B        |L1.1308|
                  |L1.1302|
;;;295            else
;;;296                sig->m_vMax += scale;
000516  6920              LDR      r0,[r4,#0x10]
000518  4428              ADD      r0,r0,r5
00051a  6120              STR      r0,[r4,#0x10]
                  |L1.1308|
00051c  106d              ASRS     r5,r5,#1              ;275
                  |L1.1310|
00051e  2d00              CMP      r5,#0                 ;275
000520  d1b6              BNE      |L1.1168|
;;;297        }
;;;298    }
000522  e8bd81ff          POP      {r0-r8,pc}
;;;299    
                          ENDP

                  _ZN8ColorLUT17generateSignatureERK6Frame8RK5RectAh PROC ; ColorLUT::generateSignature(const Frame8&, const RectA&, unsigned char)
;;;302    
;;;303    int ColorLUT::generateSignature(const Frame8 &frame, const RectA &region, uint8_t signum)
000526  b570              PUSH     {r4-r6,lr}
;;;304    {
000528  b08a              SUB      sp,sp,#0x28
00052a  4605              MOV      r5,r0
00052c  461c              MOV      r4,r3
;;;305     	if (signum<1 || signum>CL_NUM_SIGNATURES)
00052e  1e60              SUBS     r0,r4,#1
000530  4606              MOV      r6,r0
000532  2807              CMP      r0,#7
000534  d303              BCC      |L1.1342|
;;;306    		return -1;
000536  f04f30ff          MOV      r0,#0xffffffff
                  |L1.1338|
;;;307       // this is cool-- this routine doesn't allocate any extra memory other than some stack variables
;;;308        IterPixel ip(frame, region);
;;;309        iterate(&ip, m_signatures+signum-1);
;;;310    	m_signatures[signum-1].m_type = 0;
;;;311    
;;;312    	updateSignature(signum);
;;;313        return 0;
;;;314    }
00053a  b00a              ADD      sp,sp,#0x28
00053c  bd70              POP      {r4-r6,pc}
                  |L1.1342|
00053e  a801              ADD      r0,sp,#4              ;308
000540  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
000544  eb051244          ADD      r2,r5,r4,LSL #5       ;309
000548  3a20              SUBS     r2,r2,#0x20           ;309
00054a  a901              ADD      r1,sp,#4              ;309
00054c  4628              MOV      r0,r5                 ;309
00054e  f7fffffe          BL       _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature ; ColorLUT::iterate(IterPixel*, ColorSignature*)
000552  eb051146          ADD      r1,r5,r6,LSL #5       ;310
000556  2000              MOVS     r0,#0                 ;310
000558  61c8              STR      r0,[r1,#0x1c]         ;310
00055a  4621              MOV      r1,r4                 ;312
00055c  4628              MOV      r0,r5                 ;312
00055e  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000562  2000              MOVS     r0,#0                 ;313
000564  e7e9              B        |L1.1338|
;;;315    
                          ENDP

                  _ZN8ColorLUT10growRegionEP5RectARK6Frame8h PROC ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
;;;434    
;;;435    bool ColorLUT::growRegion(RectA *region, const Frame8 &frame, uint8_t dir)
000566  2b00              CMP      r3,#0
;;;436    {
000568  d006              BEQ      |L1.1400|
;;;437        if (dir==0) // grow left
;;;438        {
;;;439            if (region->m_xOffset>=CL_GROW_INC)
;;;440            {
;;;441                region->m_xOffset -= CL_GROW_INC;
;;;442                region->m_width += CL_GROW_INC;
;;;443            }
;;;444            else
;;;445                return true;
;;;446        }
;;;447        else if (dir==1) // grow top
00056a  2b01              CMP      r3,#1
00056c  d00f              BEQ      |L1.1422|
;;;448        {
;;;449            if (region->m_yOffset>=CL_GROW_INC)
;;;450            {
;;;451                region->m_yOffset -= CL_GROW_INC;
;;;452                region->m_height += CL_GROW_INC;
;;;453            }
;;;454            else
;;;455                return true;
;;;456        }
;;;457        else if (dir==2) // grow right
00056e  2b02              CMP      r3,#2
000570  d018              BEQ      |L1.1444|
;;;458        {
;;;459            if (region->m_xOffset+region->m_width+CL_GROW_INC>frame.m_width)
;;;460                return true;
;;;461            region->m_width += CL_GROW_INC;
;;;462        }
;;;463        else if (dir==3) // grow bottom
000572  2b03              CMP      r3,#3
000574  d023              BEQ      |L1.1470|
000576  e02e              B        |L1.1494|
                  |L1.1400|
000578  8808              LDRH     r0,[r1,#0]            ;439
00057a  2804              CMP      r0,#4                 ;439
00057c  d305              BCC      |L1.1418|
00057e  1f00              SUBS     r0,r0,#4              ;441
000580  8008              STRH     r0,[r1,#0]            ;441
000582  8888              LDRH     r0,[r1,#4]            ;442
000584  1d00              ADDS     r0,r0,#4              ;442
000586  8088              STRH     r0,[r1,#4]            ;442
000588  e025              B        |L1.1494|
                  |L1.1418|
00058a  2001              MOVS     r0,#1                 ;445
;;;464        {
;;;465            if (region->m_yOffset+region->m_height+CL_GROW_INC>frame.m_height)
;;;466                return true;
;;;467            region->m_height += CL_GROW_INC;
;;;468        }
;;;469        return false;
;;;470    }
00058c  4770              BX       lr
                  |L1.1422|
00058e  8848              LDRH     r0,[r1,#2]            ;449
000590  2804              CMP      r0,#4                 ;449
000592  d305              BCC      |L1.1440|
000594  1f00              SUBS     r0,r0,#4              ;451
000596  8048              STRH     r0,[r1,#2]            ;451
000598  88c8              LDRH     r0,[r1,#6]            ;452
00059a  1d00              ADDS     r0,r0,#4              ;452
00059c  80c8              STRH     r0,[r1,#6]            ;452
00059e  e01a              B        |L1.1494|
                  |L1.1440|
0005a0  2001              MOVS     r0,#1                 ;455
0005a2  4770              BX       lr
                  |L1.1444|
0005a4  880b              LDRH     r3,[r1,#0]            ;459
0005a6  8888              LDRH     r0,[r1,#4]            ;459
0005a8  f9b22004          LDRSH    r2,[r2,#4]            ;459
0005ac  4403              ADD      r3,r3,r0              ;459
0005ae  1d1b              ADDS     r3,r3,#4              ;459
0005b0  4293              CMP      r3,r2                 ;459
0005b2  dd01              BLE      |L1.1464|
0005b4  2001              MOVS     r0,#1                 ;460
0005b6  4770              BX       lr
                  |L1.1464|
0005b8  1d00              ADDS     r0,r0,#4              ;461
0005ba  8088              STRH     r0,[r1,#4]            ;461
0005bc  e00b              B        |L1.1494|
                  |L1.1470|
0005be  884b              LDRH     r3,[r1,#2]            ;465
0005c0  88c8              LDRH     r0,[r1,#6]            ;465
0005c2  f9b22006          LDRSH    r2,[r2,#6]            ;465
0005c6  4403              ADD      r3,r3,r0              ;465
0005c8  1d1b              ADDS     r3,r3,#4              ;465
0005ca  4293              CMP      r3,r2                 ;465
0005cc  dd01              BLE      |L1.1490|
0005ce  2001              MOVS     r0,#1                 ;466
0005d0  4770              BX       lr
                  |L1.1490|
0005d2  1d00              ADDS     r0,r0,#4              ;467
0005d4  80c8              STRH     r0,[r1,#6]            ;467
                  |L1.1494|
0005d6  2000              MOVS     r0,#0                 ;469
0005d8  4770              BX       lr
;;;471    
                          ENDP

                  _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel PROC ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
;;;576    
;;;577    void ColorLUT::getMean(const RectA &region ,const Frame8 &frame, UVPixel *mean)
0005da  e92d43f0          PUSH     {r4-r9,lr}
;;;578    {
0005de  460c              MOV      r4,r1
0005e0  b08b              SUB      sp,sp,#0x2c
0005e2  4611              MOV      r1,r2
0005e4  4699              MOV      r9,r3
0005e6  2000              MOVS     r0,#0
0005e8  900a              STR      r0,[sp,#0x28]
0005ea  9009              STR      r0,[sp,#0x24]
;;;579        UVPixel uv;
;;;580        uint32_t n=0;
0005ec  4680              MOV      r8,r0
;;;581        IterPixel ip(frame, region);
0005ee  4622              MOV      r2,r4
0005f0  4668              MOV      r0,sp
0005f2  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8RK5RectA ; IterPixel::IterPixel(const Frame8&, const RectA&)
;;;582    
;;;583        longlong usum=0, vsum=0;
0005f6  2400              MOVS     r4,#0
0005f8  4625              MOV      r5,r4
0005fa  2600              MOVS     r6,#0
0005fc  4637              MOV      r7,r6
;;;584    
;;;585        while(ip.next(&uv))
0005fe  e011              B        |L1.1572|
                  |L1.1536|
000600  443f4000          DCFS     0x443f4000 ; 765
                  |L1.1540|
                          DCD      _ZN14ColorSignatureC1Ev ; ColorSignature::ColorSignature()
                  |L1.1544|
000608  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L1.1548|
00060c  3f4ccccd          DCFS     0x3f4ccccd ; 0.80000001192092896
                  |L1.1552|
;;;586        {
;;;587            usum += uv.m_u;
000610  9809              LDR      r0,[sp,#0x24]
000612  1904              ADDS     r4,r0,r4
000614  eb4575e0          ADC      r5,r5,r0,ASR #31
;;;588            vsum += uv.m_v;
000618  980a              LDR      r0,[sp,#0x28]
00061a  1986              ADDS     r6,r0,r6
00061c  eb4777e0          ADC      r7,r7,r0,ASR #31
;;;589            n++;
000620  f1080801          ADD      r8,r8,#1
                  |L1.1572|
000624  f04f0200          MOV      r2,#0                 ;585
000628  a909              ADD      r1,sp,#0x24           ;585
00062a  4668              MOV      r0,sp                 ;585
00062c  f7fffffe          BL       _ZN9IterPixel4nextEP7UVPixelP8RGBPixel ; IterPixel::next(UVPixel*, RGBPixel*)
000630  2800              CMP      r0,#0                 ;585
000632  d1ed              BNE      |L1.1552|
;;;590        }
;;;591    
;;;592        mean->m_u = usum/n;
000634  4642              MOV      r2,r8
000636  2300              MOVS     r3,#0
000638  4620              MOV      r0,r4
00063a  4629              MOV      r1,r5
00063c  f7fffffe          BL       __aeabi_ldivmod
000640  f8c90000          STR      r0,[r9,#0]
;;;593        mean->m_v = vsum/n;
000644  4642              MOV      r2,r8
000646  2300              MOVS     r3,#0
000648  4630              MOV      r0,r6
00064a  4639              MOV      r1,r7
00064c  f7fffffe          BL       __aeabi_ldivmod
000650  f8c90004          STR      r0,[r9,#4]
;;;594    }
000654  b00b              ADD      sp,sp,#0x2c
000656  e8bd83f0          POP      {r4-r9,pc}
;;;595    
                          ENDP

                  _ZN8ColorLUT10testRegionERK5RectARK6Frame8P7UVPixelP12SimpleVectorI7Point16E PROC ; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector<Point16>*)
;;;472    
;;;473    float ColorLUT::testRegion(const RectA &region, const Frame8 &frame, UVPixel *mean, Points *points)
00065a  e92d4fff          PUSH     {r0-r11,lr}
;;;474    {
00065e  b085              SUB      sp,sp,#0x14
000660  461c              MOV      r4,r3
000662  2000              MOVS     r0,#0
000664  9004              STR      r0,[sp,#0x10]
000666  9003              STR      r0,[sp,#0xc]
;;;475        UVPixel subMean;
;;;476        float distance;
;;;477        RectA subRegion(0, 0, CL_GROW_INC, CL_GROW_INC);
000668  2204              MOVS     r2,#4
00066a  4613              MOV      r3,r2
00066c  f8ad0004          STRH     r0,[sp,#4]
000670  f8ad0006          STRH     r0,[sp,#6]
000674  f8ad2008          STRH     r2,[sp,#8]
000678  f8ad300a          STRH     r3,[sp,#0xa]
;;;478        subRegion.m_xOffset = region.m_xOffset;
00067c  8808              LDRH     r0,[r1,#0]
00067e  f8ad0004          STRH     r0,[sp,#4]
;;;479        subRegion.m_yOffset = region.m_yOffset;
000682  8848              LDRH     r0,[r1,#2]
000684  f8ad0006          STRH     r0,[sp,#6]
;;;480        bool horiz = region.m_width>region.m_height;
000688  f8b18004          LDRH     r8,[r1,#4]
00068c  88c8              LDRH     r0,[r1,#6]
00068e  4580              CMP      r8,r0
000690  d902              BLS      |L1.1688|
000692  f04f0a01          MOV      r10,#1
000696  e001              B        |L1.1692|
                  |L1.1688|
000698  f04f0a00          MOV      r10,#0
                  |L1.1692|
;;;481        uint32_t i, test, endpoint = horiz ? region.m_width : region.m_height;
00069c  f1ba0f00          CMP      r10,#0
0006a0  d100              BNE      |L1.1700|
0006a2  4680              MOV      r8,r0
                  |L1.1700|
;;;482    
;;;483        for (i=0, test=0; i<endpoint; i+=CL_GROW_INC)
0006a4  2500              MOVS     r5,#0
0006a6  2600              MOVS     r6,#0
0006a8  e056              B        |L1.1880|
                  |L1.1706|
;;;484        {
;;;485            getMean(subRegion, frame, &subMean);
0006aa  ab03              ADD      r3,sp,#0xc
0006ac  a901              ADD      r1,sp,#4
0006ae  9a07              LDR      r2,[sp,#0x1c]
0006b0  9805              LDR      r0,[sp,#0x14]
0006b2  f7fffffe          BL       _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
;;;486            distance = sqrt((float)((mean->m_u-subMean.m_u)*(mean->m_u-subMean.m_u) + (mean->m_v-subMean.m_v)*(mean->m_v-subMean.m_v)));
0006b6  6820              LDR      r0,[r4,#0]
0006b8  9903              LDR      r1,[sp,#0xc]
0006ba  9a04              LDR      r2,[sp,#0x10]
0006bc  1a41              SUBS     r1,r0,r1
0006be  6860              LDR      r0,[r4,#4]
0006c0  4349              MULS     r1,r1,r1
0006c2  1a80              SUBS     r0,r0,r2
0006c4  fb001000          MLA      r0,r0,r0,r1
0006c8  ee000a10          VMOV     s0,r0
0006cc  eeb80ac0          VCVT.F32.S32 s0,s0
0006d0  f7fffffe          BL       __hardfp_sqrtf
;;;487            if ((uint32_t)distance<m_maxDist)
0006d4  9805              LDR      r0,[sp,#0x14]
0006d6  eebc0ac0          VCVT.U32.F32 s0,s0
0006da  f8d01174          LDR      r1,[r0,#0x174]
0006de  ee100a10          VMOV     r0,s0
0006e2  4281              CMP      r1,r0
0006e4  d929              BLS      |L1.1850|
0006e6  9812              LDR      r0,[sp,#0x48]
0006e8  f8d09000          LDR      r9,[r0,#0]
;;;488            {
;;;489                int32_t n = points->size();
;;;490                mean->m_u = ((longlong)mean->m_u*n + subMean.m_u)/(n+1);
0006ec  9803              LDR      r0,[sp,#0xc]
0006ee  6822              LDR      r2,[r4,#0]
0006f0  17c1              ASRS     r1,r0,#31
0006f2  fbc20109          SMLAL    r0,r1,r2,r9
0006f6  f1090701          ADD      r7,r9,#1
0006fa  ea4f7be7          ASR      r11,r7,#31
0006fe  463a              MOV      r2,r7
000700  465b              MOV      r3,r11
000702  f7fffffe          BL       __aeabi_ldivmod
000706  6020              STR      r0,[r4,#0]
;;;491                mean->m_v = ((longlong)mean->m_v*n + subMean.m_v)/(n+1);
000708  9804              LDR      r0,[sp,#0x10]
00070a  6862              LDR      r2,[r4,#4]
00070c  17c1              ASRS     r1,r0,#31
00070e  fbc20109          SMLAL    r0,r1,r2,r9
000712  463a              MOV      r2,r7
000714  465b              MOV      r3,r11
000716  f7fffffe          BL       __aeabi_ldivmod
00071a  6060              STR      r0,[r4,#4]
;;;492                if (points->push_back(Point16(subRegion.m_xOffset, subRegion.m_yOffset))<0)
00071c  f8bd0004          LDRH     r0,[sp,#4]
000720  f8bd2006          LDRH     r2,[sp,#6]
000724  4669              MOV      r1,sp
000726  f8ad0000          STRH     r0,[sp,#0]
00072a  f8ad2002          STRH     r2,[sp,#2]
00072e  9812              LDR      r0,[sp,#0x48]
000730  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
000734  2800              CMP      r0,#0
000736  db11              BLT      |L1.1884|
;;;493                    break;
;;;494                //DBG("add %d %d %d", subRegion.m_xOffset, subRegion.m_yOffset, points->size());
;;;495                test++;
000738  1c76              ADDS     r6,r6,#1
                  |L1.1850|
;;;496            }
;;;497    
;;;498            if (horiz)
00073a  f1ba0f00          CMP      r10,#0
00073e  d005              BEQ      |L1.1868|
;;;499                subRegion.m_xOffset += CL_GROW_INC;
000740  f8bd0004          LDRH     r0,[sp,#4]
000744  1d00              ADDS     r0,r0,#4
000746  f8ad0004          STRH     r0,[sp,#4]
00074a  e004              B        |L1.1878|
                  |L1.1868|
;;;500            else
;;;501                subRegion.m_yOffset += CL_GROW_INC;
00074c  f8bd0006          LDRH     r0,[sp,#6]
000750  1d00              ADDS     r0,r0,#4
000752  f8ad0006          STRH     r0,[sp,#6]
                  |L1.1878|
000756  1d2d              ADDS     r5,r5,#4              ;483
                  |L1.1880|
000758  4545              CMP      r5,r8                 ;483
00075a  d3a6              BCC      |L1.1706|
                  |L1.1884|
;;;502        }
;;;503    
;;;504        //DBG("return %f", (float)test*CL_GROW_INC/endpoint);
;;;505        return (float)test*CL_GROW_INC/endpoint;
00075c  ee006a10          VMOV     s0,r6
000760  eef10a00          VMOV.F32 s1,#4.00000000
;;;506    }
000764  b009              ADD      sp,sp,#0x24
000766  eeb80a40          VCVT.F32.U32 s0,s0                 ;505
00076a  ee600a20          VMUL.F32 s1,s0,s1              ;505
00076e  ee008a10          VMOV     s0,r8                 ;505
000772  eeb81a40          VCVT.F32.U32 s2,s0                 ;505
000776  ee800a81          VDIV.F32 s0,s1,s2              ;505
                  |L1.1914|
00077a  e8bd8ff0          POP      {r4-r11,pc}
;;;507    
                          ENDP

                  _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E PROC ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
;;;508    
;;;509    void ColorLUT::growRegion(const Frame8 &frame, const Point16 &seed, Points *points)
00077e  e92d4ff0          PUSH     {r4-r11,lr}
;;;510    {
000782  b087              SUB      sp,sp,#0x1c
000784  4682              MOV      r10,r0
000786  468b              MOV      r11,r1
000788  4614              MOV      r4,r2
00078a  4699              MOV      r9,r3
;;;511        uint8_t dir, done;
;;;512        RectA region, newRegion;
00078c  a805              ADD      r0,sp,#0x14
00078e  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000792  a803              ADD      r0,sp,#0xc
000794  f7fffffe          BL       _ZN5RectAC1Ev ; RectA::RectA()
000798  2700              MOVS     r7,#0
00079a  9702              STR      r7,[sp,#8]
00079c  9701              STR      r7,[sp,#4]
;;;513        UVPixel mean;
;;;514        float ratio;
;;;515    
;;;516        done = 0;
00079e  2500              MOVS     r5,#0
;;;517    
;;;518        // create seed 2*CL_GROW_INCx2*CL_GROW_INC region from seed position, make sure it's within the frame
;;;519        region.m_xOffset = seed.m_x;
0007a0  8820              LDRH     r0,[r4,#0]
0007a2  f8ad0014          STRH     r0,[sp,#0x14]
;;;520        region.m_yOffset = seed.m_y;
0007a6  8860              LDRH     r0,[r4,#2]
0007a8  f8ad0016          STRH     r0,[sp,#0x16]
;;;521        if (growRegion(&region, frame, 0))
0007ac  2300              MOVS     r3,#0
0007ae  465a              MOV      r2,r11
0007b0  a905              ADD      r1,sp,#0x14
0007b2  4650              MOV      r0,r10
0007b4  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
0007b8  b108              CBZ      r0,|L1.1982|
;;;522            done |= 1<<0;
0007ba  2501              MOVS     r5,#1
0007bc  e00b              B        |L1.2006|
                  |L1.1982|
;;;523        else
;;;524            points->push_back(Point16(region.m_xOffset, region.m_yOffset));
0007be  f8bd0014          LDRH     r0,[sp,#0x14]
0007c2  f8bd2016          LDRH     r2,[sp,#0x16]
0007c6  4669              MOV      r1,sp
0007c8  f8ad0000          STRH     r0,[sp,#0]
0007cc  f8ad2002          STRH     r2,[sp,#2]
0007d0  4648              MOV      r0,r9
0007d2  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
                  |L1.2006|
;;;525        if (growRegion(&region, frame, 1))
0007d6  2301              MOVS     r3,#1
0007d8  465a              MOV      r2,r11
0007da  a905              ADD      r1,sp,#0x14
0007dc  4650              MOV      r0,r10
0007de  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
0007e2  b110              CBZ      r0,|L1.2026|
;;;526            done |= 1<<1;
0007e4  f0450502          ORR      r5,r5,#2
0007e8  e00b              B        |L1.2050|
                  |L1.2026|
;;;527        else
;;;528            points->push_back(Point16(region.m_xOffset, region.m_yOffset));
0007ea  f8bd0014          LDRH     r0,[sp,#0x14]
0007ee  f8bd2016          LDRH     r2,[sp,#0x16]
0007f2  4669              MOV      r1,sp
0007f4  f8ad0000          STRH     r0,[sp,#0]
0007f8  f8ad2002          STRH     r2,[sp,#2]
0007fc  4648              MOV      r0,r9
0007fe  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
                  |L1.2050|
;;;529        if (growRegion(&region, frame, 2))
000802  2302              MOVS     r3,#2
000804  465a              MOV      r2,r11
000806  a905              ADD      r1,sp,#0x14
000808  4650              MOV      r0,r10
00080a  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
00080e  b110              CBZ      r0,|L1.2070|
;;;530            done |= 1<<2;
000810  f0450504          ORR      r5,r5,#4
000814  e00a              B        |L1.2092|
                  |L1.2070|
;;;531        else
;;;532            points->push_back(Point16(seed.m_x, region.m_yOffset));
000816  8820              LDRH     r0,[r4,#0]
000818  f8bd2016          LDRH     r2,[sp,#0x16]
00081c  4669              MOV      r1,sp
00081e  f8ad0000          STRH     r0,[sp,#0]
000822  f8ad2002          STRH     r2,[sp,#2]
000826  4648              MOV      r0,r9
000828  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
                  |L1.2092|
;;;533        if (growRegion(&region, frame, 3))
00082c  2303              MOVS     r3,#3
00082e  465a              MOV      r2,r11
000830  a905              ADD      r1,sp,#0x14
000832  4650              MOV      r0,r10
000834  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
000838  b110              CBZ      r0,|L1.2112|
;;;534            done |= 1<<3;
00083a  f0450508          ORR      r5,r5,#8
00083e  e003              B        |L1.2120|
                  |L1.2112|
;;;535        else
;;;536            points->push_back(seed);
000840  4621              MOV      r1,r4
000842  4648              MOV      r0,r9
000844  f7fffffe          BL       _ZN12SimpleVectorI7Point16E9push_backERKS0_ ; SimpleVector<Point16>::push_back(const Point16&)
                  |L1.2120|
;;;537    
;;;538        getMean(region, frame, &mean);
000848  ab01              ADD      r3,sp,#4
00084a  465a              MOV      r2,r11
00084c  a905              ADD      r1,sp,#0x14
00084e  4650              MOV      r0,r10
000850  f7fffffe          BL       _ZN8ColorLUT7getMeanERK5RectARK6Frame8P7UVPixel ; ColorLUT::getMean(const RectA&, const Frame8&, UVPixel*)
000854  f04f0801          MOV      r8,#1                 ;522
;;;539    
;;;540        while(done!=0x0f)
000858  e04f              B        |L1.2298|
                  |L1.2138|
;;;541        {
;;;542            for (dir=0; dir<4; dir++)
00085a  2400              MOVS     r4,#0
                  |L1.2140|
;;;543            {
;;;544                newRegion = region;
00085c  e9dd0105          LDRD     r0,r1,[sp,#0x14]
000860  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;545                if (done&(1<<dir))
000864  fa08f604          LSL      r6,r8,r4
000868  422e              TST      r6,r5
00086a  d142              BNE      |L1.2290|
;;;546                    continue;
;;;547                else if (dir==0) // left
00086c  b134              CBZ      r4,|L1.2172|
;;;548                    newRegion.m_width = 0;
;;;549                else if (dir==1) // top
00086e  2c01              CMP      r4,#1
000870  d007              BEQ      |L1.2178|
;;;550                    newRegion.m_height = 0; // top and bottom
;;;551                else if (dir==2) // right
000872  2c02              CMP      r4,#2
000874  d008              BEQ      |L1.2184|
;;;552                {
;;;553                    newRegion.m_xOffset += newRegion.m_width;
;;;554                    newRegion.m_width = 0;
;;;555                }
;;;556                else if (dir==3) // bottom
000876  2c03              CMP      r4,#3
000878  d010              BEQ      |L1.2204|
00087a  e018              B        |L1.2222|
                  |L1.2172|
00087c  f8ad7010          STRH     r7,[sp,#0x10]         ;548
000880  e015              B        |L1.2222|
                  |L1.2178|
000882  f8ad7012          STRH     r7,[sp,#0x12]         ;550
000886  e012              B        |L1.2222|
                  |L1.2184|
000888  f8bd000c          LDRH     r0,[sp,#0xc]          ;553
00088c  f8bd1010          LDRH     r1,[sp,#0x10]         ;553
000890  4408              ADD      r0,r0,r1              ;553
000892  f8ad000c          STRH     r0,[sp,#0xc]          ;553
000896  f8ad7010          STRH     r7,[sp,#0x10]         ;554
00089a  e008              B        |L1.2222|
                  |L1.2204|
;;;557                {
;;;558                    newRegion.m_yOffset += newRegion.m_height;
00089c  f8bd000e          LDRH     r0,[sp,#0xe]
0008a0  f8bd1012          LDRH     r1,[sp,#0x12]
0008a4  4408              ADD      r0,r0,r1
0008a6  f8ad000e          STRH     r0,[sp,#0xe]
;;;559                    newRegion.m_height = 0;
0008aa  f8ad7012          STRH     r7,[sp,#0x12]
                  |L1.2222|
;;;560                }
;;;561    
;;;562                if (growRegion(&newRegion, frame, dir))
0008ae  4623              MOV      r3,r4
0008b0  465a              MOV      r2,r11
0008b2  a903              ADD      r1,sp,#0xc
0008b4  4650              MOV      r0,r10
0008b6  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
0008ba  b110              CBZ      r0,|L1.2242|
;;;563                    done |= 1<<dir;
0008bc  432e              ORRS     r6,r6,r5
0008be  b2f5              UXTB     r5,r6
0008c0  e017              B        |L1.2290|
                  |L1.2242|
;;;564                else
;;;565                {
;;;566                    ratio = testRegion(newRegion, frame, &mean, points);
0008c2  ab01              ADD      r3,sp,#4
0008c4  465a              MOV      r2,r11
0008c6  a903              ADD      r1,sp,#0xc
0008c8  4650              MOV      r0,r10
0008ca  f8cd9000          STR      r9,[sp,#0]
0008ce  f7fffffe          BL       _ZN8ColorLUT10testRegionERK5RectARK6Frame8P7UVPixelP12SimpleVectorI7Point16E ; ColorLUT::testRegion(const RectA&, const Frame8&, UVPixel*, SimpleVector<Point16>*)
;;;567                    if (ratio<m_minRatio)
0008d2  edda0a5f          VLDR     s1,[r10,#0x17c]
0008d6  eef40ac0          VCMPE.F32 s1,s0
0008da  eef1fa10          VMRS     APSR_nzcv,FPSCR
0008de  dd02              BLE      |L1.2278|
;;;568                        done |= 1<<dir;
0008e0  432e              ORRS     r6,r6,r5
0008e2  b2f5              UXTB     r5,r6
0008e4  e005              B        |L1.2290|
                  |L1.2278|
;;;569                    else
;;;570                        growRegion(&region, frame, dir);
0008e6  4623              MOV      r3,r4
0008e8  465a              MOV      r2,r11
0008ea  a905              ADD      r1,sp,#0x14
0008ec  4650              MOV      r0,r10
0008ee  f7fffffe          BL       _ZN8ColorLUT10growRegionEP5RectARK6Frame8h ; ColorLUT::growRegion(RectA*, const Frame8&, unsigned char)
                  |L1.2290|
0008f2  1c64              ADDS     r4,r4,#1              ;542
0008f4  b2e4              UXTB     r4,r4                 ;542
0008f6  2c04              CMP      r4,#4                 ;542
0008f8  d3b0              BCC      |L1.2140|
                  |L1.2298|
0008fa  2d0f              CMP      r5,#0xf               ;540
0008fc  d1ad              BNE      |L1.2138|
;;;571                }
;;;572            }
;;;573        }
;;;574    }
0008fe  b007              ADD      sp,sp,#0x1c
000900  e73b              B        |L1.1914|
;;;575    
                          ENDP

                  _ZN8ColorLUT17generateSignatureERK6Frame8RK7Point16P12SimpleVectorIS3_Eh PROC ; ColorLUT::generateSignature(const Frame8&, const Point16&, SimpleVector<Point16>*, unsigned char)
;;;316    
;;;317    int ColorLUT::generateSignature(const Frame8 &frame, const Point16 &point, Points *points, uint8_t signum)
000902  e92d41f0          PUSH     {r4-r8,lr}
;;;318    {
000906  b08a              SUB      sp,sp,#0x28
000908  4605              MOV      r5,r0
00090a  9c10              LDR      r4,[sp,#0x40]
00090c  4688              MOV      r8,r1
00090e  461f              MOV      r7,r3
;;;319    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000910  1e60              SUBS     r0,r4,#1
000912  4606              MOV      r6,r0
000914  2807              CMP      r0,#7
000916  d304              BCC      |L1.2338|
;;;320    		return -1;
000918  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2332|
;;;321        // this routine requires some memory to store the region which consists of some consistently-sized blocks
;;;322        growRegion(frame, point, points);
;;;323        IterPixel ip(frame, points);
;;;324        iterate(&ip, m_signatures+signum-1);
;;;325    	m_signatures[signum-1].m_type = 0;
;;;326    
;;;327    	updateSignature(signum);
;;;328        return 0;
;;;329    }
00091c  b00a              ADD      sp,sp,#0x28
00091e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2338|
000922  463b              MOV      r3,r7                 ;322
000924  4641              MOV      r1,r8                 ;322
000926  4628              MOV      r0,r5                 ;322
000928  f7fffffe          BL       _ZN8ColorLUT10growRegionERK6Frame8RK7Point16P12SimpleVectorIS3_E ; ColorLUT::growRegion(const Frame8&, const Point16&, SimpleVector<Point16>*)
00092c  463a              MOV      r2,r7                 ;323
00092e  4641              MOV      r1,r8                 ;323
000930  a801              ADD      r0,sp,#4              ;323
000932  f7fffffe          BL       _ZN9IterPixelC1ERK6Frame8PK12SimpleVectorI7Point16E ; IterPixel::IterPixel(const Frame8&, const SimpleVector<Point16>*)
000936  eb051244          ADD      r2,r5,r4,LSL #5       ;324
00093a  3a20              SUBS     r2,r2,#0x20           ;324
00093c  a901              ADD      r1,sp,#4              ;324
00093e  4628              MOV      r0,r5                 ;324
000940  f7fffffe          BL       _ZN8ColorLUT7iterateEP9IterPixelP14ColorSignature ; ColorLUT::iterate(IterPixel*, ColorSignature*)
000944  eb051146          ADD      r1,r5,r6,LSL #5       ;325
000948  2000              MOVS     r0,#0                 ;325
00094a  61c8              STR      r0,[r1,#0x1c]         ;325
00094c  4621              MOV      r1,r4                 ;327
00094e  4628              MOV      r0,r5                 ;327
000950  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000954  2000              MOVS     r0,#0                 ;328
000956  e7e1              B        |L1.2332|
;;;330    
                          ENDP

                  _ZN8ColorLUT12getSignatureEh PROC ; ColorLUT::getSignature(unsigned char)
;;;350    
;;;351    ColorSignature *ColorLUT::getSignature(uint8_t signum)
000958  1e4a              SUBS     r2,r1,#1
;;;352    {
;;;353    	if (signum<1 || signum>CL_NUM_SIGNATURES)
00095a  2a07              CMP      r2,#7
00095c  d301              BCC      |L1.2402|
;;;354    		return NULL;
00095e  2000              MOVS     r0,#0
;;;355    
;;;356    	return m_signatures+signum-1;
;;;357    }
000960  4770              BX       lr
                  |L1.2402|
000962  eb001041          ADD      r0,r0,r1,LSL #5       ;356
000966  3820              SUBS     r0,r0,#0x20           ;356
000968  4770              BX       lr
;;;358    
                          ENDP

                  _ZN8ColorLUT12setSignatureEhRK14ColorSignature PROC ; ColorLUT::setSignature(unsigned char, const ColorSignature&)
;;;359    int ColorLUT::setSignature(uint8_t signum, const ColorSignature &sig)
00096a  b570              PUSH     {r4-r6,lr}
;;;360    {
00096c  460d              MOV      r5,r1
00096e  4606              MOV      r6,r0
000970  4611              MOV      r1,r2
;;;361    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000972  1e6c              SUBS     r4,r5,#1
000974  2c07              CMP      r4,#7
000976  d302              BCC      |L1.2430|
;;;362    		return -1;
000978  f04f30ff          MOV      r0,#0xffffffff
;;;363    
;;;364    	m_signatures[signum-1] = sig;
;;;365    	updateSignature(signum);
;;;366    	return 0;
;;;367    }
00097c  bd70              POP      {r4-r6,pc}
                  |L1.2430|
00097e  eb061044          ADD      r0,r6,r4,LSL #5       ;364
000982  2220              MOVS     r2,#0x20              ;364
000984  f7fffffe          BL       __aeabi_memcpy4
000988  4629              MOV      r1,r5                 ;365
00098a  4630              MOV      r0,r6                 ;365
00098c  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
000990  2000              MOVS     r0,#0                 ;366
000992  bd70              POP      {r4-r6,pc}
;;;368    
                          ENDP

                  _ZN8ColorLUT11generateLUTEv PROC ; ColorLUT::generateLUT()
;;;369    
;;;370    int ColorLUT::generateLUT()
000994  e92d5ff0          PUSH     {r4-r12,lr}
;;;371    {
000998  4607              MOV      r7,r0
;;;372        int32_t r, g, b, u, v, y, bin, sig;
;;;373    
;;;374        clearLUT();
00099a  2100              MOVS     r1,#0
00099c  4638              MOV      r0,r7
00099e  f7fffffe          BL       _ZN8ColorLUT8clearLUTEh ; ColorLUT::clearLUT(unsigned char)
;;;375    
;;;376        // recalc bounds for each signature
;;;377        for (r=0; r<CL_NUM_SIGNATURES; r++)
0009a2  2400              MOVS     r4,#0
                  |L1.2468|
;;;378            updateSignature(r+1);
0009a4  1c60              ADDS     r0,r4,#1
0009a6  b2c1              UXTB     r1,r0
0009a8  4638              MOV      r0,r7
0009aa  f7fffffe          BL       _ZN8ColorLUT15updateSignatureEh ; ColorLUT::updateSignature(unsigned char)
0009ae  1c64              ADDS     r4,r4,#1              ;377
0009b0  2c07              CMP      r4,#7                 ;377
0009b2  dbf7              BLT      |L1.2468|
;;;379    
;;;380        for (r=0; r<1<<8; r+=1<<(8-CL_LUT_COMPONENT_SCALE))
0009b4  f04f0c00          MOV      r12,#0
                  |L1.2488|
;;;381        {
;;;382            for (g=0; g<1<<8; g+=1<<(8-CL_LUT_COMPONENT_SCALE))
0009b8  2500              MOVS     r5,#0
                  |L1.2490|
;;;383            {
;;;384                for (b=0; b<1<<8; b+=1<<(8-CL_LUT_COMPONENT_SCALE))
0009ba  2400              MOVS     r4,#0
;;;385                {
;;;386                    y = r+g+b;
0009bc  eb0c0a05          ADD      r10,r12,r5
                  |L1.2496|
0009c0  eb0a0004          ADD      r0,r10,r4
;;;387    
;;;388                    if (y<(int32_t)m_miny)
0009c4  f8d7116c          LDR      r1,[r7,#0x16c]
0009c8  4281              CMP      r1,r0
0009ca  dc42              BGT      |L1.2642|
;;;389                        continue;
;;;390                    u = ((r-g)<<CL_LUT_ENTRY_SCALE)/y;
0009cc  ebac0805          SUB      r8,r12,r5
0009d0  ea4f31c8          LSL      r1,r8,#15
0009d4  fb91f2f0          SDIV     r2,r1,r0
;;;391                    v = ((b-g)<<CL_LUT_ENTRY_SCALE)/y;
0009d8  eba40905          SUB      r9,r4,r5
0009dc  ea4f31c9          LSL      r1,r9,#15
0009e0  fb91f3f0          SDIV     r3,r1,r0
;;;392    
;;;393                    for (sig=0; sig<CL_NUM_SIGNATURES; sig++)
0009e4  2100              MOVS     r1,#0
                  |L1.2534|
;;;394                    {
;;;395                        if (m_signatures[sig].m_uMin==0 && m_signatures[sig].m_uMax==0)
0009e6  eb071041          ADD      r0,r7,r1,LSL #5
0009ea  6806              LDR      r6,[r0,#0]
0009ec  b90e              CBNZ     r6,|L1.2546|
0009ee  6840              LDR      r0,[r0,#4]
0009f0  b360              CBZ      r0,|L1.2636|
                  |L1.2546|
;;;396                            continue;
;;;397                        if ((m_runtimeSigs[sig].m_uMin<u) && (u<m_runtimeSigs[sig].m_uMax) &&
0009f2  eb010081          ADD      r0,r1,r1,LSL #2
0009f6  eb070680          ADD      r6,r7,r0,LSL #2
0009fa  f8d600e0          LDR      r0,[r6,#0xe0]
0009fe  4290              CMP      r0,r2
000a00  da24              BGE      |L1.2636|
000a02  f8d600e4          LDR      r0,[r6,#0xe4]
000a06  4290              CMP      r0,r2
000a08  dd20              BLE      |L1.2636|
;;;398                                (m_runtimeSigs[sig].m_vMin<v) && (v<m_runtimeSigs[sig].m_vMax))
000a0a  f8d600e8          LDR      r0,[r6,#0xe8]
000a0e  4298              CMP      r0,r3
000a10  da1c              BGE      |L1.2636|
000a12  f8d600ec          LDR      r0,[r6,#0xec]
000a16  4298              CMP      r0,r3
000a18  dd18              BLE      |L1.2636|
;;;399                        {
;;;400                            u = r-g;
;;;401                            u >>= 9-CL_LUT_COMPONENT_SCALE;
000a1a  ea4f00e8          ASR      r0,r8,#3
;;;402                            u &= (1<<CL_LUT_COMPONENT_SCALE)-1;
000a1e  f000023f          AND      r2,r0,#0x3f
;;;403                            v = b-g;
;;;404                            v >>= 9-CL_LUT_COMPONENT_SCALE;
000a22  ea4f00e9          ASR      r0,r9,#3
;;;405                            v &= (1<<CL_LUT_COMPONENT_SCALE)-1;
000a26  f000033f          AND      r3,r0,#0x3f
;;;406    
;;;407                            bin = (u<<CL_LUT_COMPONENT_SCALE)+ v;
000a2a  eb031082          ADD      r0,r3,r2,LSL #6
;;;408    
;;;409                            if (m_lut[bin]==0 || m_lut[bin]>sig+1)
000a2e  f8d76170          LDR      r6,[r7,#0x170]
000a32  f816b000          LDRB     r11,[r6,r0]
000a36  f1bb0f00          CMP      r11,#0
000a3a  d003              BEQ      |L1.2628|
000a3c  f1010e01          ADD      lr,r1,#1
000a40  45f3              CMP      r11,lr
000a42  dd03              BLE      |L1.2636|
                  |L1.2628|
;;;410                                m_lut[bin] = sig+1;
000a44  f1010b01          ADD      r11,r1,#1
000a48  f806b000          STRB     r11,[r6,r0]
                  |L1.2636|
000a4c  1c49              ADDS     r1,r1,#1              ;393
000a4e  2907              CMP      r1,#7                 ;393
000a50  dbc9              BLT      |L1.2534|
                  |L1.2642|
000a52  1d24              ADDS     r4,r4,#4              ;384
000a54  2cff              CMP      r4,#0xff              ;384
000a56  ddb3              BLE      |L1.2496|
000a58  1d2d              ADDS     r5,r5,#4              ;382
000a5a  2dff              CMP      r5,#0xff              ;382
000a5c  ddad              BLE      |L1.2490|
000a5e  f10c0c04          ADD      r12,r12,#4            ;380
000a62  f1bc0fff          CMP      r12,#0xff             ;380
000a66  dda7              BLE      |L1.2488|
;;;411                        }
;;;412                    }
;;;413                }
;;;414            }
;;;415        }
;;;416    
;;;417        return 0;
000a68  2000              MOVS     r0,#0
;;;418    }
000a6a  e8bd9ff0          POP      {r4-r12,pc}
;;;419    
                          ENDP

                  _ZN8ColorLUT11setSigRangeEhf PROC ; ColorLUT::setSigRange(unsigned char, float)
;;;595    
;;;596    void ColorLUT::setSigRange(uint8_t signum, float range)
000a6e  1e49              SUBS     r1,r1,#1
;;;597    {
;;;598    	if (signum<1 || signum>CL_NUM_SIGNATURES)
000a70  2907              CMP      r1,#7
000a72  d203              BCS      |L1.2684|
;;;599    		return;
;;;600    	m_sigRanges[signum-1] = range;
000a74  eb000081          ADD      r0,r0,r1,LSL #2
000a78  ed800a61          VSTR     s0,[r0,#0x184]
                  |L1.2684|
;;;601    }
000a7c  4770              BX       lr
;;;602    
                          ENDP

                  _ZN8ColorLUT11setGrowDistEj PROC ; ColorLUT::setGrowDist(unsigned)
;;;603    void ColorLUT::setGrowDist(uint32_t dist)
000a7e  f8c01174          STR      r1,[r0,#0x174]
;;;604    {
;;;605    	m_maxDist = dist;
;;;606    }
000a82  4770              BX       lr
;;;607    
                          ENDP

                  _ZN8ColorLUT9setCCGainEf PROC ; ColorLUT::setCCGain(float)
;;;615    
;;;616    void ColorLUT::setCCGain(float gain)
000a84  ed800a60          VSTR     s0,[r0,#0x180]
;;;617    {
;;;618        m_ccGain = gain;
;;;619    }
000a88  4770              BX       lr
;;;620    
                          ENDP

                  _ZN8ColorLUT7getTypeEh PROC ; ColorLUT::getType(unsigned char)
;;;621    uint32_t ColorLUT::getType(uint8_t signum)
000a8a  1e49              SUBS     r1,r1,#1
;;;622    {
;;;623        if (signum<1 || signum>CL_NUM_SIGNATURES)
000a8c  2907              CMP      r1,#7
000a8e  d301              BCC      |L1.2708|
;;;624            return 0;
000a90  2000              MOVS     r0,#0
;;;625    
;;;626        return m_signatures[signum-1].m_type;
;;;627    }
000a92  4770              BX       lr
                  |L1.2708|
000a94  eb001041          ADD      r0,r0,r1,LSL #5       ;626
000a98  69c0              LDR      r0,[r0,#0x1c]         ;626
000a9a  4770              BX       lr
;;;628    
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||.text||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||.text||
                          DCD      0x00000001

                          AREA ||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||, COMGROUP=_ZN12SimpleVectorI7Point16E9push_backERKS0_, CODE, READONLY, ALIGN=2

                  _ZN12SimpleVectorI7Point16E9push_backERKS0_ PROC ; SimpleVector<Point16>::push_back(const Point16&)
;;;73     
;;;74         int push_back(const Object& x)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;75         {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;76             if(m_size == m_capacity)
000008  e9d40500          LDRD     r0,r5,[r4,#0]
00000c  42a8              CMP      r0,r5
00000e  d12b              BNE      |L13.104|
;;;77                 if (resize(m_capacity + SPARE_CAPACITY)<0)
000010  3510              ADDS     r5,r5,#0x10
000012  2700              MOVS     r7,#0
000014  f04f38ff          MOV      r8,#0xffffffff
000018  42a8              CMP      r0,r5
00001a  dc20              BGT      |L13.94|
00001c  68a6              LDR      r6,[r4,#8]
00001e  00a8              LSLS     r0,r5,#2
000020  4917              LDR      r1,|L13.128|
000022  f7fffffe          BL       _ZnajRKSt9nothrow_t ; operator new[] (unsigned, const std::nothrow_t&)
000026  b120              CBZ      r0,|L13.50|
000028  462b              MOV      r3,r5
00002a  2204              MOVS     r2,#4
00002c  4915              LDR      r1,|L13.132|
00002e  f7fffffe          BL       __aeabi_vec_ctor_nocookie_nodtor
                  |L13.50|
000032  60a0              STR      r0,[r4,#8]
000034  b108              CBZ      r0,|L13.58|
000036  2000              MOVS     r0,#0
000038  e00a              B        |L13.80|
                  |L13.58|
00003a  60a6              STR      r6,[r4,#8]
00003c  4647              MOV      r7,r8
00003e  e00e              B        |L13.94|
                  |L13.64|
000040  68a1              LDR      r1,[r4,#8]
000042  eb060280          ADD      r2,r6,r0,LSL #2
000046  eb010180          ADD      r1,r1,r0,LSL #2
00004a  6812              LDR      r2,[r2,#0]
00004c  600a              STR      r2,[r1,#0]
00004e  1c40              ADDS     r0,r0,#1
                  |L13.80|
000050  6821              LDR      r1,[r4,#0]
000052  4281              CMP      r1,r0
000054  dcf4              BGT      |L13.64|
000056  6065              STR      r5,[r4,#4]
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       _ZdaPv ; operator delete[] (void*)
                  |L13.94|
00005e  2f00              CMP      r7,#0
000060  da02              BGE      |L13.104|
;;;78                     return -1;
000062  4640              MOV      r0,r8
                  |L13.100|
;;;79             m_objects[m_size++] = x;
;;;80             return 0;
;;;81         }
000064  e8bd87f0          POP      {r4-r10,pc}
                  |L13.104|
000068  6820              LDR      r0,[r4,#0]            ;79
00006a  1c41              ADDS     r1,r0,#1              ;79
00006c  6021              STR      r1,[r4,#0]            ;79
00006e  68a1              LDR      r1,[r4,#8]            ;79
000070  eb010080          ADD      r0,r1,r0,LSL #2       ;79
000074  f8d91000          LDR      r1,[r9,#0]            ;79
000078  6001              STR      r1,[r0,#0]            ;79
00007a  2000              MOVS     r0,#0                 ;80
00007c  e7f2              B        |L13.100|
;;;82     
                          ENDP

00007e  0000              DCW      0x0000
                  |L13.128|
                          DCD      _ZSt7nothrow ; std::nothrow
                  |L13.132|
                          DCD      _ZN7Point16C1Ev ; Point16::Point16()

                          AREA ||area_number.14||, COMGROUP=_ZN12SimpleVectorI7Point16E9push_backERKS0_, LINKORDER=||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN12SimpleVectorI7Point16E9push_backERKS0_||
                          DCD      0x00000001

                          AREA ||i._ZN14ColorSignatureC1Ev||, COMGROUP=_ZN14ColorSignatureC1Ev, CODE, READONLY, ALIGN=1

                  _ZN14ColorSignatureC2Ev                  ; Alternate entry point ; ColorSignature::ColorSignature__sub_object()
                  _ZN14ColorSignatureC1Ev PROC ; ColorSignature::ColorSignature()
;;;54     {
;;;55     	ColorSignature()
;;;56     	{
;;;57     		m_uMin = m_uMax = m_uMean = m_vMin = m_vMax = m_vMean = m_type = 0;
;;;58     	}	
;;;59     
000000  2100              MOVS     r1,#0
000002  61c1              STR      r1,[r0,#0x1c]
000004  6141              STR      r1,[r0,#0x14]
000006  6101              STR      r1,[r0,#0x10]
000008  60c1              STR      r1,[r0,#0xc]
00000a  6081              STR      r1,[r0,#8]
00000c  6041              STR      r1,[r0,#4]
00000e  6001              STR      r1,[r0,#0]
000010  4770              BX       lr
                          ENDP


                          AREA ||area_number.21||, COMGROUP=_ZN14ColorSignatureC1Ev, LINKORDER=||i._ZN14ColorSignatureC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN14ColorSignatureC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN7Point16C1Ev||, COMGROUP=_ZN7Point16C1Ev, CODE, READONLY, ALIGN=1

                  _ZN7Point16C2Ev                  ; Alternate entry point ; Point16::Point16__sub_object()
                  _ZN7Point16C1Ev PROC ; Point16::Point16()
;;;72     {
;;;73         Point16()
;;;74         {
;;;75             m_x = m_y = 0;
;;;76         }
;;;77     
000000  2100              MOVS     r1,#0
000002  8041              STRH     r1,[r0,#2]
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP


                          AREA ||area_number.28||, COMGROUP=_ZN7Point16C1Ev, LINKORDER=||i._ZN7Point16C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7Point16C1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN6Frame8C1Ev||, COMGROUP=_ZN6Frame8C1Ev, CODE, READONLY, ALIGN=1

                  _ZN6Frame8C2Ev                  ; Alternate entry point ; Frame8::Frame8__sub_object()
                  _ZN6Frame8C1Ev PROC ; Frame8::Frame8()
;;;116    {
;;;117        Frame8()
;;;118        {
;;;119            m_pixels = (uint8_t *)NULL;
;;;120            m_width = m_height = 0;
;;;121        }
;;;122    
000000  2100              MOVS     r1,#0
000002  6001              STR      r1,[r0,#0]
000004  80c1              STRH     r1,[r0,#6]
000006  8081              STRH     r1,[r0,#4]
000008  4770              BX       lr
                          ENDP


                          AREA ||area_number.35||, COMGROUP=_ZN6Frame8C1Ev, LINKORDER=||i._ZN6Frame8C1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6Frame8C1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN5RectAC1Ev||, COMGROUP=_ZN5RectAC1Ev, CODE, READONLY, ALIGN=1

                  _ZN5RectAC2Ev                  ; Alternate entry point ; RectA::RectA__sub_object()
                  _ZN5RectAC1Ev PROC ; RectA::RectA()
;;;136    {
;;;137        RectA()
;;;138        {
;;;139            m_xOffset = m_yOffset = m_width = m_height = 0;
;;;140        }
;;;141    
000000  2100              MOVS     r1,#0
000002  80c1              STRH     r1,[r0,#6]
000004  8081              STRH     r1,[r0,#4]
000006  8041              STRH     r1,[r0,#2]
000008  8001              STRH     r1,[r0,#0]
00000a  4770              BX       lr
                          ENDP


                          AREA ||area_number.42||, COMGROUP=_ZN5RectAC1Ev, LINKORDER=||i._ZN5RectAC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5RectAC1Ev||
                          DCD      0x00000001

                          AREA ||i._ZN5RectAC1Etttt||, COMGROUP=_ZN5RectAC1Etttt, CODE, READONLY, ALIGN=1

                  _ZN5RectAC2Etttt                  ; Alternate entry point ; RectA::RectA__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)
                  _ZN5RectAC1Etttt PROC ; RectA::RectA(unsigned short, unsigned short, unsigned short, unsigned short)
;;;141    
;;;142        RectA(uint16_t xOffset, uint16_t yOffset, uint16_t width, uint16_t height)
;;;143        {
;;;144            m_xOffset = xOffset;
;;;145            m_yOffset = yOffset;
;;;146            m_width = width;
;;;147            m_height = height;
;;;148        }
;;;149    
000000  b510              PUSH     {r4,lr}
000002  9c02              LDR      r4,[sp,#8]
000004  8001              STRH     r1,[r0,#0]
000006  8042              STRH     r2,[r0,#2]
000008  8083              STRH     r3,[r0,#4]
00000a  80c4              STRH     r4,[r0,#6]
00000c  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.49||, COMGROUP=_ZN5RectAC1Etttt, LINKORDER=||i._ZN5RectAC1Etttt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5RectAC1Etttt||
                          DCD      0x00000001
